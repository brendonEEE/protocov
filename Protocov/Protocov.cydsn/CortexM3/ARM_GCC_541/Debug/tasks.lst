ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvTaskIsTaskSuspended, %function
  24              	prvTaskIsTaskSuspended:
  25              	.LFB79:
  26              		.file 1 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\tasks.c"
   1:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
   2:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * FreeRTOS Kernel <DEVELOPMENT BRANCH>
   3:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  *
   5:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * SPDX-License-Identifier: MIT
   6:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  *
   7:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * the Software without restriction, including without limitation the rights to
  10:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * subject to the following conditions:
  13:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  *
  14:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  15:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * copies or substantial portions of the Software.
  16:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  *
  17:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  *
  24:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * https://www.FreeRTOS.org
  25:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * https://github.com/FreeRTOS
  26:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  *
  27:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
  28:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
  29:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* Standard includes. */
  30:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #include <stdlib.h>
  31:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #include <string.h>
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 2


  32:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
  33:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  34:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  35:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * task.h is included from an application file. */
  36:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  37:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
  38:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* FreeRTOS includes. */
  39:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #include "FreeRTOS.h"
  40:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #include "task.h"
  41:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #include "timers.h"
  42:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #include "stack_macros.h"
  43:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
  44:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * for the header files above, but not in this file, in order to generate the
  47:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * correct privileged Vs unprivileged linkage and placement. */
  48:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
  50:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  51:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * functions but without including stdio.h here. */
  52:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  53:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
  54:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* At the bottom of this file are two optional functions that can be used
  55:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * to generate human readable text from the raw data generated by the
  56:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  57:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * for convenience only, and are NOT considered part of the kernel. */
  58:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #include <stdio.h>
  59:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  60:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
  61:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_PREEMPTION == 0 )
  62:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
  63:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* If the cooperative scheduler is being used then a yield should not be
  64:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * performed just because a higher priority task has been woken. */
  65:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()
  66:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #else
  67:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  68:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
  69:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
  70:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  71:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  72:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  73:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  74:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
  75:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
  76:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  77:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * is used purely for checking the high water mark for tasks.
  78:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
  79:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  80:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
  81:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* Bits used to record how a task's stack and TCB were allocated. */
  82:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  83:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  84:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  85:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
  86:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  87:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * value so the high water mark can be determined.  If none of the following are
  88:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 3


  89:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
  90:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
  91:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #else
  92:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  93:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
  94:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
  95:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
  96:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  97:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
  98:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define tskRUNNING_CHAR      ( 'X' )
  99:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define tskBLOCKED_CHAR      ( 'B' )
 100:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define tskREADY_CHAR        ( 'R' )
 101:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define tskDELETED_CHAR      ( 'D' )
 102:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define tskSUSPENDED_CHAR    ( 'S' )
 103:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 104:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 105:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to to
 106:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * be global, rather than file scope.
 107:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 108:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 109:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define static
 110:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
 111:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 112:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 113:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 114:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #ifndef configIDLE_TASK_NAME
 115:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define configIDLE_TASK_NAME    "IDLE"
 116:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
 117:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 118:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 119:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 120:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 121:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * performed in a generic way that is not optimised to any particular
 122:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * microcontroller architecture. */
 123:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 124:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* uxTopReadyPriority holds the priority of the highest priority ready
 125:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * state task. */
 126:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 127:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {                                               \
 128:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 129:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {                                           \
 130:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             uxTopReadyPriority = ( uxPriority );    \
 131:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }                                           \
 132:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     } /* taskRECORD_READY_PRIORITY */
 133:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 134:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 135:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 136:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 137:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     do {                                                                      \
 138:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 139:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                                                               \
 140:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Find the highest priority queue that contains ready tasks. */      \
 141:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 142:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {                                                                     \
 143:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             configASSERT( uxTopPriority );                                    \
 144:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             --uxTopPriority;                                                  \
 145:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }                                                                     \
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 4


 146:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                                                               \
 147:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
 148:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * the  same priority get an equal share of the processor time. */                    \
 149:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 150:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uxTopReadyPriority = uxTopPriority;                                                   \
 151:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     } while( 0 ) /* taskSELECT_HIGHEST_PRIORITY_TASK */
 152:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 153:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 154:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 155:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 156:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * they are only required when a port optimised method of task selection is
 157:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * being used. */
 158:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )
 159:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 160:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 161:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 162:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 163:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 164:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * performed in a way that is tailored to the particular microcontroller
 165:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * architecture being used. */
 166:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 167:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* A port optimised version is provided.  Call the port defined macros. */
 168:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( ( uxPriority ), u
 169:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 170:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 171:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 172:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 173:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     do {                                                                                        \
 174:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxTopPriority;                                                              \
 175:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                                                                                 \
 176:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Find the highest priority list that contains ready tasks. */                         \
 177:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 178:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 179:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 180:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     } while( 0 )
 181:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 182:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 183:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 184:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* A port optimised version is provided, call it only if the TCB being reset
 185:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * is being referenced from a ready list.  If it is referenced from a delayed
 186:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * or suspended list then it won't be in a ready list. */
 187:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 188:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     do {                                                                                           
 189:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 190:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {                                                                                          
 191:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 192:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }                                                                                          
 193:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     } while( 0 )
 194:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 195:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 196:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 197:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 198:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 199:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 200:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * count overflows. */
 201:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define taskSWITCH_DELAYED_LISTS()                                                \
 202:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     do {                                                                          \
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 5


 203:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         List_t * pxTemp;                                                          \
 204:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                                                                   \
 205:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 206:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 207:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                                                                   \
 208:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTemp = pxDelayedTaskList;                                               \
 209:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 210:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 211:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xNumOfOverflows++;                                                        \
 212:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         prvResetNextTaskUnblockTime();                                            \
 213:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     } while( 0 )
 214:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 215:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 216:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 217:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 218:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 219:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * the task.  It is inserted at the end of the list.
 220:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 221:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define prvAddTaskToReadyList( pxTCB )                                                             
 222:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     do {                                                                                           
 223:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                   
 224:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                        
 225:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         listINSERT_END( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListIt
 226:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB );                                              
 227:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     } while( 0 )
 228:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 229:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 230:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 231:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Several functions take a TaskHandle_t parameter that can optionally be NULL,
 232:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 233:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 234:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 235:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 236:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 237:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 238:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 239:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * of the task to which it belongs (coded to allow it to be held in reverse
 240:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 241:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * is important its value is not updated due to a task priority change while it is
 242:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * being used for another purpose.  The following bit definition is used to inform
 243:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * the scheduler that the value should not be changed - in which case it is the
 244:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * responsibility of whichever module is using the value to ensure it gets set back
 245:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * to its original value when it is released. */
 246:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS )
 247:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 248:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_32_BITS )
 249:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 250:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_64_BITS )
 251:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000000000000000ULL
 252:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
 253:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 254:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 255:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 256:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * and stores task state information, including a pointer to the task's context
 257:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * (the task's run time environment, including register values)
 258:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 259:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 6


 260:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
 261:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     volatile StackType_t * pxTopOfStack; /**< Points to the location of the last item placed on the
 262:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 263:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 264:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xMPU_SETTINGS xMPUSettings; /**< The MPU settings are defined as part of the port layer.  T
 265:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
 266:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 267:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     ListItem_t xStateListItem;                  /**< The list that the state list item of a task is
 268:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     ListItem_t xEventListItem;                  /**< Used to reference a task from an event list. *
 269:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxPriority;                     /**< The priority of the task.  0 is the lowest pri
 270:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     StackType_t * pxStack;                      /**< Points to the start of the stack. */
 271:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /**< Descriptive name given to the task when create
 272:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 273:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 274:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         StackType_t * pxEndOfStack; /**< Points to the highest valid address for the stack. */
 275:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
 276:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 277:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 278:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxCriticalNesting; /**< Holds the critical section nesting depth for ports that
 279:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
 280:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 281:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 282:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxTCBNumber;  /**< Stores a number that increments each time a TCB is created. 
 283:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxTaskNumber; /**< Stores a number specifically for use by third party trace co
 284:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
 285:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 286:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 287:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxBasePriority; /**< The priority last assigned to the task - used by the prior
 288:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxMutexesHeld;
 289:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
 290:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 291:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 292:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TaskHookFunction_t pxTaskTag;
 293:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
 294:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 295:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 296:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 297:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
 298:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 299:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 300:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulRunTimeCounter; /**< Stores the amount of time the task has s
 301:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
 302:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 303:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
 304:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configTLS_BLOCK_TYPE xTLSBlock; /**< Memory block used as Thread Local Storage (TLS) Block 
 305:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
 306:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 307:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 308:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 309:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 310:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
 311:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 312:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* See the comments in FreeRTOS.h with the definition of
 313:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 315:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint8_t ucStaticallyAllocated;                     /**< Set to pdTRUE if the task is a stat
 316:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 7


 317:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 318:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 319:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint8_t ucDelayAborted;
 320:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
 321:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 322:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_POSIX_ERRNO == 1 )
 323:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         int iTaskErrno;
 324:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
 325:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** } tskTCB;
 326:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 327:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 328:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * below to enable the use of older kernel aware debuggers. */
 329:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** typedef tskTCB TCB_t;
 330:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 331:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 332:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * which static variables must be declared volatile. */
 333:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** portDONT_DISCARD PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 334:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 335:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 336:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * xDelayedTaskList1 and xDelayedTaskList2 could be moved to function scope but
 337:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 338:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * the static qualifier. */
 339:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /**< Prioritised ready tas
 340:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /**< Delayed tasks. */
 341:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /**< Delayed tasks (two li
 342:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /**< Points to the delayed
 343:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /**< Points to the delayed
 344:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /**< Tasks that have been 
 345:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 346:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 347:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 348:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /**< Tasks that have been deleted - but
 349:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 350:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 351:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
 352:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 353:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 354:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 355:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /**< Tasks that are currently suspended. */
 356:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 357:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
 358:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 359:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 360:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * the errno of the currently running task. */
 361:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 362:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     int FreeRTOS_errno = 0;
 363:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
 364:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 365:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* Other file private variables. --------------------------------*/
 366:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 367:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 368:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
 369:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 370:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 371:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 372:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 373:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 8


 374:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 375:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /**< Holds the
 376:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 377:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 378:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 379:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * to determine the number of priority lists to read back from the remote target. */
 380:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 381:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 382:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 383:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 384:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 385:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 386:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * moves the task's event list item into the xPendingReadyList, ready for the
 387:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * kernel to move the task from the pending ready list into the real ready list
 388:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 389:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * accessed from a critical section. */
 390:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) 0U;
 391:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 392:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 393:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 394:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* Do not move these variables to function scope as doing so prevents the
 395:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * code working with debuggers that need to remove the static qualifier. */
 396:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     PRIVILEGED_DATA static configRUN_TIME_COUNTER_TYPE ulTaskSwitchedInTime = 0UL;    /**< Holds th
 397:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     PRIVILEGED_DATA static volatile configRUN_TIME_COUNTER_TYPE ulTotalRunTime = 0UL; /**< Holds th
 398:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 399:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
 400:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 401:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*lint -restore */
 402:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 403:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 404:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 405:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* File private functions. --------------------------------*/
 406:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 407:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /**
 408:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 409:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 410:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * is in any other state.
 411:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 412:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 413:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 414:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 415:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 416:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 417:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 418:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 419:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 420:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * automatically upon the creation of the first task.
 421:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 422:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 423:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 424:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 425:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 426:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 427:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * creation of the first user task.
 428:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  *
 429:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 430:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 9


 431:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  *
 432:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * void prvIdleTask( void *pvParameters );
 433:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  *
 434:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 435:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 436:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 437:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 438:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 439:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * including the stack pointed to by the TCB.
 440:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  *
 441:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 442:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 443:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 444:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 445:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 446:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 447:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 448:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
 449:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 450:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 451:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 452:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 453:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * and its TCB deleted.
 454:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 455:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 456:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 457:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 458:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 459:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * either the current or the overflow delayed task list.
 460:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 461:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 462:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 463:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 464:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 465:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 466:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 467:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * a suspended list, etc.).
 468:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  *
 469:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 470:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * NORMAL APPLICATION CODE.
 471:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 472:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 473:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 474:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 475:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                                      List_t * pxList,
 476:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 477:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 478:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
 479:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 480:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 481:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 482:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 483:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 484:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 485:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 486:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 487:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 10


 488:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 489:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
 490:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 491:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 492:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 493:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 494:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * determining how much of the stack remains at the original preset value.
 495:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 496:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 497:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 498:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 499:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 500:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
 501:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 502:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 503:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 504:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * next move a task from the Blocked state to the Running state.
 505:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  *
 506:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 507:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 508:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 509:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * set to a value other than 1.
 510:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 511:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 512:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 513:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 514:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 515:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
 516:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 517:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 518:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 519:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * will exit the Blocked state.
 520:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 521:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 522:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 523:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
 524:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 525:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 526:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Helper function used to pad task names with spaces when printing out
 527:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * human readable tables of task information.
 528:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 529:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 530:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 531:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 532:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
 533:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 534:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 535:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 536:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * dynamically to fill in the structure's members.
 537:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 538:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 539:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 540:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   const uint32_t ulStackDepth,
 541:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   void * const pvParameters,
 542:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   UBaseType_t uxPriority,
 543:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 544:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   TCB_t * pxNewTCB,
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 11


 545:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 546:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 547:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 548:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * Called after a new task has been created and initialised to place the task
 549:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * under the control of the scheduler.
 550:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 551:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 552:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 553:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
 554:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 555:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 556:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * called by the function.
 557:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
 558:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 559:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 560:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 561:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 562:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
 563:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 564:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 565:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 566:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 567:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 568:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 569:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 570:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                     const uint32_t ulStackDepth,
 571:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                     void * const pvParameters,
 572:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                     UBaseType_t uxPriority,
 573:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                     StackType_t * const puxStackBuffer,
 574:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                     StaticTask_t * const pxTaskBuffer )
 575:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 576:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
 577:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TaskHandle_t xReturn;
 578:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 579:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( puxStackBuffer != NULL );
 580:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTaskBuffer != NULL );
 581:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 582:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configASSERT_DEFINED == 1 )
 583:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 584:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Sanity check that the size of the structure used to declare a
 585:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * variable of type StaticTask_t equals the size of the real task
 586:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * structure. */
 587:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             volatile size_t xSize = sizeof( StaticTask_t );
 588:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             configASSERT( xSize == sizeof( TCB_t ) );
 589:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 590:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 591:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* configASSERT_DEFINED */
 592:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 593:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 594:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 595:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* The memory used for the task's TCB and stack are passed into this
 596:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * function - use them. */
 597:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 598:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 599:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 600:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 601:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 12


 602:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 603:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 604:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * task was created statically in case the task is later deleted. */
 605:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 606:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 607:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 608:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 609:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 610:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 611:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 612:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
 613:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 614:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = NULL;
 615:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 616:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 617:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
 618:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 619:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 620:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 621:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 622:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 623:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 624:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 625:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 626:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                             TaskHandle_t * pxCreatedTask )
 627:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 628:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
 629:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 630:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 631:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 632:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 633:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 634:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 635:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 636:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 637:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * on the implementation of the port malloc function and whether or
 638:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * not static allocation is being used. */
 639:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 640:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 641:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 642:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Store the stack location in the TCB. */
 643:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 644:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 645:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 646:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 647:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 648:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * task was created statically in case the task is later deleted. */
 649:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 650:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 651:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 652:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 653:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 654:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   pxTaskDefinition->pcName,
 655:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
 656:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   pxTaskDefinition->pvParameters,
 657:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   pxTaskDefinition->uxPriority,
 658:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   pxCreatedTask, pxNewTCB,
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 13


 659:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   pxTaskDefinition->xRegions );
 660:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 661:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 662:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = pdPASS;
 663:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 664:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 665:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
 666:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 667:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 668:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 669:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 670:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 671:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 672:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 673:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 674:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                       TaskHandle_t * pxCreatedTask )
 675:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 676:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
 677:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 678:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 679:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 680:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 681:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 682:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 683:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends
 684:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * on the implementation of the port malloc function and whether or
 685:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * not static allocation is being used. */
 686:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 687:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 688:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxNewTCB != NULL )
 689:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 690:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 691:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 692:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Store the stack location in the TCB. */
 693:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 694:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 695:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 696:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 697:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Tasks can be created statically or dynamically, so note
 698:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * this task had a statically allocated stack in case it is
 699:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * later deleted.  The TCB was allocated dynamically. */
 700:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 701:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 702:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 703:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 704:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 705:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                       pxTaskDefinition->pcName,
 706:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 707:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                       pxTaskDefinition->pvParameters,
 708:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                       pxTaskDefinition->uxPriority,
 709:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                       pxCreatedTask, pxNewTCB,
 710:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                       pxTaskDefinition->xRegions );
 711:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 712:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 prvAddNewTaskToReadyList( pxNewTCB );
 713:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = pdPASS;
 714:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 715:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 14


 716:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 717:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
 718:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 719:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 720:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 721:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 722:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 723:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 724:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 725:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 726:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 727:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 728:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             void * const pvParameters,
 729:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             UBaseType_t uxPriority,
 730:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             TaskHandle_t * const pxCreatedTask )
 731:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 732:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
 733:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
 734:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 735:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 736:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 737:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * the TCB then the stack. */
 738:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( portSTACK_GROWTH > 0 )
 739:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 740:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Allocate space for the TCB.  Where the memory comes from depends on
 741:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * the implementation of the port malloc function and whether or not static
 742:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * allocation is being used. */
 743:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 744:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 745:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxNewTCB != NULL )
 746:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 747:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 748:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 749:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Allocate space for the stack used by the task being created.
 750:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * The base of the stack memory stored in the TCB so the task can
 751:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * be deleted later if required. */
 752:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocStack( ( ( ( size_t ) usStackDept
 753:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 754:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( pxNewTCB->pxStack == NULL )
 755:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 756:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Could not allocate the stack.  Delete the allocated TCB. */
 757:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     vPortFree( pxNewTCB );
 758:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxNewTCB = NULL;
 759:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 760:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 761:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 762:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #else /* portSTACK_GROWTH */
 763:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 764:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             StackType_t * pxStack;
 765:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 766:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Allocate space for the stack used by the task being created. */
 767:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
 768:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 769:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxStack != NULL )
 770:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 771:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Allocate space for the TCB. */
 772:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All va
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 15


 773:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 774:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( pxNewTCB != NULL )
 775:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 776:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 777:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 778:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Store the stack location in the TCB. */
 779:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxNewTCB->pxStack = pxStack;
 780:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 781:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
 782:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 783:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The stack cannot be used as the TCB was not created.  Free
 784:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * it again. */
 785:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     vPortFreeStack( pxStack );
 786:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 787:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 788:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
 789:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 790:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxNewTCB = NULL;
 791:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 792:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 793:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* portSTACK_GROWTH */
 794:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 795:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( pxNewTCB != NULL )
 796:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 797:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 798:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 799:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Tasks can be created statically or dynamically, so note this
 800:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * task was created dynamically in case it is later deleted. */
 801:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 802:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 803:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 804:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 805:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 806:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 807:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = pdPASS;
 808:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 809:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
 810:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 811:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 812:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 813:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 814:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
 815:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 816:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 817:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 818:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 819:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 820:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 821:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 822:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   const uint32_t ulStackDepth,
 823:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   void * const pvParameters,
 824:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   UBaseType_t uxPriority,
 825:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   TaskHandle_t * const pxCreatedTask,
 826:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   TCB_t * pxNewTCB,
 827:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   const MemoryRegion_t * const xRegions )
 828:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
 829:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     StackType_t * pxTopOfStack;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 16


 830:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     UBaseType_t x;
 831:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 832:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 833:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Should the task be created in privileged mode? */
 834:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xRunPrivileged;
 835:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 836:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 838:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xRunPrivileged = pdTRUE;
 839:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 840:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
 841:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 842:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xRunPrivileged = pdFALSE;
 843:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 844:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uxPriority &= ~portPRIVILEGE_BIT;
 845:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 846:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 847:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Avoid dependency on memset() if it is not required. */
 848:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 850:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Fill the stack with a known value to assist debugging. */
 851:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * s
 852:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 853:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 855:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Calculate the top of stack address.  This depends on whether the stack
 856:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * grows from high memory to low (as per the 80x86) or vice versa.
 857:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 858:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * by the port. */
 859:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( portSTACK_GROWTH < 0 )
 860:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 861:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 862:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 863:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 864:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Check the alignment of the calculated top of stack is correct. */
 865:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBY
 866:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 867:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 869:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Also record the stack's high address, which may assist
 870:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * debugging. */
 871:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 873:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 875:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #else /* portSTACK_GROWTH */
 876:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 877:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTopOfStack = pxNewTCB->pxStack;
 878:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 879:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Check the alignment of the stack buffer is correct. */
 880:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) p
 881:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 882:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* The other extreme of the stack space is required if stack checking is
 883:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * performed. */
 884:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 886:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif /* portSTACK_GROWTH */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 17


 887:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 888:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Store the task name in the TCB. */
 889:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     if( pcName != NULL )
 890:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 891:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 893:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 895:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * string is not accessible (extremely unlikely). */
 898:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pcName[ x ] == ( char ) 0x00 )
 899:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 900:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 break;
 901:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 902:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
 903:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 904:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
 905:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 906:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 907:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 908:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Ensure the name string is terminated in the case that the string length
 909:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 910:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 912:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     else
 913:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 914:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 915:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 916:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 917:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* This is used as an array index so must ensure it's not too large. */
 918:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( uxPriority < configMAX_PRIORITIES );
 919:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 920:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 921:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 922:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 923:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 924:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     else
 925:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 926:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         mtCOVERAGE_TEST_MARKER();
 927:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 928:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 929:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     pxNewTCB->uxPriority = uxPriority;
 930:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 931:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 932:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxNewTCB->uxBasePriority = uxPriority;
 933:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 934:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif /* configUSE_MUTEXES */
 935:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 936:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 937:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 938:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 939:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 940:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * back to  the containing TCB from a generic item in a list. */
 941:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 942:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 943:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Event lists are always in priority order. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 18


 944:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
 945:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 946:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 947:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 948:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 949:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStac
 950:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 951:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #else
 952:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 953:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Avoid compiler warning about unreferenced parameter. */
 954:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         ( void ) xRegions;
 955:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 956:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
 957:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 958:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
 959:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 960:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Allocate and initialize memory for the task's TLS Block. */
 961:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock, pxTopOfStack );
 962:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 963:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
 964:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 965:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Initialize the TCB stack to look as if the task was already running,
 966:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * but had been interrupted by the scheduler.  The return address is set
 967:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * to the start of the task function. Once the stack has been initialised
 968:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * the top of stack variable is updated. */
 969:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 970:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 971:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If the port has capability to detect stack overflow,
 972:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * pass the stack end address to the stack initialization
 973:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * function as well. */
 974:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
 975:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 976:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
 977:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 978:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
 979:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 980:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #else /* portSTACK_GROWTH */
 981:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 982:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
 983:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 984:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #endif /* portSTACK_GROWTH */
 985:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 986:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
 987:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 988:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters,
 989:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 990:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
 991:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 992:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #else /* portUSING_MPU_WRAPPERS */
 993:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 994:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If the port has capability to detect stack overflow,
 995:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * pass the stack end address to the stack initialization
 996:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * function as well. */
 997:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
 998:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 999:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #if ( portSTACK_GROWTH < 0 )
1000:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 19


1001:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, px
1002:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1003:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #else /* portSTACK_GROWTH */
1004:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1005:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStac
1006:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1007:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #endif /* portSTACK_GROWTH */
1008:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1009:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #else /* portHAS_STACK_OVERFLOW_CHECKING */
1010:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1011:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters 
1012:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1013:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1014:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1015:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif /* portUSING_MPU_WRAPPERS */
1016:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1017:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     if( pxCreatedTask != NULL )
1018:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1019:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Pass the handle out in an anonymous way.  The handle can be used to
1020:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * change the created task's priority, delete the created task, etc.*/
1021:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1022:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1023:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     else
1024:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1025:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1026:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1027:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
1028:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1029:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1030:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1031:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
1032:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
1033:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * updated. */
1034:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     taskENTER_CRITICAL();
1035:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1036:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uxCurrentNumberOfTasks++;
1037:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1038:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( pxCurrentTCB == NULL )
1039:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1040:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* There are no other tasks, or all the other tasks are in
1041:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * the suspended state - make this the current task. */
1042:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxCurrentTCB = pxNewTCB;
1043:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1044:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1045:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1046:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* This is the first task to be created so do the preliminary
1047:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * initialisation required.  We will not recover if this call
1048:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * fails, but we will report the failure. */
1049:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 prvInitialiseTaskLists();
1050:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1051:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
1052:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1053:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1054:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1055:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1056:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
1057:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 20


1058:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* If the scheduler is not already running, make this task the
1059:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * current task if it is the highest priority task to be created
1060:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * so far. */
1061:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( xSchedulerRunning == pdFALSE )
1062:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1063:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1064:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1065:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxCurrentTCB = pxNewTCB;
1066:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1067:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
1068:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1069:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1070:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1071:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1072:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
1073:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1074:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1075:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1076:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1077:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1078:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uxTaskNumber++;
1079:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1080:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_TRACE_FACILITY == 1 )
1081:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1082:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Add a counter into the TCB for tracing only. */
1083:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxNewTCB->uxTCBNumber = uxTaskNumber;
1084:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1085:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* configUSE_TRACE_FACILITY */
1086:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         traceTASK_CREATE( pxNewTCB );
1087:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1088:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxNewTCB );
1089:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1090:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portSETUP_TCB( pxNewTCB );
1091:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1092:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     taskEXIT_CRITICAL();
1093:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1094:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     if( xSchedulerRunning != pdFALSE )
1095:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1096:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If the created task is of a higher priority than the current task
1097:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * then it should run now. */
1098:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1099:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1100:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             taskYIELD_IF_USING_PREEMPTION();
1101:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1102:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
1103:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1104:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1105:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1106:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1107:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     else
1108:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1109:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         mtCOVERAGE_TEST_MARKER();
1110:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1111:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
1112:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1113:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1114:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 21


1115:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1116:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1117:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1118:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
1119:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1120:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
1121:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1122:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* If null is passed in here then it is the calling task that is
1123:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * being deleted. */
1124:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1125:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1126:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Remove task from the ready/delayed list. */
1127:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1128:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1129:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1130:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1131:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
1132:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1133:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1134:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1135:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1136:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Is the task waiting on an event also? */
1137:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1138:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1139:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1140:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1141:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
1142:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1143:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1144:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1145:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1146:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1147:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * detect that the task lists need re-generating.  This is done before
1148:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1149:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * not return. */
1150:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             uxTaskNumber++;
1151:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1152:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxTCB == pxCurrentTCB )
1153:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1154:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* A task is deleting itself.  This cannot complete within the
1155:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * task itself, as a context switch to another task is required.
1156:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * Place the task in the termination list.  The idle task will
1157:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * check the termination list and free up any memory allocated by
1158:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * the scheduler for the TCB and stack of the deleted task. */
1159:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1160:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1161:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1162:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * there is a task that has been deleted and that it should therefore
1163:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * check the xTasksWaitingTermination list. */
1164:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 ++uxDeletedTasksWaitingCleanUp;
1165:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1166:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1167:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1168:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 traceTASK_DELETE( pxTCB );
1169:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1170:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* The pre-delete hook is primarily for the Windows simulator,
1171:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * in which Windows specific clean up operations are performed,
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 22


1172:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * after which it is not possible to yield away from this task -
1173:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * hence xYieldPending is used to latch that a context switch is
1174:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * required. */
1175:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1176:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1177:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
1178:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1179:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 --uxCurrentNumberOfTasks;
1180:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 traceTASK_DELETE( pxTCB );
1181:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1182:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Reset the next expected unblock time in case it referred to
1183:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * the task that has just been deleted. */
1184:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 prvResetNextTaskUnblockTime();
1185:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1186:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1187:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
1188:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1189:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If the task is not deleting itself, call prvDeleteTCB from outside of
1190:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * critical section. If a task deletes itself, prvDeleteTCB is called
1191:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * from prvCheckTasksWaitingTermination which is called from Idle task. */
1192:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( pxTCB != pxCurrentTCB )
1193:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1194:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             prvDeleteTCB( pxTCB );
1195:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1196:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1197:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Force a reschedule if it is the currently running task that has just
1198:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * been deleted. */
1199:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1200:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1201:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxTCB == pxCurrentTCB )
1202:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1203:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
1204:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 portYIELD_WITHIN_API();
1205:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1206:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
1207:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1208:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1209:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1210:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1211:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1212:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1213:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1214:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1215:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1216:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1217:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1218:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1219:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                 const TickType_t xTimeIncrement )
1220:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1221:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TickType_t xTimeToWake;
1222:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1223:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1224:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( pxPreviousWakeTime );
1225:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( ( xTimeIncrement > 0U ) );
1226:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
1227:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1228:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         vTaskSuspendAll();
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 23


1229:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1230:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Minor optimisation.  The tick count cannot change in this
1231:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * block. */
1232:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             const TickType_t xConstTickCount = xTickCount;
1233:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1234:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Generate the tick time at which the task wants to wake. */
1235:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1236:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1237:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( xConstTickCount < *pxPreviousWakeTime )
1238:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1239:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* The tick count has overflowed since this function was
1240:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * lasted called.  In this case the only time we should ever
1241:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * actually delay is if the wake time has also  overflowed,
1242:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * and the wake time is greater than the tick time.  When this
1243:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * is the case it is as if neither time had overflowed. */
1244:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1245:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1246:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     xShouldDelay = pdTRUE;
1247:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1248:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
1249:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1250:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1251:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1252:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1253:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
1254:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1255:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* The tick time has not overflowed.  In this case we will
1256:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * delay if either the wake time has overflowed, and/or the
1257:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * tick time is less than the wake time. */
1258:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1259:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1260:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     xShouldDelay = pdTRUE;
1261:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1262:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
1263:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1264:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1265:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1266:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1267:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1268:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Update the wake time ready for the next call. */
1269:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             *pxPreviousWakeTime = xTimeToWake;
1270:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1271:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( xShouldDelay != pdFALSE )
1272:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1273:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1274:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1275:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1276:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * the time to wake, so subtract the current tick count. */
1277:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1278:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1279:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
1280:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1281:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1282:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1283:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1284:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xAlreadyYielded = xTaskResumeAll();
1285:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 24


1286:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1287:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * have put ourselves to sleep. */
1288:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1289:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1290:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             portYIELD_WITHIN_API();
1291:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1292:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
1293:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1294:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1295:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1296:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1297:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xShouldDelay;
1298:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1299:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1300:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_xTaskDelayUntil */
1301:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1302:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1303:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1304:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1305:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskDelay( const TickType_t xTicksToDelay )
1306:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1307:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
1308:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1309:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* A delay time of zero just forces a reschedule. */
1310:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xTicksToDelay > ( TickType_t ) 0U )
1311:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1312:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
1313:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             vTaskSuspendAll();
1314:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1315:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 traceTASK_DELAY();
1316:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1317:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* A task that is removed from the event list while the
1318:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * scheduler is suspended will not get placed in the ready
1319:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * list or removed from the blocked list until the scheduler
1320:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * is resumed.
1321:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  *
1322:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * This task cannot be in an event list as it is the currently
1323:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * executing task. */
1324:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1325:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1326:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xAlreadyYielded = xTaskResumeAll();
1327:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1328:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
1329:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1330:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1331:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1332:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1333:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1334:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * have put ourselves to sleep. */
1335:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xAlreadyYielded == pdFALSE )
1336:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1337:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             portYIELD_WITHIN_API();
1338:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1339:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
1340:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1341:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1342:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 25


1343:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1344:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1345:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1346:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1347:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1348:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1349:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1350:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1351:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1352:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         eTaskState eReturn;
1353:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         List_t const * pxStateList;
1354:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         List_t const * pxEventList;
1355:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         List_t const * pxDelayedList;
1356:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         List_t const * pxOverflowedDelayedList;
1357:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         const TCB_t * const pxTCB = xTask;
1358:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1359:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTCB );
1360:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1361:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( pxTCB == pxCurrentTCB )
1362:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1363:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* The task calling this function is querying its own state. */
1364:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             eReturn = eRunning;
1365:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1366:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
1367:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1368:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             taskENTER_CRITICAL();
1369:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1370:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1371:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
1372:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
1373:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1374:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1375:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             taskEXIT_CRITICAL();
1376:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1377:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxEventList == &xPendingReadyList )
1378:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1379:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* The task has been placed on the pending ready list, so its
1380:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * state is eReady regardless of what list the task's state list
1381:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * item is currently placed on. */
1382:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 eReturn = eReady;
1383:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1384:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList )
1385:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1386:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* The task being queried is referenced from one of the Blocked
1387:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * lists. */
1388:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 eReturn = eBlocked;
1389:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1390:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1391:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
1392:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else if( pxStateList == &xSuspendedTaskList )
1393:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1394:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The task being queried is referenced from the suspended
1395:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * list.  Is it genuinely suspended or is it blocked
1396:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * indefinitely? */
1397:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1398:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
1399:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 26


1400:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
1401:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             BaseType_t x;
1402:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1403:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             /* The task does not appear on the event list item of
1404:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                              * and of the RTOS objects, but could still be in the
1405:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                              * blocked state if it is waiting on its notification
1406:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                              * rather than waiting on an object.  If not, is
1407:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                              * suspended. */
1408:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             eReturn = eSuspended;
1409:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1410:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1411:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             {
1412:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                 if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1413:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                 {
1414:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                     eReturn = eBlocked;
1415:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                     break;
1416:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                 }
1417:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             }
1418:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
1419:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1420:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
1421:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             eReturn = eSuspended;
1422:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
1423:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1424:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
1425:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
1426:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
1427:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         eReturn = eBlocked;
1428:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
1429:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1430:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1431:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1432:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
1433:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1434:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1435:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The task being queried is referenced from the deleted
1436:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * tasks list, or it is not referenced from any lists at
1437:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * all. */
1438:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     eReturn = eDeleted;
1439:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1440:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #endif
1441:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1442:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1443:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1444:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* If the task is not in any other state, it must be in the
1445:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * Ready (including pending ready) state. */
1446:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 eReturn = eReady;
1447:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1448:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1449:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1450:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return eReturn;
1451:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1452:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1453:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1454:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1455:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1456:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 27


1457:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1458:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1459:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1460:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
1461:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxReturn;
1462:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1463:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
1464:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1465:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* If null is passed in here then it is the priority of the task
1466:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * that called uxTaskPriorityGet() that is being queried. */
1467:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1468:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
1469:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1470:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
1471:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1472:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return uxReturn;
1473:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1474:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1475:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1476:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1477:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1478:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1479:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1480:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1481:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1482:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
1483:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxReturn;
1484:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptState;
1485:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1486:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1487:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1488:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1489:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1490:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1491:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * is defined in FreeRTOSConfig.h then
1492:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1493:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1494:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * been assigned a priority above the configured maximum system call
1495:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1496:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1497:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1498:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1499:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
1500:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * provided on the following link:
1501:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1502:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1503:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1504:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1505:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1506:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1507:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * task that is being queried. */
1508:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1509:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
1510:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1511:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1512:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1513:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return uxReturn;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 28


1514:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1515:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1516:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1517:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1518:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1519:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1520:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1521:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskPrioritySet( TaskHandle_t xTask,
1522:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                            UBaseType_t uxNewPriority )
1523:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1524:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
1525:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1526:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1527:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1528:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( uxNewPriority < configMAX_PRIORITIES );
1529:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1530:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Ensure the new priority is valid. */
1531:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1532:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1533:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1534:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1535:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
1536:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1537:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1538:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1539:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1540:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
1541:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1542:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* If null is passed in here then it is the priority of the calling
1543:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * task that is being changed. */
1544:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTask );
1545:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1546:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1547:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1548:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #if ( configUSE_MUTEXES == 1 )
1549:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1550:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxBasePriority;
1551:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1552:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #else
1553:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1554:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 uxCurrentBasePriority = pxTCB->uxPriority;
1555:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1556:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #endif
1557:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1558:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( uxCurrentBasePriority != uxNewPriority )
1559:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1560:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* The priority change may have readied a task of higher
1561:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * priority than the calling task. */
1562:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( uxNewPriority > uxCurrentBasePriority )
1563:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1564:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( pxTCB != pxCurrentTCB )
1565:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
1566:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* The priority of a task other than the currently
1567:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * running task is being raised.  Is the priority being
1568:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * raised above that of the running task? */
1569:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         if( uxNewPriority > pxCurrentTCB->uxPriority )
1570:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 29


1571:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             xYieldRequired = pdTRUE;
1572:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
1573:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         else
1574:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
1575:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
1576:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
1577:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
1578:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
1579:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
1580:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* The priority of the running task is being raised,
1581:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * but the running task must already be the highest
1582:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * priority task able to run so no yield is required. */
1583:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
1584:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1585:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else if( pxTCB == pxCurrentTCB )
1586:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1587:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Setting the priority of the running task down means
1588:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * there may now be another task of higher priority that
1589:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * is ready to execute. */
1590:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     xYieldRequired = pdTRUE;
1591:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1592:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
1593:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1594:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Setting the priority of any other task down does not
1595:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * require a yield as the running task must be above the
1596:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * new priority of the task being modified. */
1597:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1598:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1599:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Remember the ready list the task might be referenced from
1600:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * before its uxPriority member is changed so the
1601:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1602:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
1603:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1604:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #if ( configUSE_MUTEXES == 1 )
1605:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1606:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Only change the priority being used if the task is not
1607:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * currently using an inherited priority. */
1608:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1609:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
1610:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         pxTCB->uxPriority = uxNewPriority;
1611:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
1612:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
1613:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
1614:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1615:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
1616:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1617:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The base priority gets set whatever. */
1618:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxTCB->uxBasePriority = uxNewPriority;
1619:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1620:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1621:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1622:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxTCB->uxPriority = uxNewPriority;
1623:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1624:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1625:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1626:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Only reset the event list item value if the value is not
1627:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * being used for anything else. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 30


1628:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
1629:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1630:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
1631:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1632:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
1633:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1634:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1635:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1636:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1637:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* If the task is in the blocked or suspended list we need do
1638:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * nothing more than change its priority variable. However, if
1639:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * the task is in a ready list it needs to be removed and placed
1640:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * in the list appropriate to its new priority. */
1641:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
1642:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1643:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The task is currently in its ready list - remove before
1644:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * adding it to its new ready list.  As we are in a critical
1645:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * section we can do this even if the scheduler is suspended. */
1646:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1647:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
1648:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* It is known that the task is in its ready list so
1649:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * there is no need to check again and the port level
1650:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * reset macro can be called directly. */
1651:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1652:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
1653:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
1654:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
1655:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1656:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
1657:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1658:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1659:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1660:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
1661:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1662:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1663:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1664:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1665:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( xYieldRequired != pdFALSE )
1666:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1667:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
1668:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1669:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
1670:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1671:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1672:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1673:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1674:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Remove compiler warning about unused variables when the port
1675:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * optimised task selection is not being used. */
1676:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 ( void ) uxPriorityUsedOnEntry;
1677:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1678:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1679:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
1680:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1681:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1682:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1683:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1684:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 31


1685:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1686:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1687:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1688:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1689:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
1690:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1691:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
1692:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1693:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* If null is passed in here then it is the running task that is
1694:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * being suspended. */
1695:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1696:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1697:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             traceTASK_SUSPEND( pxTCB );
1698:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1699:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Remove task from the ready/delayed list and place in the
1700:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * suspended list. */
1701:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1702:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1703:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1704:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1705:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
1706:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1707:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1708:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1709:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1710:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Is the task waiting on an event also? */
1711:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1712:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1713:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1714:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1715:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
1716:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1717:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1718:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1719:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1720:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1721:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1722:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1723:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1724:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 BaseType_t x;
1725:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1726:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1727:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1728:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1729:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
1730:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* The task was blocked to wait for a notification, but is
1731:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * now suspended, so no notification was received. */
1732:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
1733:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
1734:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1735:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1736:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1737:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1738:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
1739:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1740:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xSchedulerRunning != pdFALSE )
1741:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 32


1742:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Reset the next expected unblock time in case it referred to the
1743:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * task that is now in the Suspended state. */
1744:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             taskENTER_CRITICAL();
1745:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1746:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 prvResetNextTaskUnblockTime();
1747:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1748:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             taskEXIT_CRITICAL();
1749:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1750:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
1751:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1752:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1753:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1754:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1755:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( pxTCB == pxCurrentTCB )
1756:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1757:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( xSchedulerRunning != pdFALSE )
1758:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1759:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* The current task has just been suspended. */
1760:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
1761:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 portYIELD_WITHIN_API();
1762:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1763:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
1764:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1765:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* The scheduler is not running, but the task that was pointed
1766:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1767:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * must be adjusted to point to a different task. */
1768:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
1769:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1770:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1771:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * NULL so when the next task is created pxCurrentTCB will
1772:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * be set to point to it no matter what its relative priority
1773:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * is. */
1774:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxCurrentTCB = NULL;
1775:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1776:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
1777:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1778:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     vTaskSwitchContext();
1779:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1780:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1781:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1782:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
1783:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1784:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1785:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1786:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1787:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1788:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1789:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1790:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1791:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1792:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1793:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1794:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
  27              		.loc 1 1794 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 33


  31              		@ link register save eliminated.
  32              	.LVL0:
1795:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = pdFALSE;
1796:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         const TCB_t * const pxTCB = xTask;
1797:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1798:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Accesses xPendingReadyList so must be called from a critical
1799:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * section. */
1800:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1801:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* It does not make sense to check if the calling task is suspended. */
1802:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( xTask );
1803:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1804:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Is the task being resumed actually in the suspended list? */
1805:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  33              		.loc 1 1805 0
  34 0000 4269     		ldr	r2, [r0, #20]
  35 0002 084B     		ldr	r3, .L6
  36 0004 9A42     		cmp	r2, r3
  37 0006 06D1     		bne	.L3
1806:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1807:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Has the task already been resumed from within an ISR? */
1808:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
  38              		.loc 1 1808 0
  39 0008 836A     		ldr	r3, [r0, #40]
  40 000a 074A     		ldr	r2, .L6+4
  41 000c 9342     		cmp	r3, r2
  42 000e 04D0     		beq	.L4
1809:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1810:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Is it in the suspended list because it is in the Suspended
1811:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * state, or because is is blocked with no timeout? */
1812:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
  43              		.loc 1 1812 0
  44 0010 2BB1     		cbz	r3, .L5
1795:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         const TCB_t * const pxTCB = xTask;
  45              		.loc 1 1795 0
  46 0012 0020     		movs	r0, #0
  47              	.LVL1:
  48 0014 7047     		bx	lr
  49              	.LVL2:
  50              	.L3:
  51 0016 0020     		movs	r0, #0
  52              	.LVL3:
  53 0018 7047     		bx	lr
  54              	.LVL4:
  55              	.L4:
  56 001a 0020     		movs	r0, #0
  57              	.LVL5:
  58 001c 7047     		bx	lr
  59              	.LVL6:
  60              	.L5:
1813:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1814:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     xReturn = pdTRUE;
  61              		.loc 1 1814 0
  62 001e 0120     		movs	r0, #1
  63              	.LVL7:
1815:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1816:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
1817:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 34


1818:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1819:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1820:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1821:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
1822:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1823:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1824:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1825:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1826:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
1827:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1828:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1829:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1830:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1831:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
1832:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  64              		.loc 1 1832 0
  65 0020 7047     		bx	lr
  66              	.L7:
  67 0022 00BF     		.align	2
  68              	.L6:
  69 0024 00000000 		.word	.LANCHOR0
  70 0028 14000000 		.word	.LANCHOR0+20
  71              		.cfi_endproc
  72              	.LFE79:
  73              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
  74              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  75              		.align	2
  76              		.thumb
  77              		.thumb_func
  78              		.type	prvTaskCheckFreeStackSpace, %function
  79              	prvTaskCheckFreeStackSpace:
  80              	.LFB104:
1833:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1834:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1835:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1836:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1837:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1838:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1839:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskResume( TaskHandle_t xTaskToResume )
1840:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1841:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1842:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1843:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* It does not make sense to resume the calling task. */
1844:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToResume );
1845:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1846:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* The parameter cannot be NULL as it is impossible to resume the
1847:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * currently executing task. */
1848:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1849:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1850:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             taskENTER_CRITICAL();
1851:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1852:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1853:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1854:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     traceTASK_RESUME( pxTCB );
1855:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1856:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The ready list can be accessed even if the scheduler is
1857:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * suspended because this is inside a critical section. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 35


1858:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1859:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1860:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1861:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* A higher priority task may have just been resumed. */
1862:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
1863:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
1864:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* This yield may not cause the task just resumed to run,
1865:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * but will leave the lists in the correct state for the
1866:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * next yield. */
1867:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         taskYIELD_IF_USING_PREEMPTION();
1868:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
1869:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
1870:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
1871:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1872:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
1873:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1874:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
1875:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1876:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
1877:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1878:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1879:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             taskEXIT_CRITICAL();
1880:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1881:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
1882:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1883:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
1884:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1885:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1886:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1887:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1888:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1889:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1890:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1891:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1892:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1893:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1894:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1895:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
1896:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
1897:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
1898:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1899:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToResume );
1900:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1901:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
1902:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
1903:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
1904:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1905:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1906:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * is defined in FreeRTOSConfig.h then
1907:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1908:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
1909:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * been assigned a priority above the configured maximum system call
1910:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1911:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
1912:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1913:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1914:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 36


1915:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * provided on the following link:
1916:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1917:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1918:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1919:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1920:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1921:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1922:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1923:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1924:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1925:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Check the ready lists can be accessed. */
1926:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
1927:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1928:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Ready lists can be accessed so move the task from the
1929:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * suspended list to the ready list directly. */
1930:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
1931:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
1932:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         xYieldRequired = pdTRUE;
1933:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1934:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* Mark that a yield is pending in case the user is not
1935:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * using the return value to initiate a context switch
1936:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * from the ISR using portYIELD_FROM_ISR. */
1937:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         xYieldPending = pdTRUE;
1938:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
1939:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
1940:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
1941:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
1942:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
1943:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1944:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1945:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
1946:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1947:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
1948:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
1949:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The delayed or ready lists cannot be accessed so the task
1950:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * is held in the pending ready list until the scheduler is
1951:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * unsuspended. */
1952:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1953:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
1954:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1955:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
1956:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
1957:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
1958:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
1959:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1960:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1961:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1962:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xYieldRequired;
1963:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1964:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1965:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1966:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
1967:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1968:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** void vTaskStartScheduler( void )
1969:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
1970:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xReturn;
1971:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 37


1972:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Add the idle task at the lowest priority. */
1973:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1974:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
1975:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         StaticTask_t * pxIdleTaskTCBBuffer = NULL;
1976:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         StackType_t * pxIdleTaskStackBuffer = NULL;
1977:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint32_t ulIdleTaskStackSize;
1978:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1979:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* The Idle task is created using user provided RAM - obtain the
1980:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * address of the RAM then create the idle task. */
1981:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskSta
1982:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
1983:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                              configIDLE_TASK_NAME,
1984:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                              ulIdleTaskStackSize,
1985:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                              ( void * ) NULL,       /*lint !e961.  The cast is not 
1986:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                              portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY
1987:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                              pxIdleTaskStackBuffer,
1988:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                              pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, j
1989:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
1990:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xIdleTaskHandle != NULL )
1991:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1992:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = pdPASS;
1993:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1994:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
1995:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
1996:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = pdFAIL;
1997:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
1998:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
1999:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
2000:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2001:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* The Idle task is being created using dynamically allocated RAM. */
2002:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xReturn = xTaskCreate( prvIdleTask,
2003:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                configIDLE_TASK_NAME,
2004:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                configMINIMAL_STACK_SIZE,
2005:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                ( void * ) NULL,
2006:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_
2007:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is
2008:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2009:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
2010:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2011:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_TIMERS == 1 )
2012:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2013:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xReturn == pdPASS )
2014:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2015:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = xTimerCreateTimerTask();
2016:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2017:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
2018:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2019:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2020:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2021:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2022:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif /* configUSE_TIMERS */
2023:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2024:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     if( xReturn == pdPASS )
2025:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2026:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* freertos_tasks_c_additions_init() should only be called if the user
2027:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2028:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * the only macro called by the function. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 38


2029:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2030:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2031:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             freertos_tasks_c_additions_init();
2032:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2033:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif
2034:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2035:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Interrupts are turned off here, to ensure a tick does not occur
2036:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * before or during the call to xPortStartScheduler().  The stacks of
2037:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * the created tasks contain a status word with interrupts switched on
2038:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * so interrupts will automatically get re-enabled when the first task
2039:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * starts to run. */
2040:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portDISABLE_INTERRUPTS();
2041:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2042:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
2043:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2044:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
2045:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * block specific to the task that will run first. */
2046:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
2047:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2048:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif
2049:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2050:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
2051:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xSchedulerRunning = pdTRUE;
2052:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2053:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2054:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2055:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * macro must be defined to configure the timer/counter used to generate
2056:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2057:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * is set to 0 and the following line fails to build then ensure you do not
2058:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2059:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * FreeRTOSConfig.h file. */
2060:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2061:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2062:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         traceTASK_SWITCHED_IN();
2063:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2064:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Setting up the timer tick is hardware specific and thus in the
2065:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * portable interface. */
2066:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xPortStartScheduler();
2067:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2068:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* In most cases, xPortStartScheduler() will not return. If it
2069:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * returns pdTRUE then there was not enough heap memory available
2070:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * to create either the Idle or the Timer task. If it returned
2071:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * pdFALSE, then the application called xTaskEndScheduler().
2072:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * Most ports don't implement xTaskEndScheduler() as there is
2073:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * nothing to return to. */
2074:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2075:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     else
2076:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2077:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* This line will only be reached if the kernel could not be started,
2078:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * because there was not enough FreeRTOS heap to create the idle task
2079:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * or the timer task. */
2080:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2082:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2083:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * meaning xIdleTaskHandle is not used anywhere else. */
2085:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     ( void ) xIdleTaskHandle;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 39


2086:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2087:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2088:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * from getting optimized out as it is no longer used by the kernel. */
2089:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     ( void ) uxTopUsedPriority;
2090:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
2091:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2092:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2093:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** void vTaskEndScheduler( void )
2094:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
2095:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
2096:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * routine so the original ISRs can be restored if necessary.  The port
2097:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2098:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     portDISABLE_INTERRUPTS();
2099:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     xSchedulerRunning = pdFALSE;
2100:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     vPortEndScheduler();
2101:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
2102:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
2103:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2104:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** void vTaskSuspendAll( void )
2105:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
2106:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* A critical section is not required as the variable is of type
2107:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2108:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2109:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * https://goo.gl/wu4acr */
2110:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2111:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* portSOFTWARE_BARRIER() is only implemented for emulated/simulated ports that
2112:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * do not otherwise exhibit real time behaviour. */
2113:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     portSOFTWARE_BARRIER();
2114:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2115:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2116:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2117:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     ++uxSchedulerSuspended;
2118:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2119:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2120:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * the above increment elsewhere. */
2121:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     portMEMORY_BARRIER();
2122:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
2123:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
2124:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2125:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2126:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2127:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     static TickType_t prvGetExpectedIdleTime( void )
2128:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2129:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TickType_t xReturn;
2130:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2131:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2132:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* uxHigherPriorityReadyTasks takes care of the case where
2133:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2134:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * task that are in the Ready state, even though the idle task is
2135:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * running. */
2136:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2137:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2138:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( uxTopReadyPriority > tskIDLE_PRIORITY )
2139:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2140:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
2141:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2142:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 40


2143:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #else
2144:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2145:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2146:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2147:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* When port optimised task selection is used the uxTopReadyPriority
2148:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * variable is used as a bit map.  If bits other than the least
2149:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * significant bit are set then there are tasks that have a priority
2150:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * above the idle priority that are in the Ready state.  This takes
2151:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * care of the case where the co-operative scheduler is in use. */
2152:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( uxTopReadyPriority > uxLeastSignificantBit )
2153:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2154:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 uxHigherPriorityReadyTasks = pdTRUE;
2155:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2156:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2157:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2158:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2159:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2160:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2161:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = 0;
2162:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2163:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2164:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2165:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* There are other idle priority tasks in the ready state.  If
2166:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * time slicing is used then the very next tick interrupt must be
2167:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * processed. */
2168:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = 0;
2169:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2170:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2171:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2172:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* There are tasks in the Ready state that have a priority above the
2173:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * idle priority.  This path can only be reached if
2174:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * configUSE_PREEMPTION is 0. */
2175:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = 0;
2176:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2177:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
2178:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2179:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = xNextTaskUnblockTime - xTickCount;
2180:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2181:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2182:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
2183:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2184:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2185:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2186:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
2187:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2188:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** BaseType_t xTaskResumeAll( void )
2189:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
2190:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TCB_t * pxTCB = NULL;
2191:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xAlreadyYielded = pdFALSE;
2192:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2193:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* If uxSchedulerSuspended is zero then this function does not match a
2194:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * previous call to vTaskSuspendAll(). */
2195:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
2196:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2197:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* It is possible that an ISR caused a task to be removed from an event
2198:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * list while the scheduler was suspended.  If this was the case then the
2199:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * removed task will have been added to the xPendingReadyList.  Once the
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 41


2200:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * scheduler has been resumed it is safe to move all the pending ready
2201:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * tasks from this list into their appropriate ready list. */
2202:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     taskENTER_CRITICAL();
2203:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2204:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         --uxSchedulerSuspended;
2205:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2206:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
2207:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2208:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2209:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2210:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Move any readied tasks from the pending list into the
2211:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * appropriate ready list. */
2212:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2213:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2214:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
2215:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2216:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     portMEMORY_BARRIER();
2217:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2218:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2219:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2220:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* If the moved task has a priority higher than the current
2221:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * task then a yield must be performed. */
2222:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2223:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2224:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         xYieldPending = pdTRUE;
2225:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2226:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
2227:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2228:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2229:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2230:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2231:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2232:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( pxTCB != NULL )
2233:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2234:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* A task was unblocked while the scheduler was suspended,
2235:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * which may have prevented the next unblock time from being
2236:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * re-calculated, in which case re-calculate it now.  Mainly
2237:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * important for low power tickless implementations, where
2238:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * this can prevent an unnecessary exit from low power
2239:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * state. */
2240:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvResetNextTaskUnblockTime();
2241:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2242:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2243:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* If any ticks occurred while the scheduler was suspended then
2244:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * they should be processed now.  This ensures the tick count does
2245:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * not  slip, and that any delayed tasks are resumed at the correct
2246:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * time. */
2247:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2248:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2249:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2250:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( xPendedCounts > ( TickType_t ) 0U )
2251:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2252:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         do
2253:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
2254:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             if( xTaskIncrementTick() != pdFALSE )
2255:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             {
2256:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                 xYieldPending = pdTRUE;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 42


2257:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             }
2258:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             else
2259:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             {
2260:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                 mtCOVERAGE_TEST_MARKER();
2261:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             }
2262:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2263:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             --xPendedCounts;
2264:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         } while( xPendedCounts > ( TickType_t ) 0U );
2265:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2266:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         xPendedTicks = 0;
2267:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2268:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
2269:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2270:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2271:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2272:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2273:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2274:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( xYieldPending != pdFALSE )
2275:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2276:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     #if ( configUSE_PREEMPTION != 0 )
2277:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2278:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         xAlreadyYielded = pdTRUE;
2279:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2280:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     #endif
2281:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
2282:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2283:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
2284:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2285:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
2286:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2287:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2288:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2289:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
2290:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2291:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2292:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2293:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2294:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     taskEXIT_CRITICAL();
2295:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2296:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     return xAlreadyYielded;
2297:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
2298:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2299:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2300:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** TickType_t xTaskGetTickCount( void )
2301:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
2302:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TickType_t xTicks;
2303:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2304:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Critical section required if running on a 16 bit processor. */
2305:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     portTICK_TYPE_ENTER_CRITICAL();
2306:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2307:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xTicks = xTickCount;
2308:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2309:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     portTICK_TYPE_EXIT_CRITICAL();
2310:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2311:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     return xTicks;
2312:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
2313:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 43


2314:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2315:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2316:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
2317:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TickType_t xReturn;
2318:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxSavedInterruptStatus;
2319:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2320:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2321:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2322:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * above the maximum system call priority are kept permanently enabled, even
2323:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2324:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2325:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2326:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2327:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * assigned a priority above the configured maximum system call priority.
2328:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2329:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * that have been assigned a priority at or (logically) below the maximum
2330:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2331:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2332:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * More information (albeit Cortex-M specific) is provided on the following
2333:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2334:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2335:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2336:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2337:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2338:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xReturn = xTickCount;
2339:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2340:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2341:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2342:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     return xReturn;
2343:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
2344:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2345:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2346:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2347:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
2348:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* A critical section is not required because the variables are of type
2349:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * BaseType_t. */
2350:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     return uxCurrentNumberOfTasks;
2351:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
2352:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2353:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2354:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2355:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
2356:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TCB_t * pxTCB;
2357:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2358:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* If null is passed in here then the name of the calling task is being
2359:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * queried. */
2360:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2361:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTCB );
2362:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     return &( pxTCB->pcTaskName[ 0 ] );
2363:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
2364:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2365:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2366:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2367:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2368:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2369:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                                      const char pcNameToQuery[] )
2370:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 44


2371:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNextTCB;
2372:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxFirstTCB;
2373:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxReturn = NULL;
2374:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t x;
2375:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         char cNextChar;
2376:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xBreakLoop;
2377:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2378:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* This function is called with the scheduler suspended. */
2379:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2380:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2381:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2382:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
2383:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2384:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             do
2385:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2386:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
2387:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2388:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Check each character in the name looking for a match or
2389:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * mismatch. */
2390:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xBreakLoop = pdFALSE;
2391:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2392:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2394:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
2395:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2396:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( cNextChar != pcNameToQuery[ x ] )
2397:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2398:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* Characters didn't match. */
2399:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         xBreakLoop = pdTRUE;
2400:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2401:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else if( cNextChar == ( char ) 0x00 )
2402:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2403:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* Both strings terminated, a match must have been
2404:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * found. */
2405:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         pxReturn = pxNextTCB;
2406:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         xBreakLoop = pdTRUE;
2407:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2408:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
2409:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2410:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2411:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2412:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2413:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( xBreakLoop != pdFALSE )
2414:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2415:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         break;
2416:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2417:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2418:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2419:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( pxReturn != NULL )
2420:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2421:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The handle has been found. */
2422:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
2423:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2424:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
2425:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2426:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
2427:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 45


2428:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2429:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2430:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2431:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return pxReturn;
2432:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2433:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2434:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2435:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2436:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2437:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2438:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2439:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2440:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2441:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
2442:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
2443:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2444:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2445:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2446:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2447:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         vTaskSuspendAll();
2448:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2449:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Search the ready lists. */
2450:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             do
2451:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2452:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 uxQueue--;
2453:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
2454:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2455:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( pxTCB != NULL )
2456:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2457:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Found the handle. */
2458:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
2459:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2460:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
2461:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2462:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Search the delayed lists. */
2463:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxTCB == NULL )
2464:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2465:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
2466:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2467:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2468:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxTCB == NULL )
2469:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2470:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
2471:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2472:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2473:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #if ( INCLUDE_vTaskSuspend == 1 )
2474:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2475:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( pxTCB == NULL )
2476:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2477:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Search the suspended list. */
2478:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2479:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2480:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2481:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #endif
2482:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2483:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #if ( INCLUDE_vTaskDelete == 1 )
2484:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 46


2485:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( pxTCB == NULL )
2486:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2487:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Search the deleted list. */
2488:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQu
2489:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2490:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2491:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #endif
2492:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2493:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         ( void ) xTaskResumeAll();
2494:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2495:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return pxTCB;
2496:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2497:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2498:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2499:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2500:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2501:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
2502:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2503:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskGetStaticBuffers( TaskHandle_t xTask,
2504:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                       StackType_t ** ppuxStackBuffer,
2505:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                       StaticTask_t ** ppxTaskBuffer )
2506:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2507:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
2508:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
2509:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2510:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( ppuxStackBuffer != NULL );
2511:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( ppxTaskBuffer != NULL );
2512:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2513:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2514:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2515:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
2516:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2517:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB )
2518:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2519:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 *ppuxStackBuffer = pxTCB->pxStack;
2520:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 *ppxTaskBuffer = ( StaticTask_t * ) pxTCB;
2521:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
2522:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2523:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
2524:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2525:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 *ppuxStackBuffer = pxTCB->pxStack;
2526:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 *ppxTaskBuffer = NULL;
2527:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
2528:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2529:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
2530:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2531:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = pdFALSE;
2532:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2533:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2534:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #else /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 */
2535:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2536:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             *ppuxStackBuffer = pxTCB->pxStack;
2537:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             *ppxTaskBuffer = ( StaticTask_t * ) pxTCB;
2538:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = pdTRUE;
2539:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2540:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 */
2541:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 47


2542:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
2543:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2544:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2545:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
2546:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2547:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2548:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2549:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2550:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2551:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                       const UBaseType_t uxArraySize,
2552:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                       configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime )
2553:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2554:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2555:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2556:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         vTaskSuspendAll();
2557:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2558:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Is there a space in the array for each task in the system? */
2559:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( uxArraySize >= uxCurrentNumberOfTasks )
2560:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2561:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2562:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * task in the Ready state. */
2563:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 do
2564:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2565:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     uxQueue--;
2566:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
2567:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
2568:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2569:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Fill in an TaskStatus_t structure with information on each
2570:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * task in the Blocked state. */
2571:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2572:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2573:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2574:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #if ( INCLUDE_vTaskDelete == 1 )
2575:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2576:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
2577:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * each task that has been deleted but not yet cleaned up. */
2578:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTas
2579:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2580:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #endif
2581:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2582:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2583:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2584:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Fill in an TaskStatus_t structure with information on
2585:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * each task in the Suspended state. */
2586:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSus
2587:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2588:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #endif
2589:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2590:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2591:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2592:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( pulTotalRunTime != NULL )
2593:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2594:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2595:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2596:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         #else
2597:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             *pulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COU
2598:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         #endif
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 48


2599:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2600:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2601:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2602:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2603:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( pulTotalRunTime != NULL )
2604:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2605:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         *pulTotalRunTime = 0;
2606:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2607:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2608:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2609:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2610:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
2611:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2612:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2613:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2614:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2615:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         ( void ) xTaskResumeAll();
2616:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2617:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return uxTask;
2618:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2619:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2620:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2621:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
2622:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2623:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2624:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2625:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2626:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2627:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2628:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * started, then xIdleTaskHandle will be NULL. */
2629:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( ( xIdleTaskHandle != NULL ) );
2630:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xIdleTaskHandle;
2631:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2632:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2633:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2634:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
2635:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2636:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2637:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2638:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2639:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * 1. */
2640:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2641:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2642:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskStepTick( TickType_t xTicksToJump )
2643:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2644:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Correct the tick count value after a period during which the tick
2645:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * was suppressed.  Note this does *not* call the tick hook function for
2646:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * each stepped tick. */
2647:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2648:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2649:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
2650:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2651:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Arrange for xTickCount to reach xNextTaskUnblockTime in
2652:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * xTaskIncrementTick() when the scheduler resumes.  This ensures
2653:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * that any delayed tasks are resumed at the correct time. */
2654:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
2655:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             configASSERT( xTicksToJump != ( TickType_t ) 0 );
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 49


2656:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2657:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
2658:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             taskENTER_CRITICAL();
2659:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2660:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xPendedTicks++;
2661:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2662:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             taskEXIT_CRITICAL();
2663:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xTicksToJump--;
2664:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2665:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
2666:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2667:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2668:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2669:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2670:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xTickCount += xTicksToJump;
2671:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2672:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2673:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2674:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2675:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
2676:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2677:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2678:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
2679:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xYieldOccurred;
2680:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2681:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Must not be called with the scheduler suspended as the implementation
2682:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2683:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
2684:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2685:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2686:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2687:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     vTaskSuspendAll();
2688:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2689:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
2690:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     taskENTER_CRITICAL();
2691:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2692:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xPendedTicks += xTicksToCatchUp;
2693:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2694:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     taskEXIT_CRITICAL();
2695:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     xYieldOccurred = xTaskResumeAll();
2696:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2697:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     return xYieldOccurred;
2698:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
2699:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
2700:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2701:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2702:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2703:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2704:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2705:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB = xTask;
2706:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
2707:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2708:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( pxTCB );
2709:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2710:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         vTaskSuspendAll();
2711:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2712:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* A task can only be prematurely removed from the Blocked state if
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 50


2713:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * it is actually in the Blocked state. */
2714:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( eTaskGetState( xTask ) == eBlocked )
2715:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2716:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = pdPASS;
2717:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2718:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Remove the reference to the task from the blocked list.  An
2719:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * interrupt won't touch the xStateListItem because the
2720:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * scheduler is suspended. */
2721:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2722:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2723:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Is the task waiting on an event also?  If so remove it from
2724:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * the event list too.  Interrupts can touch the event list item,
2725:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * even though the scheduler is suspended, so a critical section
2726:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * is used. */
2727:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 taskENTER_CRITICAL();
2728:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2729:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2730:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2731:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2732:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2733:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* This lets the task know it was forcibly removed from the
2734:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * blocked state so it should not re-evaluate its block time and
2735:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * then block again. */
2736:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         pxTCB->ucDelayAborted = pdTRUE;
2737:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2738:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
2739:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2740:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2741:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2742:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2743:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 taskEXIT_CRITICAL();
2744:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2745:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Place the unblocked task into the appropriate ready list. */
2746:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
2747:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2748:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* A task being unblocked cannot cause an immediate context
2749:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * switch if preemption is turned off. */
2750:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #if ( configUSE_PREEMPTION == 1 )
2751:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2752:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Preemption is on, but a context switch should only be
2753:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * performed if the unblocked task has a priority that is
2754:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * higher than the currently executing task. */
2755:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2756:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2757:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* Pend the yield to be performed when the scheduler
2758:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * is unsuspended. */
2759:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         xYieldPending = pdTRUE;
2760:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2761:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
2762:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2763:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2764:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2765:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2766:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #endif /* configUSE_PREEMPTION */
2767:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2768:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
2769:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 51


2770:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = pdFAIL;
2771:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2772:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2773:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         ( void ) xTaskResumeAll();
2774:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2775:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
2776:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2777:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2778:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2779:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
2780:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2781:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** BaseType_t xTaskIncrementTick( void )
2782:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
2783:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TCB_t * pxTCB;
2784:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TickType_t xItemValue;
2785:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xSwitchRequired = pdFALSE;
2786:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2787:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Called by the portable layer each time a tick interrupt occurs.
2788:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * Increments the tick then checks to see if the new tick value will cause any
2789:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * tasks to be unblocked. */
2790:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     traceTASK_INCREMENT_TICK( xTickCount );
2791:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2792:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
2793:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2794:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this
2795:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * block. */
2796:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2797:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2798:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Increment the RTOS tick, switching the delayed and overflowed
2799:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * delayed lists if it wraps to 0. */
2800:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xTickCount = xConstTickCount;
2801:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2802:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
2803:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2804:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             taskSWITCH_DELAYED_LISTS();
2805:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2806:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
2807:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2808:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
2809:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2810:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2811:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2812:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * the  queue in the order of their wake time - meaning once one task
2813:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * has been found whose block time has not expired there is no need to
2814:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * look any further down the list. */
2815:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xConstTickCount >= xNextTaskUnblockTime )
2816:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2817:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             for( ; ; )
2818:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2819:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2820:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2821:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2822:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * to the maximum possible value so it is extremely
2823:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * unlikely that the
2824:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2825:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * next time through. */
2826:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 52


2827:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
2828:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2829:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
2830:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
2831:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The delayed list is not empty, get the value of the
2832:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * item at the head of the delayed list.  This is the time
2833:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * at which the task at the head of the delayed list must
2834:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * be removed from the Blocked state. */
2835:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
2836:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2837:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2838:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( xConstTickCount < xItemValue )
2839:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2840:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* It is not time to unblock this item yet, but the
2841:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * item value is the time at which the task at the head
2842:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * of the blocked list must be removed from the Blocked
2843:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * state -  so record the item value in
2844:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * xNextTaskUnblockTime. */
2845:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         xNextTaskUnblockTime = xItemValue;
2846:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
2847:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2848:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
2849:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2850:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2851:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2852:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2853:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* It is time to remove the item from the Blocked state. */
2854:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
2855:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2856:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Is the task waiting on an event also?  If so remove
2857:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * it from the event list. */
2858:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2859:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2860:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
2861:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2862:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
2863:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2864:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
2865:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2866:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2867:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Place the unblocked task into the appropriate ready
2868:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * list. */
2869:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
2870:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2871:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* A task being unblocked cannot cause an immediate
2872:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * context switch if preemption is turned off. */
2873:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     #if ( configUSE_PREEMPTION == 1 )
2874:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
2875:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* Preemption is on, but a context switch should
2876:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * only be performed if the unblocked task's
2877:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * priority is higher than the currently executing
2878:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * task.
2879:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * The case of equal priority tasks sharing
2880:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * processing time (which happens when both
2881:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * preemption and time slicing are on) is
2882:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * handled below.*/
2883:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 53


2884:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
2885:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             xSwitchRequired = pdTRUE;
2886:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
2887:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         else
2888:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
2889:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
2890:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
2891:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
2892:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     #endif /* configUSE_PREEMPTION */
2893:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
2894:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2895:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2896:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2897:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Tasks of equal priority to the currently running task will share
2898:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * processing time (time slice) if preemption is on, and the application
2899:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * writer has not explicitly turned time slicing off. */
2900:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2901:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2902:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( U
2903:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2904:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xSwitchRequired = pdTRUE;
2905:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2906:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
2907:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2908:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2909:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2910:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2911:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2912:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2913:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2914:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2915:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Guard against the tick hook being called when the pended tick
2916:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * count is being unwound (when the scheduler is being unlocked). */
2917:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( xPendedTicks == ( TickType_t ) 0 )
2918:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2919:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 vApplicationTickHook();
2920:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2921:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
2922:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2923:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2924:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2925:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2926:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* configUSE_TICK_HOOK */
2927:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2928:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_PREEMPTION == 1 )
2929:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2930:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( xYieldPending != pdFALSE )
2931:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2932:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xSwitchRequired = pdTRUE;
2933:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2934:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
2935:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
2936:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
2937:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
2938:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2939:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* configUSE_PREEMPTION */
2940:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 54


2941:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     else
2942:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2943:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         ++xPendedTicks;
2944:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2945:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* The tick hook gets called at regular intervals, even if the
2946:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * scheduler is locked. */
2947:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_TICK_HOOK == 1 )
2948:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2949:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             vApplicationTickHook();
2950:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2951:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif
2952:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2953:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2954:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     return xSwitchRequired;
2955:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
2956:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2957:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2958:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2959:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2960:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2961:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                      TaskHookFunction_t pxHookFunction )
2962:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2963:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * xTCB;
2964:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2965:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If xTask is NULL then it is the task hook of the calling task that is
2966:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * getting set. */
2967:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xTask == NULL )
2968:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2969:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2970:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2971:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
2972:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2973:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xTCB = xTask;
2974:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2975:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2976:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2977:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * the value can be accessed from an interrupt. */
2978:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
2979:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
2980:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xTCB->pxTaskTag = pxHookFunction;
2981:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
2982:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
2983:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
2984:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2985:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2986:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
2987:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2988:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2989:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2990:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2991:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
2992:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
2993:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TaskHookFunction_t xReturn;
2994:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
2995:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
2996:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
2997:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 55


2998:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
2999:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * the value can be accessed from an interrupt. */
3000:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
3001:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3002:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = pxTCB->pxTaskTag;
3003:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3004:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
3005:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3006:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
3007:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3008:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3009:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3010:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3011:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3012:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
3013:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3014:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
3015:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3016:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
3017:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TaskHookFunction_t xReturn;
3018:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
3019:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3020:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If xTask is NULL then set the calling task's hook. */
3021:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3022:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3023:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Save the hook function in the TCB.  A critical section is required as
3024:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * the value can be accessed from an interrupt. */
3025:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
3026:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3027:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = pxTCB->pxTaskTag;
3028:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3029:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
3030:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3031:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
3032:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3033:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3034:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3035:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3036:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3037:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
3038:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3039:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
3040:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                              void * pvParameter )
3041:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3042:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * xTCB;
3043:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
3044:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3045:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If xTask is NULL then we are calling our own task hook. */
3046:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xTask == NULL )
3047:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3048:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xTCB = pxCurrentTCB;
3049:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3050:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
3051:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3052:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xTCB = xTask;
3053:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3054:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 56


3055:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xTCB->pxTaskTag != NULL )
3056:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3057:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = xTCB->pxTaskTag( pvParameter );
3058:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3059:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
3060:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3061:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = pdFAIL;
3062:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3063:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3064:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
3065:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3066:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3067:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
3068:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3069:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3070:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** void vTaskSwitchContext( void )
3071:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
3072:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
3073:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3074:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* The scheduler is currently suspended - do not allow a context
3075:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * switch. */
3076:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xYieldPending = pdTRUE;
3077:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3078:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     else
3079:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3080:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xYieldPending = pdFALSE;
3081:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         traceTASK_SWITCHED_OUT();
3082:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3083:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3084:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3085:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3086:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3087:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #else
3088:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 ulTotalRunTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
3089:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #endif
3090:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3091:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Add the amount of time the task has been running to the
3092:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * accumulated time so far.  The time the task started running was
3093:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3094:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * protection here so count values are only valid until the timer
3095:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * overflows.  The guard against negative values is to protect
3096:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * against suspect run time stat counter implementations - which
3097:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * are provided by the application, not the kernel. */
3098:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( ulTotalRunTime > ulTaskSwitchedInTime )
3099:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
3100:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3101:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
3102:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
3103:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
3104:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3105:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
3106:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3107:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ulTaskSwitchedInTime = ulTotalRunTime;
3108:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3109:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* configGENERATE_RUN_TIME_STATS */
3110:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3111:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Check for stack overflow, if configured. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 57


3112:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskCHECK_FOR_STACK_OVERFLOW();
3113:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3114:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Before the currently running task is switched out, save its errno. */
3115:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3116:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3117:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3118:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3119:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif
3120:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3121:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Select a new task to run using either the generic C or port
3122:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * optimised asm code. */
3123:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
3124:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         traceTASK_SWITCHED_IN();
3125:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3126:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* After the new task is switched in, update the global errno. */
3127:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_POSIX_ERRNO == 1 )
3128:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3129:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3130:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3131:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif
3132:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3133:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
3134:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3135:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Switch C-Runtime's TLS Block to point to the TLS
3136:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * Block specific to this task. */
3137:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
3138:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3139:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif
3140:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3141:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
3142:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3143:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3144:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList,
3145:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             const TickType_t xTicksToWait )
3146:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
3147:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( pxEventList );
3148:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3149:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3150:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3151:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3152:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Place the event list item of the TCB in the appropriate event list.
3153:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * This is placed in the list in priority order so the highest priority task
3154:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * is the first to be woken by the event.
3155:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      *
3156:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * Note: Lists are sorted in ascending order by ListItem_t.xItemValue.
3157:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * Normally, the xItemValue of a TCB's ListItem_t members is:
3158:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
3159:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * Therefore, the event list is sorted in descending priority order.
3160:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      *
3161:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * The queue that contains the event list is locked, preventing
3162:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * simultaneous access from interrupts. */
3163:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3164:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3165:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3166:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
3167:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3168:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 58


3169:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3170:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                      const TickType_t xItemValue,
3171:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                      const TickType_t xTicksToWait )
3172:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
3173:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( pxEventList );
3174:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3175:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3176:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * the event groups implementation. */
3177:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
3178:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3179:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Store the item value in the event list item.  It is safe to access the
3180:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * event list item here as interrupts won't access the event list item of a
3181:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * task that is not in the Blocked state. */
3182:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
3183:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3184:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Place the event list item of the TCB at the end of the appropriate event
3185:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * list.  It is safe to access the event list here because it is part of an
3186:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * event group implementation - and interrupts don't access event groups
3187:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * directly (instead they access them indirectly by pending function calls to
3188:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * the task level). */
3189:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3190:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3191:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3192:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
3193:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3194:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3195:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TIMERS == 1 )
3196:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3197:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3198:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                           TickType_t xTicksToWait,
3199:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                           const BaseType_t xWaitIndefinitely )
3200:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3201:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( pxEventList );
3202:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3203:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* This function should not be called by application code hence the
3204:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3205:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * designed for use by kernel code, and has special calling requirements -
3206:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * it should be called with the scheduler suspended. */
3207:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3208:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3209:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Place the event list item of the TCB in the appropriate event list.
3210:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * In this case it is assume that this is the only task that is going to
3211:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * be waiting on this event list, so the faster vListInsertEnd() function
3212:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * can be used in place of vListInsert. */
3213:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3214:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3215:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If the task should block indefinitely then set the block time to a
3216:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * value that will be recognised as an indefinite delay inside the
3217:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * prvAddCurrentTaskToDelayedList() function. */
3218:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xWaitIndefinitely != pdFALSE )
3219:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3220:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xTicksToWait = portMAX_DELAY;
3221:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3222:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3223:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3224:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3225:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 59


3226:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3227:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TIMERS */
3228:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3229:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3230:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3231:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
3232:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TCB_t * pxUnblockedTCB;
3233:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xReturn;
3234:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3235:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3236:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * called from a critical section within an ISR. */
3237:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3238:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* The event list is sorted in priority order, so the first in the list can
3239:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3240:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * the delayed list, and add it to the ready list.
3241:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      *
3242:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * If an event is for a queue that is locked then this function will never
3243:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * get called - the lock count on the queue will get modified instead.  This
3244:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * means exclusive access to the event list is guaranteed here.
3245:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      *
3246:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * This function assumes that a check has already been made to ensure that
3247:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * pxEventList is not empty. */
3248:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
3249:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( pxUnblockedTCB );
3250:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
3251:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3252:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
3253:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3254:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3255:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
3256:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3257:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3258:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3259:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3260:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * might be set to the blocked task's time out time.  If the task is
3261:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3262:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * normally left unchanged, because it is automatically reset to a new
3263:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * value when the tick count equals xNextTaskUnblockTime.  However if
3264:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * tickless idling is used it might be more important to enter sleep mode
3265:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3266:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * ensure it is updated at the earliest possible time. */
3267:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             prvResetNextTaskUnblockTime();
3268:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3269:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif
3270:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3271:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     else
3272:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3273:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* The delayed and ready lists cannot be accessed, so hold this task
3274:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * pending until the scheduler is resumed. */
3275:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3276:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3277:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3278:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3279:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3280:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Return true if the task removed from the event list has a higher
3281:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * priority than the calling task.  This allows the calling task to know if
3282:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * it should force a context switch now. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 60


3283:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xReturn = pdTRUE;
3284:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3285:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Mark that a yield is pending in case the user is not using the
3286:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3287:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xYieldPending = pdTRUE;
3288:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3289:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     else
3290:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3291:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xReturn = pdFALSE;
3292:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3293:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3294:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     return xReturn;
3295:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
3296:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3297:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3298:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3299:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                         const TickType_t xItemValue )
3300:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
3301:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TCB_t * pxUnblockedTCB;
3302:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3303:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3304:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * the event flags implementation. */
3305:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
3306:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3307:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Store the new item value in the event list. */
3308:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3309:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3310:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Remove the event list form the event flag.  Interrupts do not access
3311:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * event flags. */
3312:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
3313:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( pxUnblockedTCB );
3314:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( pxEventListItem );
3315:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3316:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3317:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3318:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3319:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * might be set to the blocked task's time out time.  If the task is
3320:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3321:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * normally left unchanged, because it is automatically reset to a new
3322:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * value when the tick count equals xNextTaskUnblockTime.  However if
3323:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * tickless idling is used it might be more important to enter sleep mode
3324:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * at the earliest possible time - so reset xNextTaskUnblockTime here to
3325:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * ensure it is updated at the earliest possible time. */
3326:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         prvResetNextTaskUnblockTime();
3327:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3328:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
3329:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3330:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Remove the task from the delayed list and add it to the ready list.  The
3331:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * scheduler is suspended so interrupts will not be accessing the ready
3332:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * lists. */
3333:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
3334:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
3335:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3336:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3337:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3338:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* The unblocked task has a priority above that of the calling task, so
3339:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * a context switch is required.  This function is called with the
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 61


3340:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * scheduler suspended so xYieldPending is set so the context switch
3341:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3342:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xYieldPending = pdTRUE;
3343:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3344:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
3345:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3346:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3347:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3348:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
3349:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTimeOut );
3350:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     taskENTER_CRITICAL();
3351:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3352:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
3353:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
3354:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3355:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     taskEXIT_CRITICAL();
3356:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
3357:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3358:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3359:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3360:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
3361:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* For internal use only as it does not use a critical section. */
3362:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
3363:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
3364:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
3365:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3366:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3367:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3368:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                  TickType_t * const pxTicksToWait )
3369:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
3370:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xReturn;
3371:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3372:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTimeOut );
3373:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTicksToWait );
3374:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3375:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     taskENTER_CRITICAL();
3376:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3377:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Minor optimisation.  The tick count cannot change in this block. */
3378:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         const TickType_t xConstTickCount = xTickCount;
3379:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3380:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3381:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3382:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3383:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
3384:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* The delay was aborted, which is not the same as a time out,
3385:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * but has the same result. */
3386:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
3387:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
3388:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
3389:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
3390:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif
3391:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3392:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3393:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( *pxTicksToWait == portMAX_DELAY )
3394:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
3395:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3396:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * specified is the maximum block time then the task should block
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 62


3397:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * indefinitely, and therefore never time out. */
3398:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = pdFALSE;
3399:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
3400:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
3401:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif
3402:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3403:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
3404:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3405:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* The tick count is greater than the time at which
3406:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * vTaskSetTimeout() was called, but has also overflowed since
3407:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3408:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * around and gone past again. This passed since vTaskSetTimeout()
3409:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * was called. */
3410:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = pdTRUE;
3411:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3412:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3413:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
3414:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3415:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3416:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             *pxTicksToWait -= xElapsedTime;
3417:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
3418:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = pdFALSE;
3419:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3420:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
3421:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3422:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
3423:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = pdTRUE;
3424:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3425:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3426:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     taskEXIT_CRITICAL();
3427:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3428:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     return xReturn;
3429:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
3430:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3431:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3432:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** void vTaskMissedYield( void )
3433:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
3434:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     xYieldPending = pdTRUE;
3435:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
3436:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3437:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3438:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3439:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3440:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3441:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3442:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxReturn;
3443:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
3444:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3445:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xTask != NULL )
3446:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3447:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB = xTask;
3448:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxTaskNumber;
3449:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3450:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
3451:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3452:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             uxReturn = 0U;
3453:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 63


3454:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3455:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return uxReturn;
3456:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3457:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3458:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3459:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3460:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3461:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3462:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3463:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3464:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                              const UBaseType_t uxHandle )
3465:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3466:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
3467:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3468:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xTask != NULL )
3469:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3470:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB = xTask;
3471:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB->uxTaskNumber = uxHandle;
3472:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3473:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3474:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3475:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3476:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3477:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*
3478:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * -----------------------------------------------------------
3479:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * The Idle task.
3480:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * ----------------------------------------------------------
3481:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  *
3482:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3483:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3484:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  *
3485:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * void prvIdleTask( void *pvParameters );
3486:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  *
3487:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  */
3488:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3489:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3490:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
3491:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Stop warnings. */
3492:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     ( void ) pvParameters;
3493:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3494:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3495:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * SCHEDULER IS STARTED. **/
3496:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3497:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* In case a task that has a secure context deletes itself, in which case
3498:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * the idle task is responsible for deleting the task's secure context, if
3499:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * any. */
3500:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3501:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3502:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     for( ; ; )
3503:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3504:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* See if any tasks have deleted themselves - if so then the idle task
3505:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * is responsible for freeing the deleted task's TCB and stack. */
3506:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         prvCheckTasksWaitingTermination();
3507:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3508:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_PREEMPTION == 0 )
3509:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3510:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* If we are not using preemption we keep forcing a task switch to
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 64


3511:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * see if any other task has become available.  If we are using
3512:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * preemption we don't need to do this as any task becoming available
3513:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * will automatically get the processor anyway. */
3514:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             taskYIELD();
3515:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3516:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* configUSE_PREEMPTION */
3517:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3518:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3519:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3520:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* When using preemption tasks of equal priority will be
3521:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * timesliced.  If a task that is sharing the idle priority is ready
3522:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * to run then the idle task should yield before the end of the
3523:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * timeslice.
3524:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              *
3525:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * A critical region is not required here as we are just reading from
3526:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * the list, and an occasional incorrect value will not matter.  If
3527:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * the ready list at the idle priority contains more than one task
3528:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * then a task other than the idle task is ready to execute. */
3529:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType
3530:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
3531:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 taskYIELD();
3532:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
3533:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
3534:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
3535:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3536:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
3537:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3538:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3539:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3540:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_IDLE_HOOK == 1 )
3541:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3542:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Call the user defined function from within the idle task. */
3543:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             vApplicationIdleHook();
3544:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3545:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* configUSE_IDLE_HOOK */
3546:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3547:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* This conditional compilation should use inequality to 0, not equality
3548:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3549:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * user defined low power mode  implementations require
3550:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3551:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3552:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3553:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             TickType_t xExpectedIdleTime;
3554:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3555:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* It is not desirable to suspend then resume the scheduler on
3556:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * each iteration of the idle task.  Therefore, a preliminary
3557:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * test of the expected idle time is performed without the
3558:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * scheduler suspended.  The result here is not necessarily
3559:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * valid. */
3560:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xExpectedIdleTime = prvGetExpectedIdleTime();
3561:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3562:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3563:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
3564:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 vTaskSuspendAll();
3565:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
3566:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Now the scheduler is suspended, the expected idle
3567:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * time can be sampled again, and this time its value can
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 65


3568:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * be used. */
3569:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     configASSERT( xNextTaskUnblockTime >= xTickCount );
3570:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     xExpectedIdleTime = prvGetExpectedIdleTime();
3571:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3572:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Define the following macro to set xExpectedIdleTime to 0
3573:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * if the application does not want
3574:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3575:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3576:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3577:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3578:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
3579:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         traceLOW_POWER_IDLE_BEGIN();
3580:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3581:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         traceLOW_POWER_IDLE_END();
3582:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
3583:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
3584:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
3585:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
3586:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
3587:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
3588:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 ( void ) xTaskResumeAll();
3589:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
3590:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
3591:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
3592:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
3593:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
3594:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3595:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* configUSE_TICKLESS_IDLE */
3596:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3597:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
3598:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3599:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3600:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
3601:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3602:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3603:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3604:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3605:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* The idle task exists in addition to the application tasks. */
3606:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             const UBaseType_t uxNonApplicationTasks = 1;
3607:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
3608:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3609:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         eSleepModeStatus eReturn = eStandardSleep;
3610:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3611:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* This function must be called from a critical section. */
3612:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3613:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3614:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3615:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* A task was made ready while the scheduler was suspended. */
3616:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             eReturn = eAbortSleep;
3617:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3618:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else if( xYieldPending != pdFALSE )
3619:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3620:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* A yield was pended while the scheduler was suspended. */
3621:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             eReturn = eAbortSleep;
3622:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3623:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else if( xPendedTicks != 0 )
3624:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 66


3625:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* A tick interrupt has already occurred but was held pending
3626:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * because the scheduler is suspended. */
3627:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             eReturn = eAbortSleep;
3628:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3629:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3630:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( INCLUDE_vTaskSuspend == 1 )
3631:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - u
3632:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
3633:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* If all the tasks are in the suspended list (which might mean they
3634:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * have an infinite block time rather than actually being suspended)
3635:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * then it is safe to turn all clocks off and just wait for external
3636:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * interrupts. */
3637:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 eReturn = eNoTasksWaitingTimeout;
3638:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
3639:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* INCLUDE_vTaskSuspend */
3640:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
3641:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3642:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3643:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3644:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3645:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return eReturn;
3646:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3647:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3648:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3649:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3650:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3651:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3652:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3653:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3654:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                             BaseType_t xIndex,
3655:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                             void * pvValue )
3656:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3657:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
3658:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3659:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( ( xIndex >= 0 ) &&
3660:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
3661:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3662:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
3663:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             configASSERT( pxTCB != NULL );
3664:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3665:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3666:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3667:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3668:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3669:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3670:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3671:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3672:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3673:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3674:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                                BaseType_t xIndex )
3675:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3676:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         void * pvReturn = NULL;
3677:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
3678:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3679:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( ( xIndex >= 0 ) &&
3680:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS ) )
3681:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 67


3682:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3683:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3684:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3685:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
3686:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3687:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pvReturn = NULL;
3688:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3689:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3690:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return pvReturn;
3691:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3692:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3693:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3694:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3695:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3696:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3697:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3698:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3699:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                   const MemoryRegion_t * const xRegions )
3700:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3701:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
3702:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3703:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If null is passed in here then we are modifying the MPU settings of
3704:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * the calling task. */
3705:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3706:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3707:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3708:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3709:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3710:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3711:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3712:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3713:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** static void prvInitialiseTaskLists( void )
3714:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
3715:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxPriority;
3716:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3717:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
3718:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3719:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3720:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3721:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3722:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     vListInitialise( &xDelayedTaskList1 );
3723:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
3724:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     vListInitialise( &xPendingReadyList );
3725:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3726:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3727:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3728:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         vListInitialise( &xTasksWaitingTermination );
3729:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3730:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3731:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3732:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
3733:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3734:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         vListInitialise( &xSuspendedTaskList );
3735:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3736:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif /* INCLUDE_vTaskSuspend */
3737:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3738:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 68


3739:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * using list2. */
3740:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     pxDelayedTaskList = &xDelayedTaskList1;
3741:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
3742:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
3743:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3744:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3745:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3746:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
3747:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3748:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3749:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( INCLUDE_vTaskDelete == 1 )
3750:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3751:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
3752:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3753:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3754:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * being called too often in the idle task. */
3755:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3756:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3757:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             taskENTER_CRITICAL();
3758:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
3759:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079
3760:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3761:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 --uxCurrentNumberOfTasks;
3762:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 --uxDeletedTasksWaitingCleanUp;
3763:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
3764:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             taskEXIT_CRITICAL();
3765:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3766:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             prvDeleteTCB( pxTCB );
3767:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3768:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3769:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif /* INCLUDE_vTaskDelete */
3770:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
3771:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3772:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3773:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3774:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3775:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskGetInfo( TaskHandle_t xTask,
3776:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                        TaskStatus_t * pxTaskStatus,
3777:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                        BaseType_t xGetFreeStackSpace,
3778:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                        eTaskState eState )
3779:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3780:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
3781:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3782:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* xTask is NULL then get the state of the calling task. */
3783:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3784:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3785:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3786:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
3787:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3788:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
3789:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
3790:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->pxTopOfStack = pxTCB->pxTopOfStack;
3791:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
3792:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif
3793:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3794:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3795:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_MUTEXES == 1 )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 69


3796:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3797:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3798:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3799:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #else
3800:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3801:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->uxBasePriority = 0;
3802:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3803:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif
3804:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3805:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3806:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3807:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3808:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3809:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #else
3810:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3811:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
3812:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3813:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif
3814:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3815:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Obtaining the task state is a little fiddly, so is only done if the
3816:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * value of eState passed into this function is eInvalid - otherwise the
3817:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * state is just set to whatever is passed in. */
3818:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( eState != eInvalid )
3819:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3820:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxTCB == pxCurrentTCB )
3821:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
3822:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxTaskStatus->eCurrentState = eRunning;
3823:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
3824:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
3825:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
3826:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxTaskStatus->eCurrentState = eState;
3827:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3828:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3829:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
3830:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* If the task is in the suspended list then there is a
3831:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      *  chance it is actually just blocked indefinitely - so really
3832:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      *  it should be reported as being in the Blocked state. */
3833:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( eState == eSuspended )
3834:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
3835:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         vTaskSuspendAll();
3836:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
3837:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3838:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             {
3839:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                 pxTaskStatus->eCurrentState = eBlocked;
3840:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             }
3841:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
3842:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         ( void ) xTaskResumeAll();
3843:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
3844:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
3845:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #endif /* INCLUDE_vTaskSuspend */
3846:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
3847:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3848:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
3849:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3850:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3851:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3852:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 70


3853:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3854:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * parameter is provided to allow it to be skipped. */
3855:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xGetFreeStackSpace != pdFALSE )
3856:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3857:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #if ( portSTACK_GROWTH > 0 )
3858:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
3859:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
3860:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
3861:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #else
3862:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
3863:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTC
3864:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
3865:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             #endif
3866:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3867:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
3868:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3869:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTaskStatus->usStackHighWaterMark = 0;
3870:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3871:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3872:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3873:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3874:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3875:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3876:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3877:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3878:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3879:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                                      List_t * pxList,
3880:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                                      eTaskState eState )
3881:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3882:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configLIST_VOLATILE TCB_t * pxNextTCB;
3883:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configLIST_VOLATILE TCB_t * pxFirstTCB;
3884:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxTask = 0;
3885:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3886:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3887:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3888:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
3889:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3890:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Populate an TaskStatus_t structure within the
3891:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * pxTaskStatusArray array for each task that is referenced from
3892:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3893:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * meaning of each TaskStatus_t structure member. */
3894:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             do
3895:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
3896:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
3897:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
3898:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 uxTask++;
3899:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             } while( pxNextTCB != pxFirstTCB );
3900:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3901:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
3902:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3903:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
3904:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3905:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3906:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return uxTask;
3907:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3908:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3909:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 71


3910:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3911:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3912:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3913:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3914:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3915:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
  81              		.loc 1 3915 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  86              	.LVL8:
3916:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint32_t ulCount = 0U;
  87              		.loc 1 3916 0
  88 0000 0023     		movs	r3, #0
3917:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3918:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  89              		.loc 1 3918 0
  90 0002 01E0     		b	.L9
  91              	.LVL9:
  92              	.L10:
3919:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3920:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pucStackByte -= portSTACK_GROWTH;
  93              		.loc 1 3920 0
  94 0004 0130     		adds	r0, r0, #1
  95              	.LVL10:
3921:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ulCount++;
  96              		.loc 1 3921 0
  97 0006 0133     		adds	r3, r3, #1
  98              	.LVL11:
  99              	.L9:
3918:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 100              		.loc 1 3918 0
 101 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 102 000a A52A     		cmp	r2, #165
 103 000c FAD0     		beq	.L10
 104              	.LVL12:
3922:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3923:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3924:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
3925:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3926:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
3927:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 105              		.loc 1 3927 0
 106 000e C3F38F00 		ubfx	r0, r3, #2, #16
 107              	.LVL13:
 108 0012 7047     		bx	lr
 109              		.cfi_endproc
 110              	.LFE104:
 111              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 112              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 113              		.align	2
 114              		.thumb
 115              		.thumb_func
 116              		.type	prvResetNextTaskUnblockTime, %function
 117              	prvResetNextTaskUnblockTime:
 118              	.LFB107:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 72


3928:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3929:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3930:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3931:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3932:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3933:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3934:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3935:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3936:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * user to determine the return type.  It gets around the problem of the value
3937:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * overflowing on 8-bit types without breaking backward compatibility for
3938:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****  * applications that expect an 8-bit return type. */
3939:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3940:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3941:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
3942:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint8_t * pucEndOfStack;
3943:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configSTACK_DEPTH_TYPE uxReturn;
3944:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3945:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3946:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3947:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * allows the user to determine the return type.  It gets around the
3948:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * problem of the value overflowing on 8-bit types without breaking
3949:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * backward compatibility for applications that expect an 8-bit return
3950:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * type. */
3951:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3952:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3953:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3954:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if portSTACK_GROWTH < 0
3955:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3956:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3957:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3958:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #else
3959:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3960:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3961:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3962:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif
3963:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3964:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3965:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3966:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return uxReturn;
3967:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3968:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3969:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3970:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3971:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3972:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3973:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3974:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3975:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
3976:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
3977:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint8_t * pucEndOfStack;
3978:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxReturn;
3979:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3980:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
3981:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3982:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if portSTACK_GROWTH < 0
3983:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3984:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 73


3985:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3986:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #else
3987:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
3988:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3989:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
3990:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif
3991:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3992:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3993:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3994:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return uxReturn;
3995:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
3996:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
3997:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3998:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
3999:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4000:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
4001:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4002:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     static void prvDeleteTCB( TCB_t * pxTCB )
4003:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4004:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
4005:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * above the vPortFree() calls.  The call is also used by ports/demos that
4006:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * want to allocate and clean RAM statically. */
4007:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portCLEAN_UP_TCB( pxTCB );
4008:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4009:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 )
4010:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4011:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Free up the memory allocated for the task's TLS Block. */
4012:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
4013:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4014:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif
4015:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4016:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
4017:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4018:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* The task can only have been allocated dynamically - free both
4019:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * the stack and TCB. */
4020:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             vPortFreeStack( pxTCB->pxStack );
4021:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             vPortFree( pxTCB );
4022:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4023:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
4024:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4025:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* The task could have been allocated statically or dynamically, so
4026:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * check what was statically allocated before trying to free the
4027:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * memory. */
4028:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
4029:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4030:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Both the stack and TCB were allocated dynamically, so both
4031:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * must be freed. */
4032:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 vPortFreeStack( pxTCB->pxStack );
4033:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 vPortFree( pxTCB );
4034:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4035:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
4036:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4037:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Only the stack was statically allocated, so the TCB is the
4038:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * only memory that must be freed. */
4039:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 vPortFree( pxTCB );
4040:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4041:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 74


4042:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4043:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Neither the stack nor the TCB were allocated dynamically, so
4044:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * nothing needs to be freed. */
4045:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB
4046:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4047:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4048:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4049:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
4050:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4051:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4052:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* INCLUDE_vTaskDelete */
4053:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4054:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4055:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** static void prvResetNextTaskUnblockTime( void )
4056:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
 119              		.loc 1 4056 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              		@ link register save eliminated.
4057:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 124              		.loc 1 4057 0
 125 0000 074B     		ldr	r3, .L14
 126 0002 9B6A     		ldr	r3, [r3, #40]
 127 0004 1B68     		ldr	r3, [r3]
 128 0006 23B9     		cbnz	r3, .L12
4058:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4059:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
4060:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * the maximum possible value so it is  extremely unlikely that the
4061:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
4062:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * there is an item in the delayed list. */
4063:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xNextTaskUnblockTime = portMAX_DELAY;
 129              		.loc 1 4063 0
 130 0008 4FF0FF32 		mov	r2, #-1
 131 000c 044B     		ldr	r3, .L14
 132 000e DA62     		str	r2, [r3, #44]
 133 0010 7047     		bx	lr
 134              	.L12:
4064:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4065:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     else
4066:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4067:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* The new current delayed list is not empty, get the value of
4068:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * the item at the head of the delayed list.  This is the time at
4069:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * which the task at the head of the delayed list should be removed
4070:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * from the Blocked state. */
4071:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 135              		.loc 1 4071 0
 136 0012 034B     		ldr	r3, .L14
 137 0014 9A6A     		ldr	r2, [r3, #40]
 138 0016 D268     		ldr	r2, [r2, #12]
 139 0018 1268     		ldr	r2, [r2]
 140 001a DA62     		str	r2, [r3, #44]
 141 001c 7047     		bx	lr
 142              	.L15:
 143 001e 00BF     		.align	2
 144              	.L14:
 145 0020 00000000 		.word	.LANCHOR0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 75


 146              		.cfi_endproc
 147              	.LFE107:
 148              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 149              		.section	.text.prvDeleteTCB,"ax",%progbits
 150              		.align	2
 151              		.thumb
 152              		.thumb_func
 153              		.type	prvDeleteTCB, %function
 154              	prvDeleteTCB:
 155              	.LFB106:
4003:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* This call is required specifically for the TriCore port.  It must be
 156              		.loc 1 4003 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160              	.LVL14:
 161 0000 10B5     		push	{r4, lr}
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 4, -8
 164              		.cfi_offset 14, -4
 165 0002 0446     		mov	r4, r0
4020:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             vPortFree( pxTCB );
 166              		.loc 1 4020 0
 167 0004 006B     		ldr	r0, [r0, #48]
 168              	.LVL15:
 169 0006 FFF7FEFF 		bl	vPortFree
 170              	.LVL16:
4021:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 171              		.loc 1 4021 0
 172 000a 2046     		mov	r0, r4
 173 000c FFF7FEFF 		bl	vPortFree
 174              	.LVL17:
 175 0010 10BD     		pop	{r4, pc}
 176              		.cfi_endproc
 177              	.LFE106:
 178              		.size	prvDeleteTCB, .-prvDeleteTCB
 179 0012 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 180              		.align	2
 181              		.thumb
 182              		.thumb_func
 183              		.type	prvInitialiseNewTask, %function
 184              	prvInitialiseNewTask:
 185              	.LFB69:
 828:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     StackType_t * pxTopOfStack;
 186              		.loc 1 828 0
 187              		.cfi_startproc
 188              		@ args = 16, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              	.LVL18:
 191 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 192              		.cfi_def_cfa_offset 32
 193              		.cfi_offset 4, -32
 194              		.cfi_offset 5, -28
 195              		.cfi_offset 6, -24
 196              		.cfi_offset 7, -20
 197              		.cfi_offset 8, -16
 198              		.cfi_offset 9, -12
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 76


 199              		.cfi_offset 10, -8
 200              		.cfi_offset 14, -4
 201 0004 8146     		mov	r9, r0
 202 0006 0D46     		mov	r5, r1
 203 0008 1746     		mov	r7, r2
 204 000a 9A46     		mov	r10, r3
 205 000c 089E     		ldr	r6, [sp, #32]
 206 000e DDF82480 		ldr	r8, [sp, #36]
 207 0012 0A9C     		ldr	r4, [sp, #40]
 851:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 208              		.loc 1 851 0
 209 0014 9200     		lsls	r2, r2, #2
 210              	.LVL19:
 211 0016 A521     		movs	r1, #165
 212              	.LVL20:
 213 0018 206B     		ldr	r0, [r4, #48]
 214              	.LVL21:
 215 001a FFF7FEFF 		bl	memset
 216              	.LVL22:
 861:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( port
 217              		.loc 1 861 0
 218 001e 236B     		ldr	r3, [r4, #48]
 219 0020 07F18042 		add	r2, r7, #1073741824
 220 0024 013A     		subs	r2, r2, #1
 221 0026 03EB8207 		add	r7, r3, r2, lsl #2
 222              	.LVL23:
 862:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 223              		.loc 1 862 0
 224 002a 27F00707 		bic	r7, r7, #7
 225              	.LVL24:
 889:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 226              		.loc 1 889 0
 227 002e 45B9     		cbnz	r5, .L25
 228 0030 0DE0     		b	.L20
 229              	.LVL25:
 230              	.L22:
 893:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 231              		.loc 1 893 0
 232 0032 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 233 0034 E218     		adds	r2, r4, r3
 234 0036 82F83410 		strb	r1, [r2, #52]
 898:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 235              		.loc 1 898 0
 236 003a EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 237 003c 22B1     		cbz	r2, .L21
 891:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 238              		.loc 1 891 0 discriminator 2
 239 003e 0133     		adds	r3, r3, #1
 240              	.LVL26:
 241 0040 00E0     		b	.L19
 242              	.LVL27:
 243              	.L25:
 244 0042 0023     		movs	r3, #0
 245              	.L19:
 246              	.LVL28:
 891:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 247              		.loc 1 891 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 77


 248 0044 0B2B     		cmp	r3, #11
 249 0046 F4D9     		bls	.L22
 250              	.L21:
 910:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 251              		.loc 1 910 0 is_stmt 1
 252 0048 0023     		movs	r3, #0
 253              	.LVL29:
 254 004a 84F83F30 		strb	r3, [r4, #63]
 255              	.L20:
 920:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 256              		.loc 1 920 0
 257 004e 042E     		cmp	r6, #4
 258 0050 00D9     		bls	.L23
 922:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 259              		.loc 1 922 0
 260 0052 0426     		movs	r6, #4
 261              	.L23:
 262              	.LVL30:
 929:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( configUSE_MUTEXES == 1 )
 263              		.loc 1 929 0
 264 0054 E662     		str	r6, [r4, #44]
 932:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 265              		.loc 1 932 0
 266 0056 2664     		str	r6, [r4, #64]
 936:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 267              		.loc 1 936 0
 268 0058 201D     		adds	r0, r4, #4
 269 005a FFF7FEFF 		bl	vListInitialiseItem
 270              	.LVL31:
 937:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 271              		.loc 1 937 0
 272 005e 04F11800 		add	r0, r4, #24
 273 0062 FFF7FEFF 		bl	vListInitialiseItem
 274              	.LVL32:
 941:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 275              		.loc 1 941 0
 276 0066 2461     		str	r4, [r4, #16]
 944:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 277              		.loc 1 944 0
 278 0068 C6F10506 		rsb	r6, r6, #5
 279              	.LVL33:
 280 006c A661     		str	r6, [r4, #24]
 945:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 281              		.loc 1 945 0
 282 006e 6462     		str	r4, [r4, #36]
1011:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 283              		.loc 1 1011 0
 284 0070 5246     		mov	r2, r10
 285 0072 4946     		mov	r1, r9
 286 0074 3846     		mov	r0, r7
 287 0076 FFF7FEFF 		bl	pxPortInitialiseStack
 288              	.LVL34:
 289 007a 2060     		str	r0, [r4]
1017:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 290              		.loc 1 1017 0
 291 007c B8F1000F 		cmp	r8, #0
 292 0080 01D0     		beq	.L18
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 78


1021:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 293              		.loc 1 1021 0
 294 0082 C8F80040 		str	r4, [r8]
 295              	.L18:
 296 0086 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 297              		.cfi_endproc
 298              	.LFE69:
 299              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 300 008a 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 301              		.align	2
 302              		.thumb
 303              		.thumb_func
 304              		.type	prvInitialiseTaskLists, %function
 305              	prvInitialiseTaskLists:
 306              	.LFB102:
3714:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     UBaseType_t uxPriority;
 307              		.loc 1 3714 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311 0000 70B5     		push	{r4, r5, r6, lr}
 312              		.cfi_def_cfa_offset 16
 313              		.cfi_offset 4, -16
 314              		.cfi_offset 5, -12
 315              		.cfi_offset 6, -8
 316              		.cfi_offset 14, -4
 317              	.LVL35:
3717:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 318              		.loc 1 3717 0
 319 0002 0024     		movs	r4, #0
 320 0004 07E0     		b	.L29
 321              	.LVL36:
 322              	.L30:
3719:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 323              		.loc 1 3719 0 discriminator 3
 324 0006 04EB8402 		add	r2, r4, r4, lsl #2
 325 000a 9300     		lsls	r3, r2, #2
 326 000c 1048     		ldr	r0, .L32
 327 000e 1844     		add	r0, r0, r3
 328 0010 FFF7FEFF 		bl	vListInitialise
 329              	.LVL37:
3717:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 330              		.loc 1 3717 0 discriminator 3
 331 0014 0134     		adds	r4, r4, #1
 332              	.LVL38:
 333              	.L29:
3717:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 334              		.loc 1 3717 0 is_stmt 0 discriminator 1
 335 0016 042C     		cmp	r4, #4
 336 0018 F5D9     		bls	.L30
3722:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     vListInitialise( &xDelayedTaskList2 );
 337              		.loc 1 3722 0 is_stmt 1
 338 001a 0E4C     		ldr	r4, .L32+4
 339              	.LVL39:
 340 001c 04F19406 		add	r6, r4, #148
 341 0020 3046     		mov	r0, r6
 342 0022 FFF7FEFF 		bl	vListInitialise
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 79


 343              	.LVL40:
3723:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     vListInitialise( &xPendingReadyList );
 344              		.loc 1 3723 0
 345 0026 04F1A805 		add	r5, r4, #168
 346 002a 2846     		mov	r0, r5
 347 002c FFF7FEFF 		bl	vListInitialise
 348              	.LVL41:
3724:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 349              		.loc 1 3724 0
 350 0030 04F11400 		add	r0, r4, #20
 351 0034 FFF7FEFF 		bl	vListInitialise
 352              	.LVL42:
3728:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 353              		.loc 1 3728 0
 354 0038 04F1BC00 		add	r0, r4, #188
 355 003c FFF7FEFF 		bl	vListInitialise
 356              	.LVL43:
3734:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 357              		.loc 1 3734 0
 358 0040 2046     		mov	r0, r4
 359 0042 FFF7FEFF 		bl	vListInitialise
 360              	.LVL44:
3740:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 361              		.loc 1 3740 0
 362 0046 A662     		str	r6, [r4, #40]
3741:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
 363              		.loc 1 3741 0
 364 0048 C4F8D050 		str	r5, [r4, #208]
 365 004c 70BD     		pop	{r4, r5, r6, pc}
 366              	.L33:
 367 004e 00BF     		.align	2
 368              	.L32:
 369 0050 30000000 		.word	.LANCHOR0+48
 370 0054 00000000 		.word	.LANCHOR0
 371              		.cfi_endproc
 372              	.LFE102:
 373              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 374              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 375              		.align	2
 376              		.thumb
 377              		.thumb_func
 378              		.type	prvAddNewTaskToReadyList, %function
 379              	prvAddNewTaskToReadyList:
 380              	.LFB70:
1031:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Ensure interrupts don't access the task lists while the lists are being
 381              		.loc 1 1031 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385              	.LVL45:
 386 0000 70B5     		push	{r4, r5, r6, lr}
 387              		.cfi_def_cfa_offset 16
 388              		.cfi_offset 4, -16
 389              		.cfi_offset 5, -12
 390              		.cfi_offset 6, -8
 391              		.cfi_offset 14, -4
 392 0002 0546     		mov	r5, r0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 80


1034:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 393              		.loc 1 1034 0
 394 0004 FFF7FEFF 		bl	vPortEnterCritical
 395              	.LVL46:
1036:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 396              		.loc 1 1036 0
 397 0008 304B     		ldr	r3, .L39
 398 000a D3F8D420 		ldr	r2, [r3, #212]
 399 000e 0132     		adds	r2, r2, #1
 400 0010 C3F8D420 		str	r2, [r3, #212]
1038:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 401              		.loc 1 1038 0
 402 0014 D3F8D830 		ldr	r3, [r3, #216]
 403 0018 4BB9     		cbnz	r3, .L35
1042:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 404              		.loc 1 1042 0
 405 001a 2C4B     		ldr	r3, .L39
 406 001c C3F8D850 		str	r5, [r3, #216]
1044:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 407              		.loc 1 1044 0
 408 0020 D3F8D430 		ldr	r3, [r3, #212]
 409 0024 012B     		cmp	r3, #1
 410 0026 10D1     		bne	.L36
1049:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 411              		.loc 1 1049 0
 412 0028 FFF7FEFF 		bl	prvInitialiseTaskLists
 413              	.LVL47:
 414 002c 0DE0     		b	.L36
 415              	.L35:
1061:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 416              		.loc 1 1061 0
 417 002e 274B     		ldr	r3, .L39
 418 0030 D3F8DC30 		ldr	r3, [r3, #220]
 419 0034 4BB9     		cbnz	r3, .L36
1063:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 420              		.loc 1 1063 0
 421 0036 254B     		ldr	r3, .L39
 422 0038 D3F8D830 		ldr	r3, [r3, #216]
 423 003c DA6A     		ldr	r2, [r3, #44]
 424 003e EB6A     		ldr	r3, [r5, #44]
 425 0040 9A42     		cmp	r2, r3
 426 0042 02D8     		bhi	.L36
1065:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 427              		.loc 1 1065 0
 428 0044 214B     		ldr	r3, .L39
 429 0046 C3F8D850 		str	r5, [r3, #216]
 430              	.L36:
1078:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 431              		.loc 1 1078 0
 432 004a 204C     		ldr	r4, .L39
 433 004c D4F8E030 		ldr	r3, [r4, #224]
 434 0050 0133     		adds	r3, r3, #1
 435 0052 C4F8E030 		str	r3, [r4, #224]
1088:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 436              		.loc 1 1088 0
 437 0056 EB6A     		ldr	r3, [r5, #44]
 438 0058 0122     		movs	r2, #1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 81


 439 005a 02FA03F1 		lsl	r1, r2, r3
 440 005e D4F8E420 		ldr	r2, [r4, #228]
 441 0062 0A43     		orrs	r2, r2, r1
 442 0064 C4F8E420 		str	r2, [r4, #228]
 443              	.LBB34:
 444 0068 03EB8303 		add	r3, r3, r3, lsl #2
 445 006c 9A00     		lsls	r2, r3, #2
 446 006e 2244     		add	r2, r2, r4
 447 0070 536B     		ldr	r3, [r2, #52]
 448              	.LVL48:
 449 0072 AB60     		str	r3, [r5, #8]
 450 0074 9A68     		ldr	r2, [r3, #8]
 451 0076 EA60     		str	r2, [r5, #12]
 452 0078 9968     		ldr	r1, [r3, #8]
 453 007a 2A1D     		adds	r2, r5, #4
 454 007c 4A60     		str	r2, [r1, #4]
 455 007e 9A60     		str	r2, [r3, #8]
 456 0080 EB6A     		ldr	r3, [r5, #44]
 457              	.LVL49:
 458 0082 04F13006 		add	r6, r4, #48
 459 0086 9800     		lsls	r0, r3, #2
 460 0088 C118     		adds	r1, r0, r3
 461 008a 8A00     		lsls	r2, r1, #2
 462 008c 3244     		add	r2, r2, r6
 463 008e 6A61     		str	r2, [r5, #20]
 464 0090 C118     		adds	r1, r0, r3
 465 0092 8A00     		lsls	r2, r1, #2
 466 0094 2244     		add	r2, r2, r4
 467 0096 116B     		ldr	r1, [r2, #48]
 468 0098 0131     		adds	r1, r1, #1
 469 009a 0344     		add	r3, r3, r0
 470 009c 9A00     		lsls	r2, r3, #2
 471 009e 2244     		add	r2, r2, r4
 472 00a0 1163     		str	r1, [r2, #48]
 473              	.LBE34:
1092:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 474              		.loc 1 1092 0
 475 00a2 FFF7FEFF 		bl	vPortExitCritical
 476              	.LVL50:
1094:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 477              		.loc 1 1094 0
 478 00a6 D4F8DC30 		ldr	r3, [r4, #220]
 479 00aa 6BB1     		cbz	r3, .L34
1098:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 480              		.loc 1 1098 0
 481 00ac D4F8D830 		ldr	r3, [r4, #216]
 482 00b0 DA6A     		ldr	r2, [r3, #44]
 483 00b2 EB6A     		ldr	r3, [r5, #44]
 484 00b4 9A42     		cmp	r2, r3
 485 00b6 07D2     		bcs	.L34
1100:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 486              		.loc 1 1100 0
 487 00b8 4FF08052 		mov	r2, #268435456
 488 00bc 044B     		ldr	r3, .L39+4
 489 00be 1A60     		str	r2, [r3]
 490              		.syntax unified
 491              	@ 1100 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 82


 492 00c0 BFF34F8F 		dsb
 493              	@ 0 "" 2
 494              	@ 1100 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 495 00c4 BFF36F8F 		isb
 496              	@ 0 "" 2
 497              		.thumb
 498              		.syntax unified
 499              	.L34:
 500 00c8 70BD     		pop	{r4, r5, r6, pc}
 501              	.LVL51:
 502              	.L40:
 503 00ca 00BF     		.align	2
 504              	.L39:
 505 00cc 00000000 		.word	.LANCHOR0
 506 00d0 04ED00E0 		.word	-536810236
 507              		.cfi_endproc
 508              	.LFE70:
 509              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 510              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 511              		.align	2
 512              		.thumb
 513              		.thumb_func
 514              		.type	prvCheckTasksWaitingTermination, %function
 515              	prvCheckTasksWaitingTermination:
 516              	.LFB103:
3746:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 517              		.loc 1 3746 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 0
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521 0000 38B5     		push	{r3, r4, r5, lr}
 522              		.cfi_def_cfa_offset 16
 523              		.cfi_offset 3, -16
 524              		.cfi_offset 4, -12
 525              		.cfi_offset 5, -8
 526              		.cfi_offset 14, -4
 527              	.LBB35:
3755:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 528              		.loc 1 3755 0
 529 0002 17E0     		b	.L42
 530              	.L43:
3757:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 531              		.loc 1 3757 0
 532 0004 FFF7FEFF 		bl	vPortEnterCritical
 533              	.LVL52:
3759:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 534              		.loc 1 3759 0
 535 0008 0D4C     		ldr	r4, .L45
 536 000a D4F8C830 		ldr	r3, [r4, #200]
 537 000e DD68     		ldr	r5, [r3, #12]
 538              	.LVL53:
3760:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 --uxCurrentNumberOfTasks;
 539              		.loc 1 3760 0
 540 0010 281D     		adds	r0, r5, #4
 541 0012 FFF7FEFF 		bl	uxListRemove
 542              	.LVL54:
3761:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 --uxDeletedTasksWaitingCleanUp;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 83


 543              		.loc 1 3761 0
 544 0016 D4F8D430 		ldr	r3, [r4, #212]
 545 001a 013B     		subs	r3, r3, #1
 546 001c C4F8D430 		str	r3, [r4, #212]
3762:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 547              		.loc 1 3762 0
 548 0020 D4F8E830 		ldr	r3, [r4, #232]
 549 0024 013B     		subs	r3, r3, #1
 550 0026 C4F8E830 		str	r3, [r4, #232]
3764:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 551              		.loc 1 3764 0
 552 002a FFF7FEFF 		bl	vPortExitCritical
 553              	.LVL55:
3766:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 554              		.loc 1 3766 0
 555 002e 2846     		mov	r0, r5
 556 0030 FFF7FEFF 		bl	prvDeleteTCB
 557              	.LVL56:
 558              	.L42:
3755:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 559              		.loc 1 3755 0
 560 0034 024B     		ldr	r3, .L45
 561 0036 D3F8E830 		ldr	r3, [r3, #232]
 562 003a 002B     		cmp	r3, #0
 563 003c E2D1     		bne	.L43
 564              	.LBE35:
3770:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 565              		.loc 1 3770 0
 566 003e 38BD     		pop	{r3, r4, r5, pc}
 567              	.L46:
 568              		.align	2
 569              	.L45:
 570 0040 00000000 		.word	.LANCHOR0
 571              		.cfi_endproc
 572              	.LFE103:
 573              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 574              		.section	.text.prvIdleTask,"ax",%progbits
 575              		.align	2
 576              		.thumb
 577              		.thumb_func
 578              		.type	prvIdleTask, %function
 579              	prvIdleTask:
 580              	.LFB101:
3490:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Stop warnings. */
 581              		.loc 1 3490 0
 582              		.cfi_startproc
 583              		@ Volatile: function does not return.
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              	.LVL57:
 587 0000 08B5     		push	{r3, lr}
 588              		.cfi_def_cfa_offset 8
 589              		.cfi_offset 3, -8
 590              		.cfi_offset 14, -4
 591              	.LVL58:
 592              	.L48:
3506:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 84


 593              		.loc 1 3506 0 discriminator 1
 594 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 595              	.LVL59:
 596 0006 FCE7     		b	.L48
 597              		.cfi_endproc
 598              	.LFE101:
 599              		.size	prvIdleTask, .-prvIdleTask
 600              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 601              		.align	2
 602              		.thumb
 603              		.thumb_func
 604              		.type	prvAddCurrentTaskToDelayedList, %function
 605              	prvAddCurrentTaskToDelayedList:
 606              	.LFB121:
4072:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4073:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
4074:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4075:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4076:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4077:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4078:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4079:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4080:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TaskHandle_t xReturn;
4081:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4082:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* A critical section is not required as this is not called from
4083:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * an interrupt and the current TCB will always be the same for any
4084:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * individual execution thread. */
4085:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xReturn = pxCurrentTCB;
4086:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4087:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
4088:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4089:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4090:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4091:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4092:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4093:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4094:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4095:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskGetSchedulerState( void )
4096:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4097:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
4098:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4099:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xSchedulerRunning == pdFALSE )
4100:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4101:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = taskSCHEDULER_NOT_STARTED;
4102:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4103:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
4104:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4105:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
4106:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4107:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = taskSCHEDULER_RUNNING;
4108:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4109:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
4110:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4111:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = taskSCHEDULER_SUSPENDED;
4112:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4113:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4114:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 85


4115:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
4116:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4117:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4118:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4119:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4120:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4121:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4122:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4123:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4124:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4125:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4126:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = pdFALSE;
4127:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4128:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If the mutex was given back by an interrupt while the queue was
4129:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4130:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * needed as interrupts can no longer use mutexes? */
4131:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( pxMutexHolder != NULL )
4132:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4133:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* If the holder of the mutex has a priority below the priority of
4134:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * the task attempting to obtain the mutex then it will temporarily
4135:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * inherit the priority of the task attempting to obtain the mutex. */
4136:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4137:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4138:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Adjust the mutex holder state to account for its new
4139:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * priority.  Only reset the event list item value if the value is
4140:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * not being used for anything else. */
4141:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
4142:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4143:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
4144:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4145:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
4146:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4147:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4148:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4149:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4150:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* If the task being modified is in the ready state it will need
4151:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * to be moved into a new list. */
4152:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
4153:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4154:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
4155:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
4156:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* It is known that the task is in its ready list so
4157:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * there is no need to check again and the port level
4158:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * reset macro can be called directly. */
4159:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
4160:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
4161:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
4162:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
4163:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4164:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
4165:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4166:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Inherit the priority before being moved into the new list. */
4167:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4168:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
4169:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4170:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
4171:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 86


4172:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Just inherit the priority. */
4173:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4174:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4175:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4176:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4177:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4178:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Inheritance occurred. */
4179:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
4180:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4181:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
4182:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4183:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4184:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4185:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The base priority of the mutex holder is lower than the
4186:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * priority of the task attempting to take the mutex, but the
4187:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * current priority of the mutex holder is not lower than the
4188:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * priority of the task attempting to take the mutex.
4189:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * Therefore the mutex holder must have already inherited a
4190:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * priority, but inheritance would have occurred if that had
4191:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * not been the case. */
4192:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     xReturn = pdTRUE;
4193:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4194:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
4195:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4196:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4197:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4198:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4199:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4200:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
4201:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4202:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4203:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4204:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4205:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
4206:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4207:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4208:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_MUTEXES */
4209:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4210:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4211:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4212:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4213:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4214:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4215:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4216:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = pdFALSE;
4217:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4218:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( pxMutexHolder != NULL )
4219:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4220:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* A task can only have an inherited priority if it holds the mutex.
4221:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * If the mutex is held by a task then it cannot be given from an
4222:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * interrupt, and if a mutex is given by the holding task then it must
4223:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * be the running state task. */
4224:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             configASSERT( pxTCB == pxCurrentTCB );
4225:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4226:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ( pxTCB->uxMutexesHeld )--;
4227:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4228:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Has the holder of the mutex inherited the priority of another
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 87


4229:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * task? */
4230:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4231:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4232:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Only disinherit if no other mutexes are held. */
4233:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4234:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4235:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* A task can only have an inherited priority if it holds
4236:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * the mutex.  If the mutex is held by a task then it cannot be
4237:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * given from an interrupt, and if a mutex is given by the
4238:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * holding task then it must be the running state task.  Remove
4239:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * the holding task from the ready list. */
4240:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4241:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
4242:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4243:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
4244:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
4245:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
4246:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4247:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
4248:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4249:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Disinherit the priority before adding the task into the
4250:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * new  ready list. */
4251:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4252:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
4253:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4254:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Reset the event list item value.  It cannot be in use for
4255:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * any other purpose if this task is running, and it must be
4256:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * running to give back the mutex. */
4257:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
4258:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
4259:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4260:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Return true to indicate that a context switch is required.
4261:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * This is only actually required in the corner case whereby
4262:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * multiple mutexes were held and the mutexes were given back
4263:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * in an order different to that in which they were taken.
4264:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * If a context switch did not occur when the first mutex was
4265:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * returned, even if a task was waiting on it, then a context
4266:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * switch should occur when the last mutex is returned whether
4267:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * a task is waiting on it or not. */
4268:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     xReturn = pdTRUE;
4269:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4270:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
4271:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4272:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4273:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4274:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4275:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
4276:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4277:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4278:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4279:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4280:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
4281:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4282:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4283:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4284:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4285:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 88


4286:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4287:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4288:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_MUTEXES */
4289:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4290:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4291:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4292:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4293:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4294:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4295:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4296:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
4297:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4298:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4299:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4300:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( pxMutexHolder != NULL )
4301:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4302:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4303:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * one mutex. */
4304:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             configASSERT( pxTCB->uxMutexesHeld );
4305:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4306:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Determine the priority to which the priority of the task that
4307:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * holds the mutex should be set.  This will be the greater of the
4308:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * holding task's base priority and the priority of the highest
4309:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * priority task that is waiting to obtain the mutex. */
4310:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4311:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4312:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
4313:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4314:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
4315:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4316:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 uxPriorityToUse = pxTCB->uxBasePriority;
4317:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4318:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4319:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Does the priority need to change? */
4320:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxTCB->uxPriority != uxPriorityToUse )
4321:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4322:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Only disinherit if no other mutexes are held.  This is a
4323:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * simplification in the priority inheritance implementation.  If
4324:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * the task that holds the mutex is also holding other mutexes then
4325:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * the other mutexes may have caused the priority inheritance. */
4326:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4327:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4328:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* If a task has timed out because it already holds the
4329:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * mutex it was trying to obtain then it cannot of inherited
4330:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * its own priority. */
4331:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     configASSERT( pxTCB != pxCurrentTCB );
4332:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4333:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Disinherit the priority, remembering the previous
4334:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * priority to facilitate determining the subject task's
4335:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * state. */
4336:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4337:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
4338:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxTCB->uxPriority = uxPriorityToUse;
4339:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4340:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Only reset the event list item value if the value is not
4341:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * being used for anything else. */
4342:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 89


4343:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
4344:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
4345:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
4346:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
4347:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
4348:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4349:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
4350:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4351:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* If the running task is not the task that holds the mutex
4352:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * then the task that holds the mutex could be in either the
4353:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * Ready, Blocked or Suspended states.  Only remove the task
4354:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * from its current state list if it is in the Ready state as
4355:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * the task's priority is going to change and there is one
4356:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * Ready list per priority. */
4357:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
4358:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
4359:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4360:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
4361:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             /* It is known that the task is in its ready list so
4362:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                              * there is no need to check again and the port level
4363:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                              * reset macro can be called directly. */
4364:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4365:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
4366:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         else
4367:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
4368:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             mtCOVERAGE_TEST_MARKER();
4369:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
4370:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4371:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         prvAddTaskToReadyList( pxTCB );
4372:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
4373:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
4374:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
4375:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         mtCOVERAGE_TEST_MARKER();
4376:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
4377:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4378:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
4379:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4380:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4381:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4382:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4383:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
4384:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4385:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4386:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4387:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4388:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
4389:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4390:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4391:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4392:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4393:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4394:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_MUTEXES */
4395:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4396:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4397:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4398:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4399:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskEnterCritical( void )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 90


4400:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4401:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portDISABLE_INTERRUPTS();
4402:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4403:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4404:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4405:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ( pxCurrentTCB->uxCriticalNesting )++;
4406:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4407:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* This is not the interrupt safe version of the enter critical
4408:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * function so  assert() if it is being called from an interrupt
4409:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * context.  Only API functions that end in "FromISR" can be used in an
4410:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * interrupt.  Only assert if the critical nesting count is 1 to
4411:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * protect against recursive calls if the assert function also uses a
4412:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * critical section. */
4413:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4414:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4415:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 portASSERT_IF_IN_ISR();
4416:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4417:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4418:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
4419:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4420:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4421:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4422:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4423:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4424:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4425:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4426:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4427:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4428:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4429:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskExitCritical( void )
4430:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4431:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( xSchedulerRunning != pdFALSE )
4432:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4433:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4434:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4435:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4436:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4437:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4438:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4439:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     portENABLE_INTERRUPTS();
4440:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4441:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
4442:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4443:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4444:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4445:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4446:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
4447:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4448:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4449:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4450:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4451:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
4452:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4453:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4454:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4455:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4456:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 91


4457:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4458:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4459:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4460:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 )
4461:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4462:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4463:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                         const char * pcTaskName )
4464:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4465:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         size_t x;
4466:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4467:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Start by copying the entire string. */
4468:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         strcpy( pcBuffer, pcTaskName );
4469:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4470:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Pad the end of the string with spaces to ensure columns line up when
4471:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * printed out. */
4472:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4473:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4474:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pcBuffer[ x ] = ' ';
4475:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4476:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4477:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Terminate. */
4478:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pcBuffer[ x ] = ( char ) 0x00;
4479:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4480:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Return the new end of string. */
4481:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return &( pcBuffer[ x ] );
4482:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4483:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4484:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4485:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4486:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4487:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4488:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4489:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskList( char * pcWriteBuffer )
4490:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4491:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4492:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxArraySize, x;
4493:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         char cStatus;
4494:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4495:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /*
4496:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * PLEASE NOTE:
4497:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          *
4498:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * This function is provided for convenience only, and is used by many
4499:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4500:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * scheduler.
4501:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          *
4502:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4503:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * uxTaskGetSystemState() output into a human readable table that
4504:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * displays task: names, states, priority, stack usage and task number.
4505:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * Stack usage specified as the number of unused StackType_t words stack can hold
4506:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * on top of stack - not the number of bytes.
4507:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          *
4508:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * vTaskList() has a dependency on the sprintf() C library function that
4509:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * might bloat the code size, use a lot of stack, and provide different
4510:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * results on different platforms.  An alternative, tiny, third party,
4511:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * and limited functionality implementation of sprintf() is provided in
4512:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * many of the FreeRTOS/Demo sub-directories in a file called
4513:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 92


4514:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * snprintf() implementation!).
4515:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          *
4516:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4517:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4518:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * through a call to vTaskList().
4519:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          */
4520:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4521:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4522:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4523:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
4524:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4525:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4526:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * function is executing. */
4527:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4528:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4529:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Allocate an array index for each task.  NOTE!  if
4530:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4531:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * equate to NULL. */
4532:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4533:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4534:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( pxTaskStatusArray != NULL )
4535:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4536:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Generate the (binary) data. */
4537:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4538:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4539:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Create a human readable table from the binary data. */
4540:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             for( x = 0; x < uxArraySize; x++ )
4541:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4542:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
4543:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4544:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     case eRunning:
4545:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         cStatus = tskRUNNING_CHAR;
4546:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         break;
4547:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4548:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     case eReady:
4549:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         cStatus = tskREADY_CHAR;
4550:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         break;
4551:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4552:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     case eBlocked:
4553:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         cStatus = tskBLOCKED_CHAR;
4554:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         break;
4555:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4556:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     case eSuspended:
4557:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         cStatus = tskSUSPENDED_CHAR;
4558:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         break;
4559:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4560:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     case eDeleted:
4561:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         cStatus = tskDELETED_CHAR;
4562:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         break;
4563:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4564:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     case eInvalid: /* Fall through. */
4565:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     default:       /* Should not get here, but it is included
4566:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                     * to prevent static checking errors. */
4567:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         cStatus = ( char ) 0x00;
4568:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         break;
4569:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4570:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 93


4571:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Write the task name to the string, padding with spaces so it
4572:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * can be printed in tabular form more easily. */
4573:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
4574:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4575:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Write the rest of the string. */
4576:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
4577:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
4578:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4579:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4580:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4581:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4582:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             vPortFree( pxTaskStatusArray );
4583:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4584:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
4585:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4586:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4587:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4588:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4589:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4590:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4591:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
4592:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4593:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4594:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4595:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4596:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4597:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TaskStatus_t * pxTaskStatusArray;
4598:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxArraySize, x;
4599:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulStatsAsPercentage;
4600:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4601:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /*
4602:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * PLEASE NOTE:
4603:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          *
4604:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * This function is provided for convenience only, and is used by many
4605:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * of the demo applications.  Do not consider it to be part of the
4606:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * scheduler.
4607:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          *
4608:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4609:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * of the uxTaskGetSystemState() output into a human readable table that
4610:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * displays the amount of time each task has spent in the Running state
4611:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * in both absolute and percentage terms.
4612:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          *
4613:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4614:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * function that might bloat the code size, use a lot of stack, and
4615:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * provide different results on different platforms.  An alternative,
4616:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * tiny, third party, and limited functionality implementation of
4617:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4618:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4619:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * a full snprintf() implementation!).
4620:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          *
4621:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * It is recommended that production systems call uxTaskGetSystemState()
4622:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * directly to get access to raw stats data, rather than indirectly
4623:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * through a call to vTaskGetRunTimeStats().
4624:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          */
4625:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4626:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Make sure the write buffer does not contain a string. */
4627:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         *pcWriteBuffer = ( char ) 0x00;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 94


4628:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4629:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Take a snapshot of the number of tasks in case it changes while this
4630:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * function is executing. */
4631:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uxArraySize = uxCurrentNumberOfTasks;
4632:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4633:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Allocate an array index for each task.  NOTE!  If
4634:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4635:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * equate to NULL. */
4636:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4637:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4638:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( pxTaskStatusArray != NULL )
4639:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4640:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Generate the (binary) data. */
4641:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4642:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4643:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* For percentage calculations. */
4644:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ulTotalTime /= 100UL;
4645:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4646:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Avoid divide by zero errors. */
4647:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( ulTotalTime > 0UL )
4648:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4649:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Create a human readable table from the binary data. */
4650:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 for( x = 0; x < uxArraySize; x++ )
4651:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4652:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* What percentage of the total run time has the task used?
4653:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * This will always be rounded down to the nearest integer.
4654:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * ulTotalRunTime has already been divided by 100. */
4655:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4656:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4657:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Write the task name to the string, padding with
4658:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * spaces so it can be printed in tabular form more
4659:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * easily. */
4660:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4661:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4662:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( ulStatsAsPercentage > 0UL )
4663:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
4664:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4665:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
4666:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ul
4667:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
4668:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         #else
4669:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
4670:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             /* sizeof( int ) == sizeof( long ) so a smaller
4671:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                              * printf() library can be used. */
4672:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStat
4673:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
4674:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         #endif
4675:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
4676:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
4677:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
4678:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* If the percentage is zero here then the task has
4679:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                          * consumed less than 1% of the total run time. */
4680:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4681:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
4682:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulR
4683:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
4684:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         #else
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 95


4685:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
4686:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             /* sizeof( int ) == sizeof( long ) so a smaller
4687:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                              * printf() library can be used. */
4688:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStat
4689:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
4690:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         #endif
4691:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
4692:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4693:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4694:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4695:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4696:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
4697:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4698:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4699:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4700:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4701:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4702:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * is 0 then vPortFree() will be #defined to nothing. */
4703:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             vPortFree( pxTaskStatusArray );
4704:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4705:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
4706:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4707:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             mtCOVERAGE_TEST_MARKER();
4708:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4709:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4710:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4711:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4712:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4713:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4714:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4715:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
4716:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TickType_t uxReturn;
4717:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4718:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4719:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4720:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Reset the event list item to its normal value - so it can be used with
4721:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * queues and semaphores. */
4722:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
4723:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4724:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     return uxReturn;
4725:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
4726:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4727:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4728:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4729:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4730:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4731:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4732:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4733:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * then pxCurrentTCB will be NULL. */
4734:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( pxCurrentTCB != NULL )
4735:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4736:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ( pxCurrentTCB->uxMutexesHeld )++;
4737:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4738:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4739:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return pxCurrentTCB;
4740:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4741:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 96


4742:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_MUTEXES */
4743:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4744:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4745:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4746:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4747:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4748:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                       BaseType_t xClearCountOnExit,
4749:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                       TickType_t xTicksToWait )
4750:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4751:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint32_t ulReturn;
4752:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4753:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4754:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4755:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
4756:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4757:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Only block if the notification count is not already non-zero. */
4758:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
4759:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4760:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Mark this task as waiting for a notification. */
4761:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4762:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4763:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4764:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4765:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4766:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4767:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4768:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* All ports are written to allow a yield in a critical
4769:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * section (some will yield immediately, others wait until the
4770:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * critical section exits) - but it is not something that
4771:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * application code should ever do. */
4772:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     portYIELD_WITHIN_API();
4773:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4774:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
4775:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4776:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
4777:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4778:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4779:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
4780:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4781:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4782:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4783:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4784:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
4785:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4786:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
4787:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4788:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4789:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4790:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4791:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( ulReturn != 0UL )
4792:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4793:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( xClearCountOnExit != pdFALSE )
4794:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4795:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
4796:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4797:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
4798:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 97


4799:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
4800:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4801:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4802:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
4803:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4804:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4805:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4806:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4807:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4808:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4809:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
4810:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4811:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return ulReturn;
4812:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4813:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4814:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4815:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4816:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4817:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4818:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4819:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4820:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                        uint32_t ulBitsToClearOnEntry,
4821:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                        uint32_t ulBitsToClearOnExit,
4822:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                        uint32_t * pulNotificationValue,
4823:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                        TickType_t xTicksToWait )
4824:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4825:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
4826:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4827:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4828:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4829:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
4830:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4831:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Only block if a notification is not already pending. */
4832:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4833:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4834:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Clear bits in the task's notification value as bits may get
4835:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * set  by the notifying task or interrupt.  This can be used to
4836:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * clear the value to zero. */
4837:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
4838:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4839:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Mark this task as waiting for a notification. */
4840:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4841:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4842:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
4843:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4844:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4845:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4846:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4847:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* All ports are written to allow a yield in a critical
4848:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * section (some will yield immediately, others wait until the
4849:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * critical section exits) - but it is not something that
4850:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * application code should ever do. */
4851:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     portYIELD_WITHIN_API();
4852:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4853:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
4854:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4855:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 98


4856:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
4857:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4858:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
4859:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4860:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
4861:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4862:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4863:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
4864:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4865:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
4866:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4867:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4868:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4869:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pulNotificationValue != NULL )
4870:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4871:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Output the current notification value, which may or may not
4872:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * have changed. */
4873:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4874:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4875:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4876:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* If ucNotifyValue is set then either the task never entered the
4877:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * blocked state (because a notification was already pending) or the
4878:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * task unblocked because of a notification.  Otherwise the task
4879:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * unblocked because of a timeout. */
4880:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4881:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4882:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* A notification was not received. */
4883:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = pdFALSE;
4884:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4885:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
4886:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4887:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* A notification was already pending or a notification was
4888:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * received while the task was waiting. */
4889:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
4890:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
4891:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4892:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4893:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4894:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
4895:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
4896:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4897:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
4898:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
4899:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4900:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4901:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
4902:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4903:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4904:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4905:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
4906:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                    UBaseType_t uxIndexToNotify,
4907:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                    uint32_t ulValue,
4908:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                    eNotifyAction eAction,
4909:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                    uint32_t * pulPreviousNotificationValue )
4910:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
4911:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
4912:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = pdPASS;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 99


4913:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint8_t ucOriginalNotifyState;
4914:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4915:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4916:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToNotify );
4917:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTCB = xTaskToNotify;
4918:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4919:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
4920:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
4921:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pulPreviousNotificationValue != NULL )
4922:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4923:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
4924:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4925:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4926:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
4927:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4928:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
4929:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4930:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             switch( eAction )
4931:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4932:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 case eSetBits:
4933:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
4934:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
4935:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4936:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 case eIncrement:
4937:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
4938:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
4939:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4940:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 case eSetValueWithOverwrite:
4941:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4942:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
4943:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4944:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 case eSetValueWithoutOverwrite:
4945:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4946:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4947:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
4948:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4949:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
4950:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
4951:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
4952:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* The value could not be written to the task. */
4953:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         xReturn = pdFAIL;
4954:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
4955:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4956:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
4957:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4958:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 case eNoAction:
4959:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4960:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The task is being notified without its notify value being
4961:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * updated. */
4962:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
4963:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4964:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 default:
4965:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4966:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Should not get here if all enums are handled.
4967:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * Artificially force an assert by testing a value the
4968:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * compiler can't assume is const. */
4969:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 100


4970:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4971:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
4972:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
4973:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4974:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             traceTASK_NOTIFY( uxIndexToNotify );
4975:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4976:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
4977:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * notification then unblock it now. */
4978:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4979:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
4980:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
4981:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
4982:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4983:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* The task should not have been on an event list. */
4984:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4985:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
4986:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4987:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
4988:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* If a task is blocked waiting for a notification then
4989:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * xNextTaskUnblockTime might be set to the blocked task's time
4990:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * out time.  If the task is unblocked for a reason other than
4991:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * a timeout xNextTaskUnblockTime is normally left unchanged,
4992:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * because it will automatically get reset to a new value when
4993:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * the tick count equals xNextTaskUnblockTime.  However if
4994:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * tickless idling is used it might be more important to enter
4995:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * sleep mode at the earliest possible time - so reset
4996:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * xNextTaskUnblockTime here to ensure it is updated at the
4997:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * earliest possible time. */
4998:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvResetNextTaskUnblockTime();
4999:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
5000:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 #endif
5001:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5002:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5003:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
5004:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The notified task has a priority above the currently
5005:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * executing task so a yield is required. */
5006:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     taskYIELD_IF_USING_PREEMPTION();
5007:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
5008:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
5009:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
5010:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5011:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
5012:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
5013:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
5014:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
5015:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 mtCOVERAGE_TEST_MARKER();
5016:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
5017:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
5018:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
5019:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5020:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
5021:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
5022:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5023:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5024:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5025:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5026:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 101


5027:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5028:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
5029:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                           UBaseType_t uxIndexToNotify,
5030:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                           uint32_t ulValue,
5031:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                           eNotifyAction eAction,
5032:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                           uint32_t * pulPreviousNotificationValue,
5033:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                           BaseType_t * pxHigherPriorityTaskWoken )
5034:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
5035:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
5036:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint8_t ucOriginalNotifyState;
5037:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn = pdPASS;
5038:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5039:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5040:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToNotify );
5041:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5042:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5043:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5044:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5045:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5046:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5047:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5048:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * is defined in FreeRTOSConfig.h then
5049:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5050:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5051:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * been assigned a priority above the configured maximum system call
5052:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5053:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5054:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5055:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5056:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5057:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * provided on the following link:
5058:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5059:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5060:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5061:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTCB = xTaskToNotify;
5062:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5063:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5064:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
5065:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pulPreviousNotificationValue != NULL )
5066:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
5067:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
5068:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
5069:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5070:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5071:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5072:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5073:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             switch( eAction )
5074:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
5075:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 case eSetBits:
5076:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
5077:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
5078:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5079:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 case eIncrement:
5080:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5081:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
5082:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5083:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 case eSetValueWithOverwrite:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 102


5084:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5085:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
5086:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5087:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 case eSetValueWithoutOverwrite:
5088:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5089:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
5090:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
5091:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5092:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
5093:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     else
5094:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
5095:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         /* The value could not be written to the task. */
5096:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         xReturn = pdFAIL;
5097:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
5098:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5099:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
5100:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5101:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 case eNoAction:
5102:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5103:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The task is being notified without its notify value being
5104:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * updated. */
5105:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
5106:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5107:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 default:
5108:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5109:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Should not get here if all enums are handled.
5110:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * Artificially force an assert by testing a value the
5111:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * compiler can't assume is const. */
5112:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
5113:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
5114:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
5115:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5116:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5117:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5118:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5119:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * notification then unblock it now. */
5120:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5121:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
5122:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* The task should not have been on an event list. */
5123:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5124:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5125:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
5126:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
5127:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5128:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5129:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
5130:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
5131:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
5132:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5133:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * this task pending until the scheduler is resumed. */
5134:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5135:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
5136:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5137:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5138:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
5139:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The notified task has a priority above the currently
5140:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * executing task so a yield is required. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 103


5141:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5142:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
5143:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5144:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
5145:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5146:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5147:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5148:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * safe FreeRTOS function. */
5149:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     xYieldPending = pdTRUE;
5150:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
5151:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
5152:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
5153:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5154:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
5155:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
5156:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
5157:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5158:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5159:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
5160:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
5161:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5162:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5163:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5164:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5165:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5166:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5167:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5168:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                         UBaseType_t uxIndexToNotify,
5169:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5170:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
5171:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
5172:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint8_t ucOriginalNotifyState;
5173:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
5174:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5175:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( xTaskToNotify );
5176:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5177:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5178:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* RTOS ports that support interrupt nesting have the concept of a
5179:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * maximum  system call (or maximum API call) interrupt priority.
5180:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * Interrupts that are  above the maximum system call priority are keep
5181:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5182:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5183:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * is defined in FreeRTOSConfig.h then
5184:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5185:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * failure if a FreeRTOS API function is called from an interrupt that has
5186:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * been assigned a priority above the configured maximum system call
5187:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5188:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * from interrupts  that have been assigned a priority at or (logically)
5189:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5190:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
5191:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * simple as possible.  More information (albeit Cortex-M specific) is
5192:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * provided on the following link:
5193:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5194:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5195:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5196:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTCB = xTaskToNotify;
5197:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 104


5198:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5199:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
5200:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5201:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5202:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5203:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* 'Giving' is equivalent to incrementing a count in a counting
5204:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * semaphore. */
5205:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5206:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5207:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5208:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5209:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* If the task is in the blocked state specifically to wait for a
5210:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * notification then unblock it now. */
5211:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5212:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
5213:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* The task should not have been on an event list. */
5214:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5215:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5216:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
5217:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
5218:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
5219:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
5220:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
5221:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
5222:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
5223:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The delayed and ready lists cannot be accessed, so hold
5224:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * this task pending until the scheduler is resumed. */
5225:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5226:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
5227:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5228:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5229:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
5230:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* The notified task has a priority above the currently
5231:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * executing task so a yield is required. */
5232:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     if( pxHigherPriorityTaskWoken != NULL )
5233:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
5234:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5235:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
5236:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5237:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     /* Mark that a yield is pending in case the user is not
5238:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5239:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                      * safe FreeRTOS function. */
5240:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     xYieldPending = pdTRUE;
5241:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
5242:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 else
5243:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
5244:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     mtCOVERAGE_TEST_MARKER();
5245:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
5246:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
5247:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
5248:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5249:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
5250:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5251:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5252:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5253:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5254:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 105


5255:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5256:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5257:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                              UBaseType_t uxIndexToClear )
5258:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
5259:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
5260:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
5261:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5262:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5263:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5264:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5265:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * its notification state cleared. */
5266:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5267:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5268:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
5269:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
5270:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
5271:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
5272:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
5273:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = pdPASS;
5274:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
5275:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
5276:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
5277:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = pdFAIL;
5278:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
5279:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
5280:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
5281:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5282:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xReturn;
5283:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
5284:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5285:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5286:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5287:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5288:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5289:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5290:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5291:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                             UBaseType_t uxIndexToClear,
5292:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                             uint32_t ulBitsToClear )
5293:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
5294:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
5295:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint32_t ulReturn;
5296:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5297:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If null is passed in here then it is the calling task that is having
5298:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * its notification state cleared. */
5299:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTCB = prvGetTCBFromHandle( xTask );
5300:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5301:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskENTER_CRITICAL();
5302:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
5303:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Return the notification as it was before the bits were cleared,
5304:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * then clear the bit mask. */
5305:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
5306:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
5307:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
5308:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         taskEXIT_CRITICAL();
5309:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5310:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return ulReturn;
5311:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 106


5312:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5313:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5314:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5315:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5316:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
5317:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5318:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetRunTimeCounter( const TaskHandle_t xTask )
5319:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
5320:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return xTask->ulRunTimeCounter;
5321:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
5322:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5323:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
5324:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5325:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5326:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
5327:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5328:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetRunTimePercent( const TaskHandle_t xTask )
5329:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
5330:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         configRUN_TIME_COUNTER_TYPE ulTotalTime, ulReturn;
5331:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5332:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         ulTotalTime = ( configRUN_TIME_COUNTER_TYPE ) portGET_RUN_TIME_COUNTER_VALUE();
5333:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5334:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* For percentage calculations. */
5335:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         ulTotalTime /= ( configRUN_TIME_COUNTER_TYPE ) 100;
5336:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5337:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* Avoid divide by zero errors. */
5338:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( ulTotalTime > ( configRUN_TIME_COUNTER_TYPE ) 0 )
5339:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
5340:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ulReturn = xTask->ulRunTimeCounter / ulTotalTime;
5341:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
5342:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
5343:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
5344:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             ulReturn = 0;
5345:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
5346:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5347:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return ulReturn;
5348:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
5349:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5350:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
5351:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5352:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5353:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
5354:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5355:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimeCounter( void )
5356:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
5357:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return ulTaskGetRunTimeCounter( xIdleTaskHandle );
5358:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
5359:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5360:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
5361:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5362:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5363:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
5364:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5365:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimePercent( void )
5366:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
5367:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         return ulTaskGetRunTimePercent( xIdleTaskHandle );
5368:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 107


5369:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5370:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** #endif
5371:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
5372:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5373:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5374:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                             const BaseType_t xCanBlockIndefinitely )
5375:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** {
 607              		.loc 1 5375 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              	.LVL60:
 612 0000 70B5     		push	{r4, r5, r6, lr}
 613              		.cfi_def_cfa_offset 16
 614              		.cfi_offset 4, -16
 615              		.cfi_offset 5, -12
 616              		.cfi_offset 6, -8
 617              		.cfi_offset 14, -4
 618 0002 0446     		mov	r4, r0
 619 0004 0E46     		mov	r6, r1
5376:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TickType_t xTimeToWake;
5377:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     const TickType_t xConstTickCount = xTickCount;
 620              		.loc 1 5377 0
 621 0006 274B     		ldr	r3, .L56
 622 0008 D3F8EC50 		ldr	r5, [r3, #236]
 623              	.LVL61:
5378:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5379:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5380:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
5381:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5382:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * reset to pdFALSE so it can be detected as having been set to pdTRUE
5383:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * when the task leaves the Blocked state. */
5384:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxCurrentTCB->ucDelayAborted = pdFALSE;
5385:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
5386:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #endif
5387:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5388:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Remove the task from the ready list before adding it to the blocked list
5389:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****      * as the same list item is used for both lists. */
5390:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 624              		.loc 1 5390 0
 625 000c D3F8D800 		ldr	r0, [r3, #216]
 626              	.LVL62:
 627 0010 0430     		adds	r0, r0, #4
 628 0012 FFF7FEFF 		bl	uxListRemove
 629              	.LVL63:
 630 0016 60B9     		cbnz	r0, .L51
5391:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
5392:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* The current task must be in a ready list, so there is no need to
5393:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****          * check, and the port reset macro can be called directly. */
5394:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
 631              		.loc 1 5394 0
 632 0018 224B     		ldr	r3, .L56
 633 001a D3F8D820 		ldr	r2, [r3, #216]
 634 001e D16A     		ldr	r1, [r2, #44]
 635 0020 0122     		movs	r2, #1
 636 0022 02FA01F1 		lsl	r1, r2, r1
 637 0026 D3F8E420 		ldr	r2, [r3, #228]
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 108


 638 002a 22EA0102 		bic	r2, r2, r1
 639 002e C3F8E420 		str	r2, [r3, #228]
 640              	.L51:
5395:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
5396:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     else
5397:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
5398:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         mtCOVERAGE_TEST_MARKER();
5399:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
5400:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5401:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     #if ( INCLUDE_vTaskSuspend == 1 )
5402:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
5403:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 641              		.loc 1 5403 0
 642 0032 B4F1FF3F 		cmp	r4, #-1
 643 0036 19D1     		bne	.L52
 644              		.loc 1 5403 0 is_stmt 0 discriminator 1
 645 0038 C6B1     		cbz	r6, .L52
 646              	.LBB36:
5404:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
5405:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Add the task to the suspended task list instead of a delayed task
5406:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * list to ensure it is not woken by a timing event.  It will block
5407:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * indefinitely. */
5408:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 647              		.loc 1 5408 0 is_stmt 1
 648 003a 1A4B     		ldr	r3, .L56
 649 003c 5A68     		ldr	r2, [r3, #4]
 650              	.LVL64:
 651 003e D3F8D810 		ldr	r1, [r3, #216]
 652 0042 8A60     		str	r2, [r1, #8]
 653 0044 D3F8D810 		ldr	r1, [r3, #216]
 654 0048 9068     		ldr	r0, [r2, #8]
 655 004a C860     		str	r0, [r1, #12]
 656 004c 9068     		ldr	r0, [r2, #8]
 657 004e D3F8D810 		ldr	r1, [r3, #216]
 658 0052 0431     		adds	r1, r1, #4
 659 0054 4160     		str	r1, [r0, #4]
 660 0056 D3F8D810 		ldr	r1, [r3, #216]
 661 005a 0431     		adds	r1, r1, #4
 662 005c 9160     		str	r1, [r2, #8]
 663 005e D3F8D820 		ldr	r2, [r3, #216]
 664              	.LVL65:
 665 0062 5361     		str	r3, [r2, #20]
 666 0064 1A68     		ldr	r2, [r3]
 667 0066 0132     		adds	r2, r2, #1
 668 0068 1A60     		str	r2, [r3]
 669              	.LBE36:
 670 006a 70BD     		pop	{r4, r5, r6, pc}
 671              	.LVL66:
 672              	.L52:
5409:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
5410:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         else
5411:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
5412:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* Calculate the time at which the task should be woken if the event
5413:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * does not occur.  This may overflow but this doesn't matter, the
5414:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****              * kernel will manage it correctly. */
5415:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xTimeToWake = xConstTickCount + xTicksToWait;
 673              		.loc 1 5415 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 109


 674 006c 2C44     		add	r4, r4, r5
 675              	.LVL67:
5416:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5417:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             /* The list item will be inserted in wake time order. */
5418:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 676              		.loc 1 5418 0
 677 006e 0D4B     		ldr	r3, .L56
 678 0070 D3F8D830 		ldr	r3, [r3, #216]
 679 0074 5C60     		str	r4, [r3, #4]
5419:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5420:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             if( xTimeToWake < xConstTickCount )
 680              		.loc 1 5420 0
 681 0076 A542     		cmp	r5, r4
 682 0078 08D9     		bls	.L54
5421:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
5422:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* Wake time has overflowed.  Place this item in the overflow
5423:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * list. */
5424:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 683              		.loc 1 5424 0
 684 007a 0A4B     		ldr	r3, .L56
 685 007c D3F8D000 		ldr	r0, [r3, #208]
 686 0080 D3F8D810 		ldr	r1, [r3, #216]
 687 0084 0431     		adds	r1, r1, #4
 688 0086 FFF7FEFF 		bl	vListInsert
 689              	.LVL68:
 690 008a 70BD     		pop	{r4, r5, r6, pc}
 691              	.LVL69:
 692              	.L54:
5425:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
5426:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             else
5427:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
5428:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* The wake time has not overflowed, so the current block list
5429:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * is used. */
5430:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 693              		.loc 1 5430 0
 694 008c 054D     		ldr	r5, .L56
 695              	.LVL70:
 696 008e A86A     		ldr	r0, [r5, #40]
 697 0090 D5F8D810 		ldr	r1, [r5, #216]
 698 0094 0431     		adds	r1, r1, #4
 699 0096 FFF7FEFF 		bl	vListInsert
 700              	.LVL71:
5431:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
5432:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 /* If the task entering the blocked state was placed at the
5433:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * head of the list of blocked tasks then xNextTaskUnblockTime
5434:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                  * needs to be updated too. */
5435:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 if( xTimeToWake < xNextTaskUnblockTime )
 701              		.loc 1 5435 0
 702 009a EB6A     		ldr	r3, [r5, #44]
 703 009c 9C42     		cmp	r4, r3
 704 009e 00D2     		bcs	.L50
5436:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
5437:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     xNextTaskUnblockTime = xTimeToWake;
 705              		.loc 1 5437 0
 706 00a0 EC62     		str	r4, [r5, #44]
 707              	.L50:
 708 00a2 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 110


 709              	.LVL72:
 710              	.L57:
 711              		.align	2
 712              	.L56:
 713 00a4 00000000 		.word	.LANCHOR0
 714              		.cfi_endproc
 715              	.LFE121:
 716              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 717              		.section	.text.xTaskCreate,"ax",%progbits
 718              		.align	2
 719              		.global	xTaskCreate
 720              		.thumb
 721              		.thumb_func
 722              		.type	xTaskCreate, %function
 723              	xTaskCreate:
 724              	.LFB68:
 731:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxNewTCB;
 725              		.loc 1 731 0
 726              		.cfi_startproc
 727              		@ args = 8, pretend = 0, frame = 0
 728              		@ frame_needed = 0, uses_anonymous_args = 0
 729              	.LVL73:
 730 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 731              		.cfi_def_cfa_offset 28
 732              		.cfi_offset 4, -28
 733              		.cfi_offset 5, -24
 734              		.cfi_offset 6, -20
 735              		.cfi_offset 7, -16
 736              		.cfi_offset 8, -12
 737              		.cfi_offset 9, -8
 738              		.cfi_offset 14, -4
 739 0004 85B0     		sub	sp, sp, #20
 740              		.cfi_def_cfa_offset 48
 741 0006 0646     		mov	r6, r0
 742 0008 0F46     		mov	r7, r1
 743 000a 1546     		mov	r5, r2
 744 000c 9846     		mov	r8, r3
 745              	.LBB37:
 767:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 746              		.loc 1 767 0
 747 000e 9000     		lsls	r0, r2, #2
 748              	.LVL74:
 749 0010 FFF7FEFF 		bl	pvPortMalloc
 750              	.LVL75:
 769:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 751              		.loc 1 769 0
 752 0014 80B1     		cbz	r0, .L62
 753 0016 8146     		mov	r9, r0
 772:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 754              		.loc 1 772 0
 755 0018 5020     		movs	r0, #80
 756              	.LVL76:
 757 001a FFF7FEFF 		bl	pvPortMalloc
 758              	.LVL77:
 774:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 759              		.loc 1 774 0
 760 001e 0446     		mov	r4, r0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 111


 761 0020 30B1     		cbz	r0, .L60
 776:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 762              		.loc 1 776 0
 763 0022 5022     		movs	r2, #80
 764 0024 0021     		movs	r1, #0
 765 0026 FFF7FEFF 		bl	memset
 766              	.LVL78:
 779:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 767              		.loc 1 779 0
 768 002a C4F83090 		str	r9, [r4, #48]
 769 002e 04E0     		b	.L59
 770              	.LVL79:
 771              	.L60:
 785:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 772              		.loc 1 785 0
 773 0030 4846     		mov	r0, r9
 774              	.LVL80:
 775 0032 FFF7FEFF 		bl	vPortFree
 776              	.LVL81:
 777 0036 00E0     		b	.L59
 778              	.LVL82:
 779              	.L62:
 790:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 780              		.loc 1 790 0
 781 0038 0024     		movs	r4, #0
 782              	.LVL83:
 783              	.L59:
 784              	.LBE37:
 795:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 785              		.loc 1 795 0
 786 003a 8CB1     		cbz	r4, .L63
 805:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             prvAddNewTaskToReadyList( pxNewTCB );
 787              		.loc 1 805 0
 788 003c 0023     		movs	r3, #0
 789 003e 0393     		str	r3, [sp, #12]
 790 0040 0294     		str	r4, [sp, #8]
 791 0042 0D9B     		ldr	r3, [sp, #52]
 792 0044 0193     		str	r3, [sp, #4]
 793 0046 0C9B     		ldr	r3, [sp, #48]
 794 0048 0093     		str	r3, [sp]
 795 004a 4346     		mov	r3, r8
 796 004c 2A46     		mov	r2, r5
 797 004e 3946     		mov	r1, r7
 798 0050 3046     		mov	r0, r6
 799 0052 FFF7FEFF 		bl	prvInitialiseNewTask
 800              	.LVL84:
 806:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = pdPASS;
 801              		.loc 1 806 0
 802 0056 2046     		mov	r0, r4
 803 0058 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 804              	.LVL85:
 807:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 805              		.loc 1 807 0
 806 005c 0120     		movs	r0, #1
 807 005e 01E0     		b	.L61
 808              	.LVL86:
 809              	.L63:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 112


 811:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 810              		.loc 1 811 0
 811 0060 4FF0FF30 		mov	r0, #-1
 812              	.L61:
 813              	.LVL87:
 815:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 814              		.loc 1 815 0
 815 0064 05B0     		add	sp, sp, #20
 816              		.cfi_def_cfa_offset 28
 817              		@ sp needed
 818 0066 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 819              		.cfi_endproc
 820              	.LFE68:
 821              		.size	xTaskCreate, .-xTaskCreate
 822 006a 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 823              		.align	2
 824              		.global	vTaskDelete
 825              		.thumb
 826              		.thumb_func
 827              		.type	vTaskDelete, %function
 828              	vTaskDelete:
 829              	.LFB71:
1117:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 830              		.loc 1 1117 0
 831              		.cfi_startproc
 832              		@ args = 0, pretend = 0, frame = 0
 833              		@ frame_needed = 0, uses_anonymous_args = 0
 834              	.LVL88:
 835 0000 70B5     		push	{r4, r5, r6, lr}
 836              		.cfi_def_cfa_offset 16
 837              		.cfi_offset 4, -16
 838              		.cfi_offset 5, -12
 839              		.cfi_offset 6, -8
 840              		.cfi_offset 14, -4
 841 0002 0446     		mov	r4, r0
1120:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 842              		.loc 1 1120 0
 843 0004 FFF7FEFF 		bl	vPortEnterCritical
 844              	.LVL89:
1124:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 845              		.loc 1 1124 0
 846 0008 14B9     		cbnz	r4, .L66
1124:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 847              		.loc 1 1124 0 is_stmt 0 discriminator 1
 848 000a 2C4B     		ldr	r3, .L74
 849 000c D3F8D840 		ldr	r4, [r3, #216]
 850              	.LVL90:
 851              	.L66:
1127:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 852              		.loc 1 1127 0 is_stmt 1 discriminator 4
 853 0010 251D     		adds	r5, r4, #4
 854 0012 2846     		mov	r0, r5
 855 0014 FFF7FEFF 		bl	uxListRemove
 856              	.LVL91:
 857 0018 80B9     		cbnz	r0, .L67
1129:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 858              		.loc 1 1129 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 113


 859 001a E26A     		ldr	r2, [r4, #44]
 860 001c 02EB8201 		add	r1, r2, r2, lsl #2
 861 0020 8B00     		lsls	r3, r1, #2
 862 0022 2649     		ldr	r1, .L74
 863 0024 0B44     		add	r3, r3, r1
 864 0026 1B6B     		ldr	r3, [r3, #48]
 865 0028 43B9     		cbnz	r3, .L67
1129:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 866              		.loc 1 1129 0 is_stmt 0 discriminator 1
 867 002a 0123     		movs	r3, #1
 868 002c 03FA02F2 		lsl	r2, r3, r2
 869 0030 D1F8E430 		ldr	r3, [r1, #228]
 870 0034 23EA0202 		bic	r2, r3, r2
 871 0038 C1F8E420 		str	r2, [r1, #228]
 872              	.L67:
1137:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 873              		.loc 1 1137 0 is_stmt 1
 874 003c A36A     		ldr	r3, [r4, #40]
 875 003e 1BB1     		cbz	r3, .L68
1139:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 876              		.loc 1 1139 0
 877 0040 04F11800 		add	r0, r4, #24
 878 0044 FFF7FEFF 		bl	uxListRemove
 879              	.LVL92:
 880              	.L68:
1150:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 881              		.loc 1 1150 0
 882 0048 1C4B     		ldr	r3, .L74
 883 004a D3F8E020 		ldr	r2, [r3, #224]
 884 004e 0132     		adds	r2, r2, #1
 885 0050 C3F8E020 		str	r2, [r3, #224]
1152:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 886              		.loc 1 1152 0
 887 0054 D3F8D830 		ldr	r3, [r3, #216]
 888 0058 9C42     		cmp	r4, r3
 889 005a 0BD1     		bne	.L69
1159:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 890              		.loc 1 1159 0
 891 005c 174E     		ldr	r6, .L74
 892 005e 2946     		mov	r1, r5
 893 0060 06F1BC00 		add	r0, r6, #188
 894 0064 FFF7FEFF 		bl	vListInsertEnd
 895              	.LVL93:
1164:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 896              		.loc 1 1164 0
 897 0068 D6F8E830 		ldr	r3, [r6, #232]
 898 006c 0133     		adds	r3, r3, #1
 899 006e C6F8E830 		str	r3, [r6, #232]
 900 0072 07E0     		b	.L70
 901              	.L69:
1179:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 traceTASK_DELETE( pxTCB );
 902              		.loc 1 1179 0
 903 0074 114A     		ldr	r2, .L74
 904 0076 D2F8D430 		ldr	r3, [r2, #212]
 905 007a 013B     		subs	r3, r3, #1
 906 007c C2F8D430 		str	r3, [r2, #212]
1184:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 114


 907              		.loc 1 1184 0
 908 0080 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 909              	.LVL94:
 910              	.L70:
1187:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 911              		.loc 1 1187 0
 912 0084 FFF7FEFF 		bl	vPortExitCritical
 913              	.LVL95:
1192:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 914              		.loc 1 1192 0
 915 0088 0C4B     		ldr	r3, .L74
 916 008a D3F8D830 		ldr	r3, [r3, #216]
 917 008e 9C42     		cmp	r4, r3
 918 0090 02D0     		beq	.L71
1194:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 919              		.loc 1 1194 0
 920 0092 2046     		mov	r0, r4
 921 0094 FFF7FEFF 		bl	prvDeleteTCB
 922              	.LVL96:
 923              	.L71:
1199:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 924              		.loc 1 1199 0
 925 0098 084B     		ldr	r3, .L74
 926 009a D3F8DC30 		ldr	r3, [r3, #220]
 927 009e 63B1     		cbz	r3, .L65
1201:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 928              		.loc 1 1201 0
 929 00a0 064B     		ldr	r3, .L74
 930 00a2 D3F8D830 		ldr	r3, [r3, #216]
 931 00a6 9C42     		cmp	r4, r3
 932 00a8 07D1     		bne	.L65
1204:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 933              		.loc 1 1204 0
 934 00aa 4FF08052 		mov	r2, #268435456
 935 00ae 044B     		ldr	r3, .L74+4
 936 00b0 1A60     		str	r2, [r3]
 937              		.syntax unified
 938              	@ 1204 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 939 00b2 BFF34F8F 		dsb
 940              	@ 0 "" 2
 941              	@ 1204 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 942 00b6 BFF36F8F 		isb
 943              	@ 0 "" 2
 944              		.thumb
 945              		.syntax unified
 946              	.L65:
 947 00ba 70BD     		pop	{r4, r5, r6, pc}
 948              	.LVL97:
 949              	.L75:
 950              		.align	2
 951              	.L74:
 952 00bc 00000000 		.word	.LANCHOR0
 953 00c0 04ED00E0 		.word	-536810236
 954              		.cfi_endproc
 955              	.LFE71:
 956              		.size	vTaskDelete, .-vTaskDelete
 957              		.section	.text.eTaskGetState,"ax",%progbits
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 115


 958              		.align	2
 959              		.global	eTaskGetState
 960              		.thumb
 961              		.thumb_func
 962              		.type	eTaskGetState, %function
 963              	eTaskGetState:
 964              	.LFB74:
1351:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         eTaskState eReturn;
 965              		.loc 1 1351 0
 966              		.cfi_startproc
 967              		@ args = 0, pretend = 0, frame = 0
 968              		@ frame_needed = 0, uses_anonymous_args = 0
 969              	.LVL98:
 970 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 971              		.cfi_def_cfa_offset 32
 972              		.cfi_offset 3, -32
 973              		.cfi_offset 4, -28
 974              		.cfi_offset 5, -24
 975              		.cfi_offset 6, -20
 976              		.cfi_offset 7, -16
 977              		.cfi_offset 8, -12
 978              		.cfi_offset 9, -8
 979              		.cfi_offset 14, -4
 980              	.LVL99:
1361:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 981              		.loc 1 1361 0
 982 0004 254B     		ldr	r3, .L90
 983 0006 D3F8D830 		ldr	r3, [r3, #216]
 984 000a 9842     		cmp	r0, r3
 985 000c 30D0     		beq	.L81
 986 000e 0546     		mov	r5, r0
1368:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 987              		.loc 1 1368 0
 988 0010 FFF7FEFF 		bl	vPortEnterCritical
 989              	.LVL100:
1370:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 990              		.loc 1 1370 0
 991 0014 6E69     		ldr	r6, [r5, #20]
 992              	.LVL101:
1371:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxDelayedList = pxDelayedTaskList;
 993              		.loc 1 1371 0
 994 0016 AF6A     		ldr	r7, [r5, #40]
 995              	.LVL102:
1372:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 996              		.loc 1 1372 0
 997 0018 204C     		ldr	r4, .L90
 998 001a D4F82880 		ldr	r8, [r4, #40]
 999              	.LVL103:
1373:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 1000              		.loc 1 1373 0
 1001 001e D4F8D090 		ldr	r9, [r4, #208]
 1002              	.LVL104:
1375:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1003              		.loc 1 1375 0
 1004 0022 FFF7FEFF 		bl	vPortExitCritical
 1005              	.LVL105:
1377:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 116


 1006              		.loc 1 1377 0
 1007 0026 1434     		adds	r4, r4, #20
 1008 0028 A742     		cmp	r7, r4
 1009 002a 24D0     		beq	.L82
1384:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 1010              		.loc 1 1384 0
 1011 002c 4645     		cmp	r6, r8
 1012 002e 25D0     		beq	.L83
1384:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 1013              		.loc 1 1384 0 is_stmt 0 discriminator 1
 1014 0030 4E45     		cmp	r6, r9
 1015 0032 26D0     		beq	.L84
1392:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 1016              		.loc 1 1392 0 is_stmt 1
 1017 0034 A4F11403 		sub	r3, r4, #20
 1018 0038 9E42     		cmp	r6, r3
 1019 003a 12D1     		bne	.L78
1397:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 1020              		.loc 1 1397 0
 1021 003c AB6A     		ldr	r3, [r5, #40]
 1022 003e 53B1     		cbz	r3, .L85
1427:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 1023              		.loc 1 1427 0
 1024 0040 0220     		movs	r0, #2
 1025 0042 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1026              	.LVL106:
 1027              	.L80:
 1028              	.LBB38:
1412:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                 {
 1029              		.loc 1 1412 0
 1030 0046 EA18     		adds	r2, r5, r3
 1031 0048 92F84C20 		ldrb	r2, [r2, #76]	@ zero_extendqisi2
 1032 004c D2B2     		uxtb	r2, r2
 1033 004e 012A     		cmp	r2, #1
 1034 0050 1AD0     		beq	.L86
1410:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             {
 1035              		.loc 1 1410 0 discriminator 2
 1036 0052 0133     		adds	r3, r3, #1
 1037              	.LVL107:
 1038 0054 00E0     		b	.L79
 1039              	.LVL108:
 1040              	.L85:
 1041              	.LBE38:
 1042 0056 0023     		movs	r3, #0
 1043              	.L79:
 1044              	.LVL109:
 1045              	.LBB39:
1410:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             {
 1046              		.loc 1 1410 0 is_stmt 0 discriminator 1
 1047 0058 002B     		cmp	r3, #0
 1048 005a F4DD     		ble	.L80
1408:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1049              		.loc 1 1408 0 is_stmt 1
 1050 005c 0320     		movs	r0, #3
 1051 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1052              	.LVL110:
 1053              	.L78:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 117


 1054              	.LBE39:
1433:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 1055              		.loc 1 1433 0
 1056 0062 0F4B     		ldr	r3, .L90+4
 1057 0064 9E42     		cmp	r6, r3
 1058 0066 12D0     		beq	.L87
1433:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 1059              		.loc 1 1433 0 is_stmt 0 discriminator 1
 1060 0068 A6B9     		cbnz	r6, .L88
1438:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 1061              		.loc 1 1438 0 is_stmt 1
 1062 006a 0420     		movs	r0, #4
 1063 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1064              	.LVL111:
 1065              	.L81:
1364:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 1066              		.loc 1 1364 0
 1067 0070 0020     		movs	r0, #0
 1068              	.LVL112:
 1069 0072 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1070              	.LVL113:
 1071              	.L82:
1382:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 1072              		.loc 1 1382 0
 1073 0076 0120     		movs	r0, #1
 1074 0078 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1075              	.LVL114:
 1076              	.L83:
1388:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 1077              		.loc 1 1388 0
 1078 007c 0220     		movs	r0, #2
 1079 007e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1080              	.LVL115:
 1081              	.L84:
 1082 0082 0220     		movs	r0, #2
 1083 0084 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1084              	.LVL116:
 1085              	.L86:
 1086              	.LBB40:
1414:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                     break;
 1087              		.loc 1 1414 0
 1088 0088 0220     		movs	r0, #2
 1089 008a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1090              	.LVL117:
 1091              	.L87:
 1092              	.LBE40:
1438:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 1093              		.loc 1 1438 0
 1094 008e 0420     		movs	r0, #4
 1095 0090 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1096              	.LVL118:
 1097              	.L88:
1446:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 1098              		.loc 1 1446 0
 1099 0094 0120     		movs	r0, #1
 1100              	.LVL119:
1451:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 118


 1101              		.loc 1 1451 0
 1102 0096 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1103              	.LVL120:
 1104              	.L91:
 1105 009a 00BF     		.align	2
 1106              	.L90:
 1107 009c 00000000 		.word	.LANCHOR0
 1108 00a0 BC000000 		.word	.LANCHOR0+188
 1109              		.cfi_endproc
 1110              	.LFE74:
 1111              		.size	eTaskGetState, .-eTaskGetState
 1112              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1113              		.align	2
 1114              		.global	uxTaskPriorityGet
 1115              		.thumb
 1116              		.thumb_func
 1117              		.type	uxTaskPriorityGet, %function
 1118              	uxTaskPriorityGet:
 1119              	.LFB75:
1459:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
 1120              		.loc 1 1459 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 1124              	.LVL121:
 1125 0000 10B5     		push	{r4, lr}
 1126              		.cfi_def_cfa_offset 8
 1127              		.cfi_offset 4, -8
 1128              		.cfi_offset 14, -4
 1129 0002 0446     		mov	r4, r0
1463:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 1130              		.loc 1 1463 0
 1131 0004 FFF7FEFF 		bl	vPortEnterCritical
 1132              	.LVL122:
1467:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1133              		.loc 1 1467 0
 1134 0008 14B9     		cbnz	r4, .L93
1467:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1135              		.loc 1 1467 0 is_stmt 0 discriminator 1
 1136 000a 044B     		ldr	r3, .L96
 1137 000c D3F8D840 		ldr	r4, [r3, #216]
 1138              	.LVL123:
 1139              	.L93:
1468:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 1140              		.loc 1 1468 0 is_stmt 1 discriminator 4
 1141 0010 E46A     		ldr	r4, [r4, #44]
 1142              	.LVL124:
1470:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1143              		.loc 1 1470 0 discriminator 4
 1144 0012 FFF7FEFF 		bl	vPortExitCritical
 1145              	.LVL125:
1473:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1146              		.loc 1 1473 0 discriminator 4
 1147 0016 2046     		mov	r0, r4
 1148 0018 10BD     		pop	{r4, pc}
 1149              	.LVL126:
 1150              	.L97:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 119


 1151 001a 00BF     		.align	2
 1152              	.L96:
 1153 001c 00000000 		.word	.LANCHOR0
 1154              		.cfi_endproc
 1155              	.LFE75:
 1156              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1157              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1158              		.align	2
 1159              		.global	uxTaskPriorityGetFromISR
 1160              		.thumb
 1161              		.thumb_func
 1162              		.type	uxTaskPriorityGetFromISR, %function
 1163              	uxTaskPriorityGetFromISR:
 1164              	.LFB76:
1481:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t const * pxTCB;
 1165              		.loc 1 1481 0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 0
 1168              		@ frame_needed = 0, uses_anonymous_args = 0
 1169              		@ link register save eliminated.
 1170              	.LVL127:
 1171              	.LBB41:
 1172              	.LBB42:
 1173              		.file 2 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel <DEVELOPMENT BRANCH>
   3:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
   7:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  13:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  14:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  16:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  17:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  24:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * https://www.FreeRTOS.org
  25:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * https://github.com/FreeRTOS
  26:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  27:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  */
  28:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  29:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  30:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  31:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define PORTMACRO_H
  32:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  33:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* *INDENT-OFF* */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 120


  34:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  35:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     extern "C" {
  36:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** #endif
  37:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* *INDENT-ON* */
  38:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  39:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  40:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  41:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  43:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  44:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  45:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  46:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  47:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  */
  48:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  49:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  50:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portCHAR          char
  51:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portFLOAT         float
  52:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portDOUBLE        double
  53:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portLONG          long
  54:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portSHORT         short
  55:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  56:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portBASE_TYPE     long
  57:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  58:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  59:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     typedef long             BaseType_t;
  60:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     typedef unsigned long    UBaseType_t;
  61:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  62:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS )
  63:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         typedef uint16_t     TickType_t;
  64:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  65:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_32_BITS )
  66:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         typedef uint32_t     TickType_t;
  67:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  68:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  69:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  70:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * not need to be guarded with a critical section. */
  71:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  72:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #else
  73:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #error configTICK_TYPE_WIDTH_IN_BITS set to unsupported tick type width.
  74:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif
  75:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  76:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  77:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  78:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  79:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  80:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  81:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  82:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  83:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  84:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  85:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portYIELD()                                 \
  86:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     {                                                   \
  87:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  88:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  89:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****                                                         \
  90:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 121


  91:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  92:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  93:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile ( "isb" );                                  \
  94:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     }
  95:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  96:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  97:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  98:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  99:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
 100:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 101:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 102:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
 103:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     extern void vPortEnterCritical( void );
 104:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     extern void vPortExitCritical( void );
 105:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 106:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 107:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 108:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 109:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 110:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 111:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 112:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 114:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 115:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 116:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * (which build with all the ports) will build. */
 117:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 118:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 119:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 120:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 121:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 122:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 123:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 124:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 125:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif
 126:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 127:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 128:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 129:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 130:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 131:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif
 132:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 133:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 134:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 135:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Generic helper function. */
 136:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 137:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         {
 138:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             uint8_t ucReturn;
 139:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 140:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 141:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 142:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             return ucReturn;
 143:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         }
 144:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 145:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Check the configuration. */
 146:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 147:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 122


 148:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #endif
 149:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 150:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 151:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 152:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 153:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 154:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 155:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 156:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 157:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 158:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 161:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 162:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #ifdef configASSERT
 163:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         void vPortValidateInterruptPriority( void );
 164:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 165:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif
 166:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 167:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 168:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portNOP()
 169:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 170:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portINLINE              __inline
 171:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 172:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #ifndef portFORCE_INLINE
 173:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 174:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif
 175:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 176:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 177:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 178:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 179:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     {
 180:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         uint32_t ulCurrentInterrupt;
 181:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         BaseType_t xReturn;
 182:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 183:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 184:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 185:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 186:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 187:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         {
 188:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             xReturn = pdFALSE;
 189:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         }
 190:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         else
 191:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         {
 192:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             xReturn = pdTRUE;
 193:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         }
 194:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 195:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         return xReturn;
 196:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     }
 197:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 198:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 199:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 200:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 201:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     {
 202:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         uint32_t ulNewBASEPRI;
 203:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 204:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 123


 205:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         (
 206:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   mov %0, %1                                              \n"\
 207:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   msr basepri, %0                                         \n"\
 208:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   isb                                                     \n"\
 209:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   dsb                                                     \n"\
 210:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 211:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         );
 212:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     }
 213:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 214:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 215:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 216:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 217:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     {
 218:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 219:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 220:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile
 1174              		.loc 2 220 0
 1175              		.syntax unified
 1176              	@ 220 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 1177 0000 EFF31183 		   mrs r3, basepri                                         
 1178 0004 4FF0A002 	   mov r2, #160                                              
 1179 0008 82F31188 	   msr basepri, r2                                         
 1180 000c BFF36F8F 	   isb                                                     
 1181 0010 BFF34F8F 	   dsb                                                     
 1182              	
 1183              	@ 0 "" 2
 1184              		.thumb
 1185              		.syntax unified
 1186              	.LBE42:
 1187              	.LBE41:
1508:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1188              		.loc 1 1508 0
 1189 0014 10B9     		cbnz	r0, .L99
1508:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             uxReturn = pxTCB->uxPriority;
 1190              		.loc 1 1508 0 is_stmt 0 discriminator 1
 1191 0016 034A     		ldr	r2, .L101
 1192 0018 D2F8D800 		ldr	r0, [r2, #216]
 1193              	.LVL128:
 1194              	.L99:
1509:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 1195              		.loc 1 1509 0 is_stmt 1 discriminator 4
 1196 001c C06A     		ldr	r0, [r0, #44]
 1197              	.LVL129:
 1198              	.LBB43:
 1199              	.LBB44:
 221:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         (
 222:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   mrs %0, basepri                                         \n"\
 223:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   mov %1, %2                                              \n"\
 224:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   msr basepri, %1                                         \n"\
 225:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   isb                                                     \n"\
 226:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   dsb                                                     \n"\
 227:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 228:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         );
 229:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 230:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 231:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****          * warnings. */
 232:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         return ulOriginalBASEPRI;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 124


 233:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     }
 234:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 235:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 236:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 237:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     {
 238:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile
 1200              		.loc 2 238 0 discriminator 4
 1201              		.syntax unified
 1202              	@ 238 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 1203 001e 83F31188 		   msr basepri, r3 
 1204              	@ 0 "" 2
 1205              	.LVL130:
 1206              		.thumb
 1207              		.syntax unified
 1208              	.LBE44:
 1209              	.LBE43:
1514:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1210              		.loc 1 1514 0 discriminator 4
 1211 0022 7047     		bx	lr
 1212              	.L102:
 1213              		.align	2
 1214              	.L101:
 1215 0024 00000000 		.word	.LANCHOR0
 1216              		.cfi_endproc
 1217              	.LFE76:
 1218              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1219              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1220              		.align	2
 1221              		.global	vTaskPrioritySet
 1222              		.thumb
 1223              		.thumb_func
 1224              		.type	vTaskPrioritySet, %function
 1225              	vTaskPrioritySet:
 1226              	.LFB77:
1523:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 1227              		.loc 1 1523 0
 1228              		.cfi_startproc
 1229              		@ args = 0, pretend = 0, frame = 0
 1230              		@ frame_needed = 0, uses_anonymous_args = 0
 1231              	.LVL131:
 1232 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1233              		.cfi_def_cfa_offset 24
 1234              		.cfi_offset 3, -24
 1235              		.cfi_offset 4, -20
 1236              		.cfi_offset 5, -16
 1237              		.cfi_offset 6, -12
 1238              		.cfi_offset 7, -8
 1239              		.cfi_offset 14, -4
 1240 0002 0446     		mov	r4, r0
 1241 0004 0D46     		mov	r5, r1
 1242              	.LVL132:
1531:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 1243              		.loc 1 1531 0
 1244 0006 0429     		cmp	r1, #4
 1245 0008 00D9     		bls	.L104
1533:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 1246              		.loc 1 1533 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 125


 1247 000a 0425     		movs	r5, #4
 1248              	.L104:
 1249              	.LVL133:
1540:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 1250              		.loc 1 1540 0
 1251 000c FFF7FEFF 		bl	vPortEnterCritical
 1252              	.LVL134:
1544:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1253              		.loc 1 1544 0
 1254 0010 14B9     		cbnz	r4, .L105
1544:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1255              		.loc 1 1544 0 is_stmt 0 discriminator 1
 1256 0012 3A4B     		ldr	r3, .L118
 1257 0014 D3F8D840 		ldr	r4, [r3, #216]
 1258              	.LVL135:
 1259              	.L105:
1550:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 1260              		.loc 1 1550 0 is_stmt 1 discriminator 4
 1261 0018 236C     		ldr	r3, [r4, #64]
 1262              	.LVL136:
1558:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 1263              		.loc 1 1558 0 discriminator 4
 1264 001a 9D42     		cmp	r5, r3
 1265 001c 6AD0     		beq	.L106
1562:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 1266              		.loc 1 1562 0
 1267 001e 0CD9     		bls	.L107
1564:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 1268              		.loc 1 1564 0
 1269 0020 364A     		ldr	r2, .L118
 1270 0022 D2F8D820 		ldr	r2, [r2, #216]
 1271 0026 9442     		cmp	r4, r2
 1272 0028 0ED0     		beq	.L114
1569:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
 1273              		.loc 1 1569 0
 1274 002a 344A     		ldr	r2, .L118
 1275 002c D2F8D820 		ldr	r2, [r2, #216]
 1276 0030 D26A     		ldr	r2, [r2, #44]
 1277 0032 9542     		cmp	r5, r2
 1278 0034 0AD8     		bhi	.L115
1526:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1279              		.loc 1 1526 0
 1280 0036 0027     		movs	r7, #0
 1281 0038 0BE0     		b	.L108
 1282              	.L107:
1585:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 1283              		.loc 1 1585 0
 1284 003a 304A     		ldr	r2, .L118
 1285 003c D2F8D820 		ldr	r2, [r2, #216]
 1286 0040 9442     		cmp	r4, r2
 1287 0042 05D0     		beq	.L116
1526:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1288              		.loc 1 1526 0
 1289 0044 0027     		movs	r7, #0
 1290 0046 04E0     		b	.L108
 1291              	.L114:
 1292 0048 0027     		movs	r7, #0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 126


 1293 004a 02E0     		b	.L108
 1294              	.L115:
1571:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
 1295              		.loc 1 1571 0
 1296 004c 0127     		movs	r7, #1
 1297 004e 00E0     		b	.L108
 1298              	.L116:
1590:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 1299              		.loc 1 1590 0
 1300 0050 0127     		movs	r7, #1
 1301              	.L108:
 1302              	.LVL137:
1602:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1303              		.loc 1 1602 0
 1304 0052 E66A     		ldr	r6, [r4, #44]
 1305              	.LVL138:
1608:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 1306              		.loc 1 1608 0
 1307 0054 B342     		cmp	r3, r6
 1308 0056 00D1     		bne	.L109
1610:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 1309              		.loc 1 1610 0
 1310 0058 E562     		str	r5, [r4, #44]
 1311              	.L109:
1618:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 1312              		.loc 1 1618 0
 1313 005a 2564     		str	r5, [r4, #64]
1628:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 1314              		.loc 1 1628 0
 1315 005c A369     		ldr	r3, [r4, #24]
 1316              	.LVL139:
 1317 005e 002B     		cmp	r3, #0
 1318 0060 02DB     		blt	.L110
1630:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 1319              		.loc 1 1630 0
 1320 0062 C5F10505 		rsb	r5, r5, #5
 1321              	.LVL140:
 1322 0066 A561     		str	r5, [r4, #24]
 1323              	.L110:
1641:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 1324              		.loc 1 1641 0
 1325 0068 6169     		ldr	r1, [r4, #20]
 1326 006a 06EB8602 		add	r2, r6, r6, lsl #2
 1327 006e 9300     		lsls	r3, r2, #2
 1328 0070 234A     		ldr	r2, .L118+4
 1329 0072 1344     		add	r3, r3, r2
 1330 0074 9942     		cmp	r1, r3
 1331 0076 34D1     		bne	.L111
1646:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 1332              		.loc 1 1646 0
 1333 0078 251D     		adds	r5, r4, #4
 1334 007a 2846     		mov	r0, r5
 1335 007c FFF7FEFF 		bl	uxListRemove
 1336              	.LVL141:
 1337 0080 48B9     		cbnz	r0, .L112
1651:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 1338              		.loc 1 1651 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 127


 1339 0082 0123     		movs	r3, #1
 1340 0084 03FA06F6 		lsl	r6, r3, r6
 1341              	.LVL142:
 1342 0088 1C4A     		ldr	r2, .L118
 1343 008a D2F8E430 		ldr	r3, [r2, #228]
 1344 008e 23EA0606 		bic	r6, r3, r6
 1345 0092 C2F8E460 		str	r6, [r2, #228]
 1346              	.L112:
1658:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 1347              		.loc 1 1658 0
 1348 0096 E36A     		ldr	r3, [r4, #44]
 1349 0098 0121     		movs	r1, #1
 1350 009a 01FA03F0 		lsl	r0, r1, r3
 1351 009e 174A     		ldr	r2, .L118
 1352 00a0 D2F8E410 		ldr	r1, [r2, #228]
 1353 00a4 0143     		orrs	r1, r1, r0
 1354 00a6 C2F8E410 		str	r1, [r2, #228]
 1355              	.LBB45:
 1356 00aa 03EB8303 		add	r3, r3, r3, lsl #2
 1357 00ae 9900     		lsls	r1, r3, #2
 1358 00b0 1144     		add	r1, r1, r2
 1359 00b2 4B6B     		ldr	r3, [r1, #52]
 1360              	.LVL143:
 1361 00b4 A360     		str	r3, [r4, #8]
 1362 00b6 9968     		ldr	r1, [r3, #8]
 1363 00b8 E160     		str	r1, [r4, #12]
 1364 00ba 9968     		ldr	r1, [r3, #8]
 1365 00bc 4D60     		str	r5, [r1, #4]
 1366 00be 9D60     		str	r5, [r3, #8]
 1367 00c0 E36A     		ldr	r3, [r4, #44]
 1368              	.LVL144:
 1369 00c2 02F13006 		add	r6, r2, #48
 1370 00c6 9D00     		lsls	r5, r3, #2
 1371 00c8 E818     		adds	r0, r5, r3
 1372 00ca 8100     		lsls	r1, r0, #2
 1373 00cc 3144     		add	r1, r1, r6
 1374 00ce 6161     		str	r1, [r4, #20]
 1375 00d0 E818     		adds	r0, r5, r3
 1376 00d2 8100     		lsls	r1, r0, #2
 1377 00d4 1144     		add	r1, r1, r2
 1378 00d6 086B     		ldr	r0, [r1, #48]
 1379 00d8 0130     		adds	r0, r0, #1
 1380 00da 2B44     		add	r3, r3, r5
 1381 00dc 9900     		lsls	r1, r3, #2
 1382 00de 0A44     		add	r2, r2, r1
 1383 00e0 1063     		str	r0, [r2, #48]
 1384              	.L111:
 1385              	.LBE45:
1665:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 1386              		.loc 1 1665 0
 1387 00e2 3FB1     		cbz	r7, .L106
1667:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 1388              		.loc 1 1667 0
 1389 00e4 4FF08052 		mov	r2, #268435456
 1390 00e8 064B     		ldr	r3, .L118+8
 1391 00ea 1A60     		str	r2, [r3]
 1392              		.syntax unified
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 128


 1393              	@ 1667 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 1394 00ec BFF34F8F 		dsb
 1395              	@ 0 "" 2
 1396              	@ 1667 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 1397 00f0 BFF36F8F 		isb
 1398              	@ 0 "" 2
 1399              	.LVL145:
 1400              		.thumb
 1401              		.syntax unified
 1402              	.L106:
1679:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 1403              		.loc 1 1679 0
 1404 00f4 FFF7FEFF 		bl	vPortExitCritical
 1405              	.LVL146:
 1406 00f8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1407              	.LVL147:
 1408              	.L119:
 1409 00fa 00BF     		.align	2
 1410              	.L118:
 1411 00fc 00000000 		.word	.LANCHOR0
 1412 0100 30000000 		.word	.LANCHOR0+48
 1413 0104 04ED00E0 		.word	-536810236
 1414              		.cfi_endproc
 1415              	.LFE77:
 1416              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1417              		.section	.text.vTaskResume,"ax",%progbits
 1418              		.align	2
 1419              		.global	vTaskResume
 1420              		.thumb
 1421              		.thumb_func
 1422              		.type	vTaskResume, %function
 1423              	vTaskResume:
 1424              	.LFB80:
1840:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1425              		.loc 1 1840 0
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 0
 1428              		@ frame_needed = 0, uses_anonymous_args = 0
 1429              	.LVL148:
1848:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 1430              		.loc 1 1848 0
 1431 0000 254B     		ldr	r3, .L125
 1432 0002 D3F8D830 		ldr	r3, [r3, #216]
 1433 0006 9842     		cmp	r0, r3
 1434 0008 45D0     		beq	.L124
1848:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 1435              		.loc 1 1848 0 is_stmt 0 discriminator 1
 1436 000a 0028     		cmp	r0, #0
 1437 000c 43D0     		beq	.L124
1840:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1438              		.loc 1 1840 0 is_stmt 1
 1439 000e 70B5     		push	{r4, r5, r6, lr}
 1440              		.cfi_def_cfa_offset 16
 1441              		.cfi_offset 4, -16
 1442              		.cfi_offset 5, -12
 1443              		.cfi_offset 6, -8
 1444              		.cfi_offset 14, -4
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 129


 1445 0010 0446     		mov	r4, r0
1850:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 1446              		.loc 1 1850 0
 1447 0012 FFF7FEFF 		bl	vPortEnterCritical
 1448              	.LVL149:
1852:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 1449              		.loc 1 1852 0
 1450 0016 2046     		mov	r0, r4
 1451 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1452              	.LVL150:
 1453 001c 0028     		cmp	r0, #0
 1454 001e 37D0     		beq	.L122
1858:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1455              		.loc 1 1858 0
 1456 0020 251D     		adds	r5, r4, #4
 1457 0022 2846     		mov	r0, r5
 1458 0024 FFF7FEFF 		bl	uxListRemove
 1459              	.LVL151:
1859:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1460              		.loc 1 1859 0
 1461 0028 E26A     		ldr	r2, [r4, #44]
 1462 002a 0121     		movs	r1, #1
 1463 002c 01FA02F0 		lsl	r0, r1, r2
 1464 0030 194B     		ldr	r3, .L125
 1465 0032 D3F8E410 		ldr	r1, [r3, #228]
 1466 0036 0143     		orrs	r1, r1, r0
 1467 0038 C3F8E410 		str	r1, [r3, #228]
 1468              	.LBB46:
 1469 003c 02EB8202 		add	r2, r2, r2, lsl #2
 1470 0040 9100     		lsls	r1, r2, #2
 1471 0042 1944     		add	r1, r1, r3
 1472 0044 4A6B     		ldr	r2, [r1, #52]
 1473              	.LVL152:
 1474 0046 A260     		str	r2, [r4, #8]
 1475 0048 9168     		ldr	r1, [r2, #8]
 1476 004a E160     		str	r1, [r4, #12]
 1477 004c 9168     		ldr	r1, [r2, #8]
 1478 004e 4D60     		str	r5, [r1, #4]
 1479 0050 9560     		str	r5, [r2, #8]
 1480 0052 E26A     		ldr	r2, [r4, #44]
 1481              	.LVL153:
 1482 0054 03F13006 		add	r6, r3, #48
 1483 0058 9500     		lsls	r5, r2, #2
 1484 005a A818     		adds	r0, r5, r2
 1485 005c 8100     		lsls	r1, r0, #2
 1486 005e 3144     		add	r1, r1, r6
 1487 0060 6161     		str	r1, [r4, #20]
 1488 0062 A818     		adds	r0, r5, r2
 1489 0064 8100     		lsls	r1, r0, #2
 1490 0066 1944     		add	r1, r1, r3
 1491 0068 086B     		ldr	r0, [r1, #48]
 1492 006a 0130     		adds	r0, r0, #1
 1493 006c 2A44     		add	r2, r2, r5
 1494 006e 9100     		lsls	r1, r2, #2
 1495 0070 1944     		add	r1, r1, r3
 1496 0072 0863     		str	r0, [r1, #48]
 1497              	.LBE46:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 130


1862:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 1498              		.loc 1 1862 0
 1499 0074 E26A     		ldr	r2, [r4, #44]
 1500 0076 D3F8D830 		ldr	r3, [r3, #216]
 1501 007a DB6A     		ldr	r3, [r3, #44]
 1502 007c 9A42     		cmp	r2, r3
 1503 007e 07D9     		bls	.L122
1867:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 1504              		.loc 1 1867 0
 1505 0080 4FF08052 		mov	r2, #268435456
 1506 0084 054B     		ldr	r3, .L125+4
 1507 0086 1A60     		str	r2, [r3]
 1508              		.syntax unified
 1509              	@ 1867 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 1510 0088 BFF34F8F 		dsb
 1511              	@ 0 "" 2
 1512              	@ 1867 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 1513 008c BFF36F8F 		isb
 1514              	@ 0 "" 2
 1515              		.thumb
 1516              		.syntax unified
 1517              	.L122:
1879:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 1518              		.loc 1 1879 0
 1519 0090 FFF7FEFF 		bl	vPortExitCritical
 1520              	.LVL154:
 1521 0094 70BD     		pop	{r4, r5, r6, pc}
 1522              	.LVL155:
 1523              	.L124:
 1524              		.cfi_def_cfa_offset 0
 1525              		.cfi_restore 4
 1526              		.cfi_restore 5
 1527              		.cfi_restore 6
 1528              		.cfi_restore 14
 1529 0096 7047     		bx	lr
 1530              	.L126:
 1531              		.align	2
 1532              	.L125:
 1533 0098 00000000 		.word	.LANCHOR0
 1534 009c 04ED00E0 		.word	-536810236
 1535              		.cfi_endproc
 1536              	.LFE80:
 1537              		.size	vTaskResume, .-vTaskResume
 1538              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1539              		.align	2
 1540              		.global	xTaskResumeFromISR
 1541              		.thumb
 1542              		.thumb_func
 1543              		.type	xTaskResumeFromISR, %function
 1544              	xTaskResumeFromISR:
 1545              	.LFB81:
1894:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xYieldRequired = pdFALSE;
 1546              		.loc 1 1894 0
 1547              		.cfi_startproc
 1548              		@ args = 0, pretend = 0, frame = 0
 1549              		@ frame_needed = 0, uses_anonymous_args = 0
 1550              	.LVL156:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 131


 1551 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1552              		.cfi_def_cfa_offset 24
 1553              		.cfi_offset 3, -24
 1554              		.cfi_offset 4, -20
 1555              		.cfi_offset 5, -16
 1556              		.cfi_offset 6, -12
 1557              		.cfi_offset 7, -8
 1558              		.cfi_offset 14, -4
 1559 0002 0446     		mov	r4, r0
 1560              	.LVL157:
 1561              	.LBB47:
 1562              	.LBB48:
 220:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         (
 1563              		.loc 2 220 0
 1564              		.syntax unified
 1565              	@ 220 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 1566 0004 EFF31186 		   mrs r6, basepri                                         
 1567 0008 4FF0A003 	   mov r3, #160                                              
 1568 000c 83F31188 	   msr basepri, r3                                         
 1569 0010 BFF36F8F 	   isb                                                     
 1570 0014 BFF34F8F 	   dsb                                                     
 1571              	
 1572              	@ 0 "" 2
 1573              		.thumb
 1574              		.syntax unified
 1575              	.LBE48:
 1576              	.LBE47:
1921:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 1577              		.loc 1 1921 0
 1578 0018 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1579              	.LVL158:
 1580 001c 0028     		cmp	r0, #0
 1581 001e 43D0     		beq	.L131
1926:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 1582              		.loc 1 1926 0
 1583 0020 244B     		ldr	r3, .L134
 1584 0022 D3F8F030 		ldr	r3, [r3, #240]
 1585 0026 002B     		cmp	r3, #0
 1586 0028 37D1     		bne	.L129
1930:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 1587              		.loc 1 1930 0
 1588 002a E26A     		ldr	r2, [r4, #44]
 1589 002c 214B     		ldr	r3, .L134
 1590 002e D3F8D830 		ldr	r3, [r3, #216]
 1591 0032 DB6A     		ldr	r3, [r3, #44]
 1592 0034 9A42     		cmp	r2, r3
 1593 0036 04D9     		bls	.L132
 1594              	.LVL159:
1937:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 1595              		.loc 1 1937 0
 1596 0038 0125     		movs	r5, #1
 1597 003a 1E4B     		ldr	r3, .L134
 1598 003c C3F8F450 		str	r5, [r3, #244]
 1599 0040 00E0     		b	.L130
 1600              	.LVL160:
 1601              	.L132:
1895:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 132


 1602              		.loc 1 1895 0
 1603 0042 0025     		movs	r5, #0
 1604              	.LVL161:
 1605              	.L130:
1944:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 1606              		.loc 1 1944 0
 1607 0044 271D     		adds	r7, r4, #4
 1608 0046 3846     		mov	r0, r7
 1609 0048 FFF7FEFF 		bl	uxListRemove
 1610              	.LVL162:
1945:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 1611              		.loc 1 1945 0
 1612 004c E36A     		ldr	r3, [r4, #44]
 1613 004e 0121     		movs	r1, #1
 1614 0050 01FA03F0 		lsl	r0, r1, r3
 1615 0054 174A     		ldr	r2, .L134
 1616 0056 D2F8E410 		ldr	r1, [r2, #228]
 1617 005a 0143     		orrs	r1, r1, r0
 1618 005c C2F8E410 		str	r1, [r2, #228]
 1619              	.LBB49:
 1620 0060 03EB8303 		add	r3, r3, r3, lsl #2
 1621 0064 9900     		lsls	r1, r3, #2
 1622 0066 1144     		add	r1, r1, r2
 1623 0068 4B6B     		ldr	r3, [r1, #52]
 1624              	.LVL163:
 1625 006a A360     		str	r3, [r4, #8]
 1626 006c 9968     		ldr	r1, [r3, #8]
 1627 006e E160     		str	r1, [r4, #12]
 1628 0070 9968     		ldr	r1, [r3, #8]
 1629 0072 4F60     		str	r7, [r1, #4]
 1630 0074 9F60     		str	r7, [r3, #8]
 1631 0076 E36A     		ldr	r3, [r4, #44]
 1632              	.LVL164:
 1633 0078 02F1300E 		add	lr, r2, #48
 1634 007c 9F00     		lsls	r7, r3, #2
 1635 007e F818     		adds	r0, r7, r3
 1636 0080 8100     		lsls	r1, r0, #2
 1637 0082 7144     		add	r1, r1, lr
 1638 0084 6161     		str	r1, [r4, #20]
 1639 0086 F818     		adds	r0, r7, r3
 1640 0088 8100     		lsls	r1, r0, #2
 1641 008a 1144     		add	r1, r1, r2
 1642 008c 086B     		ldr	r0, [r1, #48]
 1643 008e 0130     		adds	r0, r0, #1
 1644 0090 3B44     		add	r3, r3, r7
 1645 0092 9900     		lsls	r1, r3, #2
 1646 0094 0A44     		add	r2, r2, r1
 1647 0096 1063     		str	r0, [r2, #48]
 1648              	.LBE49:
 1649 0098 07E0     		b	.L128
 1650              	.LVL165:
 1651              	.L129:
1952:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 1652              		.loc 1 1952 0
 1653 009a 04F11801 		add	r1, r4, #24
 1654 009e 0648     		ldr	r0, .L134+4
 1655 00a0 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 133


 1656              	.LVL166:
1895:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = xTaskToResume;
 1657              		.loc 1 1895 0
 1658 00a4 0025     		movs	r5, #0
 1659 00a6 00E0     		b	.L128
 1660              	.L131:
 1661 00a8 0025     		movs	r5, #0
 1662              	.LVL167:
 1663              	.L128:
 1664              	.LBB50:
 1665              	.LBB51:
 1666              		.loc 2 238 0
 1667              		.syntax unified
 1668              	@ 238 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 1669 00aa 86F31188 		   msr basepri, r6 
 1670              	@ 0 "" 2
 1671              	.LVL168:
 1672              		.thumb
 1673              		.syntax unified
 1674              	.LBE51:
 1675              	.LBE50:
1963:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1676              		.loc 1 1963 0
 1677 00ae 2846     		mov	r0, r5
 1678 00b0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1679              	.LVL169:
 1680              	.L135:
 1681 00b2 00BF     		.align	2
 1682              	.L134:
 1683 00b4 00000000 		.word	.LANCHOR0
 1684 00b8 14000000 		.word	.LANCHOR0+20
 1685              		.cfi_endproc
 1686              	.LFE81:
 1687              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1688              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1689              		.align	2
 1690              		.global	vTaskStartScheduler
 1691              		.thumb
 1692              		.thumb_func
 1693              		.type	vTaskStartScheduler, %function
 1694              	vTaskStartScheduler:
 1695              	.LFB82:
1969:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xReturn;
 1696              		.loc 1 1969 0
 1697              		.cfi_startproc
 1698              		@ args = 0, pretend = 0, frame = 0
 1699              		@ frame_needed = 0, uses_anonymous_args = 0
 1700 0000 00B5     		push	{lr}
 1701              		.cfi_def_cfa_offset 4
 1702              		.cfi_offset 14, -4
 1703 0002 83B0     		sub	sp, sp, #12
 1704              		.cfi_def_cfa_offset 16
2002:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                                configIDLE_TASK_NAME,
 1705              		.loc 1 2002 0
 1706 0004 114B     		ldr	r3, .L139
 1707 0006 0193     		str	r3, [sp, #4]
 1708 0008 0023     		movs	r3, #0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 134


 1709 000a 0093     		str	r3, [sp]
 1710 000c 6422     		movs	r2, #100
 1711 000e 1049     		ldr	r1, .L139+4
 1712 0010 1048     		ldr	r0, .L139+8
 1713 0012 FFF7FEFF 		bl	xTaskCreate
 1714              	.LVL170:
2024:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 1715              		.loc 1 2024 0
 1716 0016 0128     		cmp	r0, #1
 1717 0018 13D1     		bne	.L137
 1718              	.LBB52:
 1719              	.LBB53:
 204:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         (
 1720              		.loc 2 204 0
 1721              		.syntax unified
 1722              	@ 204 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 1723 001a 4FF0A003 		   mov r3, #160                                              
 1724 001e 83F31188 	   msr basepri, r3                                         
 1725 0022 BFF36F8F 	   isb                                                     
 1726 0026 BFF34F8F 	   dsb                                                     
 1727              	
 1728              	@ 0 "" 2
 1729              		.thumb
 1730              		.syntax unified
 1731              	.LBE53:
 1732              	.LBE52:
2050:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xSchedulerRunning = pdTRUE;
 1733              		.loc 1 2050 0
 1734 002a 0B4B     		ldr	r3, .L139+12
 1735 002c 4FF0FF32 		mov	r2, #-1
 1736 0030 DA62     		str	r2, [r3, #44]
2051:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1737              		.loc 1 2051 0
 1738 0032 0122     		movs	r2, #1
 1739 0034 C3F8DC20 		str	r2, [r3, #220]
2052:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1740              		.loc 1 2052 0
 1741 0038 0022     		movs	r2, #0
 1742 003a C3F8EC20 		str	r2, [r3, #236]
2066:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1743              		.loc 1 2066 0
 1744 003e FFF7FEFF 		bl	xPortStartScheduler
 1745              	.LVL171:
 1746              	.L137:
2089:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
 1747              		.loc 1 2089 0
 1748 0042 064B     		ldr	r3, .L139+16
 1749 0044 1B68     		ldr	r3, [r3]
2090:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 1750              		.loc 1 2090 0
 1751 0046 03B0     		add	sp, sp, #12
 1752              		.cfi_def_cfa_offset 4
 1753              		@ sp needed
 1754 0048 5DF804FB 		ldr	pc, [sp], #4
 1755              	.L140:
 1756              		.align	2
 1757              	.L139:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 135


 1758 004c F8000000 		.word	.LANCHOR0+248
 1759 0050 00000000 		.word	.LC0
 1760 0054 00000000 		.word	prvIdleTask
 1761 0058 00000000 		.word	.LANCHOR0
 1762 005c 00000000 		.word	.LANCHOR1
 1763              		.cfi_endproc
 1764              	.LFE82:
 1765              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1766              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1767              		.align	2
 1768              		.global	vTaskEndScheduler
 1769              		.thumb
 1770              		.thumb_func
 1771              		.type	vTaskEndScheduler, %function
 1772              	vTaskEndScheduler:
 1773              	.LFB83:
2094:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* Stop the scheduler interrupts and call the portable scheduler end
 1774              		.loc 1 2094 0
 1775              		.cfi_startproc
 1776              		@ args = 0, pretend = 0, frame = 0
 1777              		@ frame_needed = 0, uses_anonymous_args = 0
 1778 0000 08B5     		push	{r3, lr}
 1779              		.cfi_def_cfa_offset 8
 1780              		.cfi_offset 3, -8
 1781              		.cfi_offset 14, -4
 1782              	.LBB54:
 1783              	.LBB55:
 204:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         (
 1784              		.loc 2 204 0
 1785              		.syntax unified
 1786              	@ 204 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 1787 0002 4FF0A003 		   mov r3, #160                                              
 1788 0006 83F31188 	   msr basepri, r3                                         
 1789 000a BFF36F8F 	   isb                                                     
 1790 000e BFF34F8F 	   dsb                                                     
 1791              	
 1792              	@ 0 "" 2
 1793              		.thumb
 1794              		.syntax unified
 1795              	.LBE55:
 1796              	.LBE54:
2099:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     vPortEndScheduler();
 1797              		.loc 1 2099 0
 1798 0012 0022     		movs	r2, #0
 1799 0014 024B     		ldr	r3, .L143
 1800 0016 C3F8DC20 		str	r2, [r3, #220]
2100:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
 1801              		.loc 1 2100 0
 1802 001a FFF7FEFF 		bl	vPortEndScheduler
 1803              	.LVL172:
 1804 001e 08BD     		pop	{r3, pc}
 1805              	.L144:
 1806              		.align	2
 1807              	.L143:
 1808 0020 00000000 		.word	.LANCHOR0
 1809              		.cfi_endproc
 1810              	.LFE83:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 136


 1811              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 1812              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1813              		.align	2
 1814              		.global	vTaskSuspendAll
 1815              		.thumb
 1816              		.thumb_func
 1817              		.type	vTaskSuspendAll, %function
 1818              	vTaskSuspendAll:
 1819              	.LFB84:
2105:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* A critical section is not required as the variable is of type
 1820              		.loc 1 2105 0
 1821              		.cfi_startproc
 1822              		@ args = 0, pretend = 0, frame = 0
 1823              		@ frame_needed = 0, uses_anonymous_args = 0
 1824              		@ link register save eliminated.
2117:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1825              		.loc 1 2117 0
 1826 0000 034A     		ldr	r2, .L146
 1827 0002 D2F8F030 		ldr	r3, [r2, #240]
 1828 0006 0133     		adds	r3, r3, #1
 1829 0008 C2F8F030 		str	r3, [r2, #240]
2121:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
 1830              		.loc 1 2121 0
 1831 000c 7047     		bx	lr
 1832              	.L147:
 1833 000e 00BF     		.align	2
 1834              	.L146:
 1835 0010 00000000 		.word	.LANCHOR0
 1836              		.cfi_endproc
 1837              	.LFE84:
 1838              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 1839              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1840              		.align	2
 1841              		.global	xTaskGetTickCount
 1842              		.thumb
 1843              		.thumb_func
 1844              		.type	xTaskGetTickCount, %function
 1845              	xTaskGetTickCount:
 1846              	.LFB86:
2301:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TickType_t xTicks;
 1847              		.loc 1 2301 0
 1848              		.cfi_startproc
 1849              		@ args = 0, pretend = 0, frame = 0
 1850              		@ frame_needed = 0, uses_anonymous_args = 0
 1851              		@ link register save eliminated.
2307:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 1852              		.loc 1 2307 0
 1853 0000 014B     		ldr	r3, .L149
 1854 0002 D3F8EC00 		ldr	r0, [r3, #236]
 1855              	.LVL173:
2312:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 1856              		.loc 1 2312 0
 1857 0006 7047     		bx	lr
 1858              	.L150:
 1859              		.align	2
 1860              	.L149:
 1861 0008 00000000 		.word	.LANCHOR0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 137


 1862              		.cfi_endproc
 1863              	.LFE86:
 1864              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 1865              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1866              		.align	2
 1867              		.global	xTaskGetTickCountFromISR
 1868              		.thumb
 1869              		.thumb_func
 1870              		.type	xTaskGetTickCountFromISR, %function
 1871              	xTaskGetTickCountFromISR:
 1872              	.LFB87:
2316:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TickType_t xReturn;
 1873              		.loc 1 2316 0
 1874              		.cfi_startproc
 1875              		@ args = 0, pretend = 0, frame = 0
 1876              		@ frame_needed = 0, uses_anonymous_args = 0
 1877              		@ link register save eliminated.
 1878              	.LVL174:
2338:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 1879              		.loc 1 2338 0
 1880 0000 014B     		ldr	r3, .L152
 1881 0002 D3F8EC00 		ldr	r0, [r3, #236]
 1882              	.LVL175:
2343:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 1883              		.loc 1 2343 0
 1884 0006 7047     		bx	lr
 1885              	.L153:
 1886              		.align	2
 1887              	.L152:
 1888 0008 00000000 		.word	.LANCHOR0
 1889              		.cfi_endproc
 1890              	.LFE87:
 1891              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 1892              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1893              		.align	2
 1894              		.global	uxTaskGetNumberOfTasks
 1895              		.thumb
 1896              		.thumb_func
 1897              		.type	uxTaskGetNumberOfTasks, %function
 1898              	uxTaskGetNumberOfTasks:
 1899              	.LFB88:
2347:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* A critical section is not required because the variables are of type
 1900              		.loc 1 2347 0
 1901              		.cfi_startproc
 1902              		@ args = 0, pretend = 0, frame = 0
 1903              		@ frame_needed = 0, uses_anonymous_args = 0
 1904              		@ link register save eliminated.
2350:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
 1905              		.loc 1 2350 0
 1906 0000 014B     		ldr	r3, .L155
 1907 0002 D3F8D400 		ldr	r0, [r3, #212]
2351:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 1908              		.loc 1 2351 0
 1909 0006 7047     		bx	lr
 1910              	.L156:
 1911              		.align	2
 1912              	.L155:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 138


 1913 0008 00000000 		.word	.LANCHOR0
 1914              		.cfi_endproc
 1915              	.LFE88:
 1916              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 1917              		.section	.text.pcTaskGetName,"ax",%progbits
 1918              		.align	2
 1919              		.global	pcTaskGetName
 1920              		.thumb
 1921              		.thumb_func
 1922              		.type	pcTaskGetName, %function
 1923              	pcTaskGetName:
 1924              	.LFB89:
2355:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TCB_t * pxTCB;
 1925              		.loc 1 2355 0
 1926              		.cfi_startproc
 1927              		@ args = 0, pretend = 0, frame = 0
 1928              		@ frame_needed = 0, uses_anonymous_args = 0
 1929              		@ link register save eliminated.
 1930              	.LVL176:
2360:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTCB );
 1931              		.loc 1 2360 0
 1932 0000 0346     		mov	r3, r0
 1933 0002 10B9     		cbnz	r0, .L158
2360:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTCB );
 1934              		.loc 1 2360 0 is_stmt 0 discriminator 1
 1935 0004 024B     		ldr	r3, .L159
 1936 0006 D3F8D830 		ldr	r3, [r3, #216]
 1937              	.LVL177:
 1938              	.L158:
2363:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 1939              		.loc 1 2363 0 is_stmt 1 discriminator 4
 1940 000a 03F13400 		add	r0, r3, #52
 1941 000e 7047     		bx	lr
 1942              	.L160:
 1943              		.align	2
 1944              	.L159:
 1945 0010 00000000 		.word	.LANCHOR0
 1946              		.cfi_endproc
 1947              	.LFE89:
 1948              		.size	pcTaskGetName, .-pcTaskGetName
 1949              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1950              		.align	2
 1951              		.global	xTaskIncrementTick
 1952              		.thumb
 1953              		.thumb_func
 1954              		.type	xTaskIncrementTick, %function
 1955              	xTaskIncrementTick:
 1956              	.LFB91:
2782:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TCB_t * pxTCB;
 1957              		.loc 1 2782 0
 1958              		.cfi_startproc
 1959              		@ args = 0, pretend = 0, frame = 0
 1960              		@ frame_needed = 0, uses_anonymous_args = 0
 1961 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1962              		.cfi_def_cfa_offset 24
 1963              		.cfi_offset 3, -24
 1964              		.cfi_offset 4, -20
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 139


 1965              		.cfi_offset 5, -16
 1966              		.cfi_offset 6, -12
 1967              		.cfi_offset 7, -8
 1968              		.cfi_offset 14, -4
 1969              	.LVL178:
2792:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 1970              		.loc 1 2792 0
 1971 0002 524B     		ldr	r3, .L180
 1972 0004 D3F8F030 		ldr	r3, [r3, #240]
 1973 0008 002B     		cmp	r3, #0
 1974 000a 40F09480 		bne	.L162
 1975              	.LBB56:
2796:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1976              		.loc 1 2796 0
 1977 000e 4F4B     		ldr	r3, .L180
 1978 0010 D3F8EC50 		ldr	r5, [r3, #236]
 1979 0014 0135     		adds	r5, r5, #1
 1980              	.LVL179:
2800:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 1981              		.loc 1 2800 0
 1982 0016 C3F8EC50 		str	r5, [r3, #236]
2802:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 1983              		.loc 1 2802 0
 1984 001a 65B9     		cbnz	r5, .L163
 1985              	.LBB57:
2804:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 1986              		.loc 1 2804 0
 1987 001c 9A6A     		ldr	r2, [r3, #40]
 1988              	.LVL180:
 1989 001e D3F8D010 		ldr	r1, [r3, #208]
 1990 0022 9962     		str	r1, [r3, #40]
 1991 0024 C3F8D020 		str	r2, [r3, #208]
 1992 0028 D3F8FC20 		ldr	r2, [r3, #252]
 1993              	.LVL181:
 1994 002c 0132     		adds	r2, r2, #1
 1995 002e C3F8FC20 		str	r2, [r3, #252]
 1996              	.LVL182:
 1997 0032 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1998              	.LVL183:
 1999              	.L163:
 2000              	.LBE57:
2815:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 2001              		.loc 1 2815 0
 2002 0036 454B     		ldr	r3, .L180
 2003 0038 DB6A     		ldr	r3, [r3, #44]
 2004 003a 9D42     		cmp	r5, r3
 2005 003c 03D2     		bcs	.L175
 2006              	.LBE56:
2785:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2007              		.loc 1 2785 0
 2008 003e 0020     		movs	r0, #0
 2009 0040 68E0     		b	.L165
 2010              	.LVL184:
 2011              	.L176:
 2012              	.LBB61:
2885:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
 2013              		.loc 1 2885 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 140


 2014 0042 0120     		movs	r0, #1
 2015              	.LVL185:
 2016 0044 00E0     		b	.L164
 2017              	.LVL186:
 2018              	.L175:
 2019 0046 0020     		movs	r0, #0
 2020              	.LVL187:
 2021              	.L164:
2819:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 2022              		.loc 1 2819 0
 2023 0048 404B     		ldr	r3, .L180
 2024 004a 9B6A     		ldr	r3, [r3, #40]
 2025 004c 1B68     		ldr	r3, [r3]
 2026 004e 23B9     		cbnz	r3, .L166
2826:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
 2027              		.loc 1 2826 0
 2028 0050 4FF0FF32 		mov	r2, #-1
 2029 0054 3D4B     		ldr	r3, .L180
 2030 0056 DA62     		str	r2, [r3, #44]
2827:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 2031              		.loc 1 2827 0
 2032 0058 5CE0     		b	.L165
 2033              	.L166:
2835:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2034              		.loc 1 2835 0
 2035 005a 3C4B     		ldr	r3, .L180
 2036 005c 9B6A     		ldr	r3, [r3, #40]
 2037 005e DB68     		ldr	r3, [r3, #12]
 2038 0060 DB68     		ldr	r3, [r3, #12]
 2039              	.LVL188:
2836:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2040              		.loc 1 2836 0
 2041 0062 5A68     		ldr	r2, [r3, #4]
 2042              	.LVL189:
2838:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 2043              		.loc 1 2838 0
 2044 0064 9542     		cmp	r5, r2
 2045 0066 02D2     		bcs	.L167
2845:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 2046              		.loc 1 2845 0
 2047 0068 384B     		ldr	r3, .L180
 2048              	.LVL190:
 2049 006a DA62     		str	r2, [r3, #44]
2846:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 2050              		.loc 1 2846 0
 2051 006c 52E0     		b	.L165
 2052              	.LVL191:
 2053              	.L167:
 2054              	.LBB58:
2854:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2055              		.loc 1 2854 0
 2056 006e 5A69     		ldr	r2, [r3, #20]
 2057              	.LVL192:
 2058 0070 9968     		ldr	r1, [r3, #8]
 2059 0072 DC68     		ldr	r4, [r3, #12]
 2060 0074 8C60     		str	r4, [r1, #8]
 2061              	.LVL193:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 141


 2062 0076 D968     		ldr	r1, [r3, #12]
 2063 0078 9C68     		ldr	r4, [r3, #8]
 2064 007a 4C60     		str	r4, [r1, #4]
 2065 007c 5168     		ldr	r1, [r2, #4]
 2066 007e 1E1D     		adds	r6, r3, #4
 2067 0080 B142     		cmp	r1, r6
 2068 0082 01D1     		bne	.L168
2854:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2069              		.loc 1 2854 0 is_stmt 0 discriminator 1
 2070 0084 D968     		ldr	r1, [r3, #12]
 2071 0086 5160     		str	r1, [r2, #4]
 2072              	.L168:
2854:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2073              		.loc 1 2854 0 discriminator 3
 2074 0088 0021     		movs	r1, #0
 2075 008a 5961     		str	r1, [r3, #20]
 2076 008c 1168     		ldr	r1, [r2]
 2077 008e 0139     		subs	r1, r1, #1
 2078 0090 1160     		str	r1, [r2]
 2079              	.LBE58:
2858:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 2080              		.loc 1 2858 0 is_stmt 1 discriminator 3
 2081 0092 9A6A     		ldr	r2, [r3, #40]
 2082              	.LVL194:
 2083 0094 8AB1     		cbz	r2, .L169
 2084              	.LVL195:
 2085              	.LBB59:
2860:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 2086              		.loc 1 2860 0
 2087 0096 D969     		ldr	r1, [r3, #28]
 2088 0098 1C6A     		ldr	r4, [r3, #32]
 2089 009a 8C60     		str	r4, [r1, #8]
 2090 009c 196A     		ldr	r1, [r3, #32]
 2091 009e DC69     		ldr	r4, [r3, #28]
 2092 00a0 4C60     		str	r4, [r1, #4]
 2093 00a2 5468     		ldr	r4, [r2, #4]
 2094 00a4 03F11801 		add	r1, r3, #24
 2095 00a8 8C42     		cmp	r4, r1
 2096 00aa 01D1     		bne	.L170
2860:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 2097              		.loc 1 2860 0 is_stmt 0 discriminator 1
 2098 00ac 196A     		ldr	r1, [r3, #32]
 2099 00ae 5160     		str	r1, [r2, #4]
 2100              	.L170:
2860:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 2101              		.loc 1 2860 0 discriminator 3
 2102 00b0 0021     		movs	r1, #0
 2103 00b2 9962     		str	r1, [r3, #40]
 2104 00b4 1168     		ldr	r1, [r2]
 2105 00b6 0139     		subs	r1, r1, #1
 2106 00b8 1160     		str	r1, [r2]
 2107              	.LVL196:
 2108              	.L169:
 2109              	.LBE59:
2869:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2110              		.loc 1 2869 0 is_stmt 1
 2111 00ba D96A     		ldr	r1, [r3, #44]
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 142


 2112 00bc 0124     		movs	r4, #1
 2113 00be 04FA01F7 		lsl	r7, r4, r1
 2114 00c2 224A     		ldr	r2, .L180
 2115 00c4 D2F8E440 		ldr	r4, [r2, #228]
 2116 00c8 3C43     		orrs	r4, r4, r7
 2117 00ca C2F8E440 		str	r4, [r2, #228]
 2118              	.LBB60:
 2119 00ce 01EB8101 		add	r1, r1, r1, lsl #2
 2120 00d2 8C00     		lsls	r4, r1, #2
 2121 00d4 1444     		add	r4, r4, r2
 2122 00d6 616B     		ldr	r1, [r4, #52]
 2123              	.LVL197:
 2124 00d8 9960     		str	r1, [r3, #8]
 2125 00da 8C68     		ldr	r4, [r1, #8]
 2126 00dc DC60     		str	r4, [r3, #12]
 2127 00de 8C68     		ldr	r4, [r1, #8]
 2128 00e0 6660     		str	r6, [r4, #4]
 2129 00e2 8E60     		str	r6, [r1, #8]
 2130 00e4 D96A     		ldr	r1, [r3, #44]
 2131              	.LVL198:
 2132 00e6 02F1300E 		add	lr, r2, #48
 2133 00ea 8F00     		lsls	r7, r1, #2
 2134 00ec 7E18     		adds	r6, r7, r1
 2135 00ee B400     		lsls	r4, r6, #2
 2136 00f0 7444     		add	r4, r4, lr
 2137 00f2 5C61     		str	r4, [r3, #20]
 2138 00f4 7E18     		adds	r6, r7, r1
 2139 00f6 B400     		lsls	r4, r6, #2
 2140 00f8 1444     		add	r4, r4, r2
 2141 00fa 266B     		ldr	r6, [r4, #48]
 2142 00fc 0136     		adds	r6, r6, #1
 2143 00fe 3944     		add	r1, r1, r7
 2144 0100 8C00     		lsls	r4, r1, #2
 2145 0102 1444     		add	r4, r4, r2
 2146 0104 2663     		str	r6, [r4, #48]
 2147              	.LBE60:
2883:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
 2148              		.loc 1 2883 0
 2149 0106 D96A     		ldr	r1, [r3, #44]
 2150 0108 D2F8D830 		ldr	r3, [r2, #216]
 2151              	.LVL199:
 2152 010c DB6A     		ldr	r3, [r3, #44]
 2153 010e 9942     		cmp	r1, r3
 2154 0110 97D8     		bhi	.L176
 2155 0112 99E7     		b	.L164
 2156              	.LVL200:
 2157              	.L165:
2902:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 2158              		.loc 1 2902 0
 2159 0114 0D49     		ldr	r1, .L180
 2160 0116 D1F8D830 		ldr	r3, [r1, #216]
 2161 011a DB6A     		ldr	r3, [r3, #44]
 2162 011c 03EB8303 		add	r3, r3, r3, lsl #2
 2163 0120 9A00     		lsls	r2, r3, #2
 2164 0122 0A44     		add	r2, r2, r1
 2165 0124 136B     		ldr	r3, [r2, #48]
 2166 0126 012B     		cmp	r3, #1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 143


 2167 0128 00D9     		bls	.L173
2904:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 2168              		.loc 1 2904 0
 2169 012a 0120     		movs	r0, #1
 2170              	.LVL201:
 2171              	.L173:
2930:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 2172              		.loc 1 2930 0
 2173 012c 074B     		ldr	r3, .L180
 2174 012e D3F8F430 		ldr	r3, [r3, #244]
 2175 0132 43B9     		cbnz	r3, .L178
 2176 0134 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2177              	.LVL202:
 2178              	.L162:
 2179              	.LBE61:
2943:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2180              		.loc 1 2943 0
 2181 0136 054A     		ldr	r2, .L180
 2182 0138 D2F80031 		ldr	r3, [r2, #256]
 2183 013c 0133     		adds	r3, r3, #1
 2184 013e C2F80031 		str	r3, [r2, #256]
2785:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2185              		.loc 1 2785 0
 2186 0142 0020     		movs	r0, #0
 2187 0144 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2188              	.LVL203:
 2189              	.L178:
 2190              	.LBB62:
2932:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 2191              		.loc 1 2932 0
 2192 0146 0120     		movs	r0, #1
 2193              	.LVL204:
 2194              	.LBE62:
2955:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 2195              		.loc 1 2955 0
 2196 0148 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2197              	.LVL205:
 2198              	.L181:
 2199 014a 00BF     		.align	2
 2200              	.L180:
 2201 014c 00000000 		.word	.LANCHOR0
 2202              		.cfi_endproc
 2203              	.LFE91:
 2204              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2205              		.section	.text.xTaskResumeAll,"ax",%progbits
 2206              		.align	2
 2207              		.global	xTaskResumeAll
 2208              		.thumb
 2209              		.thumb_func
 2210              		.type	xTaskResumeAll, %function
 2211              	xTaskResumeAll:
 2212              	.LFB85:
2189:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TCB_t * pxTCB = NULL;
 2213              		.loc 1 2189 0
 2214              		.cfi_startproc
 2215              		@ args = 0, pretend = 0, frame = 0
 2216              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 144


 2217 0000 70B5     		push	{r4, r5, r6, lr}
 2218              		.cfi_def_cfa_offset 16
 2219              		.cfi_offset 4, -16
 2220              		.cfi_offset 5, -12
 2221              		.cfi_offset 6, -8
 2222              		.cfi_offset 14, -4
 2223              	.LVL206:
2202:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 2224              		.loc 1 2202 0
 2225 0002 FFF7FEFF 		bl	vPortEnterCritical
 2226              	.LVL207:
2204:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2227              		.loc 1 2204 0
 2228 0006 4D4B     		ldr	r3, .L197
 2229 0008 D3F8F020 		ldr	r2, [r3, #240]
 2230 000c 013A     		subs	r2, r2, #1
 2231 000e C3F8F020 		str	r2, [r3, #240]
2206:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 2232              		.loc 1 2206 0
 2233 0012 D3F8F030 		ldr	r3, [r3, #240]
 2234 0016 002B     		cmp	r3, #0
 2235 0018 40F08880 		bne	.L193
2208:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 2236              		.loc 1 2208 0
 2237 001c 474B     		ldr	r3, .L197
 2238 001e D3F8D430 		ldr	r3, [r3, #212]
 2239 0022 002B     		cmp	r3, #0
 2240 0024 5BD1     		bne	.L194
2191:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2241              		.loc 1 2191 0
 2242 0026 0024     		movs	r4, #0
 2243 0028 83E0     		b	.L183
 2244              	.LVL208:
 2245              	.L188:
2214:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 2246              		.loc 1 2214 0
 2247 002a 444B     		ldr	r3, .L197
 2248              	.LVL209:
 2249 002c 1B6A     		ldr	r3, [r3, #32]
 2250 002e DB68     		ldr	r3, [r3, #12]
 2251              	.LVL210:
 2252              	.LBB63:
2215:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     portMEMORY_BARRIER();
 2253              		.loc 1 2215 0
 2254 0030 9A6A     		ldr	r2, [r3, #40]
 2255              	.LVL211:
 2256 0032 D969     		ldr	r1, [r3, #28]
 2257 0034 186A     		ldr	r0, [r3, #32]
 2258 0036 8860     		str	r0, [r1, #8]
 2259 0038 196A     		ldr	r1, [r3, #32]
 2260 003a D869     		ldr	r0, [r3, #28]
 2261 003c 4860     		str	r0, [r1, #4]
 2262 003e 5068     		ldr	r0, [r2, #4]
 2263 0040 03F11801 		add	r1, r3, #24
 2264 0044 8842     		cmp	r0, r1
 2265 0046 01D1     		bne	.L185
2215:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     portMEMORY_BARRIER();
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 145


 2266              		.loc 1 2215 0 is_stmt 0 discriminator 1
 2267 0048 196A     		ldr	r1, [r3, #32]
 2268 004a 5160     		str	r1, [r2, #4]
 2269              	.L185:
2215:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     portMEMORY_BARRIER();
 2270              		.loc 1 2215 0 discriminator 3
 2271 004c 0021     		movs	r1, #0
 2272 004e 9962     		str	r1, [r3, #40]
 2273 0050 1168     		ldr	r1, [r2]
 2274 0052 0139     		subs	r1, r1, #1
 2275 0054 1160     		str	r1, [r2]
 2276              	.LBE63:
2216:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 2277              		.loc 1 2216 0 is_stmt 1 discriminator 3
 2278              	.LBB64:
2217:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2279              		.loc 1 2217 0 discriminator 3
 2280 0056 5A69     		ldr	r2, [r3, #20]
 2281              	.LVL212:
 2282 0058 9968     		ldr	r1, [r3, #8]
 2283 005a D868     		ldr	r0, [r3, #12]
 2284 005c 8860     		str	r0, [r1, #8]
 2285 005e D968     		ldr	r1, [r3, #12]
 2286 0060 9868     		ldr	r0, [r3, #8]
 2287 0062 4860     		str	r0, [r1, #4]
 2288 0064 5168     		ldr	r1, [r2, #4]
 2289 0066 1C1D     		adds	r4, r3, #4
 2290 0068 A142     		cmp	r1, r4
 2291 006a 01D1     		bne	.L186
2217:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2292              		.loc 1 2217 0 is_stmt 0 discriminator 1
 2293 006c D968     		ldr	r1, [r3, #12]
 2294 006e 5160     		str	r1, [r2, #4]
 2295              	.L186:
2217:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 2296              		.loc 1 2217 0 discriminator 3
 2297 0070 0021     		movs	r1, #0
 2298 0072 5961     		str	r1, [r3, #20]
 2299 0074 1168     		ldr	r1, [r2]
 2300 0076 0139     		subs	r1, r1, #1
 2301 0078 1160     		str	r1, [r2]
 2302              	.LBE64:
2218:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2303              		.loc 1 2218 0 is_stmt 1 discriminator 3
 2304 007a D96A     		ldr	r1, [r3, #44]
 2305 007c 0120     		movs	r0, #1
 2306 007e 00FA01F5 		lsl	r5, r0, r1
 2307 0082 2E4A     		ldr	r2, .L197
 2308              	.LVL213:
 2309 0084 D2F8E400 		ldr	r0, [r2, #228]
 2310 0088 2843     		orrs	r0, r0, r5
 2311 008a C2F8E400 		str	r0, [r2, #228]
 2312              	.LBB65:
 2313 008e 01EB8101 		add	r1, r1, r1, lsl #2
 2314 0092 8800     		lsls	r0, r1, #2
 2315 0094 1044     		add	r0, r0, r2
 2316 0096 416B     		ldr	r1, [r0, #52]
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 146


 2317              	.LVL214:
 2318 0098 9960     		str	r1, [r3, #8]
 2319 009a 8868     		ldr	r0, [r1, #8]
 2320 009c D860     		str	r0, [r3, #12]
 2321 009e 8868     		ldr	r0, [r1, #8]
 2322 00a0 4460     		str	r4, [r0, #4]
 2323 00a2 8C60     		str	r4, [r1, #8]
 2324 00a4 D96A     		ldr	r1, [r3, #44]
 2325              	.LVL215:
 2326 00a6 02F13006 		add	r6, r2, #48
 2327 00aa 8D00     		lsls	r5, r1, #2
 2328 00ac 6C18     		adds	r4, r5, r1
 2329 00ae A000     		lsls	r0, r4, #2
 2330 00b0 3044     		add	r0, r0, r6
 2331 00b2 5861     		str	r0, [r3, #20]
 2332 00b4 6C18     		adds	r4, r5, r1
 2333 00b6 A000     		lsls	r0, r4, #2
 2334 00b8 1044     		add	r0, r0, r2
 2335 00ba 046B     		ldr	r4, [r0, #48]
 2336 00bc 0134     		adds	r4, r4, #1
 2337 00be 2944     		add	r1, r1, r5
 2338 00c0 8800     		lsls	r0, r1, #2
 2339 00c2 1044     		add	r0, r0, r2
 2340 00c4 0463     		str	r4, [r0, #48]
 2341              	.LBE65:
2222:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 2342              		.loc 1 2222 0 discriminator 3
 2343 00c6 D96A     		ldr	r1, [r3, #44]
 2344 00c8 D2F8D820 		ldr	r2, [r2, #216]
 2345 00cc D26A     		ldr	r2, [r2, #44]
 2346 00ce 9142     		cmp	r1, r2
 2347 00d0 06D9     		bls	.L184
2224:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 2348              		.loc 1 2224 0
 2349 00d2 0121     		movs	r1, #1
 2350 00d4 A6F13002 		sub	r2, r6, #48
 2351 00d8 C2F8F410 		str	r1, [r2, #244]
 2352 00dc 00E0     		b	.L184
 2353              	.LVL216:
 2354              	.L194:
 2355 00de 0023     		movs	r3, #0
 2356              	.LVL217:
 2357              	.L184:
2212:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 2358              		.loc 1 2212 0
 2359 00e0 164A     		ldr	r2, .L197
 2360 00e2 5269     		ldr	r2, [r2, #20]
 2361 00e4 002A     		cmp	r2, #0
 2362 00e6 A0D1     		bne	.L188
2232:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 2363              		.loc 1 2232 0
 2364 00e8 0BB1     		cbz	r3, .L189
2240:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 2365              		.loc 1 2240 0
 2366 00ea FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2367              	.LVL218:
 2368              	.L189:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 147


 2369              	.LBB66:
2248:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2370              		.loc 1 2248 0
 2371 00ee 134B     		ldr	r3, .L197
 2372 00f0 D3F80041 		ldr	r4, [r3, #256]
 2373              	.LVL219:
2250:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 2374              		.loc 1 2250 0
 2375 00f4 64B1     		cbz	r4, .L190
 2376              	.L192:
2254:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             {
 2377              		.loc 1 2254 0
 2378 00f6 FFF7FEFF 		bl	xTaskIncrementTick
 2379              	.LVL220:
 2380 00fa 18B1     		cbz	r0, .L191
2256:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                             }
 2381              		.loc 1 2256 0
 2382 00fc 0122     		movs	r2, #1
 2383 00fe 0F4B     		ldr	r3, .L197
 2384 0100 C3F8F420 		str	r2, [r3, #244]
 2385              	.L191:
 2386              	.LVL221:
2264:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2387              		.loc 1 2264 0
 2388 0104 013C     		subs	r4, r4, #1
 2389              	.LVL222:
 2390 0106 F6D1     		bne	.L192
2266:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 2391              		.loc 1 2266 0
 2392 0108 0022     		movs	r2, #0
 2393 010a 0C4B     		ldr	r3, .L197
 2394 010c C3F80021 		str	r2, [r3, #256]
 2395              	.L190:
 2396              	.LBE66:
2274:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 2397              		.loc 1 2274 0
 2398 0110 0A4B     		ldr	r3, .L197
 2399 0112 D3F8F430 		ldr	r3, [r3, #244]
 2400 0116 5BB1     		cbz	r3, .L195
 2401              	.LVL223:
2281:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 2402              		.loc 1 2281 0
 2403 0118 4FF08052 		mov	r2, #268435456
 2404 011c 084B     		ldr	r3, .L197+4
 2405 011e 1A60     		str	r2, [r3]
 2406              		.syntax unified
 2407              	@ 2281 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 2408 0120 BFF34F8F 		dsb
 2409              	@ 0 "" 2
 2410              	@ 2281 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 2411 0124 BFF36F8F 		isb
 2412              	@ 0 "" 2
2278:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 2413              		.loc 1 2278 0
 2414              		.thumb
 2415              		.syntax unified
 2416 0128 0124     		movs	r4, #1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 148


 2417              	.LVL224:
 2418 012a 02E0     		b	.L183
 2419              	.LVL225:
 2420              	.L193:
2191:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2421              		.loc 1 2191 0
 2422 012c 0024     		movs	r4, #0
 2423 012e 00E0     		b	.L183
 2424              	.LVL226:
 2425              	.L195:
 2426 0130 0024     		movs	r4, #0
 2427              	.LVL227:
 2428              	.L183:
2294:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2429              		.loc 1 2294 0
 2430 0132 FFF7FEFF 		bl	vPortExitCritical
 2431              	.LVL228:
2297:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 2432              		.loc 1 2297 0
 2433 0136 2046     		mov	r0, r4
 2434 0138 70BD     		pop	{r4, r5, r6, pc}
 2435              	.LVL229:
 2436              	.L198:
 2437 013a 00BF     		.align	2
 2438              	.L197:
 2439 013c 00000000 		.word	.LANCHOR0
 2440 0140 04ED00E0 		.word	-536810236
 2441              		.cfi_endproc
 2442              	.LFE85:
 2443              		.size	xTaskResumeAll, .-xTaskResumeAll
 2444              		.section	.text.xTaskDelayUntil,"ax",%progbits
 2445              		.align	2
 2446              		.global	xTaskDelayUntil
 2447              		.thumb
 2448              		.thumb_func
 2449              		.type	xTaskDelayUntil, %function
 2450              	xTaskDelayUntil:
 2451              	.LFB72:
1220:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TickType_t xTimeToWake;
 2452              		.loc 1 1220 0
 2453              		.cfi_startproc
 2454              		@ args = 0, pretend = 0, frame = 0
 2455              		@ frame_needed = 0, uses_anonymous_args = 0
 2456              	.LVL230:
 2457 0000 38B5     		push	{r3, r4, r5, lr}
 2458              		.cfi_def_cfa_offset 16
 2459              		.cfi_offset 3, -16
 2460              		.cfi_offset 4, -12
 2461              		.cfi_offset 5, -8
 2462              		.cfi_offset 14, -4
 2463 0002 0546     		mov	r5, r0
 2464 0004 0C46     		mov	r4, r1
 2465              	.LVL231:
1228:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 2466              		.loc 1 1228 0
 2467 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2468              	.LVL232:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 149


 2469              	.LBB67:
1232:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2470              		.loc 1 1232 0
 2471 000a 164B     		ldr	r3, .L209
 2472 000c D3F8EC00 		ldr	r0, [r3, #236]
 2473              	.LVL233:
1235:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2474              		.loc 1 1235 0
 2475 0010 2A68     		ldr	r2, [r5]
 2476 0012 1319     		adds	r3, r2, r4
 2477              	.LVL234:
1237:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 2478              		.loc 1 1237 0
 2479 0014 9042     		cmp	r0, r2
 2480 0016 05D2     		bcs	.L200
1244:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 2481              		.loc 1 1244 0
 2482 0018 9A42     		cmp	r2, r3
 2483 001a 09D9     		bls	.L204
1244:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 2484              		.loc 1 1244 0 is_stmt 0 discriminator 1
 2485 001c 9842     		cmp	r0, r3
 2486 001e 09D3     		bcc	.L205
 2487              	.LBE67:
1222:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2488              		.loc 1 1222 0 is_stmt 1
 2489 0020 0024     		movs	r4, #0
 2490              	.LVL235:
 2491 0022 0CE0     		b	.L201
 2492              	.LVL236:
 2493              	.L200:
 2494              	.LBB68:
1258:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 2495              		.loc 1 1258 0
 2496 0024 9A42     		cmp	r2, r3
 2497 0026 07D8     		bhi	.L206
1258:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 2498              		.loc 1 1258 0 is_stmt 0 discriminator 1
 2499 0028 9842     		cmp	r0, r3
 2500 002a 07D3     		bcc	.L207
 2501              	.LBE68:
1222:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2502              		.loc 1 1222 0 is_stmt 1
 2503 002c 0024     		movs	r4, #0
 2504              	.LVL237:
 2505 002e 06E0     		b	.L201
 2506              	.LVL238:
 2507              	.L204:
 2508 0030 0024     		movs	r4, #0
 2509              	.LVL239:
 2510 0032 04E0     		b	.L201
 2511              	.LVL240:
 2512              	.L205:
 2513              	.LBB69:
1246:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 2514              		.loc 1 1246 0
 2515 0034 0124     		movs	r4, #1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 150


 2516              	.LVL241:
 2517 0036 02E0     		b	.L201
 2518              	.LVL242:
 2519              	.L206:
1260:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 2520              		.loc 1 1260 0
 2521 0038 0124     		movs	r4, #1
 2522              	.LVL243:
 2523 003a 00E0     		b	.L201
 2524              	.LVL244:
 2525              	.L207:
 2526 003c 0124     		movs	r4, #1
 2527              	.LVL245:
 2528              	.L201:
1269:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2529              		.loc 1 1269 0
 2530 003e 2B60     		str	r3, [r5]
1271:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 2531              		.loc 1 1271 0
 2532 0040 1CB1     		cbz	r4, .L202
1277:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 2533              		.loc 1 1277 0
 2534 0042 0021     		movs	r1, #0
 2535 0044 181A     		subs	r0, r3, r0
 2536              	.LVL246:
 2537 0046 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2538              	.LVL247:
 2539              	.L202:
 2540              	.LBE69:
1284:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2541              		.loc 1 1284 0
 2542 004a FFF7FEFF 		bl	xTaskResumeAll
 2543              	.LVL248:
1288:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 2544              		.loc 1 1288 0
 2545 004e 38B9     		cbnz	r0, .L203
1290:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 2546              		.loc 1 1290 0
 2547 0050 4FF08052 		mov	r2, #268435456
 2548 0054 044B     		ldr	r3, .L209+4
 2549 0056 1A60     		str	r2, [r3]
 2550              		.syntax unified
 2551              	@ 1290 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 2552 0058 BFF34F8F 		dsb
 2553              	@ 0 "" 2
 2554              	@ 1290 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 2555 005c BFF36F8F 		isb
 2556              	@ 0 "" 2
 2557              		.thumb
 2558              		.syntax unified
 2559              	.L203:
1298:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2560              		.loc 1 1298 0
 2561 0060 2046     		mov	r0, r4
 2562              	.LVL249:
 2563 0062 38BD     		pop	{r3, r4, r5, pc}
 2564              	.LVL250:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 151


 2565              	.L210:
 2566              		.align	2
 2567              	.L209:
 2568 0064 00000000 		.word	.LANCHOR0
 2569 0068 04ED00E0 		.word	-536810236
 2570              		.cfi_endproc
 2571              	.LFE72:
 2572              		.size	xTaskDelayUntil, .-xTaskDelayUntil
 2573              		.section	.text.vTaskDelay,"ax",%progbits
 2574              		.align	2
 2575              		.global	vTaskDelay
 2576              		.thumb
 2577              		.thumb_func
 2578              		.type	vTaskDelay, %function
 2579              	vTaskDelay:
 2580              	.LFB73:
1306:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xAlreadyYielded = pdFALSE;
 2581              		.loc 1 1306 0
 2582              		.cfi_startproc
 2583              		@ args = 0, pretend = 0, frame = 0
 2584              		@ frame_needed = 0, uses_anonymous_args = 0
 2585              	.LVL251:
 2586 0000 10B5     		push	{r4, lr}
 2587              		.cfi_def_cfa_offset 8
 2588              		.cfi_offset 4, -8
 2589              		.cfi_offset 14, -4
 2590              	.LVL252:
1310:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 2591              		.loc 1 1310 0
 2592 0002 48B1     		cbz	r0, .L214
 2593 0004 0446     		mov	r4, r0
1313:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 2594              		.loc 1 1313 0
 2595 0006 FFF7FEFF 		bl	vTaskSuspendAll
 2596              	.LVL253:
1324:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 2597              		.loc 1 1324 0
 2598 000a 0021     		movs	r1, #0
 2599 000c 2046     		mov	r0, r4
 2600 000e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2601              	.LVL254:
1326:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 2602              		.loc 1 1326 0
 2603 0012 FFF7FEFF 		bl	xTaskResumeAll
 2604              	.LVL255:
 2605 0016 00E0     		b	.L212
 2606              	.LVL256:
 2607              	.L214:
1307:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2608              		.loc 1 1307 0
 2609 0018 0020     		movs	r0, #0
 2610              	.LVL257:
 2611              	.L212:
1335:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 2612              		.loc 1 1335 0
 2613 001a 38B9     		cbnz	r0, .L211
1337:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 152


 2614              		.loc 1 1337 0
 2615 001c 4FF08052 		mov	r2, #268435456
 2616 0020 034B     		ldr	r3, .L216
 2617 0022 1A60     		str	r2, [r3]
 2618              		.syntax unified
 2619              	@ 1337 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 2620 0024 BFF34F8F 		dsb
 2621              	@ 0 "" 2
 2622              	@ 1337 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 2623 0028 BFF36F8F 		isb
 2624              	@ 0 "" 2
 2625              		.thumb
 2626              		.syntax unified
 2627              	.L211:
 2628 002c 10BD     		pop	{r4, pc}
 2629              	.L217:
 2630 002e 00BF     		.align	2
 2631              	.L216:
 2632 0030 04ED00E0 		.word	-536810236
 2633              		.cfi_endproc
 2634              	.LFE73:
 2635              		.size	vTaskDelay, .-vTaskDelay
 2636              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2637              		.align	2
 2638              		.global	xTaskCatchUpTicks
 2639              		.thumb
 2640              		.thumb_func
 2641              		.type	xTaskCatchUpTicks, %function
 2642              	xTaskCatchUpTicks:
 2643              	.LFB90:
2678:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xYieldOccurred;
 2644              		.loc 1 2678 0
 2645              		.cfi_startproc
 2646              		@ args = 0, pretend = 0, frame = 0
 2647              		@ frame_needed = 0, uses_anonymous_args = 0
 2648              	.LVL258:
 2649 0000 10B5     		push	{r4, lr}
 2650              		.cfi_def_cfa_offset 8
 2651              		.cfi_offset 4, -8
 2652              		.cfi_offset 14, -4
 2653 0002 0446     		mov	r4, r0
2687:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2654              		.loc 1 2687 0
 2655 0004 FFF7FEFF 		bl	vTaskSuspendAll
 2656              	.LVL259:
2690:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 2657              		.loc 1 2690 0
 2658 0008 FFF7FEFF 		bl	vPortEnterCritical
 2659              	.LVL260:
2692:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 2660              		.loc 1 2692 0
 2661 000c 054B     		ldr	r3, .L220
 2662 000e D3F80021 		ldr	r2, [r3, #256]
 2663 0012 1444     		add	r4, r4, r2
 2664              	.LVL261:
 2665 0014 C3F80041 		str	r4, [r3, #256]
2694:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     xYieldOccurred = xTaskResumeAll();
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 153


 2666              		.loc 1 2694 0
 2667 0018 FFF7FEFF 		bl	vPortExitCritical
 2668              	.LVL262:
2695:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2669              		.loc 1 2695 0
 2670 001c FFF7FEFF 		bl	xTaskResumeAll
 2671              	.LVL263:
2698:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*----------------------------------------------------------*/
 2672              		.loc 1 2698 0
 2673 0020 10BD     		pop	{r4, pc}
 2674              	.L221:
 2675 0022 00BF     		.align	2
 2676              	.L220:
 2677 0024 00000000 		.word	.LANCHOR0
 2678              		.cfi_endproc
 2679              	.LFE90:
 2680              		.size	xTaskCatchUpTicks, .-xTaskCatchUpTicks
 2681              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2682              		.align	2
 2683              		.global	vTaskSwitchContext
 2684              		.thumb
 2685              		.thumb_func
 2686              		.type	vTaskSwitchContext, %function
 2687              	vTaskSwitchContext:
 2688              	.LFB92:
3071:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 2689              		.loc 1 3071 0
 2690              		.cfi_startproc
 2691              		@ args = 0, pretend = 0, frame = 0
 2692              		@ frame_needed = 0, uses_anonymous_args = 0
3072:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 2693              		.loc 1 3072 0
 2694 0000 274B     		ldr	r3, .L229
 2695 0002 D3F8F030 		ldr	r3, [r3, #240]
 2696 0006 23B1     		cbz	r3, .L223
3076:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 2697              		.loc 1 3076 0
 2698 0008 0122     		movs	r2, #1
 2699 000a 254B     		ldr	r3, .L229
 2700 000c C3F8F420 		str	r2, [r3, #244]
 2701 0010 7047     		bx	lr
 2702              	.L223:
3071:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 2703              		.loc 1 3071 0
 2704 0012 10B5     		push	{r4, lr}
 2705              		.cfi_def_cfa_offset 8
 2706              		.cfi_offset 4, -8
 2707              		.cfi_offset 14, -4
3080:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         traceTASK_SWITCHED_OUT();
 2708              		.loc 1 3080 0
 2709 0014 224B     		ldr	r3, .L229
 2710 0016 0022     		movs	r2, #0
 2711 0018 C3F8F420 		str	r2, [r3, #244]
 2712              	.LBB70:
3112:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2713              		.loc 1 3112 0
 2714 001c D3F8D830 		ldr	r3, [r3, #216]
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 154


 2715 0020 1B6B     		ldr	r3, [r3, #48]
 2716              	.LVL264:
 2717 0022 1A68     		ldr	r2, [r3]
 2718 0024 B2F1A53F 		cmp	r2, #-1515870811
 2719 0028 0BD1     		bne	.L225
3112:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2720              		.loc 1 3112 0 is_stmt 0 discriminator 2
 2721 002a 5A68     		ldr	r2, [r3, #4]
 2722 002c B2F1A53F 		cmp	r2, #-1515870811
 2723 0030 07D1     		bne	.L225
3112:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2724              		.loc 1 3112 0 discriminator 4
 2725 0032 9A68     		ldr	r2, [r3, #8]
 2726 0034 B2F1A53F 		cmp	r2, #-1515870811
 2727 0038 03D1     		bne	.L225
3112:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2728              		.loc 1 3112 0 discriminator 6
 2729 003a DB68     		ldr	r3, [r3, #12]
 2730              	.LVL265:
 2731 003c B3F1A53F 		cmp	r3, #-1515870811
 2732 0040 07D0     		beq	.L226
 2733              	.L225:
3112:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2734              		.loc 1 3112 0 discriminator 7
 2735 0042 174B     		ldr	r3, .L229
 2736 0044 D3F8D800 		ldr	r0, [r3, #216]
 2737 0048 D3F8D810 		ldr	r1, [r3, #216]
 2738 004c 3431     		adds	r1, r1, #52
 2739 004e FFF7FEFF 		bl	vApplicationStackOverflowHook
 2740              	.LVL266:
 2741              	.L226:
 2742              	.LBE70:
 2743              	.LBB71:
3123:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         traceTASK_SWITCHED_IN();
 2744              		.loc 1 3123 0 is_stmt 1
 2745 0052 134A     		ldr	r2, .L229
 2746 0054 D2F8E430 		ldr	r3, [r2, #228]
 2747              	.LVL267:
 2748              	.LBB72:
 2749              	.LBB73:
 140:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 2750              		.loc 2 140 0
 2751              		.syntax unified
 2752              	@ 140 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 2753 0058 B3FA83F3 		clz r3, r3
 2754              	@ 0 "" 2
 2755              	.LVL268:
 2756              		.thumb
 2757              		.syntax unified
 2758 005c DBB2     		uxtb	r3, r3
 2759              	.LBE73:
 2760              	.LBE72:
3123:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         traceTASK_SWITCHED_IN();
 2761              		.loc 1 3123 0
 2762 005e C3F11F03 		rsb	r3, r3, #31
 2763              	.LVL269:
 2764              	.LBB74:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 155


 2765 0062 9800     		lsls	r0, r3, #2
 2766 0064 C418     		adds	r4, r0, r3
 2767 0066 A100     		lsls	r1, r4, #2
 2768 0068 1144     		add	r1, r1, r2
 2769 006a 4C6B     		ldr	r4, [r1, #52]
 2770 006c 6468     		ldr	r4, [r4, #4]
 2771 006e 4C63     		str	r4, [r1, #52]
 2772 0070 02F13001 		add	r1, r2, #48
 2773 0074 1844     		add	r0, r0, r3
 2774 0076 8200     		lsls	r2, r0, #2
 2775 0078 1046     		mov	r0, r2
 2776 007a 0832     		adds	r2, r2, #8
 2777 007c 0A44     		add	r2, r2, r1
 2778 007e 9442     		cmp	r4, r2
 2779 0080 04D1     		bne	.L227
3123:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         traceTASK_SWITCHED_IN();
 2780              		.loc 1 3123 0 is_stmt 0 discriminator 1
 2781 0082 0246     		mov	r2, r0
 2782 0084 0649     		ldr	r1, .L229
 2783 0086 0A44     		add	r2, r2, r1
 2784 0088 D16B     		ldr	r1, [r2, #60]
 2785 008a 5163     		str	r1, [r2, #52]
 2786              	.L227:
3123:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         traceTASK_SWITCHED_IN();
 2787              		.loc 1 3123 0 discriminator 3
 2788 008c 0449     		ldr	r1, .L229
 2789 008e 03EB8303 		add	r3, r3, r3, lsl #2
 2790              	.LVL270:
 2791 0092 9A00     		lsls	r2, r3, #2
 2792 0094 0A44     		add	r2, r2, r1
 2793 0096 536B     		ldr	r3, [r2, #52]
 2794 0098 DB68     		ldr	r3, [r3, #12]
 2795 009a C1F8D830 		str	r3, [r1, #216]
 2796 009e 10BD     		pop	{r4, pc}
 2797              	.L230:
 2798              		.align	2
 2799              	.L229:
 2800 00a0 00000000 		.word	.LANCHOR0
 2801              	.LBE74:
 2802              	.LBE71:
 2803              		.cfi_endproc
 2804              	.LFE92:
 2805              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2806              		.section	.text.vTaskSuspend,"ax",%progbits
 2807              		.align	2
 2808              		.global	vTaskSuspend
 2809              		.thumb
 2810              		.thumb_func
 2811              		.type	vTaskSuspend, %function
 2812              	vTaskSuspend:
 2813              	.LFB78:
1688:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 2814              		.loc 1 1688 0 is_stmt 1
 2815              		.cfi_startproc
 2816              		@ args = 0, pretend = 0, frame = 0
 2817              		@ frame_needed = 0, uses_anonymous_args = 0
 2818              	.LVL271:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 156


 2819 0000 38B5     		push	{r3, r4, r5, lr}
 2820              		.cfi_def_cfa_offset 16
 2821              		.cfi_offset 3, -16
 2822              		.cfi_offset 4, -12
 2823              		.cfi_offset 5, -8
 2824              		.cfi_offset 14, -4
 2825 0002 0446     		mov	r4, r0
1691:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 2826              		.loc 1 1691 0
 2827 0004 FFF7FEFF 		bl	vPortEnterCritical
 2828              	.LVL272:
1695:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2829              		.loc 1 1695 0
 2830 0008 14B9     		cbnz	r4, .L232
1695:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2831              		.loc 1 1695 0 is_stmt 0 discriminator 1
 2832 000a 2F4B     		ldr	r3, .L243
 2833 000c D3F8D840 		ldr	r4, [r3, #216]
 2834              	.LVL273:
 2835              	.L232:
1701:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 2836              		.loc 1 1701 0 is_stmt 1 discriminator 4
 2837 0010 251D     		adds	r5, r4, #4
 2838 0012 2846     		mov	r0, r5
 2839 0014 FFF7FEFF 		bl	uxListRemove
 2840              	.LVL274:
 2841 0018 80B9     		cbnz	r0, .L233
1703:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 2842              		.loc 1 1703 0
 2843 001a E26A     		ldr	r2, [r4, #44]
 2844 001c 02EB8201 		add	r1, r2, r2, lsl #2
 2845 0020 8B00     		lsls	r3, r1, #2
 2846 0022 2949     		ldr	r1, .L243
 2847 0024 0B44     		add	r3, r3, r1
 2848 0026 1B6B     		ldr	r3, [r3, #48]
 2849 0028 43B9     		cbnz	r3, .L233
1703:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 2850              		.loc 1 1703 0 is_stmt 0 discriminator 1
 2851 002a 0123     		movs	r3, #1
 2852 002c 03FA02F2 		lsl	r2, r3, r2
 2853 0030 D1F8E430 		ldr	r3, [r1, #228]
 2854 0034 23EA0202 		bic	r2, r3, r2
 2855 0038 C1F8E420 		str	r2, [r1, #228]
 2856              	.L233:
1711:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 2857              		.loc 1 1711 0 is_stmt 1
 2858 003c A36A     		ldr	r3, [r4, #40]
 2859 003e 1BB1     		cbz	r3, .L234
1713:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 2860              		.loc 1 1713 0
 2861 0040 04F11800 		add	r0, r4, #24
 2862 0044 FFF7FEFF 		bl	uxListRemove
 2863              	.LVL275:
 2864              	.L234:
1720:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2865              		.loc 1 1720 0
 2866 0048 2946     		mov	r1, r5
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 157


 2867 004a 1F48     		ldr	r0, .L243
 2868 004c FFF7FEFF 		bl	vListInsertEnd
 2869              	.LVL276:
 2870              	.LBB75:
1726:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 2871              		.loc 1 1726 0
 2872 0050 0023     		movs	r3, #0
 2873 0052 0AE0     		b	.L235
 2874              	.LVL277:
 2875              	.L237:
1728:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 2876              		.loc 1 1728 0
 2877 0054 E218     		adds	r2, r4, r3
 2878 0056 92F84C20 		ldrb	r2, [r2, #76]	@ zero_extendqisi2
 2879 005a D2B2     		uxtb	r2, r2
 2880 005c 012A     		cmp	r2, #1
 2881 005e 03D1     		bne	.L236
1732:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 2882              		.loc 1 1732 0
 2883 0060 E218     		adds	r2, r4, r3
 2884 0062 0021     		movs	r1, #0
 2885 0064 82F84C10 		strb	r1, [r2, #76]
 2886              	.L236:
1726:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 2887              		.loc 1 1726 0 discriminator 2
 2888 0068 0133     		adds	r3, r3, #1
 2889              	.LVL278:
 2890              	.L235:
1726:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 2891              		.loc 1 1726 0 is_stmt 0 discriminator 1
 2892 006a 002B     		cmp	r3, #0
 2893 006c F2DD     		ble	.L237
 2894              	.LBE75:
1738:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2895              		.loc 1 1738 0 is_stmt 1
 2896 006e FFF7FEFF 		bl	vPortExitCritical
 2897              	.LVL279:
1740:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 2898              		.loc 1 1740 0
 2899 0072 154B     		ldr	r3, .L243
 2900 0074 D3F8DC30 		ldr	r3, [r3, #220]
 2901 0078 2BB1     		cbz	r3, .L238
1744:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 2902              		.loc 1 1744 0
 2903 007a FFF7FEFF 		bl	vPortEnterCritical
 2904              	.LVL280:
1746:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 2905              		.loc 1 1746 0
 2906 007e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2907              	.LVL281:
1748:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 2908              		.loc 1 1748 0
 2909 0082 FFF7FEFF 		bl	vPortExitCritical
 2910              	.LVL282:
 2911              	.L238:
1755:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 2912              		.loc 1 1755 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 158


 2913 0086 104B     		ldr	r3, .L243
 2914 0088 D3F8D830 		ldr	r3, [r3, #216]
 2915 008c 9C42     		cmp	r4, r3
 2916 008e 19D1     		bne	.L231
1757:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 2917              		.loc 1 1757 0
 2918 0090 0D4B     		ldr	r3, .L243
 2919 0092 D3F8DC30 		ldr	r3, [r3, #220]
 2920 0096 43B1     		cbz	r3, .L240
1761:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 2921              		.loc 1 1761 0
 2922 0098 4FF08052 		mov	r2, #268435456
 2923 009c 0B4B     		ldr	r3, .L243+4
 2924 009e 1A60     		str	r2, [r3]
 2925              		.syntax unified
 2926              	@ 1761 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 2927 00a0 BFF34F8F 		dsb
 2928              	@ 0 "" 2
 2929              	@ 1761 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 2930 00a4 BFF36F8F 		isb
 2931              	@ 0 "" 2
 2932              		.thumb
 2933              		.syntax unified
 2934 00a8 38BD     		pop	{r3, r4, r5, pc}
 2935              	.LVL283:
 2936              	.L240:
1768:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 2937              		.loc 1 1768 0
 2938 00aa 074B     		ldr	r3, .L243
 2939 00ac 1A68     		ldr	r2, [r3]
 2940 00ae D3F8D430 		ldr	r3, [r3, #212]
 2941 00b2 9A42     		cmp	r2, r3
 2942 00b4 04D1     		bne	.L241
1774:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 2943              		.loc 1 1774 0
 2944 00b6 0022     		movs	r2, #0
 2945 00b8 034B     		ldr	r3, .L243
 2946 00ba C3F8D820 		str	r2, [r3, #216]
 2947 00be 38BD     		pop	{r3, r4, r5, pc}
 2948              	.LVL284:
 2949              	.L241:
1778:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 2950              		.loc 1 1778 0
 2951 00c0 FFF7FEFF 		bl	vTaskSwitchContext
 2952              	.LVL285:
 2953              	.L231:
 2954 00c4 38BD     		pop	{r3, r4, r5, pc}
 2955              	.LVL286:
 2956              	.L244:
 2957 00c6 00BF     		.align	2
 2958              	.L243:
 2959 00c8 00000000 		.word	.LANCHOR0
 2960 00cc 04ED00E0 		.word	-536810236
 2961              		.cfi_endproc
 2962              	.LFE78:
 2963              		.size	vTaskSuspend, .-vTaskSuspend
 2964              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 159


 2965              		.align	2
 2966              		.global	vTaskPlaceOnEventList
 2967              		.thumb
 2968              		.thumb_func
 2969              		.type	vTaskPlaceOnEventList, %function
 2970              	vTaskPlaceOnEventList:
 2971              	.LFB93:
3146:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( pxEventList );
 2972              		.loc 1 3146 0
 2973              		.cfi_startproc
 2974              		@ args = 0, pretend = 0, frame = 0
 2975              		@ frame_needed = 0, uses_anonymous_args = 0
 2976              	.LVL287:
 2977 0000 10B5     		push	{r4, lr}
 2978              		.cfi_def_cfa_offset 8
 2979              		.cfi_offset 4, -8
 2980              		.cfi_offset 14, -4
 2981 0002 0C46     		mov	r4, r1
3163:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 2982              		.loc 1 3163 0
 2983 0004 054B     		ldr	r3, .L247
 2984 0006 D3F8D810 		ldr	r1, [r3, #216]
 2985              	.LVL288:
 2986 000a 1831     		adds	r1, r1, #24
 2987 000c FFF7FEFF 		bl	vListInsert
 2988              	.LVL289:
3165:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
 2989              		.loc 1 3165 0
 2990 0010 0121     		movs	r1, #1
 2991 0012 2046     		mov	r0, r4
 2992 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2993              	.LVL290:
 2994 0018 10BD     		pop	{r4, pc}
 2995              	.LVL291:
 2996              	.L248:
 2997 001a 00BF     		.align	2
 2998              	.L247:
 2999 001c 00000000 		.word	.LANCHOR0
 3000              		.cfi_endproc
 3001              	.LFE93:
 3002              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 3003              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3004              		.align	2
 3005              		.global	vTaskPlaceOnUnorderedEventList
 3006              		.thumb
 3007              		.thumb_func
 3008              		.type	vTaskPlaceOnUnorderedEventList, %function
 3009              	vTaskPlaceOnUnorderedEventList:
 3010              	.LFB94:
3172:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( pxEventList );
 3011              		.loc 1 3172 0
 3012              		.cfi_startproc
 3013              		@ args = 0, pretend = 0, frame = 0
 3014              		@ frame_needed = 0, uses_anonymous_args = 0
 3015              	.LVL292:
 3016 0000 38B5     		push	{r3, r4, r5, lr}
 3017              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 160


 3018              		.cfi_offset 3, -16
 3019              		.cfi_offset 4, -12
 3020              		.cfi_offset 5, -8
 3021              		.cfi_offset 14, -4
3182:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3022              		.loc 1 3182 0
 3023 0002 114B     		ldr	r3, .L251
 3024 0004 D3F8D840 		ldr	r4, [r3, #216]
 3025 0008 41F00041 		orr	r1, r1, #-2147483648
 3026              	.LVL293:
 3027 000c A161     		str	r1, [r4, #24]
 3028              	.LBB76:
3189:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3029              		.loc 1 3189 0
 3030 000e 4168     		ldr	r1, [r0, #4]
 3031              	.LVL294:
 3032 0010 D3F8D840 		ldr	r4, [r3, #216]
 3033 0014 E161     		str	r1, [r4, #28]
 3034 0016 D3F8D840 		ldr	r4, [r3, #216]
 3035 001a 8D68     		ldr	r5, [r1, #8]
 3036 001c 2562     		str	r5, [r4, #32]
 3037 001e 8D68     		ldr	r5, [r1, #8]
 3038 0020 D3F8D840 		ldr	r4, [r3, #216]
 3039 0024 1834     		adds	r4, r4, #24
 3040 0026 6C60     		str	r4, [r5, #4]
 3041 0028 D3F8D840 		ldr	r4, [r3, #216]
 3042 002c 1834     		adds	r4, r4, #24
 3043 002e 8C60     		str	r4, [r1, #8]
 3044 0030 D3F8D830 		ldr	r3, [r3, #216]
 3045 0034 9862     		str	r0, [r3, #40]
 3046 0036 0368     		ldr	r3, [r0]
 3047 0038 0133     		adds	r3, r3, #1
 3048 003a 0360     		str	r3, [r0]
 3049              	.LBE76:
3191:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
 3050              		.loc 1 3191 0
 3051 003c 0121     		movs	r1, #1
 3052              	.LVL295:
 3053 003e 1046     		mov	r0, r2
 3054              	.LVL296:
 3055 0040 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3056              	.LVL297:
 3057 0044 38BD     		pop	{r3, r4, r5, pc}
 3058              	.L252:
 3059 0046 00BF     		.align	2
 3060              	.L251:
 3061 0048 00000000 		.word	.LANCHOR0
 3062              		.cfi_endproc
 3063              	.LFE94:
 3064              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 3065              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3066              		.align	2
 3067              		.global	xTaskRemoveFromEventList
 3068              		.thumb
 3069              		.thumb_func
 3070              		.type	xTaskRemoveFromEventList, %function
 3071              	xTaskRemoveFromEventList:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 161


 3072              	.LFB95:
3231:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TCB_t * pxUnblockedTCB;
 3073              		.loc 1 3231 0
 3074              		.cfi_startproc
 3075              		@ args = 0, pretend = 0, frame = 0
 3076              		@ frame_needed = 0, uses_anonymous_args = 0
 3077              		@ link register save eliminated.
 3078              	.LVL298:
 3079 0000 70B4     		push	{r4, r5, r6}
 3080              		.cfi_def_cfa_offset 12
 3081              		.cfi_offset 4, -12
 3082              		.cfi_offset 5, -8
 3083              		.cfi_offset 6, -4
3248:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( pxUnblockedTCB );
 3084              		.loc 1 3248 0
 3085 0002 C368     		ldr	r3, [r0, #12]
 3086 0004 DB68     		ldr	r3, [r3, #12]
 3087              	.LVL299:
 3088              	.LBB77:
3250:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3089              		.loc 1 3250 0
 3090 0006 9A6A     		ldr	r2, [r3, #40]
 3091              	.LVL300:
 3092 0008 D969     		ldr	r1, [r3, #28]
 3093 000a 186A     		ldr	r0, [r3, #32]
 3094              	.LVL301:
 3095 000c 8860     		str	r0, [r1, #8]
 3096 000e 196A     		ldr	r1, [r3, #32]
 3097 0010 D869     		ldr	r0, [r3, #28]
 3098 0012 4860     		str	r0, [r1, #4]
 3099 0014 5168     		ldr	r1, [r2, #4]
 3100 0016 03F11800 		add	r0, r3, #24
 3101 001a 8142     		cmp	r1, r0
 3102 001c 01D1     		bne	.L254
3250:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3103              		.loc 1 3250 0 is_stmt 0 discriminator 1
 3104 001e 196A     		ldr	r1, [r3, #32]
 3105 0020 5160     		str	r1, [r2, #4]
 3106              	.L254:
3250:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3107              		.loc 1 3250 0 discriminator 3
 3108 0022 0021     		movs	r1, #0
 3109 0024 9962     		str	r1, [r3, #40]
 3110 0026 1168     		ldr	r1, [r2]
 3111 0028 0139     		subs	r1, r1, #1
 3112 002a 1160     		str	r1, [r2]
 3113              	.LBE77:
3252:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 3114              		.loc 1 3252 0 is_stmt 1 discriminator 3
 3115 002c 2D4A     		ldr	r2, .L261
 3116              	.LVL302:
 3117 002e D2F8F020 		ldr	r2, [r2, #240]
 3118 0032 002A     		cmp	r2, #0
 3119 0034 38D1     		bne	.L255
 3120              	.LBB78:
3254:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3121              		.loc 1 3254 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 162


 3122 0036 5A69     		ldr	r2, [r3, #20]
 3123              	.LVL303:
 3124 0038 9968     		ldr	r1, [r3, #8]
 3125 003a D868     		ldr	r0, [r3, #12]
 3126 003c 8860     		str	r0, [r1, #8]
 3127 003e D968     		ldr	r1, [r3, #12]
 3128 0040 9868     		ldr	r0, [r3, #8]
 3129 0042 4860     		str	r0, [r1, #4]
 3130 0044 5168     		ldr	r1, [r2, #4]
 3131 0046 1C1D     		adds	r4, r3, #4
 3132 0048 A142     		cmp	r1, r4
 3133 004a 01D1     		bne	.L256
3254:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3134              		.loc 1 3254 0 is_stmt 0 discriminator 1
 3135 004c D968     		ldr	r1, [r3, #12]
 3136 004e 5160     		str	r1, [r2, #4]
 3137              	.L256:
3254:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         prvAddTaskToReadyList( pxUnblockedTCB );
 3138              		.loc 1 3254 0 discriminator 3
 3139 0050 0021     		movs	r1, #0
 3140 0052 5961     		str	r1, [r3, #20]
 3141 0054 1168     		ldr	r1, [r2]
 3142 0056 0139     		subs	r1, r1, #1
 3143 0058 1160     		str	r1, [r2]
 3144              	.LBE78:
3255:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3145              		.loc 1 3255 0 is_stmt 1 discriminator 3
 3146 005a DA6A     		ldr	r2, [r3, #44]
 3147              	.LVL304:
 3148 005c 0120     		movs	r0, #1
 3149 005e 00FA02F5 		lsl	r5, r0, r2
 3150 0062 2049     		ldr	r1, .L261
 3151 0064 D1F8E400 		ldr	r0, [r1, #228]
 3152 0068 2843     		orrs	r0, r0, r5
 3153 006a C1F8E400 		str	r0, [r1, #228]
 3154              	.LBB79:
 3155 006e 02EB8202 		add	r2, r2, r2, lsl #2
 3156 0072 9000     		lsls	r0, r2, #2
 3157 0074 0844     		add	r0, r0, r1
 3158 0076 426B     		ldr	r2, [r0, #52]
 3159              	.LVL305:
 3160 0078 9A60     		str	r2, [r3, #8]
 3161 007a 9068     		ldr	r0, [r2, #8]
 3162 007c D860     		str	r0, [r3, #12]
 3163 007e 9068     		ldr	r0, [r2, #8]
 3164 0080 4460     		str	r4, [r0, #4]
 3165 0082 9460     		str	r4, [r2, #8]
 3166 0084 DA6A     		ldr	r2, [r3, #44]
 3167              	.LVL306:
 3168 0086 01F13006 		add	r6, r1, #48
 3169 008a 9500     		lsls	r5, r2, #2
 3170 008c AC18     		adds	r4, r5, r2
 3171 008e A000     		lsls	r0, r4, #2
 3172 0090 3044     		add	r0, r0, r6
 3173 0092 5861     		str	r0, [r3, #20]
 3174 0094 AC18     		adds	r4, r5, r2
 3175 0096 A000     		lsls	r0, r4, #2
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 163


 3176 0098 0844     		add	r0, r0, r1
 3177 009a 046B     		ldr	r4, [r0, #48]
 3178 009c 0134     		adds	r4, r4, #1
 3179 009e 2A44     		add	r2, r2, r5
 3180 00a0 9000     		lsls	r0, r2, #2
 3181 00a2 0144     		add	r1, r1, r0
 3182 00a4 0C63     		str	r4, [r1, #48]
 3183              	.LBE79:
 3184 00a6 0DE0     		b	.L257
 3185              	.L255:
 3186              	.LBB80:
3275:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 3187              		.loc 1 3275 0
 3188 00a8 0E4A     		ldr	r2, .L261
 3189 00aa 9169     		ldr	r1, [r2, #24]
 3190              	.LVL307:
 3191 00ac D961     		str	r1, [r3, #28]
 3192 00ae 8C68     		ldr	r4, [r1, #8]
 3193 00b0 1C62     		str	r4, [r3, #32]
 3194 00b2 8C68     		ldr	r4, [r1, #8]
 3195 00b4 6060     		str	r0, [r4, #4]
 3196 00b6 8860     		str	r0, [r1, #8]
 3197 00b8 02F11401 		add	r1, r2, #20
 3198              	.LVL308:
 3199 00bc 9962     		str	r1, [r3, #40]
 3200 00be 5169     		ldr	r1, [r2, #20]
 3201 00c0 0131     		adds	r1, r1, #1
 3202 00c2 5161     		str	r1, [r2, #20]
 3203              	.L257:
 3204              	.LBE80:
3278:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 3205              		.loc 1 3278 0
 3206 00c4 DA6A     		ldr	r2, [r3, #44]
 3207 00c6 074B     		ldr	r3, .L261
 3208              	.LVL309:
 3209 00c8 D3F8D830 		ldr	r3, [r3, #216]
 3210 00cc DB6A     		ldr	r3, [r3, #44]
 3211 00ce 9A42     		cmp	r2, r3
 3212 00d0 04D9     		bls	.L259
 3213              	.LVL310:
3287:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 3214              		.loc 1 3287 0
 3215 00d2 0120     		movs	r0, #1
 3216 00d4 034B     		ldr	r3, .L261
 3217 00d6 C3F8F400 		str	r0, [r3, #244]
 3218 00da 00E0     		b	.L258
 3219              	.LVL311:
 3220              	.L259:
3291:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 3221              		.loc 1 3291 0
 3222 00dc 0020     		movs	r0, #0
 3223              	.L258:
 3224              	.LVL312:
3295:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 3225              		.loc 1 3295 0
 3226 00de 70BC     		pop	{r4, r5, r6}
 3227              		.cfi_restore 6
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 164


 3228              		.cfi_restore 5
 3229              		.cfi_restore 4
 3230              		.cfi_def_cfa_offset 0
 3231 00e0 7047     		bx	lr
 3232              	.L262:
 3233 00e2 00BF     		.align	2
 3234              	.L261:
 3235 00e4 00000000 		.word	.LANCHOR0
 3236              		.cfi_endproc
 3237              	.LFE95:
 3238              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 3239              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3240              		.align	2
 3241              		.global	vTaskRemoveFromUnorderedEventList
 3242              		.thumb
 3243              		.thumb_func
 3244              		.type	vTaskRemoveFromUnorderedEventList, %function
 3245              	vTaskRemoveFromUnorderedEventList:
 3246              	.LFB96:
3300:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TCB_t * pxUnblockedTCB;
 3247              		.loc 1 3300 0
 3248              		.cfi_startproc
 3249              		@ args = 0, pretend = 0, frame = 0
 3250              		@ frame_needed = 0, uses_anonymous_args = 0
 3251              		@ link register save eliminated.
 3252              	.LVL313:
 3253 0000 70B4     		push	{r4, r5, r6}
 3254              		.cfi_def_cfa_offset 12
 3255              		.cfi_offset 4, -12
 3256              		.cfi_offset 5, -8
 3257              		.cfi_offset 6, -4
3308:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3258              		.loc 1 3308 0
 3259 0002 41F00041 		orr	r1, r1, #-2147483648
 3260              	.LVL314:
 3261 0006 0160     		str	r1, [r0]
3312:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( pxUnblockedTCB );
 3262              		.loc 1 3312 0
 3263 0008 C368     		ldr	r3, [r0, #12]
 3264              	.LVL315:
 3265              	.LBB81:
3314:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3266              		.loc 1 3314 0
 3267 000a 0269     		ldr	r2, [r0, #16]
 3268              	.LVL316:
 3269 000c 4168     		ldr	r1, [r0, #4]
 3270 000e 8468     		ldr	r4, [r0, #8]
 3271 0010 8C60     		str	r4, [r1, #8]
 3272 0012 8168     		ldr	r1, [r0, #8]
 3273 0014 4468     		ldr	r4, [r0, #4]
 3274 0016 4C60     		str	r4, [r1, #4]
 3275 0018 5168     		ldr	r1, [r2, #4]
 3276 001a 8842     		cmp	r0, r1
 3277 001c 01D1     		bne	.L264
3314:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3278              		.loc 1 3314 0 is_stmt 0 discriminator 1
 3279 001e 8168     		ldr	r1, [r0, #8]
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 165


 3280 0020 5160     		str	r1, [r2, #4]
 3281              	.L264:
3314:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3282              		.loc 1 3314 0 discriminator 3
 3283 0022 0021     		movs	r1, #0
 3284 0024 0161     		str	r1, [r0, #16]
 3285 0026 1168     		ldr	r1, [r2]
 3286 0028 0139     		subs	r1, r1, #1
 3287 002a 1160     		str	r1, [r2]
 3288              	.LBE81:
 3289              	.LBB82:
3333:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 3290              		.loc 1 3333 0 is_stmt 1 discriminator 3
 3291 002c 5A69     		ldr	r2, [r3, #20]
 3292              	.LVL317:
 3293 002e 9968     		ldr	r1, [r3, #8]
 3294 0030 D868     		ldr	r0, [r3, #12]
 3295              	.LVL318:
 3296 0032 8860     		str	r0, [r1, #8]
 3297 0034 D968     		ldr	r1, [r3, #12]
 3298 0036 9868     		ldr	r0, [r3, #8]
 3299 0038 4860     		str	r0, [r1, #4]
 3300 003a 5168     		ldr	r1, [r2, #4]
 3301 003c 1C1D     		adds	r4, r3, #4
 3302 003e A142     		cmp	r1, r4
 3303 0040 01D1     		bne	.L265
3333:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 3304              		.loc 1 3333 0 is_stmt 0 discriminator 1
 3305 0042 D968     		ldr	r1, [r3, #12]
 3306 0044 5160     		str	r1, [r2, #4]
 3307              	.L265:
3333:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     prvAddTaskToReadyList( pxUnblockedTCB );
 3308              		.loc 1 3333 0 discriminator 3
 3309 0046 0021     		movs	r1, #0
 3310 0048 5961     		str	r1, [r3, #20]
 3311 004a 1168     		ldr	r1, [r2]
 3312 004c 0139     		subs	r1, r1, #1
 3313 004e 1160     		str	r1, [r2]
 3314              	.LBE82:
3334:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3315              		.loc 1 3334 0 is_stmt 1 discriminator 3
 3316 0050 D96A     		ldr	r1, [r3, #44]
 3317 0052 0120     		movs	r0, #1
 3318 0054 00FA01F5 		lsl	r5, r0, r1
 3319 0058 174A     		ldr	r2, .L268
 3320              	.LVL319:
 3321 005a D2F8E400 		ldr	r0, [r2, #228]
 3322 005e 2843     		orrs	r0, r0, r5
 3323 0060 C2F8E400 		str	r0, [r2, #228]
 3324              	.LBB83:
 3325 0064 01EB8101 		add	r1, r1, r1, lsl #2
 3326 0068 8800     		lsls	r0, r1, #2
 3327 006a 1044     		add	r0, r0, r2
 3328 006c 416B     		ldr	r1, [r0, #52]
 3329              	.LVL320:
 3330 006e 9960     		str	r1, [r3, #8]
 3331 0070 8868     		ldr	r0, [r1, #8]
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 166


 3332 0072 D860     		str	r0, [r3, #12]
 3333 0074 8868     		ldr	r0, [r1, #8]
 3334 0076 4460     		str	r4, [r0, #4]
 3335 0078 8C60     		str	r4, [r1, #8]
 3336 007a D96A     		ldr	r1, [r3, #44]
 3337              	.LVL321:
 3338 007c 02F13006 		add	r6, r2, #48
 3339 0080 8D00     		lsls	r5, r1, #2
 3340 0082 6C18     		adds	r4, r5, r1
 3341 0084 A000     		lsls	r0, r4, #2
 3342 0086 3044     		add	r0, r0, r6
 3343 0088 5861     		str	r0, [r3, #20]
 3344 008a 6C18     		adds	r4, r5, r1
 3345 008c A000     		lsls	r0, r4, #2
 3346 008e 1044     		add	r0, r0, r2
 3347 0090 046B     		ldr	r4, [r0, #48]
 3348 0092 0134     		adds	r4, r4, #1
 3349 0094 2944     		add	r1, r1, r5
 3350 0096 8800     		lsls	r0, r1, #2
 3351 0098 1044     		add	r0, r0, r2
 3352 009a 0463     		str	r4, [r0, #48]
 3353              	.LBE83:
3336:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 3354              		.loc 1 3336 0 discriminator 3
 3355 009c D96A     		ldr	r1, [r3, #44]
 3356 009e D2F8D830 		ldr	r3, [r2, #216]
 3357              	.LVL322:
 3358 00a2 DB6A     		ldr	r3, [r3, #44]
 3359 00a4 9942     		cmp	r1, r3
 3360 00a6 04D9     		bls	.L263
3342:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 3361              		.loc 1 3342 0
 3362 00a8 0122     		movs	r2, #1
 3363 00aa A6F13003 		sub	r3, r6, #48
 3364 00ae C3F8F420 		str	r2, [r3, #244]
 3365              	.L263:
3344:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 3366              		.loc 1 3344 0
 3367 00b2 70BC     		pop	{r4, r5, r6}
 3368              		.cfi_restore 6
 3369              		.cfi_restore 5
 3370              		.cfi_restore 4
 3371              		.cfi_def_cfa_offset 0
 3372 00b4 7047     		bx	lr
 3373              	.L269:
 3374 00b6 00BF     		.align	2
 3375              	.L268:
 3376 00b8 00000000 		.word	.LANCHOR0
 3377              		.cfi_endproc
 3378              	.LFE96:
 3379              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 3380              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3381              		.align	2
 3382              		.global	vTaskSetTimeOutState
 3383              		.thumb
 3384              		.thumb_func
 3385              		.type	vTaskSetTimeOutState, %function
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 167


 3386              	vTaskSetTimeOutState:
 3387              	.LFB97:
3348:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     configASSERT( pxTimeOut );
 3388              		.loc 1 3348 0
 3389              		.cfi_startproc
 3390              		@ args = 0, pretend = 0, frame = 0
 3391              		@ frame_needed = 0, uses_anonymous_args = 0
 3392              	.LVL323:
 3393 0000 10B5     		push	{r4, lr}
 3394              		.cfi_def_cfa_offset 8
 3395              		.cfi_offset 4, -8
 3396              		.cfi_offset 14, -4
 3397 0002 0446     		mov	r4, r0
3350:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 3398              		.loc 1 3350 0
 3399 0004 FFF7FEFF 		bl	vPortEnterCritical
 3400              	.LVL324:
3352:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         pxTimeOut->xTimeOnEntering = xTickCount;
 3401              		.loc 1 3352 0
 3402 0008 044B     		ldr	r3, .L272
 3403 000a D3F8FC20 		ldr	r2, [r3, #252]
 3404 000e 2260     		str	r2, [r4]
3353:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 3405              		.loc 1 3353 0
 3406 0010 D3F8EC30 		ldr	r3, [r3, #236]
 3407 0014 6360     		str	r3, [r4, #4]
3355:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
 3408              		.loc 1 3355 0
 3409 0016 FFF7FEFF 		bl	vPortExitCritical
 3410              	.LVL325:
 3411 001a 10BD     		pop	{r4, pc}
 3412              	.LVL326:
 3413              	.L273:
 3414              		.align	2
 3415              	.L272:
 3416 001c 00000000 		.word	.LANCHOR0
 3417              		.cfi_endproc
 3418              	.LFE97:
 3419              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3420              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3421              		.align	2
 3422              		.global	vTaskInternalSetTimeOutState
 3423              		.thumb
 3424              		.thumb_func
 3425              		.type	vTaskInternalSetTimeOutState, %function
 3426              	vTaskInternalSetTimeOutState:
 3427              	.LFB98:
3360:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     /* For internal use only as it does not use a critical section. */
 3428              		.loc 1 3360 0
 3429              		.cfi_startproc
 3430              		@ args = 0, pretend = 0, frame = 0
 3431              		@ frame_needed = 0, uses_anonymous_args = 0
 3432              		@ link register save eliminated.
 3433              	.LVL327:
3362:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     pxTimeOut->xTimeOnEntering = xTickCount;
 3434              		.loc 1 3362 0
 3435 0000 034B     		ldr	r3, .L275
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 168


 3436 0002 D3F8FC20 		ldr	r2, [r3, #252]
 3437 0006 0260     		str	r2, [r0]
3363:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
 3438              		.loc 1 3363 0
 3439 0008 D3F8EC30 		ldr	r3, [r3, #236]
 3440 000c 4360     		str	r3, [r0, #4]
 3441 000e 7047     		bx	lr
 3442              	.L276:
 3443              		.align	2
 3444              	.L275:
 3445 0010 00000000 		.word	.LANCHOR0
 3446              		.cfi_endproc
 3447              	.LFE98:
 3448              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 3449              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3450              		.align	2
 3451              		.global	xTaskCheckForTimeOut
 3452              		.thumb
 3453              		.thumb_func
 3454              		.type	xTaskCheckForTimeOut, %function
 3455              	xTaskCheckForTimeOut:
 3456              	.LFB99:
3369:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     BaseType_t xReturn;
 3457              		.loc 1 3369 0
 3458              		.cfi_startproc
 3459              		@ args = 0, pretend = 0, frame = 0
 3460              		@ frame_needed = 0, uses_anonymous_args = 0
 3461              	.LVL328:
 3462 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3463              		.cfi_def_cfa_offset 24
 3464              		.cfi_offset 3, -24
 3465              		.cfi_offset 4, -20
 3466              		.cfi_offset 5, -16
 3467              		.cfi_offset 6, -12
 3468              		.cfi_offset 7, -8
 3469              		.cfi_offset 14, -4
 3470 0002 0446     		mov	r4, r0
 3471 0004 0D46     		mov	r5, r1
3375:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     {
 3472              		.loc 1 3375 0
 3473 0006 FFF7FEFF 		bl	vPortEnterCritical
 3474              	.LVL329:
 3475              	.LBB84:
3378:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3476              		.loc 1 3378 0
 3477 000a 134B     		ldr	r3, .L283
 3478 000c D3F8EC10 		ldr	r1, [r3, #236]
 3479              	.LVL330:
3379:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3480              		.loc 1 3379 0
 3481 0010 6268     		ldr	r2, [r4, #4]
 3482 0012 881A     		subs	r0, r1, r2
 3483              	.LVL331:
3393:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 3484              		.loc 1 3393 0
 3485 0014 2B68     		ldr	r3, [r5]
 3486 0016 B3F1FF3F 		cmp	r3, #-1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 169


 3487 001a 18D0     		beq	.L281
3403:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 3488              		.loc 1 3403 0
 3489 001c 2768     		ldr	r7, [r4]
 3490 001e 0E4E     		ldr	r6, .L283
 3491 0020 D6F8FC60 		ldr	r6, [r6, #252]
 3492 0024 B742     		cmp	r7, r6
 3493 0026 05D0     		beq	.L279
3403:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 3494              		.loc 1 3403 0 is_stmt 0 discriminator 1
 3495 0028 9142     		cmp	r1, r2
 3496 002a 03D3     		bcc	.L279
 3497              	.LVL332:
3411:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 3498              		.loc 1 3411 0 is_stmt 1
 3499 002c 0023     		movs	r3, #0
 3500 002e 2B60     		str	r3, [r5]
3410:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             *pxTicksToWait = ( TickType_t ) 0;
 3501              		.loc 1 3410 0
 3502 0030 0124     		movs	r4, #1
 3503              	.LVL333:
3411:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 3504              		.loc 1 3411 0
 3505 0032 0DE0     		b	.L278
 3506              	.LVL334:
 3507              	.L279:
3413:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 3508              		.loc 1 3413 0
 3509 0034 9842     		cmp	r0, r3
 3510 0036 06D2     		bcs	.L280
3416:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             vTaskInternalSetTimeOutState( pxTimeOut );
 3511              		.loc 1 3416 0
 3512 0038 1B1A     		subs	r3, r3, r0
 3513 003a 2B60     		str	r3, [r5]
3417:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = pdFALSE;
 3514              		.loc 1 3417 0
 3515 003c 2046     		mov	r0, r4
 3516              	.LVL335:
 3517 003e FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3518              	.LVL336:
3418:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 3519              		.loc 1 3418 0
 3520 0042 0024     		movs	r4, #0
 3521              	.LVL337:
 3522 0044 04E0     		b	.L278
 3523              	.LVL338:
 3524              	.L280:
3422:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             xReturn = pdTRUE;
 3525              		.loc 1 3422 0
 3526 0046 0023     		movs	r3, #0
 3527 0048 2B60     		str	r3, [r5]
 3528              	.LVL339:
3423:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 3529              		.loc 1 3423 0
 3530 004a 0124     		movs	r4, #1
 3531              	.LVL340:
 3532 004c 00E0     		b	.L278
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 170


 3533              	.LVL341:
 3534              	.L281:
3398:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 3535              		.loc 1 3398 0
 3536 004e 0024     		movs	r4, #0
 3537              	.LVL342:
 3538              	.L278:
 3539              	.LBE84:
3426:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3540              		.loc 1 3426 0
 3541 0050 FFF7FEFF 		bl	vPortExitCritical
 3542              	.LVL343:
3429:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 3543              		.loc 1 3429 0
 3544 0054 2046     		mov	r0, r4
 3545 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3546              	.LVL344:
 3547              	.L284:
 3548              		.align	2
 3549              	.L283:
 3550 0058 00000000 		.word	.LANCHOR0
 3551              		.cfi_endproc
 3552              	.LFE99:
 3553              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3554              		.section	.text.vTaskMissedYield,"ax",%progbits
 3555              		.align	2
 3556              		.global	vTaskMissedYield
 3557              		.thumb
 3558              		.thumb_func
 3559              		.type	vTaskMissedYield, %function
 3560              	vTaskMissedYield:
 3561              	.LFB100:
3433:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     xYieldPending = pdTRUE;
 3562              		.loc 1 3433 0
 3563              		.cfi_startproc
 3564              		@ args = 0, pretend = 0, frame = 0
 3565              		@ frame_needed = 0, uses_anonymous_args = 0
 3566              		@ link register save eliminated.
3434:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** }
 3567              		.loc 1 3434 0
 3568 0000 0122     		movs	r2, #1
 3569 0002 024B     		ldr	r3, .L286
 3570 0004 C3F8F420 		str	r2, [r3, #244]
 3571 0008 7047     		bx	lr
 3572              	.L287:
 3573 000a 00BF     		.align	2
 3574              	.L286:
 3575 000c 00000000 		.word	.LANCHOR0
 3576              		.cfi_endproc
 3577              	.LFE100:
 3578              		.size	vTaskMissedYield, .-vTaskMissedYield
 3579              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3580              		.align	2
 3581              		.global	uxTaskGetStackHighWaterMark
 3582              		.thumb
 3583              		.thumb_func
 3584              		.type	uxTaskGetStackHighWaterMark, %function
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 171


 3585              	uxTaskGetStackHighWaterMark:
 3586              	.LFB105:
3975:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 3587              		.loc 1 3975 0
 3588              		.cfi_startproc
 3589              		@ args = 0, pretend = 0, frame = 0
 3590              		@ frame_needed = 0, uses_anonymous_args = 0
 3591              	.LVL345:
 3592 0000 08B5     		push	{r3, lr}
 3593              		.cfi_def_cfa_offset 8
 3594              		.cfi_offset 3, -8
 3595              		.cfi_offset 14, -4
3980:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3596              		.loc 1 3980 0
 3597 0002 0346     		mov	r3, r0
 3598 0004 10B9     		cbnz	r0, .L289
3980:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3599              		.loc 1 3980 0 is_stmt 0 discriminator 1
 3600 0006 034B     		ldr	r3, .L291
 3601 0008 D3F8D830 		ldr	r3, [r3, #216]
 3602              	.LVL346:
 3603              	.L289:
3992:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3604              		.loc 1 3992 0 is_stmt 1 discriminator 4
 3605 000c 186B     		ldr	r0, [r3, #48]
 3606 000e FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3607              	.LVL347:
3995:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3608              		.loc 1 3995 0 discriminator 4
 3609 0012 08BD     		pop	{r3, pc}
 3610              	.L292:
 3611              		.align	2
 3612              	.L291:
 3613 0014 00000000 		.word	.LANCHOR0
 3614              		.cfi_endproc
 3615              	.LFE105:
 3616              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3617              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3618              		.align	2
 3619              		.global	xTaskGetCurrentTaskHandle
 3620              		.thumb
 3621              		.thumb_func
 3622              		.type	xTaskGetCurrentTaskHandle, %function
 3623              	xTaskGetCurrentTaskHandle:
 3624              	.LFB108:
4079:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TaskHandle_t xReturn;
 3625              		.loc 1 4079 0
 3626              		.cfi_startproc
 3627              		@ args = 0, pretend = 0, frame = 0
 3628              		@ frame_needed = 0, uses_anonymous_args = 0
 3629              		@ link register save eliminated.
4085:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3630              		.loc 1 4085 0
 3631 0000 014B     		ldr	r3, .L294
 3632 0002 D3F8D800 		ldr	r0, [r3, #216]
 3633              	.LVL348:
4088:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 172


 3634              		.loc 1 4088 0
 3635 0006 7047     		bx	lr
 3636              	.L295:
 3637              		.align	2
 3638              	.L294:
 3639 0008 00000000 		.word	.LANCHOR0
 3640              		.cfi_endproc
 3641              	.LFE108:
 3642              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3643              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3644              		.align	2
 3645              		.global	xTaskPriorityInherit
 3646              		.thumb
 3647              		.thumb_func
 3648              		.type	xTaskPriorityInherit, %function
 3649              	xTaskPriorityInherit:
 3650              	.LFB109:
4124:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3651              		.loc 1 4124 0
 3652              		.cfi_startproc
 3653              		@ args = 0, pretend = 0, frame = 0
 3654              		@ frame_needed = 0, uses_anonymous_args = 0
 3655              	.LVL349:
4131:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 3656              		.loc 1 4131 0
 3657 0000 0028     		cmp	r0, #0
 3658 0002 63D0     		beq	.L302
4124:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3659              		.loc 1 4124 0
 3660 0004 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3661              		.cfi_def_cfa_offset 24
 3662              		.cfi_offset 3, -24
 3663              		.cfi_offset 4, -20
 3664              		.cfi_offset 5, -16
 3665              		.cfi_offset 6, -12
 3666              		.cfi_offset 7, -8
 3667              		.cfi_offset 14, -4
 3668 0006 0346     		mov	r3, r0
4136:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 3669              		.loc 1 4136 0
 3670 0008 C26A     		ldr	r2, [r0, #44]
 3671 000a 3249     		ldr	r1, .L305
 3672 000c D1F8D810 		ldr	r1, [r1, #216]
 3673 0010 C96A     		ldr	r1, [r1, #44]
 3674 0012 8A42     		cmp	r2, r1
 3675 0014 51D2     		bcs	.L298
4141:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 3676              		.loc 1 4141 0
 3677 0016 8169     		ldr	r1, [r0, #24]
 3678 0018 0029     		cmp	r1, #0
 3679 001a 06DB     		blt	.L299
4143:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 3680              		.loc 1 4143 0
 3681 001c 2D49     		ldr	r1, .L305
 3682 001e D1F8D810 		ldr	r1, [r1, #216]
 3683 0022 C96A     		ldr	r1, [r1, #44]
 3684 0024 C1F10501 		rsb	r1, r1, #5
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 173


 3685 0028 8161     		str	r1, [r0, #24]
 3686              	.L299:
4152:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 3687              		.loc 1 4152 0
 3688 002a 5869     		ldr	r0, [r3, #20]
 3689              	.LVL350:
 3690 002c 02EB8202 		add	r2, r2, r2, lsl #2
 3691 0030 9100     		lsls	r1, r2, #2
 3692 0032 294A     		ldr	r2, .L305+4
 3693 0034 1144     		add	r1, r1, r2
 3694 0036 8842     		cmp	r0, r1
 3695 0038 38D1     		bne	.L300
 3696 003a 1C46     		mov	r4, r3
4154:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 3697              		.loc 1 4154 0
 3698 003c 1D1D     		adds	r5, r3, #4
 3699 003e 2846     		mov	r0, r5
 3700 0040 FFF7FEFF 		bl	uxListRemove
 3701              	.LVL351:
 3702 0044 50B9     		cbnz	r0, .L301
4159:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 3703              		.loc 1 4159 0
 3704 0046 E26A     		ldr	r2, [r4, #44]
 3705 0048 0123     		movs	r3, #1
 3706 004a 03FA02F2 		lsl	r2, r3, r2
 3707 004e 2149     		ldr	r1, .L305
 3708 0050 D1F8E430 		ldr	r3, [r1, #228]
 3709 0054 23EA0203 		bic	r3, r3, r2
 3710 0058 C1F8E430 		str	r3, [r1, #228]
 3711              	.L301:
4167:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 3712              		.loc 1 4167 0
 3713 005c 1D4B     		ldr	r3, .L305
 3714 005e D3F8D820 		ldr	r2, [r3, #216]
 3715 0062 D26A     		ldr	r2, [r2, #44]
 3716 0064 E262     		str	r2, [r4, #44]
4168:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 3717              		.loc 1 4168 0
 3718 0066 0120     		movs	r0, #1
 3719 0068 00FA02F6 		lsl	r6, r0, r2
 3720 006c D3F8E410 		ldr	r1, [r3, #228]
 3721 0070 3143     		orrs	r1, r1, r6
 3722 0072 C3F8E410 		str	r1, [r3, #228]
 3723              	.LBB85:
 3724 0076 02EB8202 		add	r2, r2, r2, lsl #2
 3725 007a 9100     		lsls	r1, r2, #2
 3726 007c 1944     		add	r1, r1, r3
 3727 007e 4A6B     		ldr	r2, [r1, #52]
 3728              	.LVL352:
 3729 0080 A260     		str	r2, [r4, #8]
 3730 0082 9168     		ldr	r1, [r2, #8]
 3731 0084 E160     		str	r1, [r4, #12]
 3732 0086 9168     		ldr	r1, [r2, #8]
 3733 0088 4D60     		str	r5, [r1, #4]
 3734 008a 9560     		str	r5, [r2, #8]
 3735 008c E26A     		ldr	r2, [r4, #44]
 3736              	.LVL353:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 174


 3737 008e 03F13007 		add	r7, r3, #48
 3738 0092 9500     		lsls	r5, r2, #2
 3739 0094 AE18     		adds	r6, r5, r2
 3740 0096 B100     		lsls	r1, r6, #2
 3741 0098 0E46     		mov	r6, r1
 3742 009a 3944     		add	r1, r1, r7
 3743 009c 6161     		str	r1, [r4, #20]
 3744 009e 3146     		mov	r1, r6
 3745 00a0 1944     		add	r1, r1, r3
 3746 00a2 0C6B     		ldr	r4, [r1, #48]
 3747              	.LVL354:
 3748 00a4 0444     		add	r4, r4, r0
 3749 00a6 3344     		add	r3, r3, r6
 3750 00a8 1C63     		str	r4, [r3, #48]
 3751              	.LBE85:
 3752 00aa F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3753              	.LVL355:
 3754              	.L300:
4173:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 3755              		.loc 1 4173 0
 3756 00ac 094A     		ldr	r2, .L305
 3757 00ae D2F8D820 		ldr	r2, [r2, #216]
 3758 00b2 D26A     		ldr	r2, [r2, #44]
 3759 00b4 DA62     		str	r2, [r3, #44]
4179:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 3760              		.loc 1 4179 0
 3761 00b6 0120     		movs	r0, #1
 3762 00b8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3763              	.LVL356:
 3764              	.L298:
4183:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 3765              		.loc 1 4183 0
 3766 00ba 026C     		ldr	r2, [r0, #64]
 3767 00bc 054B     		ldr	r3, .L305
 3768 00be D3F8D830 		ldr	r3, [r3, #216]
 3769 00c2 DB6A     		ldr	r3, [r3, #44]
 3770 00c4 9A42     		cmp	r2, r3
 3771 00c6 03D3     		bcc	.L303
4126:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3772              		.loc 1 4126 0
 3773 00c8 0020     		movs	r0, #0
 3774              	.LVL357:
 3775 00ca F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3776              	.LVL358:
 3777              	.L302:
 3778              		.cfi_def_cfa_offset 0
 3779              		.cfi_restore 3
 3780              		.cfi_restore 4
 3781              		.cfi_restore 5
 3782              		.cfi_restore 6
 3783              		.cfi_restore 7
 3784              		.cfi_restore 14
 3785 00cc 0020     		movs	r0, #0
 3786              	.LVL359:
4206:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3787              		.loc 1 4206 0
 3788 00ce 7047     		bx	lr
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 175


 3789              	.LVL360:
 3790              	.L303:
 3791              		.cfi_def_cfa_offset 24
 3792              		.cfi_offset 3, -24
 3793              		.cfi_offset 4, -20
 3794              		.cfi_offset 5, -16
 3795              		.cfi_offset 6, -12
 3796              		.cfi_offset 7, -8
 3797              		.cfi_offset 14, -4
4192:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 3798              		.loc 1 4192 0
 3799 00d0 0120     		movs	r0, #1
 3800              	.LVL361:
4206:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3801              		.loc 1 4206 0
 3802 00d2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3803              	.L306:
 3804              		.align	2
 3805              	.L305:
 3806 00d4 00000000 		.word	.LANCHOR0
 3807 00d8 30000000 		.word	.LANCHOR0+48
 3808              		.cfi_endproc
 3809              	.LFE109:
 3810              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 3811              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3812              		.align	2
 3813              		.global	xTaskPriorityDisinherit
 3814              		.thumb
 3815              		.thumb_func
 3816              		.type	xTaskPriorityDisinherit, %function
 3817              	xTaskPriorityDisinherit:
 3818              	.LFB110:
4214:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 3819              		.loc 1 4214 0
 3820              		.cfi_startproc
 3821              		@ args = 0, pretend = 0, frame = 0
 3822              		@ frame_needed = 0, uses_anonymous_args = 0
 3823              	.LVL362:
4218:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 3824              		.loc 1 4218 0
 3825 0000 0028     		cmp	r0, #0
 3826 0002 44D0     		beq	.L310
4214:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 3827              		.loc 1 4214 0
 3828 0004 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3829              		.cfi_def_cfa_offset 24
 3830              		.cfi_offset 3, -24
 3831              		.cfi_offset 4, -20
 3832              		.cfi_offset 5, -16
 3833              		.cfi_offset 6, -12
 3834              		.cfi_offset 7, -8
 3835              		.cfi_offset 14, -4
 3836 0006 0346     		mov	r3, r0
4226:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3837              		.loc 1 4226 0
 3838 0008 426C     		ldr	r2, [r0, #68]
 3839 000a 013A     		subs	r2, r2, #1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 176


 3840 000c 4264     		str	r2, [r0, #68]
4230:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 3841              		.loc 1 4230 0
 3842 000e C06A     		ldr	r0, [r0, #44]
 3843              	.LVL363:
 3844 0010 196C     		ldr	r1, [r3, #64]
 3845 0012 8842     		cmp	r0, r1
 3846 0014 3DD0     		beq	.L311
4233:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 3847              		.loc 1 4233 0
 3848 0016 002A     		cmp	r2, #0
 3849 0018 3DD1     		bne	.L312
 3850 001a 1C46     		mov	r4, r3
4240:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 3851              		.loc 1 4240 0
 3852 001c 1D1D     		adds	r5, r3, #4
 3853 001e 2846     		mov	r0, r5
 3854 0020 FFF7FEFF 		bl	uxListRemove
 3855              	.LVL364:
 3856 0024 50B9     		cbnz	r0, .L309
4242:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 3857              		.loc 1 4242 0
 3858 0026 E26A     		ldr	r2, [r4, #44]
 3859 0028 0123     		movs	r3, #1
 3860 002a 03FA02F2 		lsl	r2, r3, r2
 3861 002e 1B49     		ldr	r1, .L314
 3862 0030 D1F8E430 		ldr	r3, [r1, #228]
 3863 0034 23EA0203 		bic	r3, r3, r2
 3864 0038 C1F8E430 		str	r3, [r1, #228]
 3865              	.L309:
4252:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3866              		.loc 1 4252 0
 3867 003c 236C     		ldr	r3, [r4, #64]
 3868 003e E362     		str	r3, [r4, #44]
4257:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 3869              		.loc 1 4257 0
 3870 0040 C3F10502 		rsb	r2, r3, #5
 3871 0044 A261     		str	r2, [r4, #24]
4258:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3872              		.loc 1 4258 0
 3873 0046 0120     		movs	r0, #1
 3874 0048 00FA03F6 		lsl	r6, r0, r3
 3875 004c 134A     		ldr	r2, .L314
 3876 004e D2F8E410 		ldr	r1, [r2, #228]
 3877 0052 3143     		orrs	r1, r1, r6
 3878 0054 C2F8E410 		str	r1, [r2, #228]
 3879              	.LBB86:
 3880 0058 03EB8303 		add	r3, r3, r3, lsl #2
 3881 005c 9900     		lsls	r1, r3, #2
 3882 005e 1144     		add	r1, r1, r2
 3883 0060 4B6B     		ldr	r3, [r1, #52]
 3884              	.LVL365:
 3885 0062 A360     		str	r3, [r4, #8]
 3886 0064 9968     		ldr	r1, [r3, #8]
 3887 0066 E160     		str	r1, [r4, #12]
 3888 0068 9968     		ldr	r1, [r3, #8]
 3889 006a 4D60     		str	r5, [r1, #4]
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 177


 3890 006c 9D60     		str	r5, [r3, #8]
 3891 006e E36A     		ldr	r3, [r4, #44]
 3892              	.LVL366:
 3893 0070 02F13007 		add	r7, r2, #48
 3894 0074 9D00     		lsls	r5, r3, #2
 3895 0076 EE18     		adds	r6, r5, r3
 3896 0078 B100     		lsls	r1, r6, #2
 3897 007a 0E46     		mov	r6, r1
 3898 007c 3944     		add	r1, r1, r7
 3899 007e 6161     		str	r1, [r4, #20]
 3900 0080 3146     		mov	r1, r6
 3901 0082 1144     		add	r1, r1, r2
 3902 0084 0C6B     		ldr	r4, [r1, #48]
 3903              	.LVL367:
 3904 0086 0444     		add	r4, r4, r0
 3905 0088 3244     		add	r2, r2, r6
 3906 008a 1463     		str	r4, [r2, #48]
 3907              	.LVL368:
 3908              	.LBE86:
 3909 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3910              	.LVL369:
 3911              	.L310:
 3912              		.cfi_def_cfa_offset 0
 3913              		.cfi_restore 3
 3914              		.cfi_restore 4
 3915              		.cfi_restore 5
 3916              		.cfi_restore 6
 3917              		.cfi_restore 7
 3918              		.cfi_restore 14
4216:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3919              		.loc 1 4216 0
 3920 008e 0020     		movs	r0, #0
 3921              	.LVL370:
4286:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3922              		.loc 1 4286 0
 3923 0090 7047     		bx	lr
 3924              	.LVL371:
 3925              	.L311:
 3926              		.cfi_def_cfa_offset 24
 3927              		.cfi_offset 3, -24
 3928              		.cfi_offset 4, -20
 3929              		.cfi_offset 5, -16
 3930              		.cfi_offset 6, -12
 3931              		.cfi_offset 7, -8
 3932              		.cfi_offset 14, -4
4216:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3933              		.loc 1 4216 0
 3934 0092 0020     		movs	r0, #0
 3935 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3936              	.LVL372:
 3937              	.L312:
 3938 0096 0020     		movs	r0, #0
 3939              	.LVL373:
4286:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3940              		.loc 1 4286 0
 3941 0098 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3942              	.LVL374:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 178


 3943              	.L315:
 3944 009a 00BF     		.align	2
 3945              	.L314:
 3946 009c 00000000 		.word	.LANCHOR0
 3947              		.cfi_endproc
 3948              	.LFE110:
 3949              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 3950              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3951              		.align	2
 3952              		.global	vTaskPriorityDisinheritAfterTimeout
 3953              		.thumb
 3954              		.thumb_func
 3955              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 3956              	vTaskPriorityDisinheritAfterTimeout:
 3957              	.LFB111:
4295:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 3958              		.loc 1 4295 0
 3959              		.cfi_startproc
 3960              		@ args = 0, pretend = 0, frame = 0
 3961              		@ frame_needed = 0, uses_anonymous_args = 0
 3962              	.LVL375:
4300:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 3963              		.loc 1 4300 0
 3964 0000 0028     		cmp	r0, #0
 3965 0002 52D0     		beq	.L322
 3966 0004 0346     		mov	r3, r0
4310:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 3967              		.loc 1 4310 0
 3968 0006 026C     		ldr	r2, [r0, #64]
 3969 0008 8A42     		cmp	r2, r1
 3970 000a 00D2     		bcs	.L318
4312:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 3971              		.loc 1 4312 0
 3972 000c 0A46     		mov	r2, r1
 3973              	.L318:
 3974              	.LVL376:
4320:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 3975              		.loc 1 4320 0
 3976 000e D96A     		ldr	r1, [r3, #44]
 3977              	.LVL377:
 3978 0010 8A42     		cmp	r2, r1
 3979 0012 4AD0     		beq	.L322
4326:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 3980              		.loc 1 4326 0
 3981 0014 586C     		ldr	r0, [r3, #68]
 3982              	.LVL378:
 3983 0016 0128     		cmp	r0, #1
 3984 0018 47D1     		bne	.L322
 3985              	.LVL379:
4338:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 3986              		.loc 1 4338 0
 3987 001a DA62     		str	r2, [r3, #44]
4342:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 3988              		.loc 1 4342 0
 3989 001c 9869     		ldr	r0, [r3, #24]
 3990 001e 0028     		cmp	r0, #0
 3991 0020 02DB     		blt	.L319
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 179


4344:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 3992              		.loc 1 4344 0
 3993 0022 C2F10502 		rsb	r2, r2, #5
 3994              	.LVL380:
 3995 0026 9A61     		str	r2, [r3, #24]
 3996              	.L319:
4357:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 3997              		.loc 1 4357 0
 3998 0028 5869     		ldr	r0, [r3, #20]
 3999 002a 01EB8101 		add	r1, r1, r1, lsl #2
 4000              	.LVL381:
 4001 002e 8A00     		lsls	r2, r1, #2
 4002 0030 1E49     		ldr	r1, .L323
 4003 0032 0A44     		add	r2, r2, r1
 4004 0034 9042     		cmp	r0, r2
 4005 0036 38D1     		bne	.L322
4295:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * const pxTCB = pxMutexHolder;
 4006              		.loc 1 4295 0
 4007 0038 70B5     		push	{r4, r5, r6, lr}
 4008              		.cfi_def_cfa_offset 16
 4009              		.cfi_offset 4, -16
 4010              		.cfi_offset 5, -12
 4011              		.cfi_offset 6, -8
 4012              		.cfi_offset 14, -4
 4013 003a 1C46     		mov	r4, r3
4359:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         {
 4014              		.loc 1 4359 0
 4015 003c 1D1D     		adds	r5, r3, #4
 4016 003e 2846     		mov	r0, r5
 4017 0040 FFF7FEFF 		bl	uxListRemove
 4018              	.LVL382:
 4019 0044 50B9     		cbnz	r0, .L320
4364:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                         }
 4020              		.loc 1 4364 0
 4021 0046 E26A     		ldr	r2, [r4, #44]
 4022 0048 0123     		movs	r3, #1
 4023 004a 03FA02F2 		lsl	r2, r3, r2
 4024 004e 1849     		ldr	r1, .L323+4
 4025 0050 D1F8E430 		ldr	r3, [r1, #228]
 4026 0054 23EA0203 		bic	r3, r3, r2
 4027 0058 C1F8E430 		str	r3, [r1, #228]
 4028              	.L320:
4371:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 4029              		.loc 1 4371 0
 4030 005c E36A     		ldr	r3, [r4, #44]
 4031 005e 0121     		movs	r1, #1
 4032 0060 01FA03F0 		lsl	r0, r1, r3
 4033 0064 124A     		ldr	r2, .L323+4
 4034 0066 D2F8E410 		ldr	r1, [r2, #228]
 4035 006a 0143     		orrs	r1, r1, r0
 4036 006c C2F8E410 		str	r1, [r2, #228]
 4037              	.LBB87:
 4038 0070 03EB8303 		add	r3, r3, r3, lsl #2
 4039 0074 9900     		lsls	r1, r3, #2
 4040 0076 1144     		add	r1, r1, r2
 4041 0078 4B6B     		ldr	r3, [r1, #52]
 4042              	.LVL383:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 180


 4043 007a A360     		str	r3, [r4, #8]
 4044 007c 9968     		ldr	r1, [r3, #8]
 4045 007e E160     		str	r1, [r4, #12]
 4046 0080 9968     		ldr	r1, [r3, #8]
 4047 0082 4D60     		str	r5, [r1, #4]
 4048 0084 9D60     		str	r5, [r3, #8]
 4049 0086 E36A     		ldr	r3, [r4, #44]
 4050              	.LVL384:
 4051 0088 02F13006 		add	r6, r2, #48
 4052 008c 9D00     		lsls	r5, r3, #2
 4053 008e E818     		adds	r0, r5, r3
 4054 0090 8100     		lsls	r1, r0, #2
 4055 0092 3144     		add	r1, r1, r6
 4056 0094 6161     		str	r1, [r4, #20]
 4057 0096 E818     		adds	r0, r5, r3
 4058 0098 8100     		lsls	r1, r0, #2
 4059 009a 1144     		add	r1, r1, r2
 4060 009c 086B     		ldr	r0, [r1, #48]
 4061 009e 0130     		adds	r0, r0, #1
 4062 00a0 2B44     		add	r3, r3, r5
 4063 00a2 9900     		lsls	r1, r3, #2
 4064 00a4 0A44     		add	r2, r2, r1
 4065 00a6 1063     		str	r0, [r2, #48]
 4066 00a8 70BD     		pop	{r4, r5, r6, pc}
 4067              	.LVL385:
 4068              	.L322:
 4069              		.cfi_def_cfa_offset 0
 4070              		.cfi_restore 4
 4071              		.cfi_restore 5
 4072              		.cfi_restore 6
 4073              		.cfi_restore 14
 4074 00aa 7047     		bx	lr
 4075              	.L324:
 4076              		.align	2
 4077              	.L323:
 4078 00ac 30000000 		.word	.LANCHOR0+48
 4079 00b0 00000000 		.word	.LANCHOR0
 4080              	.LBE87:
 4081              		.cfi_endproc
 4082              	.LFE111:
 4083              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 4084              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4085              		.align	2
 4086              		.global	uxTaskResetEventItemValue
 4087              		.thumb
 4088              		.thumb_func
 4089              		.type	uxTaskResetEventItemValue, %function
 4090              	uxTaskResetEventItemValue:
 4091              	.LFB112:
4715:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     TickType_t uxReturn;
 4092              		.loc 1 4715 0
 4093              		.cfi_startproc
 4094              		@ args = 0, pretend = 0, frame = 0
 4095              		@ frame_needed = 0, uses_anonymous_args = 0
 4096              		@ link register save eliminated.
4718:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4097              		.loc 1 4718 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 181


 4098 0000 064B     		ldr	r3, .L326
 4099 0002 D3F8D820 		ldr	r2, [r3, #216]
 4100 0006 9069     		ldr	r0, [r2, #24]
 4101              	.LVL386:
4722:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4102              		.loc 1 4722 0
 4103 0008 D3F8D820 		ldr	r2, [r3, #216]
 4104 000c D3F8D830 		ldr	r3, [r3, #216]
 4105 0010 DB6A     		ldr	r3, [r3, #44]
 4106 0012 C3F10503 		rsb	r3, r3, #5
 4107 0016 9361     		str	r3, [r2, #24]
4725:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** /*-----------------------------------------------------------*/
 4108              		.loc 1 4725 0
 4109 0018 7047     		bx	lr
 4110              	.L327:
 4111 001a 00BF     		.align	2
 4112              	.L326:
 4113 001c 00000000 		.word	.LANCHOR0
 4114              		.cfi_endproc
 4115              	.LFE112:
 4116              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 4117              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4118              		.align	2
 4119              		.global	pvTaskIncrementMutexHeldCount
 4120              		.thumb
 4121              		.thumb_func
 4122              		.type	pvTaskIncrementMutexHeldCount, %function
 4123              	pvTaskIncrementMutexHeldCount:
 4124              	.LFB113:
4731:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
 4125              		.loc 1 4731 0
 4126              		.cfi_startproc
 4127              		@ args = 0, pretend = 0, frame = 0
 4128              		@ frame_needed = 0, uses_anonymous_args = 0
 4129              		@ link register save eliminated.
4734:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 4130              		.loc 1 4734 0
 4131 0000 064B     		ldr	r3, .L330
 4132 0002 D3F8D830 		ldr	r3, [r3, #216]
 4133 0006 2BB1     		cbz	r3, .L329
4736:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 4134              		.loc 1 4736 0
 4135 0008 044B     		ldr	r3, .L330
 4136 000a D3F8D820 		ldr	r2, [r3, #216]
 4137 000e 536C     		ldr	r3, [r2, #68]
 4138 0010 0133     		adds	r3, r3, #1
 4139 0012 5364     		str	r3, [r2, #68]
 4140              	.L329:
4739:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****     }
 4141              		.loc 1 4739 0
 4142 0014 014B     		ldr	r3, .L330
 4143 0016 D3F8D800 		ldr	r0, [r3, #216]
4740:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4144              		.loc 1 4740 0
 4145 001a 7047     		bx	lr
 4146              	.L331:
 4147              		.align	2
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 182


 4148              	.L330:
 4149 001c 00000000 		.word	.LANCHOR0
 4150              		.cfi_endproc
 4151              	.LFE113:
 4152              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 4153              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 4154              		.align	2
 4155              		.global	ulTaskGenericNotifyTake
 4156              		.thumb
 4157              		.thumb_func
 4158              		.type	ulTaskGenericNotifyTake, %function
 4159              	ulTaskGenericNotifyTake:
 4160              	.LFB114:
4750:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint32_t ulReturn;
 4161              		.loc 1 4750 0
 4162              		.cfi_startproc
 4163              		@ args = 0, pretend = 0, frame = 0
 4164              		@ frame_needed = 0, uses_anonymous_args = 0
 4165              	.LVL387:
 4166 0000 70B5     		push	{r4, r5, r6, lr}
 4167              		.cfi_def_cfa_offset 16
 4168              		.cfi_offset 4, -16
 4169              		.cfi_offset 5, -12
 4170              		.cfi_offset 6, -8
 4171              		.cfi_offset 14, -4
 4172 0002 0446     		mov	r4, r0
 4173 0004 0E46     		mov	r6, r1
 4174 0006 1546     		mov	r5, r2
4755:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 4175              		.loc 1 4755 0
 4176 0008 FFF7FEFF 		bl	vPortEnterCritical
 4177              	.LVL388:
4758:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 4178              		.loc 1 4758 0
 4179 000c 224B     		ldr	r3, .L337
 4180 000e D3F8D830 		ldr	r3, [r3, #216]
 4181 0012 04F11202 		add	r2, r4, #18
 4182 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4183 001a 9BB9     		cbnz	r3, .L333
4761:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4184              		.loc 1 4761 0
 4185 001c 1E4B     		ldr	r3, .L337
 4186 001e D3F8D830 		ldr	r3, [r3, #216]
 4187 0022 2344     		add	r3, r3, r4
 4188 0024 0122     		movs	r2, #1
 4189 0026 83F84C20 		strb	r2, [r3, #76]
4763:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 4190              		.loc 1 4763 0
 4191 002a 5DB1     		cbz	r5, .L333
4765:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
 4192              		.loc 1 4765 0
 4193 002c 1146     		mov	r1, r2
 4194 002e 2846     		mov	r0, r5
 4195 0030 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4196              	.LVL389:
4772:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 4197              		.loc 1 4772 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 183


 4198 0034 4FF08052 		mov	r2, #268435456
 4199 0038 184B     		ldr	r3, .L337+4
 4200 003a 1A60     		str	r2, [r3]
 4201              		.syntax unified
 4202              	@ 4772 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 4203 003c BFF34F8F 		dsb
 4204              	@ 0 "" 2
 4205              	@ 4772 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 4206 0040 BFF36F8F 		isb
 4207              	@ 0 "" 2
 4208              		.thumb
 4209              		.syntax unified
 4210              	.L333:
4784:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4211              		.loc 1 4784 0
 4212 0044 FFF7FEFF 		bl	vPortExitCritical
 4213              	.LVL390:
4786:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 4214              		.loc 1 4786 0
 4215 0048 FFF7FEFF 		bl	vPortEnterCritical
 4216              	.LVL391:
4789:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4217              		.loc 1 4789 0
 4218 004c 124B     		ldr	r3, .L337
 4219 004e D3F8D830 		ldr	r3, [r3, #216]
 4220 0052 04F11202 		add	r2, r4, #18
 4221 0056 53F82250 		ldr	r5, [r3, r2, lsl #2]
 4222              	.LVL392:
4791:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 4223              		.loc 1 4791 0
 4224 005a 8DB1     		cbz	r5, .L334
4793:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 4225              		.loc 1 4793 0
 4226 005c 46B1     		cbz	r6, .L335
4795:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 4227              		.loc 1 4795 0
 4228 005e 0E4B     		ldr	r3, .L337
 4229 0060 D3F8D820 		ldr	r2, [r3, #216]
 4230 0064 04F11203 		add	r3, r4, #18
 4231 0068 0021     		movs	r1, #0
 4232 006a 42F82310 		str	r1, [r2, r3, lsl #2]
 4233 006e 07E0     		b	.L334
 4234              	.L335:
4799:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 4235              		.loc 1 4799 0
 4236 0070 094B     		ldr	r3, .L337
 4237 0072 D3F8D820 		ldr	r2, [r3, #216]
 4238 0076 6B1E     		subs	r3, r5, #1
 4239 0078 04F11201 		add	r1, r4, #18
 4240 007c 42F82130 		str	r3, [r2, r1, lsl #2]
 4241              	.L334:
4807:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 4242              		.loc 1 4807 0
 4243 0080 054B     		ldr	r3, .L337
 4244 0082 D3F8D830 		ldr	r3, [r3, #216]
 4245 0086 1C44     		add	r4, r4, r3
 4246              	.LVL393:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 184


 4247 0088 0023     		movs	r3, #0
 4248 008a 84F84C30 		strb	r3, [r4, #76]
4809:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4249              		.loc 1 4809 0
 4250 008e FFF7FEFF 		bl	vPortExitCritical
 4251              	.LVL394:
4812:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4252              		.loc 1 4812 0
 4253 0092 2846     		mov	r0, r5
 4254 0094 70BD     		pop	{r4, r5, r6, pc}
 4255              	.LVL395:
 4256              	.L338:
 4257 0096 00BF     		.align	2
 4258              	.L337:
 4259 0098 00000000 		.word	.LANCHOR0
 4260 009c 04ED00E0 		.word	-536810236
 4261              		.cfi_endproc
 4262              	.LFE114:
 4263              		.size	ulTaskGenericNotifyTake, .-ulTaskGenericNotifyTake
 4264              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 4265              		.align	2
 4266              		.global	xTaskGenericNotifyWait
 4267              		.thumb
 4268              		.thumb_func
 4269              		.type	xTaskGenericNotifyWait, %function
 4270              	xTaskGenericNotifyWait:
 4271              	.LFB115:
4824:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         BaseType_t xReturn;
 4272              		.loc 1 4824 0
 4273              		.cfi_startproc
 4274              		@ args = 4, pretend = 0, frame = 0
 4275              		@ frame_needed = 0, uses_anonymous_args = 0
 4276              	.LVL396:
 4277 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4278              		.cfi_def_cfa_offset 24
 4279              		.cfi_offset 3, -24
 4280              		.cfi_offset 4, -20
 4281              		.cfi_offset 5, -16
 4282              		.cfi_offset 6, -12
 4283              		.cfi_offset 7, -8
 4284              		.cfi_offset 14, -4
 4285 0002 0446     		mov	r4, r0
 4286 0004 0F46     		mov	r7, r1
 4287 0006 1546     		mov	r5, r2
 4288 0008 1E46     		mov	r6, r3
4829:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 4289              		.loc 1 4829 0
 4290 000a FFF7FEFF 		bl	vPortEnterCritical
 4291              	.LVL397:
4832:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 4292              		.loc 1 4832 0
 4293 000e 2B4B     		ldr	r3, .L345
 4294 0010 D3F8D830 		ldr	r3, [r3, #216]
 4295 0014 2344     		add	r3, r3, r4
 4296 0016 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 4297 001a DBB2     		uxtb	r3, r3
 4298 001c 022B     		cmp	r3, #2
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 185


 4299 001e 1ED0     		beq	.L340
4837:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4300              		.loc 1 4837 0
 4301 0020 264B     		ldr	r3, .L345
 4302 0022 D3F8D820 		ldr	r2, [r3, #216]
 4303 0026 04F11200 		add	r0, r4, #18
 4304 002a 52F82010 		ldr	r1, [r2, r0, lsl #2]
 4305 002e 21EA0701 		bic	r1, r1, r7
 4306 0032 42F82010 		str	r1, [r2, r0, lsl #2]
4840:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4307              		.loc 1 4840 0
 4308 0036 D3F8D830 		ldr	r3, [r3, #216]
 4309 003a 2344     		add	r3, r3, r4
 4310 003c 0122     		movs	r2, #1
 4311 003e 83F84C20 		strb	r2, [r3, #76]
4842:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 4312              		.loc 1 4842 0
 4313 0042 069B     		ldr	r3, [sp, #24]
 4314 0044 5BB1     		cbz	r3, .L340
4844:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
 4315              		.loc 1 4844 0
 4316 0046 1146     		mov	r1, r2
 4317 0048 1846     		mov	r0, r3
 4318 004a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4319              	.LVL398:
4851:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 4320              		.loc 1 4851 0
 4321 004e 4FF08052 		mov	r2, #268435456
 4322 0052 1B4B     		ldr	r3, .L345+4
 4323 0054 1A60     		str	r2, [r3]
 4324              		.syntax unified
 4325              	@ 4851 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 4326 0056 BFF34F8F 		dsb
 4327              	@ 0 "" 2
 4328              	@ 4851 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 4329 005a BFF36F8F 		isb
 4330              	@ 0 "" 2
 4331              		.thumb
 4332              		.syntax unified
 4333              	.L340:
4863:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4334              		.loc 1 4863 0
 4335 005e FFF7FEFF 		bl	vPortExitCritical
 4336              	.LVL399:
4865:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 4337              		.loc 1 4865 0
 4338 0062 FFF7FEFF 		bl	vPortEnterCritical
 4339              	.LVL400:
4869:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 4340              		.loc 1 4869 0
 4341 0066 3EB1     		cbz	r6, .L341
4873:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 4342              		.loc 1 4873 0
 4343 0068 144B     		ldr	r3, .L345
 4344 006a D3F8D830 		ldr	r3, [r3, #216]
 4345 006e 04F11202 		add	r2, r4, #18
 4346 0072 53F82230 		ldr	r3, [r3, r2, lsl #2]
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 186


 4347 0076 3360     		str	r3, [r6]
 4348              	.L341:
4880:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 4349              		.loc 1 4880 0
 4350 0078 104B     		ldr	r3, .L345
 4351 007a D3F8D830 		ldr	r3, [r3, #216]
 4352 007e 2344     		add	r3, r3, r4
 4353 0080 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 4354 0084 DBB2     		uxtb	r3, r3
 4355 0086 022B     		cmp	r3, #2
 4356 0088 0CD1     		bne	.L343
4889:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = pdTRUE;
 4357              		.loc 1 4889 0
 4358 008a 0C4B     		ldr	r3, .L345
 4359 008c D3F8D820 		ldr	r2, [r3, #216]
 4360 0090 04F11201 		add	r1, r4, #18
 4361 0094 52F82130 		ldr	r3, [r2, r1, lsl #2]
 4362 0098 23EA0505 		bic	r5, r3, r5
 4363              	.LVL401:
 4364 009c 42F82150 		str	r5, [r2, r1, lsl #2]
 4365              	.LVL402:
4890:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 4366              		.loc 1 4890 0
 4367 00a0 0125     		movs	r5, #1
 4368 00a2 00E0     		b	.L342
 4369              	.LVL403:
 4370              	.L343:
4883:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 4371              		.loc 1 4883 0
 4372 00a4 0025     		movs	r5, #0
 4373              	.LVL404:
 4374              	.L342:
4893:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 4375              		.loc 1 4893 0
 4376 00a6 054B     		ldr	r3, .L345
 4377 00a8 D3F8D830 		ldr	r3, [r3, #216]
 4378 00ac 1C44     		add	r4, r4, r3
 4379              	.LVL405:
 4380 00ae 0023     		movs	r3, #0
 4381 00b0 84F84C30 		strb	r3, [r4, #76]
4895:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4382              		.loc 1 4895 0
 4383 00b4 FFF7FEFF 		bl	vPortExitCritical
 4384              	.LVL406:
4898:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4385              		.loc 1 4898 0
 4386 00b8 2846     		mov	r0, r5
 4387 00ba F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4388              	.LVL407:
 4389              	.L346:
 4390              		.align	2
 4391              	.L345:
 4392 00bc 00000000 		.word	.LANCHOR0
 4393 00c0 04ED00E0 		.word	-536810236
 4394              		.cfi_endproc
 4395              	.LFE115:
 4396              		.size	xTaskGenericNotifyWait, .-xTaskGenericNotifyWait
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 187


 4397              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4398              		.align	2
 4399              		.global	xTaskGenericNotify
 4400              		.thumb
 4401              		.thumb_func
 4402              		.type	xTaskGenericNotify, %function
 4403              	xTaskGenericNotify:
 4404              	.LFB116:
4910:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 4405              		.loc 1 4910 0
 4406              		.cfi_startproc
 4407              		@ args = 4, pretend = 0, frame = 0
 4408              		@ frame_needed = 0, uses_anonymous_args = 0
 4409              	.LVL408:
 4410 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4411              		.cfi_def_cfa_offset 24
 4412              		.cfi_offset 4, -24
 4413              		.cfi_offset 5, -20
 4414              		.cfi_offset 6, -16
 4415              		.cfi_offset 7, -12
 4416              		.cfi_offset 8, -8
 4417              		.cfi_offset 14, -4
 4418 0004 0446     		mov	r4, r0
 4419 0006 0D46     		mov	r5, r1
 4420 0008 1746     		mov	r7, r2
 4421 000a 1E46     		mov	r6, r3
 4422 000c DDF81880 		ldr	r8, [sp, #24]
 4423              	.LVL409:
4919:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 4424              		.loc 1 4919 0
 4425 0010 FFF7FEFF 		bl	vPortEnterCritical
 4426              	.LVL410:
4921:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 4427              		.loc 1 4921 0
 4428 0014 B8F1000F 		cmp	r8, #0
 4429 0018 05D0     		beq	.L348
4923:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 4430              		.loc 1 4923 0
 4431 001a 05F11203 		add	r3, r5, #18
 4432 001e 54F82330 		ldr	r3, [r4, r3, lsl #2]
 4433 0022 C8F80030 		str	r3, [r8]
 4434              	.L348:
4926:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4435              		.loc 1 4926 0
 4436 0026 6319     		adds	r3, r4, r5
 4437 0028 93F84C10 		ldrb	r1, [r3, #76]	@ zero_extendqisi2
 4438 002c C9B2     		uxtb	r1, r1
 4439              	.LVL411:
4928:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4440              		.loc 1 4928 0
 4441 002e 0222     		movs	r2, #2
 4442 0030 83F84C20 		strb	r2, [r3, #76]
4930:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 4443              		.loc 1 4930 0
 4444 0034 731E     		subs	r3, r6, #1
 4445 0036 032B     		cmp	r3, #3
 4446 0038 1FD8     		bhi	.L357
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 188


 4447 003a DFE803F0 		tbb	[pc, r3]
 4448              	.L351:
 4449 003e 02       		.byte	(.L350-.L351)/2
 4450 003f 0A       		.byte	(.L352-.L351)/2
 4451 0040 12       		.byte	(.L353-.L351)/2
 4452 0041 17       		.byte	(.L354-.L351)/2
 4453              		.p2align 1
 4454              	.L350:
4933:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
 4455              		.loc 1 4933 0
 4456 0042 1235     		adds	r5, r5, #18
 4457              	.LVL412:
 4458 0044 54F82530 		ldr	r3, [r4, r5, lsl #2]
 4459 0048 1F43     		orrs	r7, r7, r3
 4460              	.LVL413:
 4461 004a 44F82570 		str	r7, [r4, r5, lsl #2]
4912:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint8_t ucOriginalNotifyState;
 4462              		.loc 1 4912 0
 4463 004e 0125     		movs	r5, #1
 4464              	.LVL414:
4934:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4465              		.loc 1 4934 0
 4466 0050 16E0     		b	.L349
 4467              	.LVL415:
 4468              	.L352:
4937:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
 4469              		.loc 1 4937 0
 4470 0052 1235     		adds	r5, r5, #18
 4471              	.LVL416:
 4472 0054 54F82530 		ldr	r3, [r4, r5, lsl #2]
 4473 0058 0133     		adds	r3, r3, #1
 4474 005a 44F82530 		str	r3, [r4, r5, lsl #2]
4912:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint8_t ucOriginalNotifyState;
 4475              		.loc 1 4912 0
 4476 005e 0125     		movs	r5, #1
 4477              	.LVL417:
4938:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4478              		.loc 1 4938 0
 4479 0060 0EE0     		b	.L349
 4480              	.LVL418:
 4481              	.L353:
4941:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
 4482              		.loc 1 4941 0
 4483 0062 1235     		adds	r5, r5, #18
 4484              	.LVL419:
 4485 0064 44F82570 		str	r7, [r4, r5, lsl #2]
4912:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint8_t ucOriginalNotifyState;
 4486              		.loc 1 4912 0
 4487 0068 0125     		movs	r5, #1
 4488              	.LVL420:
4942:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4489              		.loc 1 4942 0
 4490 006a 09E0     		b	.L349
 4491              	.LVL421:
 4492              	.L354:
4946:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 4493              		.loc 1 4946 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 189


 4494 006c 0229     		cmp	r1, #2
 4495 006e 06D0     		beq	.L358
4948:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 4496              		.loc 1 4948 0
 4497 0070 1235     		adds	r5, r5, #18
 4498              	.LVL422:
 4499 0072 44F82570 		str	r7, [r4, r5, lsl #2]
4912:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         uint8_t ucOriginalNotifyState;
 4500              		.loc 1 4912 0
 4501 0076 0125     		movs	r5, #1
 4502              	.LVL423:
 4503 0078 02E0     		b	.L349
 4504              	.LVL424:
 4505              	.L357:
 4506 007a 0125     		movs	r5, #1
 4507              	.LVL425:
 4508 007c 00E0     		b	.L349
 4509              	.LVL426:
 4510              	.L358:
4953:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 4511              		.loc 1 4953 0
 4512 007e 0025     		movs	r5, #0
 4513              	.LVL427:
 4514              	.L349:
4978:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 4515              		.loc 1 4978 0
 4516 0080 0129     		cmp	r1, #1
 4517 0082 45D1     		bne	.L355
 4518              	.LBB88:
4980:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 4519              		.loc 1 4980 0
 4520 0084 6369     		ldr	r3, [r4, #20]
 4521              	.LVL428:
 4522 0086 A268     		ldr	r2, [r4, #8]
 4523 0088 E168     		ldr	r1, [r4, #12]
 4524              	.LVL429:
 4525 008a 9160     		str	r1, [r2, #8]
 4526 008c E268     		ldr	r2, [r4, #12]
 4527 008e A168     		ldr	r1, [r4, #8]
 4528 0090 5160     		str	r1, [r2, #4]
 4529 0092 5A68     		ldr	r2, [r3, #4]
 4530 0094 201D     		adds	r0, r4, #4
 4531 0096 8242     		cmp	r2, r0
 4532 0098 01D1     		bne	.L356
4980:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 4533              		.loc 1 4980 0 is_stmt 0 discriminator 1
 4534 009a E268     		ldr	r2, [r4, #12]
 4535 009c 5A60     		str	r2, [r3, #4]
 4536              	.L356:
4980:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 prvAddTaskToReadyList( pxTCB );
 4537              		.loc 1 4980 0 discriminator 3
 4538 009e 0022     		movs	r2, #0
 4539 00a0 6261     		str	r2, [r4, #20]
 4540 00a2 1A68     		ldr	r2, [r3]
 4541 00a4 013A     		subs	r2, r2, #1
 4542 00a6 1A60     		str	r2, [r3]
 4543              	.LBE88:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 190


4981:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4544              		.loc 1 4981 0 is_stmt 1 discriminator 3
 4545 00a8 E36A     		ldr	r3, [r4, #44]
 4546              	.LVL430:
 4547 00aa 0121     		movs	r1, #1
 4548 00ac 01FA03F6 		lsl	r6, r1, r3
 4549 00b0 1A4A     		ldr	r2, .L360
 4550 00b2 D2F8E410 		ldr	r1, [r2, #228]
 4551 00b6 3143     		orrs	r1, r1, r6
 4552 00b8 C2F8E410 		str	r1, [r2, #228]
 4553              	.LBB89:
 4554 00bc 03EB8303 		add	r3, r3, r3, lsl #2
 4555 00c0 9900     		lsls	r1, r3, #2
 4556 00c2 1144     		add	r1, r1, r2
 4557 00c4 4B6B     		ldr	r3, [r1, #52]
 4558              	.LVL431:
 4559 00c6 A360     		str	r3, [r4, #8]
 4560 00c8 9968     		ldr	r1, [r3, #8]
 4561 00ca E160     		str	r1, [r4, #12]
 4562 00cc 9968     		ldr	r1, [r3, #8]
 4563 00ce 4860     		str	r0, [r1, #4]
 4564 00d0 9860     		str	r0, [r3, #8]
 4565 00d2 E36A     		ldr	r3, [r4, #44]
 4566              	.LVL432:
 4567 00d4 02F13007 		add	r7, r2, #48
 4568 00d8 9E00     		lsls	r6, r3, #2
 4569 00da F018     		adds	r0, r6, r3
 4570 00dc 8100     		lsls	r1, r0, #2
 4571 00de 3944     		add	r1, r1, r7
 4572 00e0 6161     		str	r1, [r4, #20]
 4573 00e2 F018     		adds	r0, r6, r3
 4574 00e4 8100     		lsls	r1, r0, #2
 4575 00e6 1144     		add	r1, r1, r2
 4576 00e8 086B     		ldr	r0, [r1, #48]
 4577 00ea 0130     		adds	r0, r0, #1
 4578 00ec 3344     		add	r3, r3, r6
 4579 00ee 9900     		lsls	r1, r3, #2
 4580 00f0 1144     		add	r1, r1, r2
 4581 00f2 0863     		str	r0, [r1, #48]
 4582              	.LBE89:
5002:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 4583              		.loc 1 5002 0 discriminator 3
 4584 00f4 E16A     		ldr	r1, [r4, #44]
 4585 00f6 D2F8D830 		ldr	r3, [r2, #216]
 4586 00fa DB6A     		ldr	r3, [r3, #44]
 4587 00fc 9942     		cmp	r1, r3
 4588 00fe 07D9     		bls	.L355
5006:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 4589              		.loc 1 5006 0
 4590 0100 4FF08052 		mov	r2, #268435456
 4591 0104 064B     		ldr	r3, .L360+4
 4592 0106 1A60     		str	r2, [r3]
 4593              		.syntax unified
 4594              	@ 5006 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
 4595 0108 BFF34F8F 		dsb
 4596              	@ 0 "" 2
 4597              	@ 5006 "..\..\..\FreeRTOS\FreeRTOS-Kernel\tasks.c" 1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 191


 4598 010c BFF36F8F 		isb
 4599              	@ 0 "" 2
 4600              		.thumb
 4601              		.syntax unified
 4602              	.L355:
5018:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4603              		.loc 1 5018 0
 4604 0110 FFF7FEFF 		bl	vPortExitCritical
 4605              	.LVL433:
5021:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4606              		.loc 1 5021 0
 4607 0114 2846     		mov	r0, r5
 4608 0116 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4609              	.LVL434:
 4610              	.L361:
 4611 011a 00BF     		.align	2
 4612              	.L360:
 4613 011c 00000000 		.word	.LANCHOR0
 4614 0120 04ED00E0 		.word	-536810236
 4615              		.cfi_endproc
 4616              	.LFE116:
 4617              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 4618              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4619              		.align	2
 4620              		.global	xTaskGenericNotifyFromISR
 4621              		.thumb
 4622              		.thumb_func
 4623              		.type	xTaskGenericNotifyFromISR, %function
 4624              	xTaskGenericNotifyFromISR:
 4625              	.LFB117:
5034:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 4626              		.loc 1 5034 0
 4627              		.cfi_startproc
 4628              		@ args = 8, pretend = 0, frame = 0
 4629              		@ frame_needed = 0, uses_anonymous_args = 0
 4630              	.LVL435:
 4631 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4632              		.cfi_def_cfa_offset 20
 4633              		.cfi_offset 4, -20
 4634              		.cfi_offset 5, -16
 4635              		.cfi_offset 6, -12
 4636              		.cfi_offset 7, -8
 4637              		.cfi_offset 14, -4
 4638 0002 059C     		ldr	r4, [sp, #20]
 4639              	.LVL436:
 4640              	.LBB90:
 4641              	.LBB91:
 220:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         (
 4642              		.loc 2 220 0
 4643              		.syntax unified
 4644              	@ 220 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 4645 0004 EFF31187 		   mrs r7, basepri                                         
 4646 0008 4FF0A005 	   mov r5, #160                                              
 4647 000c 85F31188 	   msr basepri, r5                                         
 4648 0010 BFF36F8F 	   isb                                                     
 4649 0014 BFF34F8F 	   dsb                                                     
 4650              	
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 192


 4651              	@ 0 "" 2
 4652              		.thumb
 4653              		.syntax unified
 4654              	.LBE91:
 4655              	.LBE90:
5065:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 4656              		.loc 1 5065 0
 4657 0018 24B1     		cbz	r4, .L363
5067:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 4658              		.loc 1 5067 0
 4659 001a 01F11205 		add	r5, r1, #18
 4660 001e 50F82550 		ldr	r5, [r0, r5, lsl #2]
 4661 0022 2560     		str	r5, [r4]
 4662              	.L363:
5070:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 4663              		.loc 1 5070 0
 4664 0024 4518     		adds	r5, r0, r1
 4665 0026 95F84C40 		ldrb	r4, [r5, #76]	@ zero_extendqisi2
 4666 002a E4B2     		uxtb	r4, r4
 4667              	.LVL437:
5071:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4668              		.loc 1 5071 0
 4669 002c 0226     		movs	r6, #2
 4670 002e 85F84C60 		strb	r6, [r5, #76]
5073:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 4671              		.loc 1 5073 0
 4672 0032 013B     		subs	r3, r3, #1
 4673              	.LVL438:
 4674 0034 032B     		cmp	r3, #3
 4675 0036 1FD8     		bhi	.L375
 4676 0038 DFE803F0 		tbb	[pc, r3]
 4677              	.L366:
 4678 003c 02       		.byte	(.L365-.L366)/2
 4679 003d 0A       		.byte	(.L367-.L366)/2
 4680 003e 12       		.byte	(.L368-.L366)/2
 4681 003f 17       		.byte	(.L369-.L366)/2
 4682              		.p2align 1
 4683              	.L365:
5076:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
 4684              		.loc 1 5076 0
 4685 0040 1231     		adds	r1, r1, #18
 4686              	.LVL439:
 4687 0042 50F82130 		ldr	r3, [r0, r1, lsl #2]
 4688 0046 1A43     		orrs	r2, r2, r3
 4689              	.LVL440:
 4690 0048 40F82120 		str	r2, [r0, r1, lsl #2]
5037:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 4691              		.loc 1 5037 0
 4692 004c 0123     		movs	r3, #1
5077:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4693              		.loc 1 5077 0
 4694 004e 16E0     		b	.L364
 4695              	.LVL441:
 4696              	.L367:
5080:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
 4697              		.loc 1 5080 0
 4698 0050 1231     		adds	r1, r1, #18
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 193


 4699              	.LVL442:
 4700 0052 50F82130 		ldr	r3, [r0, r1, lsl #2]
 4701 0056 0133     		adds	r3, r3, #1
 4702 0058 40F82130 		str	r3, [r0, r1, lsl #2]
5037:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 4703              		.loc 1 5037 0
 4704 005c 0123     		movs	r3, #1
5081:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4705              		.loc 1 5081 0
 4706 005e 0EE0     		b	.L364
 4707              	.LVL443:
 4708              	.L368:
5084:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     break;
 4709              		.loc 1 5084 0
 4710 0060 1231     		adds	r1, r1, #18
 4711              	.LVL444:
 4712 0062 40F82120 		str	r2, [r0, r1, lsl #2]
5037:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 4713              		.loc 1 5037 0
 4714 0066 0123     		movs	r3, #1
5085:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4715              		.loc 1 5085 0
 4716 0068 09E0     		b	.L364
 4717              	.LVL445:
 4718              	.L369:
5089:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 4719              		.loc 1 5089 0
 4720 006a 022C     		cmp	r4, #2
 4721 006c 06D0     		beq	.L376
5091:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 4722              		.loc 1 5091 0
 4723 006e 1231     		adds	r1, r1, #18
 4724              	.LVL446:
 4725 0070 40F82120 		str	r2, [r0, r1, lsl #2]
5037:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         UBaseType_t uxSavedInterruptStatus;
 4726              		.loc 1 5037 0
 4727 0074 0123     		movs	r3, #1
 4728 0076 02E0     		b	.L364
 4729              	.LVL447:
 4730              	.L375:
 4731 0078 0123     		movs	r3, #1
 4732 007a 00E0     		b	.L364
 4733              	.L376:
5096:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 4734              		.loc 1 5096 0
 4735 007c 0023     		movs	r3, #0
 4736              	.LVL448:
 4737              	.L364:
5120:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 4738              		.loc 1 5120 0
 4739 007e 012C     		cmp	r4, #1
 4740 0080 5DD1     		bne	.L370
5125:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 4741              		.loc 1 5125 0
 4742 0082 314A     		ldr	r2, .L378
 4743 0084 D2F8F020 		ldr	r2, [r2, #240]
 4744 0088 002A     		cmp	r2, #0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 194


 4745 008a 38D1     		bne	.L371
 4746              	.LBB92:
5127:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 4747              		.loc 1 5127 0
 4748 008c 4269     		ldr	r2, [r0, #20]
 4749              	.LVL449:
 4750 008e 8168     		ldr	r1, [r0, #8]
 4751 0090 C468     		ldr	r4, [r0, #12]
 4752              	.LVL450:
 4753 0092 8C60     		str	r4, [r1, #8]
 4754 0094 C168     		ldr	r1, [r0, #12]
 4755 0096 8468     		ldr	r4, [r0, #8]
 4756 0098 4C60     		str	r4, [r1, #4]
 4757 009a 5168     		ldr	r1, [r2, #4]
 4758 009c 051D     		adds	r5, r0, #4
 4759 009e A942     		cmp	r1, r5
 4760 00a0 01D1     		bne	.L372
5127:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 4761              		.loc 1 5127 0 is_stmt 0 discriminator 1
 4762 00a2 C168     		ldr	r1, [r0, #12]
 4763 00a4 5160     		str	r1, [r2, #4]
 4764              	.L372:
5127:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 4765              		.loc 1 5127 0 discriminator 3
 4766 00a6 0021     		movs	r1, #0
 4767 00a8 4161     		str	r1, [r0, #20]
 4768 00aa 1168     		ldr	r1, [r2]
 4769 00ac 0139     		subs	r1, r1, #1
 4770 00ae 1160     		str	r1, [r2]
 4771              	.LBE92:
5128:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 4772              		.loc 1 5128 0 is_stmt 1 discriminator 3
 4773 00b0 C26A     		ldr	r2, [r0, #44]
 4774              	.LVL451:
 4775 00b2 0124     		movs	r4, #1
 4776 00b4 04FA02F6 		lsl	r6, r4, r2
 4777 00b8 2349     		ldr	r1, .L378
 4778 00ba D1F8E440 		ldr	r4, [r1, #228]
 4779 00be 3443     		orrs	r4, r4, r6
 4780 00c0 C1F8E440 		str	r4, [r1, #228]
 4781              	.LBB93:
 4782 00c4 02EB8202 		add	r2, r2, r2, lsl #2
 4783 00c8 9400     		lsls	r4, r2, #2
 4784 00ca 0C44     		add	r4, r4, r1
 4785 00cc 626B     		ldr	r2, [r4, #52]
 4786              	.LVL452:
 4787 00ce 8260     		str	r2, [r0, #8]
 4788 00d0 9468     		ldr	r4, [r2, #8]
 4789 00d2 C460     		str	r4, [r0, #12]
 4790 00d4 9468     		ldr	r4, [r2, #8]
 4791 00d6 6560     		str	r5, [r4, #4]
 4792 00d8 9560     		str	r5, [r2, #8]
 4793 00da C26A     		ldr	r2, [r0, #44]
 4794              	.LVL453:
 4795 00dc 01F1300E 		add	lr, r1, #48
 4796 00e0 9600     		lsls	r6, r2, #2
 4797 00e2 B518     		adds	r5, r6, r2
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 195


 4798 00e4 AC00     		lsls	r4, r5, #2
 4799 00e6 7444     		add	r4, r4, lr
 4800 00e8 4461     		str	r4, [r0, #20]
 4801 00ea B518     		adds	r5, r6, r2
 4802 00ec AC00     		lsls	r4, r5, #2
 4803 00ee 0C44     		add	r4, r4, r1
 4804 00f0 256B     		ldr	r5, [r4, #48]
 4805 00f2 0135     		adds	r5, r5, #1
 4806 00f4 3244     		add	r2, r2, r6
 4807 00f6 9400     		lsls	r4, r2, #2
 4808 00f8 2144     		add	r1, r1, r4
 4809 00fa 0D63     		str	r5, [r1, #48]
 4810              	.LBE93:
 4811 00fc 0FE0     		b	.L373
 4812              	.LVL454:
 4813              	.L371:
 4814              	.LBB94:
5134:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 4815              		.loc 1 5134 0
 4816 00fe 124A     		ldr	r2, .L378
 4817 0100 9169     		ldr	r1, [r2, #24]
 4818              	.LVL455:
 4819 0102 C161     		str	r1, [r0, #28]
 4820 0104 8C68     		ldr	r4, [r1, #8]
 4821              	.LVL456:
 4822 0106 0462     		str	r4, [r0, #32]
 4823 0108 8D68     		ldr	r5, [r1, #8]
 4824 010a 00F11804 		add	r4, r0, #24
 4825 010e 6C60     		str	r4, [r5, #4]
 4826 0110 8C60     		str	r4, [r1, #8]
 4827 0112 02F11401 		add	r1, r2, #20
 4828              	.LVL457:
 4829 0116 8162     		str	r1, [r0, #40]
 4830 0118 5169     		ldr	r1, [r2, #20]
 4831 011a 0131     		adds	r1, r1, #1
 4832 011c 5161     		str	r1, [r2, #20]
 4833              	.L373:
 4834              	.LBE94:
5137:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 4835              		.loc 1 5137 0
 4836 011e C16A     		ldr	r1, [r0, #44]
 4837 0120 094A     		ldr	r2, .L378
 4838 0122 D2F8D820 		ldr	r2, [r2, #216]
 4839 0126 D26A     		ldr	r2, [r2, #44]
 4840 0128 9142     		cmp	r1, r2
 4841 012a 08D9     		bls	.L370
5141:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 4842              		.loc 1 5141 0
 4843 012c 069A     		ldr	r2, [sp, #24]
 4844 012e 12B1     		cbz	r2, .L374
5143:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 4845              		.loc 1 5143 0
 4846 0130 0122     		movs	r2, #1
 4847 0132 0699     		ldr	r1, [sp, #24]
 4848 0134 0A60     		str	r2, [r1]
 4849              	.L374:
5149:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 196


 4850              		.loc 1 5149 0
 4851 0136 0121     		movs	r1, #1
 4852 0138 034A     		ldr	r2, .L378
 4853 013a C2F8F410 		str	r1, [r2, #244]
 4854              	.L370:
 4855              	.LVL458:
 4856              	.LBB95:
 4857              	.LBB96:
 4858              		.loc 2 238 0
 4859              		.syntax unified
 4860              	@ 238 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 4861 013e 87F31188 		   msr basepri, r7 
 4862              	@ 0 "" 2
 4863              	.LVL459:
 4864              		.thumb
 4865              		.syntax unified
 4866              	.LBE96:
 4867              	.LBE95:
5160:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4868              		.loc 1 5160 0
 4869 0142 1846     		mov	r0, r3
 4870              	.LVL460:
 4871 0144 F0BD     		pop	{r4, r5, r6, r7, pc}
 4872              	.LVL461:
 4873              	.L379:
 4874 0146 00BF     		.align	2
 4875              	.L378:
 4876 0148 00000000 		.word	.LANCHOR0
 4877              		.cfi_endproc
 4878              	.LFE117:
 4879              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 4880              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 4881              		.align	2
 4882              		.global	vTaskGenericNotifyGiveFromISR
 4883              		.thumb
 4884              		.thumb_func
 4885              		.type	vTaskGenericNotifyGiveFromISR, %function
 4886              	vTaskGenericNotifyGiveFromISR:
 4887              	.LFB118:
5170:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 4888              		.loc 1 5170 0
 4889              		.cfi_startproc
 4890              		@ args = 0, pretend = 0, frame = 0
 4891              		@ frame_needed = 0, uses_anonymous_args = 0
 4892              	.LVL462:
 4893 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4894              		.cfi_def_cfa_offset 20
 4895              		.cfi_offset 4, -20
 4896              		.cfi_offset 5, -16
 4897              		.cfi_offset 6, -12
 4898              		.cfi_offset 7, -8
 4899              		.cfi_offset 14, -4
 4900              	.LVL463:
 4901              	.LBB97:
 4902              	.LBB98:
 220:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         (
 4903              		.loc 2 220 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 197


 4904              		.syntax unified
 4905              	@ 220 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 4906 0002 EFF31185 		   mrs r5, basepri                                         
 4907 0006 4FF0A003 	   mov r3, #160                                              
 4908 000a 83F31188 	   msr basepri, r3                                         
 4909 000e BFF36F8F 	   isb                                                     
 4910 0012 BFF34F8F 	   dsb                                                     
 4911              	
 4912              	@ 0 "" 2
 4913              		.thumb
 4914              		.syntax unified
 4915              	.LBE98:
 4916              	.LBE97:
5200:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 4917              		.loc 1 5200 0
 4918 0016 4418     		adds	r4, r0, r1
 4919 0018 94F84C30 		ldrb	r3, [r4, #76]	@ zero_extendqisi2
 4920 001c DBB2     		uxtb	r3, r3
 4921              	.LVL464:
5201:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4922              		.loc 1 5201 0
 4923 001e 0226     		movs	r6, #2
 4924 0020 84F84C60 		strb	r6, [r4, #76]
5205:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 4925              		.loc 1 5205 0
 4926 0024 1231     		adds	r1, r1, #18
 4927              	.LVL465:
 4928 0026 50F82140 		ldr	r4, [r0, r1, lsl #2]
 4929 002a 0134     		adds	r4, r4, #1
 4930 002c 40F82140 		str	r4, [r0, r1, lsl #2]
5211:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 4931              		.loc 1 5211 0
 4932 0030 012B     		cmp	r3, #1
 4933 0032 5BD1     		bne	.L381
5216:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 4934              		.loc 1 5216 0
 4935 0034 2F4B     		ldr	r3, .L387
 4936              	.LVL466:
 4937 0036 D3F8F030 		ldr	r3, [r3, #240]
 4938 003a 002B     		cmp	r3, #0
 4939 003c 38D1     		bne	.L382
 4940              	.LBB99:
5218:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 4941              		.loc 1 5218 0
 4942 003e 4369     		ldr	r3, [r0, #20]
 4943              	.LVL467:
 4944 0040 8168     		ldr	r1, [r0, #8]
 4945              	.LVL468:
 4946 0042 C468     		ldr	r4, [r0, #12]
 4947 0044 8C60     		str	r4, [r1, #8]
 4948 0046 C168     		ldr	r1, [r0, #12]
 4949 0048 8468     		ldr	r4, [r0, #8]
 4950 004a 4C60     		str	r4, [r1, #4]
 4951 004c 5968     		ldr	r1, [r3, #4]
 4952 004e 061D     		adds	r6, r0, #4
 4953 0050 B142     		cmp	r1, r6
 4954 0052 01D1     		bne	.L383
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 198


5218:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 4955              		.loc 1 5218 0 is_stmt 0 discriminator 1
 4956 0054 C168     		ldr	r1, [r0, #12]
 4957 0056 5960     		str	r1, [r3, #4]
 4958              	.L383:
5218:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     prvAddTaskToReadyList( pxTCB );
 4959              		.loc 1 5218 0 discriminator 3
 4960 0058 0021     		movs	r1, #0
 4961 005a 4161     		str	r1, [r0, #20]
 4962 005c 1968     		ldr	r1, [r3]
 4963 005e 0139     		subs	r1, r1, #1
 4964 0060 1960     		str	r1, [r3]
 4965              	.LBE99:
5219:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 4966              		.loc 1 5219 0 is_stmt 1 discriminator 3
 4967 0062 C36A     		ldr	r3, [r0, #44]
 4968              	.LVL469:
 4969 0064 0124     		movs	r4, #1
 4970 0066 04FA03F7 		lsl	r7, r4, r3
 4971 006a 2249     		ldr	r1, .L387
 4972 006c D1F8E440 		ldr	r4, [r1, #228]
 4973 0070 3C43     		orrs	r4, r4, r7
 4974 0072 C1F8E440 		str	r4, [r1, #228]
 4975              	.LBB100:
 4976 0076 03EB8303 		add	r3, r3, r3, lsl #2
 4977 007a 9C00     		lsls	r4, r3, #2
 4978 007c 0C44     		add	r4, r4, r1
 4979 007e 636B     		ldr	r3, [r4, #52]
 4980              	.LVL470:
 4981 0080 8360     		str	r3, [r0, #8]
 4982 0082 9C68     		ldr	r4, [r3, #8]
 4983 0084 C460     		str	r4, [r0, #12]
 4984 0086 9C68     		ldr	r4, [r3, #8]
 4985 0088 6660     		str	r6, [r4, #4]
 4986 008a 9E60     		str	r6, [r3, #8]
 4987 008c C36A     		ldr	r3, [r0, #44]
 4988              	.LVL471:
 4989 008e 01F1300E 		add	lr, r1, #48
 4990 0092 9F00     		lsls	r7, r3, #2
 4991 0094 FE18     		adds	r6, r7, r3
 4992 0096 B400     		lsls	r4, r6, #2
 4993 0098 7444     		add	r4, r4, lr
 4994 009a 4461     		str	r4, [r0, #20]
 4995 009c FE18     		adds	r6, r7, r3
 4996 009e B400     		lsls	r4, r6, #2
 4997 00a0 0C44     		add	r4, r4, r1
 4998 00a2 266B     		ldr	r6, [r4, #48]
 4999 00a4 0136     		adds	r6, r6, #1
 5000 00a6 3B44     		add	r3, r3, r7
 5001 00a8 9C00     		lsls	r4, r3, #2
 5002 00aa 2144     		add	r1, r1, r4
 5003 00ac 0E63     		str	r6, [r1, #48]
 5004              	.LBE100:
 5005 00ae 0FE0     		b	.L384
 5006              	.L382:
 5007              	.LBB101:
5225:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 199


 5008              		.loc 1 5225 0
 5009 00b0 104B     		ldr	r3, .L387
 5010 00b2 9969     		ldr	r1, [r3, #24]
 5011              	.LVL472:
 5012 00b4 C161     		str	r1, [r0, #28]
 5013 00b6 8C68     		ldr	r4, [r1, #8]
 5014 00b8 0462     		str	r4, [r0, #32]
 5015 00ba 8E68     		ldr	r6, [r1, #8]
 5016 00bc 00F11804 		add	r4, r0, #24
 5017 00c0 7460     		str	r4, [r6, #4]
 5018 00c2 8C60     		str	r4, [r1, #8]
 5019 00c4 03F11401 		add	r1, r3, #20
 5020              	.LVL473:
 5021 00c8 8162     		str	r1, [r0, #40]
 5022 00ca 5969     		ldr	r1, [r3, #20]
 5023 00cc 0131     		adds	r1, r1, #1
 5024 00ce 5961     		str	r1, [r3, #20]
 5025              	.L384:
 5026              	.LBE101:
5228:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 {
 5027              		.loc 1 5228 0
 5028 00d0 C16A     		ldr	r1, [r0, #44]
 5029 00d2 084B     		ldr	r3, .L387
 5030 00d4 D3F8D830 		ldr	r3, [r3, #216]
 5031 00d8 DB6A     		ldr	r3, [r3, #44]
 5032 00da 9942     		cmp	r1, r3
 5033 00dc 06D9     		bls	.L381
5232:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     {
 5034              		.loc 1 5232 0
 5035 00de 0AB1     		cbz	r2, .L385
5234:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                     }
 5036              		.loc 1 5234 0
 5037 00e0 0123     		movs	r3, #1
 5038 00e2 1360     		str	r3, [r2]
 5039              	.L385:
5240:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 }
 5040              		.loc 1 5240 0
 5041 00e4 0122     		movs	r2, #1
 5042              	.LVL474:
 5043 00e6 034B     		ldr	r3, .L387
 5044 00e8 C3F8F420 		str	r2, [r3, #244]
 5045              	.L381:
 5046              	.LVL475:
 5047              	.LBB102:
 5048              	.LBB103:
 5049              		.loc 2 238 0
 5050              		.syntax unified
 5051              	@ 238 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 5052 00ec 85F31188 		   msr basepri, r5 
 5053              	@ 0 "" 2
 5054              	.LVL476:
 5055              		.thumb
 5056              		.syntax unified
 5057 00f0 F0BD     		pop	{r4, r5, r6, r7, pc}
 5058              	.L388:
 5059 00f2 00BF     		.align	2
 5060              	.L387:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 200


 5061 00f4 00000000 		.word	.LANCHOR0
 5062              	.LBE103:
 5063              	.LBE102:
 5064              		.cfi_endproc
 5065              	.LFE118:
 5066              		.size	vTaskGenericNotifyGiveFromISR, .-vTaskGenericNotifyGiveFromISR
 5067              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 5068              		.align	2
 5069              		.global	xTaskGenericNotifyStateClear
 5070              		.thumb
 5071              		.thumb_func
 5072              		.type	xTaskGenericNotifyStateClear, %function
 5073              	xTaskGenericNotifyStateClear:
 5074              	.LFB119:
5258:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 5075              		.loc 1 5258 0
 5076              		.cfi_startproc
 5077              		@ args = 0, pretend = 0, frame = 0
 5078              		@ frame_needed = 0, uses_anonymous_args = 0
 5079              	.LVL477:
 5080 0000 38B5     		push	{r3, r4, r5, lr}
 5081              		.cfi_def_cfa_offset 16
 5082              		.cfi_offset 3, -16
 5083              		.cfi_offset 4, -12
 5084              		.cfi_offset 5, -8
 5085              		.cfi_offset 14, -4
 5086 0002 0C46     		mov	r4, r1
5266:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 5087              		.loc 1 5266 0
 5088 0004 0546     		mov	r5, r0
 5089 0006 10B9     		cbnz	r0, .L390
5266:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 5090              		.loc 1 5266 0 is_stmt 0 discriminator 1
 5091 0008 0A4B     		ldr	r3, .L394
 5092 000a D3F8D850 		ldr	r5, [r3, #216]
 5093              	.LVL478:
 5094              	.L390:
5268:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 5095              		.loc 1 5268 0 is_stmt 1 discriminator 4
 5096 000e FFF7FEFF 		bl	vPortEnterCritical
 5097              	.LVL479:
5270:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             {
 5098              		.loc 1 5270 0 discriminator 4
 5099 0012 2B19     		adds	r3, r5, r4
 5100 0014 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 5101 0018 DBB2     		uxtb	r3, r3
 5102 001a 022B     		cmp	r3, #2
 5103 001c 05D1     		bne	.L392
5272:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****                 xReturn = pdPASS;
 5104              		.loc 1 5272 0
 5105 001e 2C44     		add	r4, r4, r5
 5106              	.LVL480:
 5107 0020 0023     		movs	r3, #0
 5108 0022 84F84C30 		strb	r3, [r4, #76]
 5109              	.LVL481:
5273:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 5110              		.loc 1 5273 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 201


 5111 0026 0124     		movs	r4, #1
 5112 0028 00E0     		b	.L391
 5113              	.LVL482:
 5114              	.L392:
5277:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             }
 5115              		.loc 1 5277 0
 5116 002a 0024     		movs	r4, #0
 5117              	.LVL483:
 5118              	.L391:
5280:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 5119              		.loc 1 5280 0
 5120 002c FFF7FEFF 		bl	vPortExitCritical
 5121              	.LVL484:
5283:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 5122              		.loc 1 5283 0
 5123 0030 2046     		mov	r0, r4
 5124 0032 38BD     		pop	{r3, r4, r5, pc}
 5125              	.LVL485:
 5126              	.L395:
 5127              		.align	2
 5128              	.L394:
 5129 0034 00000000 		.word	.LANCHOR0
 5130              		.cfi_endproc
 5131              	.LFE119:
 5132              		.size	xTaskGenericNotifyStateClear, .-xTaskGenericNotifyStateClear
 5133              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 5134              		.align	2
 5135              		.global	ulTaskGenericNotifyValueClear
 5136              		.thumb
 5137              		.thumb_func
 5138              		.type	ulTaskGenericNotifyValueClear, %function
 5139              	ulTaskGenericNotifyValueClear:
 5140              	.LFB120:
5293:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         TCB_t * pxTCB;
 5141              		.loc 1 5293 0
 5142              		.cfi_startproc
 5143              		@ args = 0, pretend = 0, frame = 0
 5144              		@ frame_needed = 0, uses_anonymous_args = 0
 5145              	.LVL486:
 5146 0000 70B5     		push	{r4, r5, r6, lr}
 5147              		.cfi_def_cfa_offset 16
 5148              		.cfi_offset 4, -16
 5149              		.cfi_offset 5, -12
 5150              		.cfi_offset 6, -8
 5151              		.cfi_offset 14, -4
 5152 0002 0C46     		mov	r4, r1
 5153 0004 1646     		mov	r6, r2
5299:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 5154              		.loc 1 5299 0
 5155 0006 0546     		mov	r5, r0
 5156 0008 10B9     		cbnz	r0, .L397
5299:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 5157              		.loc 1 5299 0 is_stmt 0 discriminator 1
 5158 000a 094B     		ldr	r3, .L399
 5159 000c D3F8D850 		ldr	r5, [r3, #216]
 5160              	.LVL487:
 5161              	.L397:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 202


5301:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         {
 5162              		.loc 1 5301 0 is_stmt 1 discriminator 4
 5163 0010 FFF7FEFF 		bl	vPortEnterCritical
 5164              	.LVL488:
5305:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 5165              		.loc 1 5305 0 discriminator 4
 5166 0014 04F11201 		add	r1, r4, #18
 5167 0018 55F82140 		ldr	r4, [r5, r1, lsl #2]
 5168              	.LVL489:
5306:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c ****         }
 5169              		.loc 1 5306 0 discriminator 4
 5170 001c 55F82120 		ldr	r2, [r5, r1, lsl #2]
 5171 0020 22EA0602 		bic	r2, r2, r6
 5172 0024 45F82120 		str	r2, [r5, r1, lsl #2]
5308:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 5173              		.loc 1 5308 0 discriminator 4
 5174 0028 FFF7FEFF 		bl	vPortExitCritical
 5175              	.LVL490:
5311:..\..\..\FreeRTOS\FreeRTOS-Kernel/tasks.c **** 
 5176              		.loc 1 5311 0 discriminator 4
 5177 002c 2046     		mov	r0, r4
 5178 002e 70BD     		pop	{r4, r5, r6, pc}
 5179              	.LVL491:
 5180              	.L400:
 5181              		.align	2
 5182              	.L399:
 5183 0030 00000000 		.word	.LANCHOR0
 5184              		.cfi_endproc
 5185              	.LFE120:
 5186              		.size	ulTaskGenericNotifyValueClear, .-ulTaskGenericNotifyValueClear
 5187              		.global	uxTopUsedPriority
 5188              		.global	pxCurrentTCB
 5189              		.data
 5190              		.align	2
 5191              		.set	.LANCHOR1,. + 0
 5192              		.type	uxTopUsedPriority, %object
 5193              		.size	uxTopUsedPriority, 4
 5194              	uxTopUsedPriority:
 5195 0000 04000000 		.word	4
 5196              		.section	.rodata.str1.4,"aMS",%progbits,1
 5197              		.align	2
 5198              	.LC0:
 5199 0000 49444C45 		.ascii	"IDLE\000"
 5199      00
 5200              		.bss
 5201              		.align	2
 5202              		.set	.LANCHOR0,. + 0
 5203              		.type	xSuspendedTaskList, %object
 5204              		.size	xSuspendedTaskList, 20
 5205              	xSuspendedTaskList:
 5206 0000 00000000 		.space	20
 5206      00000000 
 5206      00000000 
 5206      00000000 
 5206      00000000 
 5207              		.type	xPendingReadyList, %object
 5208              		.size	xPendingReadyList, 20
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 203


 5209              	xPendingReadyList:
 5210 0014 00000000 		.space	20
 5210      00000000 
 5210      00000000 
 5210      00000000 
 5210      00000000 
 5211              		.type	pxDelayedTaskList, %object
 5212              		.size	pxDelayedTaskList, 4
 5213              	pxDelayedTaskList:
 5214 0028 00000000 		.space	4
 5215              		.type	xNextTaskUnblockTime, %object
 5216              		.size	xNextTaskUnblockTime, 4
 5217              	xNextTaskUnblockTime:
 5218 002c 00000000 		.space	4
 5219              		.type	pxReadyTasksLists, %object
 5220              		.size	pxReadyTasksLists, 100
 5221              	pxReadyTasksLists:
 5222 0030 00000000 		.space	100
 5222      00000000 
 5222      00000000 
 5222      00000000 
 5222      00000000 
 5223              		.type	xDelayedTaskList1, %object
 5224              		.size	xDelayedTaskList1, 20
 5225              	xDelayedTaskList1:
 5226 0094 00000000 		.space	20
 5226      00000000 
 5226      00000000 
 5226      00000000 
 5226      00000000 
 5227              		.type	xDelayedTaskList2, %object
 5228              		.size	xDelayedTaskList2, 20
 5229              	xDelayedTaskList2:
 5230 00a8 00000000 		.space	20
 5230      00000000 
 5230      00000000 
 5230      00000000 
 5230      00000000 
 5231              		.type	xTasksWaitingTermination, %object
 5232              		.size	xTasksWaitingTermination, 20
 5233              	xTasksWaitingTermination:
 5234 00bc 00000000 		.space	20
 5234      00000000 
 5234      00000000 
 5234      00000000 
 5234      00000000 
 5235              		.type	pxOverflowDelayedTaskList, %object
 5236              		.size	pxOverflowDelayedTaskList, 4
 5237              	pxOverflowDelayedTaskList:
 5238 00d0 00000000 		.space	4
 5239              		.type	uxCurrentNumberOfTasks, %object
 5240              		.size	uxCurrentNumberOfTasks, 4
 5241              	uxCurrentNumberOfTasks:
 5242 00d4 00000000 		.space	4
 5243              		.type	pxCurrentTCB, %object
 5244              		.size	pxCurrentTCB, 4
 5245              	pxCurrentTCB:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 204


 5246 00d8 00000000 		.space	4
 5247              		.type	xSchedulerRunning, %object
 5248              		.size	xSchedulerRunning, 4
 5249              	xSchedulerRunning:
 5250 00dc 00000000 		.space	4
 5251              		.type	uxTaskNumber, %object
 5252              		.size	uxTaskNumber, 4
 5253              	uxTaskNumber:
 5254 00e0 00000000 		.space	4
 5255              		.type	uxTopReadyPriority, %object
 5256              		.size	uxTopReadyPriority, 4
 5257              	uxTopReadyPriority:
 5258 00e4 00000000 		.space	4
 5259              		.type	uxDeletedTasksWaitingCleanUp, %object
 5260              		.size	uxDeletedTasksWaitingCleanUp, 4
 5261              	uxDeletedTasksWaitingCleanUp:
 5262 00e8 00000000 		.space	4
 5263              		.type	xTickCount, %object
 5264              		.size	xTickCount, 4
 5265              	xTickCount:
 5266 00ec 00000000 		.space	4
 5267              		.type	uxSchedulerSuspended, %object
 5268              		.size	uxSchedulerSuspended, 4
 5269              	uxSchedulerSuspended:
 5270 00f0 00000000 		.space	4
 5271              		.type	xYieldPending, %object
 5272              		.size	xYieldPending, 4
 5273              	xYieldPending:
 5274 00f4 00000000 		.space	4
 5275              		.type	xIdleTaskHandle, %object
 5276              		.size	xIdleTaskHandle, 4
 5277              	xIdleTaskHandle:
 5278 00f8 00000000 		.space	4
 5279              		.type	xNumOfOverflows, %object
 5280              		.size	xNumOfOverflows, 4
 5281              	xNumOfOverflows:
 5282 00fc 00000000 		.space	4
 5283              		.type	xPendedTicks, %object
 5284              		.size	xPendedTicks, 4
 5285              	xPendedTicks:
 5286 0100 00000000 		.space	4
 5287              		.text
 5288              	.Letext0:
 5289              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 5290              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 5291              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 5292              		.file 6 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\include/projdefs.h"
 5293              		.file 7 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\include/list.h"
 5294              		.file 8 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\include/task.h"
 5295              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 5296              		.file 10 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\include/portable.h"
 5297              		.file 11 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4
 5298              		.section	.debug_info,"",%progbits
 5299              	.Ldebug_info0:
 5300 0000 22230000 		.4byte	0x2322
 5301 0004 0400     		.2byte	0x4
 5302 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 205


 5303 000a 04       		.byte	0x4
 5304 000b 01       		.uleb128 0x1
 5305 000c 85020000 		.4byte	.LASF252
 5306 0010 0C       		.byte	0xc
 5307 0011 0C100000 		.4byte	.LASF253
 5308 0015 E30D0000 		.4byte	.LASF254
 5309 0019 60000000 		.4byte	.Ldebug_ranges0+0x60
 5310 001d 00000000 		.4byte	0
 5311 0021 00000000 		.4byte	.Ldebug_line0
 5312 0025 02       		.uleb128 0x2
 5313 0026 0E000000 		.4byte	.LASF4
 5314 002a 03       		.byte	0x3
 5315 002b D8       		.byte	0xd8
 5316 002c 30000000 		.4byte	0x30
 5317 0030 03       		.uleb128 0x3
 5318 0031 04       		.byte	0x4
 5319 0032 07       		.byte	0x7
 5320 0033 82090000 		.4byte	.LASF0
 5321 0037 04       		.uleb128 0x4
 5322 0038 04       		.byte	0x4
 5323 0039 05       		.byte	0x5
 5324 003a 696E7400 		.ascii	"int\000"
 5325 003e 03       		.uleb128 0x3
 5326 003f 08       		.byte	0x8
 5327 0040 05       		.byte	0x5
 5328 0041 AD080000 		.4byte	.LASF1
 5329 0045 03       		.uleb128 0x3
 5330 0046 08       		.byte	0x8
 5331 0047 04       		.byte	0x4
 5332 0048 1D0B0000 		.4byte	.LASF2
 5333 004c 03       		.uleb128 0x3
 5334 004d 01       		.byte	0x1
 5335 004e 06       		.byte	0x6
 5336 004f A2030000 		.4byte	.LASF3
 5337 0053 02       		.uleb128 0x2
 5338 0054 CE010000 		.4byte	.LASF5
 5339 0058 04       		.byte	0x4
 5340 0059 1D       		.byte	0x1d
 5341 005a 5E000000 		.4byte	0x5e
 5342 005e 03       		.uleb128 0x3
 5343 005f 01       		.byte	0x1
 5344 0060 08       		.byte	0x8
 5345 0061 F6030000 		.4byte	.LASF6
 5346 0065 03       		.uleb128 0x3
 5347 0066 02       		.byte	0x2
 5348 0067 05       		.byte	0x5
 5349 0068 310E0000 		.4byte	.LASF7
 5350 006c 02       		.uleb128 0x2
 5351 006d 62050000 		.4byte	.LASF8
 5352 0071 04       		.byte	0x4
 5353 0072 2B       		.byte	0x2b
 5354 0073 77000000 		.4byte	0x77
 5355 0077 03       		.uleb128 0x3
 5356 0078 02       		.byte	0x2
 5357 0079 07       		.byte	0x7
 5358 007a 720F0000 		.4byte	.LASF9
 5359 007e 02       		.uleb128 0x2
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 206


 5360 007f E90F0000 		.4byte	.LASF10
 5361 0083 04       		.byte	0x4
 5362 0084 3F       		.byte	0x3f
 5363 0085 89000000 		.4byte	0x89
 5364 0089 03       		.uleb128 0x3
 5365 008a 04       		.byte	0x4
 5366 008b 05       		.byte	0x5
 5367 008c 04020000 		.4byte	.LASF11
 5368 0090 02       		.uleb128 0x2
 5369 0091 73080000 		.4byte	.LASF12
 5370 0095 04       		.byte	0x4
 5371 0096 41       		.byte	0x41
 5372 0097 9B000000 		.4byte	0x9b
 5373 009b 03       		.uleb128 0x3
 5374 009c 04       		.byte	0x4
 5375 009d 07       		.byte	0x7
 5376 009e 68070000 		.4byte	.LASF13
 5377 00a2 03       		.uleb128 0x3
 5378 00a3 08       		.byte	0x8
 5379 00a4 07       		.byte	0x7
 5380 00a5 E20B0000 		.4byte	.LASF14
 5381 00a9 03       		.uleb128 0x3
 5382 00aa 04       		.byte	0x4
 5383 00ab 07       		.byte	0x7
 5384 00ac 15000000 		.4byte	.LASF15
 5385 00b0 05       		.uleb128 0x5
 5386 00b1 04       		.byte	0x4
 5387 00b2 06       		.uleb128 0x6
 5388 00b3 04       		.byte	0x4
 5389 00b4 B8000000 		.4byte	0xb8
 5390 00b8 03       		.uleb128 0x3
 5391 00b9 01       		.byte	0x1
 5392 00ba 08       		.byte	0x8
 5393 00bb 17050000 		.4byte	.LASF16
 5394 00bf 06       		.uleb128 0x6
 5395 00c0 04       		.byte	0x4
 5396 00c1 C5000000 		.4byte	0xc5
 5397 00c5 07       		.uleb128 0x7
 5398 00c6 B8000000 		.4byte	0xb8
 5399 00ca 02       		.uleb128 0x2
 5400 00cb B9030000 		.4byte	.LASF17
 5401 00cf 05       		.byte	0x5
 5402 00d0 18       		.byte	0x18
 5403 00d1 53000000 		.4byte	0x53
 5404 00d5 02       		.uleb128 0x2
 5405 00d6 140C0000 		.4byte	.LASF18
 5406 00da 05       		.byte	0x5
 5407 00db 24       		.byte	0x24
 5408 00dc 6C000000 		.4byte	0x6c
 5409 00e0 02       		.uleb128 0x2
 5410 00e1 95000000 		.4byte	.LASF19
 5411 00e5 05       		.byte	0x5
 5412 00e6 2C       		.byte	0x2c
 5413 00e7 7E000000 		.4byte	0x7e
 5414 00eb 02       		.uleb128 0x2
 5415 00ec 0C0F0000 		.4byte	.LASF20
 5416 00f0 05       		.byte	0x5
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 207


 5417 00f1 30       		.byte	0x30
 5418 00f2 90000000 		.4byte	0x90
 5419 00f6 03       		.uleb128 0x3
 5420 00f7 04       		.byte	0x4
 5421 00f8 04       		.byte	0x4
 5422 00f9 48090000 		.4byte	.LASF21
 5423 00fd 03       		.uleb128 0x3
 5424 00fe 08       		.byte	0x8
 5425 00ff 04       		.byte	0x4
 5426 0100 D9080000 		.4byte	.LASF22
 5427 0104 08       		.uleb128 0x8
 5428 0105 EB000000 		.4byte	0xeb
 5429 0109 08       		.uleb128 0x8
 5430 010a CA000000 		.4byte	0xca
 5431 010e 02       		.uleb128 0x2
 5432 010f 57090000 		.4byte	.LASF23
 5433 0113 06       		.byte	0x6
 5434 0114 24       		.byte	0x24
 5435 0115 19010000 		.4byte	0x119
 5436 0119 06       		.uleb128 0x6
 5437 011a 04       		.byte	0x4
 5438 011b 1F010000 		.4byte	0x11f
 5439 011f 09       		.uleb128 0x9
 5440 0120 2A010000 		.4byte	0x12a
 5441 0124 0A       		.uleb128 0xa
 5442 0125 B0000000 		.4byte	0xb0
 5443 0129 00       		.byte	0
 5444 012a 02       		.uleb128 0x2
 5445 012b 4F0F0000 		.4byte	.LASF24
 5446 012f 02       		.byte	0x2
 5447 0130 3A       		.byte	0x3a
 5448 0131 EB000000 		.4byte	0xeb
 5449 0135 02       		.uleb128 0x2
 5450 0136 FE000000 		.4byte	.LASF25
 5451 013a 02       		.byte	0x2
 5452 013b 3B       		.byte	0x3b
 5453 013c 89000000 		.4byte	0x89
 5454 0140 02       		.uleb128 0x2
 5455 0141 4F0C0000 		.4byte	.LASF26
 5456 0145 02       		.byte	0x2
 5457 0146 3C       		.byte	0x3c
 5458 0147 9B000000 		.4byte	0x9b
 5459 014b 02       		.uleb128 0x2
 5460 014c 860C0000 		.4byte	.LASF27
 5461 0150 02       		.byte	0x2
 5462 0151 42       		.byte	0x42
 5463 0152 EB000000 		.4byte	0xeb
 5464 0156 06       		.uleb128 0x6
 5465 0157 04       		.byte	0x4
 5466 0158 CA000000 		.4byte	0xca
 5467 015c 0B       		.uleb128 0xb
 5468 015d F0080000 		.4byte	.LASF33
 5469 0161 14       		.byte	0x14
 5470 0162 07       		.byte	0x7
 5471 0163 90       		.byte	0x90
 5472 0164 A5010000 		.4byte	0x1a5
 5473 0168 0C       		.uleb128 0xc
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 208


 5474 0169 5D100000 		.4byte	.LASF28
 5475 016d 07       		.byte	0x7
 5476 016e 93       		.byte	0x93
 5477 016f 4B010000 		.4byte	0x14b
 5478 0173 00       		.byte	0
 5479 0174 0C       		.uleb128 0xc
 5480 0175 A0010000 		.4byte	.LASF29
 5481 0179 07       		.byte	0x7
 5482 017a 94       		.byte	0x94
 5483 017b A5010000 		.4byte	0x1a5
 5484 017f 04       		.byte	0x4
 5485 0180 0C       		.uleb128 0xc
 5486 0181 690C0000 		.4byte	.LASF30
 5487 0185 07       		.byte	0x7
 5488 0186 95       		.byte	0x95
 5489 0187 A5010000 		.4byte	0x1a5
 5490 018b 08       		.byte	0x8
 5491 018c 0C       		.uleb128 0xc
 5492 018d 580B0000 		.4byte	.LASF31
 5493 0191 07       		.byte	0x7
 5494 0192 96       		.byte	0x96
 5495 0193 B0000000 		.4byte	0xb0
 5496 0197 0C       		.byte	0xc
 5497 0198 0C       		.uleb128 0xc
 5498 0199 67080000 		.4byte	.LASF32
 5499 019d 07       		.byte	0x7
 5500 019e 97       		.byte	0x97
 5501 019f DC010000 		.4byte	0x1dc
 5502 01a3 10       		.byte	0x10
 5503 01a4 00       		.byte	0
 5504 01a5 06       		.uleb128 0x6
 5505 01a6 04       		.byte	0x4
 5506 01a7 5C010000 		.4byte	0x15c
 5507 01ab 0B       		.uleb128 0xb
 5508 01ac 1A020000 		.4byte	.LASF34
 5509 01b0 14       		.byte	0x14
 5510 01b1 07       		.byte	0x7
 5511 01b2 AC       		.byte	0xac
 5512 01b3 DC010000 		.4byte	0x1dc
 5513 01b7 0C       		.uleb128 0xc
 5514 01b8 C0090000 		.4byte	.LASF35
 5515 01bc 07       		.byte	0x7
 5516 01bd AF       		.byte	0xaf
 5517 01be 29020000 		.4byte	0x229
 5518 01c2 00       		.byte	0
 5519 01c3 0C       		.uleb128 0xc
 5520 01c4 D9040000 		.4byte	.LASF36
 5521 01c8 07       		.byte	0x7
 5522 01c9 B0       		.byte	0xb0
 5523 01ca 2E020000 		.4byte	0x22e
 5524 01ce 04       		.byte	0x4
 5525 01cf 0C       		.uleb128 0xc
 5526 01d0 9D0A0000 		.4byte	.LASF37
 5527 01d4 07       		.byte	0x7
 5528 01d5 B1       		.byte	0xb1
 5529 01d6 1E020000 		.4byte	0x21e
 5530 01da 08       		.byte	0x8
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 209


 5531 01db 00       		.byte	0
 5532 01dc 06       		.uleb128 0x6
 5533 01dd 04       		.byte	0x4
 5534 01de AB010000 		.4byte	0x1ab
 5535 01e2 02       		.uleb128 0x2
 5536 01e3 B30E0000 		.4byte	.LASF38
 5537 01e7 07       		.byte	0x7
 5538 01e8 9A       		.byte	0x9a
 5539 01e9 5C010000 		.4byte	0x15c
 5540 01ed 0B       		.uleb128 0xb
 5541 01ee 44050000 		.4byte	.LASF39
 5542 01f2 0C       		.byte	0xc
 5543 01f3 07       		.byte	0x7
 5544 01f4 9D       		.byte	0x9d
 5545 01f5 1E020000 		.4byte	0x21e
 5546 01f9 0C       		.uleb128 0xc
 5547 01fa 5D100000 		.4byte	.LASF28
 5548 01fe 07       		.byte	0x7
 5549 01ff A0       		.byte	0xa0
 5550 0200 4B010000 		.4byte	0x14b
 5551 0204 00       		.byte	0
 5552 0205 0C       		.uleb128 0xc
 5553 0206 A0010000 		.4byte	.LASF29
 5554 020a 07       		.byte	0x7
 5555 020b A1       		.byte	0xa1
 5556 020c A5010000 		.4byte	0x1a5
 5557 0210 04       		.byte	0x4
 5558 0211 0C       		.uleb128 0xc
 5559 0212 690C0000 		.4byte	.LASF30
 5560 0216 07       		.byte	0x7
 5561 0217 A2       		.byte	0xa2
 5562 0218 A5010000 		.4byte	0x1a5
 5563 021c 08       		.byte	0x8
 5564 021d 00       		.byte	0
 5565 021e 02       		.uleb128 0x2
 5566 021f 2A040000 		.4byte	.LASF40
 5567 0223 07       		.byte	0x7
 5568 0224 A4       		.byte	0xa4
 5569 0225 ED010000 		.4byte	0x1ed
 5570 0229 08       		.uleb128 0x8
 5571 022a 40010000 		.4byte	0x140
 5572 022e 06       		.uleb128 0x6
 5573 022f 04       		.byte	0x4
 5574 0230 E2010000 		.4byte	0x1e2
 5575 0234 02       		.uleb128 0x2
 5576 0235 410A0000 		.4byte	.LASF41
 5577 0239 07       		.byte	0x7
 5578 023a B3       		.byte	0xb3
 5579 023b AB010000 		.4byte	0x1ab
 5580 023f 02       		.uleb128 0x2
 5581 0240 340A0000 		.4byte	.LASF42
 5582 0244 08       		.byte	0x8
 5583 0245 57       		.byte	0x57
 5584 0246 4A020000 		.4byte	0x24a
 5585 024a 06       		.uleb128 0x6
 5586 024b 04       		.byte	0x4
 5587 024c 50020000 		.4byte	0x250
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 210


 5588 0250 0D       		.uleb128 0xd
 5589 0251 6B0B0000 		.4byte	.LASF43
 5590 0255 50       		.byte	0x50
 5591 0256 01       		.byte	0x1
 5592 0257 0301     		.2byte	0x103
 5593 0259 E0020000 		.4byte	0x2e0
 5594 025d 0E       		.uleb128 0xe
 5595 025e E1040000 		.4byte	.LASF44
 5596 0262 01       		.byte	0x1
 5597 0263 0501     		.2byte	0x105
 5598 0265 C4030000 		.4byte	0x3c4
 5599 0269 00       		.byte	0
 5600 026a 0E       		.uleb128 0xe
 5601 026b A10B0000 		.4byte	.LASF45
 5602 026f 01       		.byte	0x1
 5603 0270 0B01     		.2byte	0x10b
 5604 0272 E2010000 		.4byte	0x1e2
 5605 0276 04       		.byte	0x4
 5606 0277 0E       		.uleb128 0xe
 5607 0278 86000000 		.4byte	.LASF46
 5608 027c 01       		.byte	0x1
 5609 027d 0C01     		.2byte	0x10c
 5610 027f E2010000 		.4byte	0x1e2
 5611 0283 18       		.byte	0x18
 5612 0284 0E       		.uleb128 0xe
 5613 0285 6E100000 		.4byte	.LASF47
 5614 0289 01       		.byte	0x1
 5615 028a 0D01     		.2byte	0x10d
 5616 028c 40010000 		.4byte	0x140
 5617 0290 2C       		.byte	0x2c
 5618 0291 0E       		.uleb128 0xe
 5619 0292 1B010000 		.4byte	.LASF48
 5620 0296 01       		.byte	0x1
 5621 0297 0E01     		.2byte	0x10e
 5622 0299 BE030000 		.4byte	0x3be
 5623 029d 30       		.byte	0x30
 5624 029e 0E       		.uleb128 0xe
 5625 029f 600B0000 		.4byte	.LASF49
 5626 02a3 01       		.byte	0x1
 5627 02a4 0F01     		.2byte	0x10f
 5628 02a6 CF030000 		.4byte	0x3cf
 5629 02aa 34       		.byte	0x34
 5630 02ab 0E       		.uleb128 0xe
 5631 02ac D8010000 		.4byte	.LASF50
 5632 02b0 01       		.byte	0x1
 5633 02b1 1F01     		.2byte	0x11f
 5634 02b3 40010000 		.4byte	0x140
 5635 02b7 40       		.byte	0x40
 5636 02b8 0E       		.uleb128 0xe
 5637 02b9 0A0A0000 		.4byte	.LASF51
 5638 02bd 01       		.byte	0x1
 5639 02be 2001     		.2byte	0x120
 5640 02c0 40010000 		.4byte	0x140
 5641 02c4 44       		.byte	0x44
 5642 02c5 0E       		.uleb128 0xe
 5643 02c6 49060000 		.4byte	.LASF52
 5644 02ca 01       		.byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 211


 5645 02cb 3401     		.2byte	0x134
 5646 02cd EF030000 		.4byte	0x3ef
 5647 02d1 48       		.byte	0x48
 5648 02d2 0E       		.uleb128 0xe
 5649 02d3 BF0C0000 		.4byte	.LASF53
 5650 02d7 01       		.byte	0x1
 5651 02d8 3501     		.2byte	0x135
 5652 02da 04040000 		.4byte	0x404
 5653 02de 4C       		.byte	0x4c
 5654 02df 00       		.byte	0
 5655 02e0 0F       		.uleb128 0xf
 5656 02e1 01       		.byte	0x1
 5657 02e2 5E000000 		.4byte	0x5e
 5658 02e6 08       		.byte	0x8
 5659 02e7 61       		.byte	0x61
 5660 02e8 11030000 		.4byte	0x311
 5661 02ec 10       		.uleb128 0x10
 5662 02ed 4E090000 		.4byte	.LASF54
 5663 02f1 00       		.byte	0
 5664 02f2 10       		.uleb128 0x10
 5665 02f3 55070000 		.4byte	.LASF55
 5666 02f7 01       		.byte	0x1
 5667 02f8 10       		.uleb128 0x10
 5668 02f9 B60A0000 		.4byte	.LASF56
 5669 02fd 02       		.byte	0x2
 5670 02fe 10       		.uleb128 0x10
 5671 02ff AE030000 		.4byte	.LASF57
 5672 0303 03       		.byte	0x3
 5673 0304 10       		.uleb128 0x10
 5674 0305 12010000 		.4byte	.LASF58
 5675 0309 04       		.byte	0x4
 5676 030a 10       		.uleb128 0x10
 5677 030b 0E0D0000 		.4byte	.LASF59
 5678 030f 05       		.byte	0x5
 5679 0310 00       		.byte	0
 5680 0311 02       		.uleb128 0x2
 5681 0312 9D000000 		.4byte	.LASF60
 5682 0316 08       		.byte	0x8
 5683 0317 68       		.byte	0x68
 5684 0318 E0020000 		.4byte	0x2e0
 5685 031c 0F       		.uleb128 0xf
 5686 031d 01       		.byte	0x1
 5687 031e 5E000000 		.4byte	0x5e
 5688 0322 08       		.byte	0x8
 5689 0323 6C       		.byte	0x6c
 5690 0324 47030000 		.4byte	0x347
 5691 0328 10       		.uleb128 0x10
 5692 0329 F30F0000 		.4byte	.LASF61
 5693 032d 00       		.byte	0
 5694 032e 10       		.uleb128 0x10
 5695 032f 63020000 		.4byte	.LASF62
 5696 0333 01       		.byte	0x1
 5697 0334 10       		.uleb128 0x10
 5698 0335 290B0000 		.4byte	.LASF63
 5699 0339 02       		.byte	0x2
 5700 033a 10       		.uleb128 0x10
 5701 033b 410B0000 		.4byte	.LASF64
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 212


 5702 033f 03       		.byte	0x3
 5703 0340 10       		.uleb128 0x10
 5704 0341 6D050000 		.4byte	.LASF65
 5705 0345 04       		.byte	0x4
 5706 0346 00       		.byte	0
 5707 0347 02       		.uleb128 0x2
 5708 0348 2C0F0000 		.4byte	.LASF66
 5709 034c 08       		.byte	0x8
 5710 034d 72       		.byte	0x72
 5711 034e 1C030000 		.4byte	0x31c
 5712 0352 0B       		.uleb128 0xb
 5713 0353 A8000000 		.4byte	.LASF67
 5714 0357 08       		.byte	0x8
 5715 0358 08       		.byte	0x8
 5716 0359 77       		.byte	0x77
 5717 035a 77030000 		.4byte	0x377
 5718 035e 0C       		.uleb128 0xc
 5719 035f 29070000 		.4byte	.LASF68
 5720 0363 08       		.byte	0x8
 5721 0364 79       		.byte	0x79
 5722 0365 35010000 		.4byte	0x135
 5723 0369 00       		.byte	0
 5724 036a 0C       		.uleb128 0xc
 5725 036b 8D040000 		.4byte	.LASF69
 5726 036f 08       		.byte	0x8
 5727 0370 7A       		.byte	0x7a
 5728 0371 4B010000 		.4byte	0x14b
 5729 0375 04       		.byte	0x4
 5730 0376 00       		.byte	0
 5731 0377 02       		.uleb128 0x2
 5732 0378 3A050000 		.4byte	.LASF70
 5733 037c 08       		.byte	0x8
 5734 037d 7B       		.byte	0x7b
 5735 037e 52030000 		.4byte	0x352
 5736 0382 0B       		.uleb128 0xb
 5737 0383 F8070000 		.4byte	.LASF71
 5738 0387 0C       		.byte	0xc
 5739 0388 08       		.byte	0x8
 5740 0389 80       		.byte	0x80
 5741 038a B3030000 		.4byte	0x3b3
 5742 038e 0C       		.uleb128 0xc
 5743 038f F3060000 		.4byte	.LASF72
 5744 0393 08       		.byte	0x8
 5745 0394 82       		.byte	0x82
 5746 0395 B0000000 		.4byte	0xb0
 5747 0399 00       		.byte	0
 5748 039a 0C       		.uleb128 0xc
 5749 039b 1D090000 		.4byte	.LASF73
 5750 039f 08       		.byte	0x8
 5751 03a0 83       		.byte	0x83
 5752 03a1 EB000000 		.4byte	0xeb
 5753 03a5 04       		.byte	0x4
 5754 03a6 0C       		.uleb128 0xc
 5755 03a7 36100000 		.4byte	.LASF74
 5756 03ab 08       		.byte	0x8
 5757 03ac 84       		.byte	0x84
 5758 03ad EB000000 		.4byte	0xeb
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 213


 5759 03b1 08       		.byte	0x8
 5760 03b2 00       		.byte	0
 5761 03b3 02       		.uleb128 0x2
 5762 03b4 77000000 		.4byte	.LASF75
 5763 03b8 08       		.byte	0x8
 5764 03b9 85       		.byte	0x85
 5765 03ba 82030000 		.4byte	0x382
 5766 03be 06       		.uleb128 0x6
 5767 03bf 04       		.byte	0x4
 5768 03c0 2A010000 		.4byte	0x12a
 5769 03c4 06       		.uleb128 0x6
 5770 03c5 04       		.byte	0x4
 5771 03c6 CA030000 		.4byte	0x3ca
 5772 03ca 08       		.uleb128 0x8
 5773 03cb 2A010000 		.4byte	0x12a
 5774 03cf 11       		.uleb128 0x11
 5775 03d0 B8000000 		.4byte	0xb8
 5776 03d4 DF030000 		.4byte	0x3df
 5777 03d8 12       		.uleb128 0x12
 5778 03d9 A9000000 		.4byte	0xa9
 5779 03dd 0B       		.byte	0xb
 5780 03de 00       		.byte	0
 5781 03df 11       		.uleb128 0x11
 5782 03e0 04010000 		.4byte	0x104
 5783 03e4 EF030000 		.4byte	0x3ef
 5784 03e8 12       		.uleb128 0x12
 5785 03e9 A9000000 		.4byte	0xa9
 5786 03ed 00       		.byte	0
 5787 03ee 00       		.byte	0
 5788 03ef 08       		.uleb128 0x8
 5789 03f0 DF030000 		.4byte	0x3df
 5790 03f4 11       		.uleb128 0x11
 5791 03f5 09010000 		.4byte	0x109
 5792 03f9 04040000 		.4byte	0x404
 5793 03fd 12       		.uleb128 0x12
 5794 03fe A9000000 		.4byte	0xa9
 5795 0402 00       		.byte	0
 5796 0403 00       		.byte	0
 5797 0404 08       		.uleb128 0x8
 5798 0405 F4030000 		.4byte	0x3f4
 5799 0409 13       		.uleb128 0x13
 5800 040a E7010000 		.4byte	.LASF76
 5801 040e 01       		.byte	0x1
 5802 040f 4501     		.2byte	0x145
 5803 0411 50020000 		.4byte	0x250
 5804 0415 13       		.uleb128 0x13
 5805 0416 E00E0000 		.4byte	.LASF77
 5806 041a 01       		.byte	0x1
 5807 041b 4901     		.2byte	0x149
 5808 041d 09040000 		.4byte	0x409
 5809 0421 14       		.uleb128 0x14
 5810 0422 87060000 		.4byte	.LASF82
 5811 0426 02       		.byte	0x2
 5812 0427 D8       		.byte	0xd8
 5813 0428 EB000000 		.4byte	0xeb
 5814 042c 03       		.byte	0x3
 5815 042d 48040000 		.4byte	0x448
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 214


 5816 0431 15       		.uleb128 0x15
 5817 0432 8F090000 		.4byte	.LASF78
 5818 0436 02       		.byte	0x2
 5819 0437 DA       		.byte	0xda
 5820 0438 EB000000 		.4byte	0xeb
 5821 043c 15       		.uleb128 0x15
 5822 043d 030B0000 		.4byte	.LASF79
 5823 0441 02       		.byte	0x2
 5824 0442 DA       		.byte	0xda
 5825 0443 EB000000 		.4byte	0xeb
 5826 0447 00       		.byte	0
 5827 0448 16       		.uleb128 0x16
 5828 0449 39040000 		.4byte	.LASF80
 5829 044d 02       		.byte	0x2
 5830 044e EC       		.byte	0xec
 5831 044f 03       		.byte	0x3
 5832 0450 60040000 		.4byte	0x460
 5833 0454 17       		.uleb128 0x17
 5834 0455 E7030000 		.4byte	.LASF84
 5835 0459 02       		.byte	0x2
 5836 045a EC       		.byte	0xec
 5837 045b EB000000 		.4byte	0xeb
 5838 045f 00       		.byte	0
 5839 0460 16       		.uleb128 0x16
 5840 0461 780E0000 		.4byte	.LASF81
 5841 0465 02       		.byte	0x2
 5842 0466 C8       		.byte	0xc8
 5843 0467 03       		.byte	0x3
 5844 0468 78040000 		.4byte	0x478
 5845 046c 15       		.uleb128 0x15
 5846 046d 030B0000 		.4byte	.LASF79
 5847 0471 02       		.byte	0x2
 5848 0472 CA       		.byte	0xca
 5849 0473 EB000000 		.4byte	0xeb
 5850 0477 00       		.byte	0
 5851 0478 14       		.uleb128 0x14
 5852 0479 31060000 		.4byte	.LASF83
 5853 047d 02       		.byte	0x2
 5854 047e 88       		.byte	0x88
 5855 047f CA000000 		.4byte	0xca
 5856 0483 03       		.byte	0x3
 5857 0484 9F040000 		.4byte	0x49f
 5858 0488 17       		.uleb128 0x17
 5859 0489 5B0F0000 		.4byte	.LASF85
 5860 048d 02       		.byte	0x2
 5861 048e 88       		.byte	0x88
 5862 048f EB000000 		.4byte	0xeb
 5863 0493 15       		.uleb128 0x15
 5864 0494 09010000 		.4byte	.LASF86
 5865 0498 02       		.byte	0x2
 5866 0499 8A       		.byte	0x8a
 5867 049a CA000000 		.4byte	0xca
 5868 049e 00       		.byte	0
 5869 049f 18       		.uleb128 0x18
 5870 04a0 00050000 		.4byte	.LASF89
 5871 04a4 01       		.byte	0x1
 5872 04a5 0107     		.2byte	0x701
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 215


 5873 04a7 35010000 		.4byte	0x135
 5874 04ab 00000000 		.4byte	.LFB79
 5875 04af 2C000000 		.4byte	.LFE79-.LFB79
 5876 04b3 01       		.uleb128 0x1
 5877 04b4 9C       		.byte	0x9c
 5878 04b5 EA040000 		.4byte	0x4ea
 5879 04b9 19       		.uleb128 0x19
 5880 04ba 79010000 		.4byte	.LASF91
 5881 04be 01       		.byte	0x1
 5882 04bf 0107     		.2byte	0x701
 5883 04c1 EA040000 		.4byte	0x4ea
 5884 04c5 00000000 		.4byte	.LLST0
 5885 04c9 1A       		.uleb128 0x1a
 5886 04ca 14040000 		.4byte	.LASF87
 5887 04ce 01       		.byte	0x1
 5888 04cf 0307     		.2byte	0x703
 5889 04d1 35010000 		.4byte	0x135
 5890 04d5 6C000000 		.4byte	.LLST1
 5891 04d9 1A       		.uleb128 0x1a
 5892 04da 68100000 		.4byte	.LASF88
 5893 04de 01       		.byte	0x1
 5894 04df 0407     		.2byte	0x704
 5895 04e1 FA040000 		.4byte	0x4fa
 5896 04e5 8B000000 		.4byte	.LLST2
 5897 04e9 00       		.byte	0
 5898 04ea 07       		.uleb128 0x7
 5899 04eb 3F020000 		.4byte	0x23f
 5900 04ef 06       		.uleb128 0x6
 5901 04f0 04       		.byte	0x4
 5902 04f1 F5040000 		.4byte	0x4f5
 5903 04f5 07       		.uleb128 0x7
 5904 04f6 15040000 		.4byte	0x415
 5905 04fa 07       		.uleb128 0x7
 5906 04fb EF040000 		.4byte	0x4ef
 5907 04ff 18       		.uleb128 0x18
 5908 0500 E0090000 		.4byte	.LASF90
 5909 0504 01       		.byte	0x1
 5910 0505 4A0F     		.2byte	0xf4a
 5911 0507 D5000000 		.4byte	0xd5
 5912 050b 00000000 		.4byte	.LFB104
 5913 050f 14000000 		.4byte	.LFE104-.LFB104
 5914 0513 01       		.uleb128 0x1
 5915 0514 9C       		.byte	0x9c
 5916 0515 3A050000 		.4byte	0x53a
 5917 0519 19       		.uleb128 0x19
 5918 051a 490D0000 		.4byte	.LASF92
 5919 051e 01       		.byte	0x1
 5920 051f 4A0F     		.2byte	0xf4a
 5921 0521 3A050000 		.4byte	0x53a
 5922 0525 F7000000 		.4byte	.LLST3
 5923 0529 1A       		.uleb128 0x1a
 5924 052a B7050000 		.4byte	.LASF93
 5925 052e 01       		.byte	0x1
 5926 052f 4C0F     		.2byte	0xf4c
 5927 0531 EB000000 		.4byte	0xeb
 5928 0535 15010000 		.4byte	.LLST4
 5929 0539 00       		.byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 216


 5930 053a 06       		.uleb128 0x6
 5931 053b 04       		.byte	0x4
 5932 053c 40050000 		.4byte	0x540
 5933 0540 07       		.uleb128 0x7
 5934 0541 CA000000 		.4byte	0xca
 5935 0545 1B       		.uleb128 0x1b
 5936 0546 49040000 		.4byte	.LASF255
 5937 054a 01       		.byte	0x1
 5938 054b D70F     		.2byte	0xfd7
 5939 054d 00000000 		.4byte	.LFB107
 5940 0551 24000000 		.4byte	.LFE107-.LFB107
 5941 0555 01       		.uleb128 0x1
 5942 0556 9C       		.byte	0x9c
 5943 0557 1C       		.uleb128 0x1c
 5944 0558 A1090000 		.4byte	.LASF94
 5945 055c 01       		.byte	0x1
 5946 055d A20F     		.2byte	0xfa2
 5947 055f 00000000 		.4byte	.LFB106
 5948 0563 12000000 		.4byte	.LFE106-.LFB106
 5949 0567 01       		.uleb128 0x1
 5950 0568 9C       		.byte	0x9c
 5951 0569 97050000 		.4byte	0x597
 5952 056d 19       		.uleb128 0x19
 5953 056e 68100000 		.4byte	.LASF88
 5954 0572 01       		.byte	0x1
 5955 0573 A20F     		.2byte	0xfa2
 5956 0575 97050000 		.4byte	0x597
 5957 0579 43010000 		.4byte	.LLST5
 5958 057d 1D       		.uleb128 0x1d
 5959 057e 0A000000 		.4byte	.LVL16
 5960 0582 7C220000 		.4byte	0x227c
 5961 0586 1E       		.uleb128 0x1e
 5962 0587 10000000 		.4byte	.LVL17
 5963 058b 7C220000 		.4byte	0x227c
 5964 058f 1F       		.uleb128 0x1f
 5965 0590 01       		.uleb128 0x1
 5966 0591 50       		.byte	0x50
 5967 0592 02       		.uleb128 0x2
 5968 0593 74       		.byte	0x74
 5969 0594 00       		.sleb128 0
 5970 0595 00       		.byte	0
 5971 0596 00       		.byte	0
 5972 0597 06       		.uleb128 0x6
 5973 0598 04       		.byte	0x4
 5974 0599 15040000 		.4byte	0x415
 5975 059d 1C       		.uleb128 0x1c
 5976 059e 65040000 		.4byte	.LASF95
 5977 05a2 01       		.byte	0x1
 5978 05a3 3403     		.2byte	0x334
 5979 05a5 00000000 		.4byte	.LFB69
 5980 05a9 8A000000 		.4byte	.LFE69-.LFB69
 5981 05ad 01       		.uleb128 0x1
 5982 05ae 9C       		.byte	0x9c
 5983 05af AD060000 		.4byte	0x6ad
 5984 05b3 19       		.uleb128 0x19
 5985 05b4 CA000000 		.4byte	.LASF96
 5986 05b8 01       		.byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 217


 5987 05b9 3403     		.2byte	0x334
 5988 05bb 0E010000 		.4byte	0x10e
 5989 05bf 61010000 		.4byte	.LLST6
 5990 05c3 19       		.uleb128 0x19
 5991 05c4 33030000 		.4byte	.LASF97
 5992 05c8 01       		.byte	0x1
 5993 05c9 3503     		.2byte	0x335
 5994 05cb AD060000 		.4byte	0x6ad
 5995 05cf 7F010000 		.4byte	.LLST7
 5996 05d3 19       		.uleb128 0x19
 5997 05d4 38080000 		.4byte	.LASF98
 5998 05d8 01       		.byte	0x1
 5999 05d9 3603     		.2byte	0x336
 6000 05db B2060000 		.4byte	0x6b2
 6001 05df 9D010000 		.4byte	.LLST8
 6002 05e3 19       		.uleb128 0x19
 6003 05e4 E60E0000 		.4byte	.LASF99
 6004 05e8 01       		.byte	0x1
 6005 05e9 3703     		.2byte	0x337
 6006 05eb B7060000 		.4byte	0x6b7
 6007 05ef DA010000 		.4byte	.LLST9
 6008 05f3 19       		.uleb128 0x19
 6009 05f4 6E100000 		.4byte	.LASF47
 6010 05f8 01       		.byte	0x1
 6011 05f9 3803     		.2byte	0x338
 6012 05fb 40010000 		.4byte	0x140
 6013 05ff F8010000 		.4byte	.LLST10
 6014 0603 20       		.uleb128 0x20
 6015 0604 A6060000 		.4byte	.LASF100
 6016 0608 01       		.byte	0x1
 6017 0609 3903     		.2byte	0x339
 6018 060b C2060000 		.4byte	0x6c2
 6019 060f 02       		.uleb128 0x2
 6020 0610 91       		.byte	0x91
 6021 0611 04       		.sleb128 4
 6022 0612 20       		.uleb128 0x20
 6023 0613 A7010000 		.4byte	.LASF101
 6024 0617 01       		.byte	0x1
 6025 0618 3A03     		.2byte	0x33a
 6026 061a 97050000 		.4byte	0x597
 6027 061e 02       		.uleb128 0x2
 6028 061f 91       		.byte	0x91
 6029 0620 08       		.sleb128 8
 6030 0621 20       		.uleb128 0x20
 6031 0622 230F0000 		.4byte	.LASF102
 6032 0626 01       		.byte	0x1
 6033 0627 3B03     		.2byte	0x33b
 6034 0629 D2060000 		.4byte	0x6d2
 6035 062d 02       		.uleb128 0x2
 6036 062e 91       		.byte	0x91
 6037 062f 0C       		.sleb128 12
 6038 0630 21       		.uleb128 0x21
 6039 0631 E1040000 		.4byte	.LASF44
 6040 0635 01       		.byte	0x1
 6041 0636 3D03     		.2byte	0x33d
 6042 0638 BE030000 		.4byte	0x3be
 6043 063c 01       		.uleb128 0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 218


 6044 063d 57       		.byte	0x57
 6045 063e 22       		.uleb128 0x22
 6046 063f 7800     		.ascii	"x\000"
 6047 0641 01       		.byte	0x1
 6048 0642 3E03     		.2byte	0x33e
 6049 0644 40010000 		.4byte	0x140
 6050 0648 17020000 		.4byte	.LLST11
 6051 064c 23       		.uleb128 0x23
 6052 064d 1E000000 		.4byte	.LVL22
 6053 0651 87220000 		.4byte	0x2287
 6054 0655 68060000 		.4byte	0x668
 6055 0659 1F       		.uleb128 0x1f
 6056 065a 01       		.uleb128 0x1
 6057 065b 51       		.byte	0x51
 6058 065c 02       		.uleb128 0x2
 6059 065d 08       		.byte	0x8
 6060 065e A5       		.byte	0xa5
 6061 065f 1F       		.uleb128 0x1f
 6062 0660 01       		.uleb128 0x1
 6063 0661 52       		.byte	0x52
 6064 0662 04       		.uleb128 0x4
 6065 0663 77       		.byte	0x77
 6066 0664 00       		.sleb128 0
 6067 0665 32       		.byte	0x32
 6068 0666 24       		.byte	0x24
 6069 0667 00       		.byte	0
 6070 0668 23       		.uleb128 0x23
 6071 0669 5E000000 		.4byte	.LVL31
 6072 066d 92220000 		.4byte	0x2292
 6073 0671 7C060000 		.4byte	0x67c
 6074 0675 1F       		.uleb128 0x1f
 6075 0676 01       		.uleb128 0x1
 6076 0677 50       		.byte	0x50
 6077 0678 02       		.uleb128 0x2
 6078 0679 74       		.byte	0x74
 6079 067a 04       		.sleb128 4
 6080 067b 00       		.byte	0
 6081 067c 23       		.uleb128 0x23
 6082 067d 66000000 		.4byte	.LVL32
 6083 0681 92220000 		.4byte	0x2292
 6084 0685 90060000 		.4byte	0x690
 6085 0689 1F       		.uleb128 0x1f
 6086 068a 01       		.uleb128 0x1
 6087 068b 50       		.byte	0x50
 6088 068c 02       		.uleb128 0x2
 6089 068d 74       		.byte	0x74
 6090 068e 18       		.sleb128 24
 6091 068f 00       		.byte	0
 6092 0690 1E       		.uleb128 0x1e
 6093 0691 7A000000 		.4byte	.LVL34
 6094 0695 9E220000 		.4byte	0x229e
 6095 0699 1F       		.uleb128 0x1f
 6096 069a 01       		.uleb128 0x1
 6097 069b 50       		.byte	0x50
 6098 069c 02       		.uleb128 0x2
 6099 069d 77       		.byte	0x77
 6100 069e 00       		.sleb128 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 219


 6101 069f 1F       		.uleb128 0x1f
 6102 06a0 01       		.uleb128 0x1
 6103 06a1 51       		.byte	0x51
 6104 06a2 02       		.uleb128 0x2
 6105 06a3 79       		.byte	0x79
 6106 06a4 00       		.sleb128 0
 6107 06a5 1F       		.uleb128 0x1f
 6108 06a6 01       		.uleb128 0x1
 6109 06a7 52       		.byte	0x52
 6110 06a8 02       		.uleb128 0x2
 6111 06a9 7A       		.byte	0x7a
 6112 06aa 00       		.sleb128 0
 6113 06ab 00       		.byte	0
 6114 06ac 00       		.byte	0
 6115 06ad 07       		.uleb128 0x7
 6116 06ae BF000000 		.4byte	0xbf
 6117 06b2 07       		.uleb128 0x7
 6118 06b3 EB000000 		.4byte	0xeb
 6119 06b7 07       		.uleb128 0x7
 6120 06b8 B0000000 		.4byte	0xb0
 6121 06bc 06       		.uleb128 0x6
 6122 06bd 04       		.byte	0x4
 6123 06be 3F020000 		.4byte	0x23f
 6124 06c2 07       		.uleb128 0x7
 6125 06c3 BC060000 		.4byte	0x6bc
 6126 06c7 06       		.uleb128 0x6
 6127 06c8 04       		.byte	0x4
 6128 06c9 CD060000 		.4byte	0x6cd
 6129 06cd 07       		.uleb128 0x7
 6130 06ce B3030000 		.4byte	0x3b3
 6131 06d2 07       		.uleb128 0x7
 6132 06d3 C7060000 		.4byte	0x6c7
 6133 06d7 1C       		.uleb128 0x1c
 6134 06d8 A40F0000 		.4byte	.LASF103
 6135 06dc 01       		.byte	0x1
 6136 06dd 810E     		.2byte	0xe81
 6137 06df 00000000 		.4byte	.LFB102
 6138 06e3 58000000 		.4byte	.LFE102-.LFB102
 6139 06e7 01       		.uleb128 0x1
 6140 06e8 9C       		.byte	0x9c
 6141 06e9 80070000 		.4byte	0x780
 6142 06ed 1A       		.uleb128 0x1a
 6143 06ee 6E100000 		.4byte	.LASF47
 6144 06f2 01       		.byte	0x1
 6145 06f3 830E     		.2byte	0xe83
 6146 06f5 40010000 		.4byte	0x140
 6147 06f9 35020000 		.4byte	.LLST12
 6148 06fd 23       		.uleb128 0x23
 6149 06fe 14000000 		.4byte	.LVL37
 6150 0702 A9220000 		.4byte	0x22a9
 6151 0706 1E070000 		.4byte	0x71e
 6152 070a 1F       		.uleb128 0x1f
 6153 070b 01       		.uleb128 0x1
 6154 070c 50       		.byte	0x50
 6155 070d 0F       		.uleb128 0xf
 6156 070e 74       		.byte	0x74
 6157 070f 00       		.sleb128 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 220


 6158 0710 32       		.byte	0x32
 6159 0711 24       		.byte	0x24
 6160 0712 74       		.byte	0x74
 6161 0713 00       		.sleb128 0
 6162 0714 22       		.byte	0x22
 6163 0715 32       		.byte	0x32
 6164 0716 24       		.byte	0x24
 6165 0717 03       		.byte	0x3
 6166 0718 30000000 		.4byte	.LANCHOR0+48
 6167 071c 22       		.byte	0x22
 6168 071d 00       		.byte	0
 6169 071e 23       		.uleb128 0x23
 6170 071f 26000000 		.4byte	.LVL40
 6171 0723 A9220000 		.4byte	0x22a9
 6172 0727 32070000 		.4byte	0x732
 6173 072b 1F       		.uleb128 0x1f
 6174 072c 01       		.uleb128 0x1
 6175 072d 50       		.byte	0x50
 6176 072e 02       		.uleb128 0x2
 6177 072f 76       		.byte	0x76
 6178 0730 00       		.sleb128 0
 6179 0731 00       		.byte	0
 6180 0732 23       		.uleb128 0x23
 6181 0733 30000000 		.4byte	.LVL41
 6182 0737 A9220000 		.4byte	0x22a9
 6183 073b 46070000 		.4byte	0x746
 6184 073f 1F       		.uleb128 0x1f
 6185 0740 01       		.uleb128 0x1
 6186 0741 50       		.byte	0x50
 6187 0742 02       		.uleb128 0x2
 6188 0743 75       		.byte	0x75
 6189 0744 00       		.sleb128 0
 6190 0745 00       		.byte	0
 6191 0746 23       		.uleb128 0x23
 6192 0747 38000000 		.4byte	.LVL42
 6193 074b A9220000 		.4byte	0x22a9
 6194 074f 5A070000 		.4byte	0x75a
 6195 0753 1F       		.uleb128 0x1f
 6196 0754 01       		.uleb128 0x1
 6197 0755 50       		.byte	0x50
 6198 0756 02       		.uleb128 0x2
 6199 0757 74       		.byte	0x74
 6200 0758 14       		.sleb128 20
 6201 0759 00       		.byte	0
 6202 075a 23       		.uleb128 0x23
 6203 075b 40000000 		.4byte	.LVL43
 6204 075f A9220000 		.4byte	0x22a9
 6205 0763 6F070000 		.4byte	0x76f
 6206 0767 1F       		.uleb128 0x1f
 6207 0768 01       		.uleb128 0x1
 6208 0769 50       		.byte	0x50
 6209 076a 03       		.uleb128 0x3
 6210 076b 74       		.byte	0x74
 6211 076c BC01     		.sleb128 188
 6212 076e 00       		.byte	0
 6213 076f 1E       		.uleb128 0x1e
 6214 0770 46000000 		.4byte	.LVL44
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 221


 6215 0774 A9220000 		.4byte	0x22a9
 6216 0778 1F       		.uleb128 0x1f
 6217 0779 01       		.uleb128 0x1
 6218 077a 50       		.byte	0x50
 6219 077b 02       		.uleb128 0x2
 6220 077c 74       		.byte	0x74
 6221 077d 00       		.sleb128 0
 6222 077e 00       		.byte	0
 6223 077f 00       		.byte	0
 6224 0780 1C       		.uleb128 0x1c
 6225 0781 6C020000 		.4byte	.LASF104
 6226 0785 01       		.byte	0x1
 6227 0786 0604     		.2byte	0x406
 6228 0788 00000000 		.4byte	.LFB70
 6229 078c D4000000 		.4byte	.LFE70-.LFB70
 6230 0790 01       		.uleb128 0x1
 6231 0791 9C       		.byte	0x9c
 6232 0792 E0070000 		.4byte	0x7e0
 6233 0796 19       		.uleb128 0x19
 6234 0797 A7010000 		.4byte	.LASF101
 6235 079b 01       		.byte	0x1
 6236 079c 0604     		.2byte	0x406
 6237 079e 97050000 		.4byte	0x597
 6238 07a2 54020000 		.4byte	.LLST13
 6239 07a6 24       		.uleb128 0x24
 6240 07a7 68000000 		.4byte	.LBB34
 6241 07ab 3A000000 		.4byte	.LBE34-.LBB34
 6242 07af C4070000 		.4byte	0x7c4
 6243 07b3 1A       		.uleb128 0x1a
 6244 07b4 D9040000 		.4byte	.LASF36
 6245 07b8 01       		.byte	0x1
 6246 07b9 4004     		.2byte	0x440
 6247 07bb E0070000 		.4byte	0x7e0
 6248 07bf 80020000 		.4byte	.LLST14
 6249 07c3 00       		.byte	0
 6250 07c4 1D       		.uleb128 0x1d
 6251 07c5 08000000 		.4byte	.LVL46
 6252 07c9 B5220000 		.4byte	0x22b5
 6253 07cd 1D       		.uleb128 0x1d
 6254 07ce 2C000000 		.4byte	.LVL47
 6255 07d2 D7060000 		.4byte	0x6d7
 6256 07d6 1D       		.uleb128 0x1d
 6257 07d7 A6000000 		.4byte	.LVL50
 6258 07db C0220000 		.4byte	0x22c0
 6259 07df 00       		.byte	0
 6260 07e0 07       		.uleb128 0x7
 6261 07e1 2E020000 		.4byte	0x22e
 6262 07e5 1C       		.uleb128 0x1c
 6263 07e6 910C0000 		.4byte	.LASF105
 6264 07ea 01       		.byte	0x1
 6265 07eb A10E     		.2byte	0xea1
 6266 07ed 00000000 		.4byte	.LFB103
 6267 07f1 44000000 		.4byte	.LFE103-.LFB103
 6268 07f5 01       		.uleb128 0x1
 6269 07f6 9C       		.byte	0x9c
 6270 07f7 4C080000 		.4byte	0x84c
 6271 07fb 25       		.uleb128 0x25
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 222


 6272 07fc 02000000 		.4byte	.LBB35
 6273 0800 3C000000 		.4byte	.LBE35-.LBB35
 6274 0804 1A       		.uleb128 0x1a
 6275 0805 68100000 		.4byte	.LASF88
 6276 0809 01       		.byte	0x1
 6277 080a A70E     		.2byte	0xea7
 6278 080c 97050000 		.4byte	0x597
 6279 0810 93020000 		.4byte	.LLST15
 6280 0814 1D       		.uleb128 0x1d
 6281 0815 08000000 		.4byte	.LVL52
 6282 0819 B5220000 		.4byte	0x22b5
 6283 081d 23       		.uleb128 0x23
 6284 081e 16000000 		.4byte	.LVL54
 6285 0822 CB220000 		.4byte	0x22cb
 6286 0826 31080000 		.4byte	0x831
 6287 082a 1F       		.uleb128 0x1f
 6288 082b 01       		.uleb128 0x1
 6289 082c 50       		.byte	0x50
 6290 082d 02       		.uleb128 0x2
 6291 082e 75       		.byte	0x75
 6292 082f 04       		.sleb128 4
 6293 0830 00       		.byte	0
 6294 0831 1D       		.uleb128 0x1d
 6295 0832 2E000000 		.4byte	.LVL55
 6296 0836 C0220000 		.4byte	0x22c0
 6297 083a 1E       		.uleb128 0x1e
 6298 083b 34000000 		.4byte	.LVL56
 6299 083f 57050000 		.4byte	0x557
 6300 0843 1F       		.uleb128 0x1f
 6301 0844 01       		.uleb128 0x1
 6302 0845 50       		.byte	0x50
 6303 0846 02       		.uleb128 0x2
 6304 0847 75       		.byte	0x75
 6305 0848 00       		.sleb128 0
 6306 0849 00       		.byte	0
 6307 084a 00       		.byte	0
 6308 084b 00       		.byte	0
 6309 084c 26       		.uleb128 0x26
 6310 084d 5B080000 		.4byte	.LASF106
 6311 0851 01       		.byte	0x1
 6312 0852 A10D     		.2byte	0xda1
 6313 0854 00000000 		.4byte	.LFB101
 6314 0858 08000000 		.4byte	.LFE101-.LFB101
 6315 085c 01       		.uleb128 0x1
 6316 085d 9C       		.byte	0x9c
 6317 085e 7C080000 		.4byte	0x87c
 6318 0862 19       		.uleb128 0x19
 6319 0863 E60E0000 		.4byte	.LASF99
 6320 0867 01       		.byte	0x1
 6321 0868 A10D     		.2byte	0xda1
 6322 086a B0000000 		.4byte	0xb0
 6323 086e A6020000 		.4byte	.LLST16
 6324 0872 1D       		.uleb128 0x1d
 6325 0873 06000000 		.4byte	.LVL59
 6326 0877 E5070000 		.4byte	0x7e5
 6327 087b 00       		.byte	0
 6328 087c 1C       		.uleb128 0x1c
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 223


 6329 087d 300C0000 		.4byte	.LASF107
 6330 0881 01       		.byte	0x1
 6331 0882 FD14     		.2byte	0x14fd
 6332 0884 00000000 		.4byte	.LFB121
 6333 0888 A8000000 		.4byte	.LFE121-.LFB121
 6334 088c 01       		.uleb128 0x1
 6335 088d 9C       		.byte	0x9c
 6336 088e 0C090000 		.4byte	0x90c
 6337 0892 19       		.uleb128 0x19
 6338 0893 480A0000 		.4byte	.LASF108
 6339 0897 01       		.byte	0x1
 6340 0898 FD14     		.2byte	0x14fd
 6341 089a 4B010000 		.4byte	0x14b
 6342 089e C7020000 		.4byte	.LLST17
 6343 08a2 19       		.uleb128 0x19
 6344 08a3 48000000 		.4byte	.LASF109
 6345 08a7 01       		.byte	0x1
 6346 08a8 FE14     		.2byte	0x14fe
 6347 08aa 0C090000 		.4byte	0x90c
 6348 08ae F3020000 		.4byte	.LLST18
 6349 08b2 1A       		.uleb128 0x1a
 6350 08b3 66090000 		.4byte	.LASF110
 6351 08b7 01       		.byte	0x1
 6352 08b8 0015     		.2byte	0x1500
 6353 08ba 4B010000 		.4byte	0x14b
 6354 08be 1F030000 		.4byte	.LLST19
 6355 08c2 1A       		.uleb128 0x1a
 6356 08c3 A60A0000 		.4byte	.LASF111
 6357 08c7 01       		.byte	0x1
 6358 08c8 0115     		.2byte	0x1501
 6359 08ca 11090000 		.4byte	0x911
 6360 08ce 32030000 		.4byte	.LLST20
 6361 08d2 24       		.uleb128 0x24
 6362 08d3 3A000000 		.4byte	.LBB36
 6363 08d7 30000000 		.4byte	.LBE36-.LBB36
 6364 08db F0080000 		.4byte	0x8f0
 6365 08df 1A       		.uleb128 0x1a
 6366 08e0 D9040000 		.4byte	.LASF36
 6367 08e4 01       		.byte	0x1
 6368 08e5 2015     		.2byte	0x1520
 6369 08e7 E0070000 		.4byte	0x7e0
 6370 08eb 45030000 		.4byte	.LLST21
 6371 08ef 00       		.byte	0
 6372 08f0 1D       		.uleb128 0x1d
 6373 08f1 16000000 		.4byte	.LVL63
 6374 08f5 CB220000 		.4byte	0x22cb
 6375 08f9 1D       		.uleb128 0x1d
 6376 08fa 8A000000 		.4byte	.LVL68
 6377 08fe D7220000 		.4byte	0x22d7
 6378 0902 1D       		.uleb128 0x1d
 6379 0903 9A000000 		.4byte	.LVL71
 6380 0907 D7220000 		.4byte	0x22d7
 6381 090b 00       		.byte	0
 6382 090c 07       		.uleb128 0x7
 6383 090d 35010000 		.4byte	0x135
 6384 0911 07       		.uleb128 0x7
 6385 0912 4B010000 		.4byte	0x14b
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 224


 6386 0916 27       		.uleb128 0x27
 6387 0917 640A0000 		.4byte	.LASF114
 6388 091b 01       		.byte	0x1
 6389 091c D502     		.2byte	0x2d5
 6390 091e 35010000 		.4byte	0x135
 6391 0922 00000000 		.4byte	.LFB68
 6392 0926 6A000000 		.4byte	.LFE68-.LFB68
 6393 092a 01       		.uleb128 0x1
 6394 092b 9C       		.byte	0x9c
 6395 092c 790A0000 		.4byte	0xa79
 6396 0930 19       		.uleb128 0x19
 6397 0931 CA000000 		.4byte	.LASF96
 6398 0935 01       		.byte	0x1
 6399 0936 D502     		.2byte	0x2d5
 6400 0938 0E010000 		.4byte	0x10e
 6401 093c 58030000 		.4byte	.LLST22
 6402 0940 19       		.uleb128 0x19
 6403 0941 33030000 		.4byte	.LASF97
 6404 0945 01       		.byte	0x1
 6405 0946 D602     		.2byte	0x2d6
 6406 0948 AD060000 		.4byte	0x6ad
 6407 094c 76030000 		.4byte	.LLST23
 6408 0950 19       		.uleb128 0x19
 6409 0951 3B000000 		.4byte	.LASF112
 6410 0955 01       		.byte	0x1
 6411 0956 D702     		.2byte	0x2d7
 6412 0958 790A0000 		.4byte	0xa79
 6413 095c 94030000 		.4byte	.LLST24
 6414 0960 19       		.uleb128 0x19
 6415 0961 E60E0000 		.4byte	.LASF99
 6416 0965 01       		.byte	0x1
 6417 0966 D802     		.2byte	0x2d8
 6418 0968 B7060000 		.4byte	0x6b7
 6419 096c B5030000 		.4byte	.LLST25
 6420 0970 20       		.uleb128 0x20
 6421 0971 6E100000 		.4byte	.LASF47
 6422 0975 01       		.byte	0x1
 6423 0976 D902     		.2byte	0x2d9
 6424 0978 40010000 		.4byte	0x140
 6425 097c 02       		.uleb128 0x2
 6426 097d 91       		.byte	0x91
 6427 097e 00       		.sleb128 0
 6428 097f 20       		.uleb128 0x20
 6429 0980 A6060000 		.4byte	.LASF100
 6430 0984 01       		.byte	0x1
 6431 0985 DA02     		.2byte	0x2da
 6432 0987 C2060000 		.4byte	0x6c2
 6433 098b 02       		.uleb128 0x2
 6434 098c 91       		.byte	0x91
 6435 098d 04       		.sleb128 4
 6436 098e 1A       		.uleb128 0x1a
 6437 098f A7010000 		.4byte	.LASF101
 6438 0993 01       		.byte	0x1
 6439 0994 DC02     		.2byte	0x2dc
 6440 0996 97050000 		.4byte	0x597
 6441 099a D3030000 		.4byte	.LLST26
 6442 099e 1A       		.uleb128 0x1a
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 225


 6443 099f 14040000 		.4byte	.LASF87
 6444 09a3 01       		.byte	0x1
 6445 09a4 DD02     		.2byte	0x2dd
 6446 09a6 35010000 		.4byte	0x135
 6447 09aa 12040000 		.4byte	.LLST27
 6448 09ae 24       		.uleb128 0x24
 6449 09af 0E000000 		.4byte	.LBB37
 6450 09b3 2C000000 		.4byte	.LBE37-.LBB37
 6451 09b7 250A0000 		.4byte	0xa25
 6452 09bb 1A       		.uleb128 0x1a
 6453 09bc 1B010000 		.4byte	.LASF48
 6454 09c0 01       		.byte	0x1
 6455 09c1 FC02     		.2byte	0x2fc
 6456 09c3 BE030000 		.4byte	0x3be
 6457 09c7 31040000 		.4byte	.LLST28
 6458 09cb 23       		.uleb128 0x23
 6459 09cc 14000000 		.4byte	.LVL75
 6460 09d0 E3220000 		.4byte	0x22e3
 6461 09d4 E1090000 		.4byte	0x9e1
 6462 09d8 1F       		.uleb128 0x1f
 6463 09d9 01       		.uleb128 0x1
 6464 09da 50       		.byte	0x50
 6465 09db 04       		.uleb128 0x4
 6466 09dc 75       		.byte	0x75
 6467 09dd 00       		.sleb128 0
 6468 09de 32       		.byte	0x32
 6469 09df 24       		.byte	0x24
 6470 09e0 00       		.byte	0
 6471 09e1 23       		.uleb128 0x23
 6472 09e2 1E000000 		.4byte	.LVL77
 6473 09e6 E3220000 		.4byte	0x22e3
 6474 09ea F5090000 		.4byte	0x9f5
 6475 09ee 1F       		.uleb128 0x1f
 6476 09ef 01       		.uleb128 0x1
 6477 09f0 50       		.byte	0x50
 6478 09f1 02       		.uleb128 0x2
 6479 09f2 08       		.byte	0x8
 6480 09f3 50       		.byte	0x50
 6481 09f4 00       		.byte	0
 6482 09f5 23       		.uleb128 0x23
 6483 09f6 2A000000 		.4byte	.LVL78
 6484 09fa EE220000 		.4byte	0x22ee
 6485 09fe 140A0000 		.4byte	0xa14
 6486 0a02 1F       		.uleb128 0x1f
 6487 0a03 01       		.uleb128 0x1
 6488 0a04 50       		.byte	0x50
 6489 0a05 02       		.uleb128 0x2
 6490 0a06 74       		.byte	0x74
 6491 0a07 00       		.sleb128 0
 6492 0a08 1F       		.uleb128 0x1f
 6493 0a09 01       		.uleb128 0x1
 6494 0a0a 51       		.byte	0x51
 6495 0a0b 01       		.uleb128 0x1
 6496 0a0c 30       		.byte	0x30
 6497 0a0d 1F       		.uleb128 0x1f
 6498 0a0e 01       		.uleb128 0x1
 6499 0a0f 52       		.byte	0x52
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 226


 6500 0a10 02       		.uleb128 0x2
 6501 0a11 08       		.byte	0x8
 6502 0a12 50       		.byte	0x50
 6503 0a13 00       		.byte	0
 6504 0a14 1E       		.uleb128 0x1e
 6505 0a15 36000000 		.4byte	.LVL81
 6506 0a19 7C220000 		.4byte	0x227c
 6507 0a1d 1F       		.uleb128 0x1f
 6508 0a1e 01       		.uleb128 0x1
 6509 0a1f 50       		.byte	0x50
 6510 0a20 02       		.uleb128 0x2
 6511 0a21 79       		.byte	0x79
 6512 0a22 00       		.sleb128 0
 6513 0a23 00       		.byte	0
 6514 0a24 00       		.byte	0
 6515 0a25 23       		.uleb128 0x23
 6516 0a26 56000000 		.4byte	.LVL84
 6517 0a2a 9D050000 		.4byte	0x59d
 6518 0a2e 680A0000 		.4byte	0xa68
 6519 0a32 1F       		.uleb128 0x1f
 6520 0a33 01       		.uleb128 0x1
 6521 0a34 50       		.byte	0x50
 6522 0a35 02       		.uleb128 0x2
 6523 0a36 76       		.byte	0x76
 6524 0a37 00       		.sleb128 0
 6525 0a38 1F       		.uleb128 0x1f
 6526 0a39 01       		.uleb128 0x1
 6527 0a3a 51       		.byte	0x51
 6528 0a3b 02       		.uleb128 0x2
 6529 0a3c 77       		.byte	0x77
 6530 0a3d 00       		.sleb128 0
 6531 0a3e 1F       		.uleb128 0x1f
 6532 0a3f 01       		.uleb128 0x1
 6533 0a40 52       		.byte	0x52
 6534 0a41 02       		.uleb128 0x2
 6535 0a42 75       		.byte	0x75
 6536 0a43 00       		.sleb128 0
 6537 0a44 1F       		.uleb128 0x1f
 6538 0a45 01       		.uleb128 0x1
 6539 0a46 53       		.byte	0x53
 6540 0a47 02       		.uleb128 0x2
 6541 0a48 78       		.byte	0x78
 6542 0a49 00       		.sleb128 0
 6543 0a4a 1F       		.uleb128 0x1f
 6544 0a4b 02       		.uleb128 0x2
 6545 0a4c 7D       		.byte	0x7d
 6546 0a4d 00       		.sleb128 0
 6547 0a4e 03       		.uleb128 0x3
 6548 0a4f 91       		.byte	0x91
 6549 0a50 00       		.sleb128 0
 6550 0a51 06       		.byte	0x6
 6551 0a52 1F       		.uleb128 0x1f
 6552 0a53 02       		.uleb128 0x2
 6553 0a54 7D       		.byte	0x7d
 6554 0a55 04       		.sleb128 4
 6555 0a56 03       		.uleb128 0x3
 6556 0a57 91       		.byte	0x91
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 227


 6557 0a58 04       		.sleb128 4
 6558 0a59 06       		.byte	0x6
 6559 0a5a 1F       		.uleb128 0x1f
 6560 0a5b 02       		.uleb128 0x2
 6561 0a5c 7D       		.byte	0x7d
 6562 0a5d 08       		.sleb128 8
 6563 0a5e 02       		.uleb128 0x2
 6564 0a5f 74       		.byte	0x74
 6565 0a60 00       		.sleb128 0
 6566 0a61 1F       		.uleb128 0x1f
 6567 0a62 02       		.uleb128 0x2
 6568 0a63 7D       		.byte	0x7d
 6569 0a64 0C       		.sleb128 12
 6570 0a65 01       		.uleb128 0x1
 6571 0a66 30       		.byte	0x30
 6572 0a67 00       		.byte	0
 6573 0a68 1E       		.uleb128 0x1e
 6574 0a69 5C000000 		.4byte	.LVL85
 6575 0a6d 80070000 		.4byte	0x780
 6576 0a71 1F       		.uleb128 0x1f
 6577 0a72 01       		.uleb128 0x1
 6578 0a73 50       		.byte	0x50
 6579 0a74 02       		.uleb128 0x2
 6580 0a75 74       		.byte	0x74
 6581 0a76 00       		.sleb128 0
 6582 0a77 00       		.byte	0
 6583 0a78 00       		.byte	0
 6584 0a79 07       		.uleb128 0x7
 6585 0a7a D5000000 		.4byte	0xd5
 6586 0a7e 28       		.uleb128 0x28
 6587 0a7f AB050000 		.4byte	.LASF125
 6588 0a83 01       		.byte	0x1
 6589 0a84 5C04     		.2byte	0x45c
 6590 0a86 00000000 		.4byte	.LFB71
 6591 0a8a C4000000 		.4byte	.LFE71-.LFB71
 6592 0a8e 01       		.uleb128 0x1
 6593 0a8f 9C       		.byte	0x9c
 6594 0a90 230B0000 		.4byte	0xb23
 6595 0a94 19       		.uleb128 0x19
 6596 0a95 640F0000 		.4byte	.LASF113
 6597 0a99 01       		.byte	0x1
 6598 0a9a 5C04     		.2byte	0x45c
 6599 0a9c 3F020000 		.4byte	0x23f
 6600 0aa0 5A040000 		.4byte	.LLST29
 6601 0aa4 1A       		.uleb128 0x1a
 6602 0aa5 68100000 		.4byte	.LASF88
 6603 0aa9 01       		.byte	0x1
 6604 0aaa 5E04     		.2byte	0x45e
 6605 0aac 97050000 		.4byte	0x597
 6606 0ab0 78040000 		.4byte	.LLST30
 6607 0ab4 1D       		.uleb128 0x1d
 6608 0ab5 08000000 		.4byte	.LVL89
 6609 0ab9 B5220000 		.4byte	0x22b5
 6610 0abd 23       		.uleb128 0x23
 6611 0abe 18000000 		.4byte	.LVL91
 6612 0ac2 CB220000 		.4byte	0x22cb
 6613 0ac6 D10A0000 		.4byte	0xad1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 228


 6614 0aca 1F       		.uleb128 0x1f
 6615 0acb 01       		.uleb128 0x1
 6616 0acc 50       		.byte	0x50
 6617 0acd 02       		.uleb128 0x2
 6618 0ace 75       		.byte	0x75
 6619 0acf 00       		.sleb128 0
 6620 0ad0 00       		.byte	0
 6621 0ad1 23       		.uleb128 0x23
 6622 0ad2 48000000 		.4byte	.LVL92
 6623 0ad6 CB220000 		.4byte	0x22cb
 6624 0ada E50A0000 		.4byte	0xae5
 6625 0ade 1F       		.uleb128 0x1f
 6626 0adf 01       		.uleb128 0x1
 6627 0ae0 50       		.byte	0x50
 6628 0ae1 02       		.uleb128 0x2
 6629 0ae2 74       		.byte	0x74
 6630 0ae3 18       		.sleb128 24
 6631 0ae4 00       		.byte	0
 6632 0ae5 23       		.uleb128 0x23
 6633 0ae6 68000000 		.4byte	.LVL93
 6634 0aea F7220000 		.4byte	0x22f7
 6635 0aee 000B0000 		.4byte	0xb00
 6636 0af2 1F       		.uleb128 0x1f
 6637 0af3 01       		.uleb128 0x1
 6638 0af4 50       		.byte	0x50
 6639 0af5 03       		.uleb128 0x3
 6640 0af6 76       		.byte	0x76
 6641 0af7 BC01     		.sleb128 188
 6642 0af9 1F       		.uleb128 0x1f
 6643 0afa 01       		.uleb128 0x1
 6644 0afb 51       		.byte	0x51
 6645 0afc 02       		.uleb128 0x2
 6646 0afd 75       		.byte	0x75
 6647 0afe 00       		.sleb128 0
 6648 0aff 00       		.byte	0
 6649 0b00 1D       		.uleb128 0x1d
 6650 0b01 84000000 		.4byte	.LVL94
 6651 0b05 45050000 		.4byte	0x545
 6652 0b09 1D       		.uleb128 0x1d
 6653 0b0a 88000000 		.4byte	.LVL95
 6654 0b0e C0220000 		.4byte	0x22c0
 6655 0b12 1E       		.uleb128 0x1e
 6656 0b13 98000000 		.4byte	.LVL96
 6657 0b17 57050000 		.4byte	0x557
 6658 0b1b 1F       		.uleb128 0x1f
 6659 0b1c 01       		.uleb128 0x1
 6660 0b1d 50       		.byte	0x50
 6661 0b1e 02       		.uleb128 0x2
 6662 0b1f 74       		.byte	0x74
 6663 0b20 00       		.sleb128 0
 6664 0b21 00       		.byte	0
 6665 0b22 00       		.byte	0
 6666 0b23 27       		.uleb128 0x27
 6667 0b24 B10C0000 		.4byte	.LASF115
 6668 0b28 01       		.byte	0x1
 6669 0b29 4605     		.2byte	0x546
 6670 0b2b 11030000 		.4byte	0x311
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 229


 6671 0b2f 00000000 		.4byte	.LFB74
 6672 0b33 A4000000 		.4byte	.LFE74-.LFB74
 6673 0b37 01       		.uleb128 0x1
 6674 0b38 9C       		.byte	0x9c
 6675 0b39 D60B0000 		.4byte	0xbd6
 6676 0b3d 19       		.uleb128 0x19
 6677 0b3e 79010000 		.4byte	.LASF91
 6678 0b42 01       		.byte	0x1
 6679 0b43 4605     		.2byte	0x546
 6680 0b45 3F020000 		.4byte	0x23f
 6681 0b49 8B040000 		.4byte	.LLST31
 6682 0b4d 21       		.uleb128 0x21
 6683 0b4e 43100000 		.4byte	.LASF116
 6684 0b52 01       		.byte	0x1
 6685 0b53 4805     		.2byte	0x548
 6686 0b55 11030000 		.4byte	0x311
 6687 0b59 01       		.uleb128 0x1
 6688 0b5a 50       		.byte	0x50
 6689 0b5b 1A       		.uleb128 0x1a
 6690 0b5c E0060000 		.4byte	.LASF117
 6691 0b60 01       		.byte	0x1
 6692 0b61 4905     		.2byte	0x549
 6693 0b63 D60B0000 		.4byte	0xbd6
 6694 0b67 DB040000 		.4byte	.LLST32
 6695 0b6b 1A       		.uleb128 0x1a
 6696 0b6c 5C070000 		.4byte	.LASF118
 6697 0b70 01       		.byte	0x1
 6698 0b71 4A05     		.2byte	0x54a
 6699 0b73 D60B0000 		.4byte	0xbd6
 6700 0b77 F9040000 		.4byte	.LLST33
 6701 0b7b 1A       		.uleb128 0x1a
 6702 0b7c 5B0C0000 		.4byte	.LASF119
 6703 0b80 01       		.byte	0x1
 6704 0b81 4B05     		.2byte	0x54b
 6705 0b83 D60B0000 		.4byte	0xbd6
 6706 0b87 17050000 		.4byte	.LLST34
 6707 0b8b 1A       		.uleb128 0x1a
 6708 0b8c 7F010000 		.4byte	.LASF120
 6709 0b90 01       		.byte	0x1
 6710 0b91 4C05     		.2byte	0x54c
 6711 0b93 D60B0000 		.4byte	0xbd6
 6712 0b97 35050000 		.4byte	.LLST35
 6713 0b9b 1A       		.uleb128 0x1a
 6714 0b9c 68100000 		.4byte	.LASF88
 6715 0ba0 01       		.byte	0x1
 6716 0ba1 4D05     		.2byte	0x54d
 6717 0ba3 FA040000 		.4byte	0x4fa
 6718 0ba7 53050000 		.4byte	.LLST36
 6719 0bab 29       		.uleb128 0x29
 6720 0bac 00000000 		.4byte	.Ldebug_ranges0+0
 6721 0bb0 C30B0000 		.4byte	0xbc3
 6722 0bb4 22       		.uleb128 0x22
 6723 0bb5 7800     		.ascii	"x\000"
 6724 0bb7 01       		.byte	0x1
 6725 0bb8 7905     		.2byte	0x579
 6726 0bba 35010000 		.4byte	0x135
 6727 0bbe A3050000 		.4byte	.LLST37
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 230


 6728 0bc2 00       		.byte	0
 6729 0bc3 1D       		.uleb128 0x1d
 6730 0bc4 14000000 		.4byte	.LVL100
 6731 0bc8 B5220000 		.4byte	0x22b5
 6732 0bcc 1D       		.uleb128 0x1d
 6733 0bcd 26000000 		.4byte	.LVL105
 6734 0bd1 C0220000 		.4byte	0x22c0
 6735 0bd5 00       		.byte	0
 6736 0bd6 06       		.uleb128 0x6
 6737 0bd7 04       		.byte	0x4
 6738 0bd8 DC0B0000 		.4byte	0xbdc
 6739 0bdc 07       		.uleb128 0x7
 6740 0bdd 34020000 		.4byte	0x234
 6741 0be1 27       		.uleb128 0x27
 6742 0be2 F10A0000 		.4byte	.LASF121
 6743 0be6 01       		.byte	0x1
 6744 0be7 B205     		.2byte	0x5b2
 6745 0be9 40010000 		.4byte	0x140
 6746 0bed 00000000 		.4byte	.LFB75
 6747 0bf1 20000000 		.4byte	.LFE75-.LFB75
 6748 0bf5 01       		.uleb128 0x1
 6749 0bf6 9C       		.byte	0x9c
 6750 0bf7 3E0C0000 		.4byte	0xc3e
 6751 0bfb 19       		.uleb128 0x19
 6752 0bfc 79010000 		.4byte	.LASF91
 6753 0c00 01       		.byte	0x1
 6754 0c01 B205     		.2byte	0x5b2
 6755 0c03 EA040000 		.4byte	0x4ea
 6756 0c07 CC050000 		.4byte	.LLST38
 6757 0c0b 1A       		.uleb128 0x1a
 6758 0c0c 68100000 		.4byte	.LASF88
 6759 0c10 01       		.byte	0x1
 6760 0c11 B405     		.2byte	0x5b4
 6761 0c13 EF040000 		.4byte	0x4ef
 6762 0c17 F8050000 		.4byte	.LLST39
 6763 0c1b 1A       		.uleb128 0x1a
 6764 0c1c 97010000 		.4byte	.LASF122
 6765 0c20 01       		.byte	0x1
 6766 0c21 B505     		.2byte	0x5b5
 6767 0c23 40010000 		.4byte	0x140
 6768 0c27 0B060000 		.4byte	.LLST40
 6769 0c2b 1D       		.uleb128 0x1d
 6770 0c2c 08000000 		.4byte	.LVL122
 6771 0c30 B5220000 		.4byte	0x22b5
 6772 0c34 1D       		.uleb128 0x1d
 6773 0c35 16000000 		.4byte	.LVL125
 6774 0c39 C0220000 		.4byte	0x22c0
 6775 0c3d 00       		.byte	0
 6776 0c3e 27       		.uleb128 0x27
 6777 0c3f F30E0000 		.4byte	.LASF123
 6778 0c43 01       		.byte	0x1
 6779 0c44 C805     		.2byte	0x5c8
 6780 0c46 40010000 		.4byte	0x140
 6781 0c4a 00000000 		.4byte	.LFB76
 6782 0c4e 28000000 		.4byte	.LFE76-.LFB76
 6783 0c52 01       		.uleb128 0x1
 6784 0c53 9C       		.byte	0x9c
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 231


 6785 0c54 D60C0000 		.4byte	0xcd6
 6786 0c58 19       		.uleb128 0x19
 6787 0c59 79010000 		.4byte	.LASF91
 6788 0c5d 01       		.byte	0x1
 6789 0c5e C805     		.2byte	0x5c8
 6790 0c60 EA040000 		.4byte	0x4ea
 6791 0c64 29060000 		.4byte	.LLST41
 6792 0c68 1A       		.uleb128 0x1a
 6793 0c69 68100000 		.4byte	.LASF88
 6794 0c6d 01       		.byte	0x1
 6795 0c6e CA05     		.2byte	0x5ca
 6796 0c70 EF040000 		.4byte	0x4ef
 6797 0c74 4A060000 		.4byte	.LLST42
 6798 0c78 21       		.uleb128 0x21
 6799 0c79 97010000 		.4byte	.LASF122
 6800 0c7d 01       		.byte	0x1
 6801 0c7e CB05     		.2byte	0x5cb
 6802 0c80 40010000 		.4byte	0x140
 6803 0c84 01       		.uleb128 0x1
 6804 0c85 50       		.byte	0x50
 6805 0c86 2A       		.uleb128 0x2a
 6806 0c87 D5000000 		.4byte	.LASF124
 6807 0c8b 01       		.byte	0x1
 6808 0c8c CC05     		.2byte	0x5cc
 6809 0c8e 40010000 		.4byte	0x140
 6810 0c92 2B       		.uleb128 0x2b
 6811 0c93 21040000 		.4byte	0x421
 6812 0c97 00000000 		.4byte	.LBB41
 6813 0c9b 14000000 		.4byte	.LBE41-.LBB41
 6814 0c9f 01       		.byte	0x1
 6815 0ca0 E005     		.2byte	0x5e0
 6816 0ca2 BB0C0000 		.4byte	0xcbb
 6817 0ca6 25       		.uleb128 0x25
 6818 0ca7 00000000 		.4byte	.LBB42
 6819 0cab 14000000 		.4byte	.LBE42-.LBB42
 6820 0caf 2C       		.uleb128 0x2c
 6821 0cb0 31040000 		.4byte	0x431
 6822 0cb4 2C       		.uleb128 0x2c
 6823 0cb5 3C040000 		.4byte	0x43c
 6824 0cb9 00       		.byte	0
 6825 0cba 00       		.byte	0
 6826 0cbb 2D       		.uleb128 0x2d
 6827 0cbc 48040000 		.4byte	0x448
 6828 0cc0 1E000000 		.4byte	.LBB43
 6829 0cc4 04000000 		.4byte	.LBE43-.LBB43
 6830 0cc8 01       		.byte	0x1
 6831 0cc9 E705     		.2byte	0x5e7
 6832 0ccb 2E       		.uleb128 0x2e
 6833 0ccc 54040000 		.4byte	0x454
 6834 0cd0 5D060000 		.4byte	.LLST43
 6835 0cd4 00       		.byte	0
 6836 0cd5 00       		.byte	0
 6837 0cd6 28       		.uleb128 0x28
 6838 0cd7 18070000 		.4byte	.LASF126
 6839 0cdb 01       		.byte	0x1
 6840 0cdc F105     		.2byte	0x5f1
 6841 0cde 00000000 		.4byte	.LFB77
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 232


 6842 0ce2 08010000 		.4byte	.LFE77-.LFB77
 6843 0ce6 01       		.uleb128 0x1
 6844 0ce7 9C       		.byte	0x9c
 6845 0ce8 910D0000 		.4byte	0xd91
 6846 0cec 19       		.uleb128 0x19
 6847 0ced 79010000 		.4byte	.LASF91
 6848 0cf1 01       		.byte	0x1
 6849 0cf2 F105     		.2byte	0x5f1
 6850 0cf4 3F020000 		.4byte	0x23f
 6851 0cf8 70060000 		.4byte	.LLST44
 6852 0cfc 19       		.uleb128 0x19
 6853 0cfd 480E0000 		.4byte	.LASF127
 6854 0d01 01       		.byte	0x1
 6855 0d02 F205     		.2byte	0x5f2
 6856 0d04 40010000 		.4byte	0x140
 6857 0d08 8E060000 		.4byte	.LLST45
 6858 0d0c 1A       		.uleb128 0x1a
 6859 0d0d 68100000 		.4byte	.LASF88
 6860 0d11 01       		.byte	0x1
 6861 0d12 F405     		.2byte	0x5f4
 6862 0d14 97050000 		.4byte	0x597
 6863 0d18 B9060000 		.4byte	.LLST46
 6864 0d1c 1A       		.uleb128 0x1a
 6865 0d1d EE010000 		.4byte	.LASF128
 6866 0d21 01       		.byte	0x1
 6867 0d22 F505     		.2byte	0x5f5
 6868 0d24 40010000 		.4byte	0x140
 6869 0d28 CC060000 		.4byte	.LLST47
 6870 0d2c 1A       		.uleb128 0x1a
 6871 0d2d E2070000 		.4byte	.LASF129
 6872 0d31 01       		.byte	0x1
 6873 0d32 F505     		.2byte	0x5f5
 6874 0d34 40010000 		.4byte	0x140
 6875 0d38 DF060000 		.4byte	.LLST48
 6876 0d3c 1A       		.uleb128 0x1a
 6877 0d3d BB080000 		.4byte	.LASF130
 6878 0d41 01       		.byte	0x1
 6879 0d42 F605     		.2byte	0x5f6
 6880 0d44 35010000 		.4byte	0x135
 6881 0d48 F2060000 		.4byte	.LLST49
 6882 0d4c 24       		.uleb128 0x24
 6883 0d4d AA000000 		.4byte	.LBB45
 6884 0d51 38000000 		.4byte	.LBE45-.LBB45
 6885 0d55 6A0D0000 		.4byte	0xd6a
 6886 0d59 1A       		.uleb128 0x1a
 6887 0d5a D9040000 		.4byte	.LASF36
 6888 0d5e 01       		.byte	0x1
 6889 0d5f 7A06     		.2byte	0x67a
 6890 0d61 E0070000 		.4byte	0x7e0
 6891 0d65 11070000 		.4byte	.LLST50
 6892 0d69 00       		.byte	0
 6893 0d6a 1D       		.uleb128 0x1d
 6894 0d6b 10000000 		.4byte	.LVL134
 6895 0d6f B5220000 		.4byte	0x22b5
 6896 0d73 23       		.uleb128 0x23
 6897 0d74 80000000 		.4byte	.LVL141
 6898 0d78 CB220000 		.4byte	0x22cb
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 233


 6899 0d7c 870D0000 		.4byte	0xd87
 6900 0d80 1F       		.uleb128 0x1f
 6901 0d81 01       		.uleb128 0x1
 6902 0d82 50       		.byte	0x50
 6903 0d83 02       		.uleb128 0x2
 6904 0d84 75       		.byte	0x75
 6905 0d85 00       		.sleb128 0
 6906 0d86 00       		.byte	0
 6907 0d87 1D       		.uleb128 0x1d
 6908 0d88 F8000000 		.4byte	.LVL146
 6909 0d8c C0220000 		.4byte	0x22c0
 6910 0d90 00       		.byte	0
 6911 0d91 28       		.uleb128 0x28
 6912 0d92 23010000 		.4byte	.LASF131
 6913 0d96 01       		.byte	0x1
 6914 0d97 2F07     		.2byte	0x72f
 6915 0d99 00000000 		.4byte	.LFB80
 6916 0d9d A0000000 		.4byte	.LFE80-.LFB80
 6917 0da1 01       		.uleb128 0x1
 6918 0da2 9C       		.byte	0x9c
 6919 0da3 200E0000 		.4byte	0xe20
 6920 0da7 19       		.uleb128 0x19
 6921 0da8 D2060000 		.4byte	.LASF132
 6922 0dac 01       		.byte	0x1
 6923 0dad 2F07     		.2byte	0x72f
 6924 0daf 3F020000 		.4byte	0x23f
 6925 0db3 24070000 		.4byte	.LLST51
 6926 0db7 1A       		.uleb128 0x1a
 6927 0db8 68100000 		.4byte	.LASF88
 6928 0dbc 01       		.byte	0x1
 6929 0dbd 3107     		.2byte	0x731
 6930 0dbf 200E0000 		.4byte	0xe20
 6931 0dc3 24070000 		.4byte	.LLST51
 6932 0dc7 24       		.uleb128 0x24
 6933 0dc8 3C000000 		.4byte	.LBB46
 6934 0dcc 38000000 		.4byte	.LBE46-.LBB46
 6935 0dd0 E50D0000 		.4byte	0xde5
 6936 0dd4 1A       		.uleb128 0x1a
 6937 0dd5 D9040000 		.4byte	.LASF36
 6938 0dd9 01       		.byte	0x1
 6939 0dda 4307     		.2byte	0x743
 6940 0ddc E0070000 		.4byte	0x7e0
 6941 0de0 4D070000 		.4byte	.LLST53
 6942 0de4 00       		.byte	0
 6943 0de5 1D       		.uleb128 0x1d
 6944 0de6 16000000 		.4byte	.LVL149
 6945 0dea B5220000 		.4byte	0x22b5
 6946 0dee 23       		.uleb128 0x23
 6947 0def 1C000000 		.4byte	.LVL150
 6948 0df3 9F040000 		.4byte	0x49f
 6949 0df7 020E0000 		.4byte	0xe02
 6950 0dfb 1F       		.uleb128 0x1f
 6951 0dfc 01       		.uleb128 0x1
 6952 0dfd 50       		.byte	0x50
 6953 0dfe 02       		.uleb128 0x2
 6954 0dff 74       		.byte	0x74
 6955 0e00 00       		.sleb128 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 234


 6956 0e01 00       		.byte	0
 6957 0e02 23       		.uleb128 0x23
 6958 0e03 28000000 		.4byte	.LVL151
 6959 0e07 CB220000 		.4byte	0x22cb
 6960 0e0b 160E0000 		.4byte	0xe16
 6961 0e0f 1F       		.uleb128 0x1f
 6962 0e10 01       		.uleb128 0x1
 6963 0e11 50       		.byte	0x50
 6964 0e12 02       		.uleb128 0x2
 6965 0e13 75       		.byte	0x75
 6966 0e14 00       		.sleb128 0
 6967 0e15 00       		.byte	0
 6968 0e16 1D       		.uleb128 0x1d
 6969 0e17 94000000 		.4byte	.LVL154
 6970 0e1b C0220000 		.4byte	0x22c0
 6971 0e1f 00       		.byte	0
 6972 0e20 07       		.uleb128 0x7
 6973 0e21 97050000 		.4byte	0x597
 6974 0e25 27       		.uleb128 0x27
 6975 0e26 D9050000 		.4byte	.LASF133
 6976 0e2a 01       		.byte	0x1
 6977 0e2b 6507     		.2byte	0x765
 6978 0e2d 35010000 		.4byte	0x135
 6979 0e31 00000000 		.4byte	.LFB81
 6980 0e35 BC000000 		.4byte	.LFE81-.LFB81
 6981 0e39 01       		.uleb128 0x1
 6982 0e3a 9C       		.byte	0x9c
 6983 0e3b 220F0000 		.4byte	0xf22
 6984 0e3f 19       		.uleb128 0x19
 6985 0e40 D2060000 		.4byte	.LASF132
 6986 0e44 01       		.byte	0x1
 6987 0e45 6507     		.2byte	0x765
 6988 0e47 3F020000 		.4byte	0x23f
 6989 0e4b 60070000 		.4byte	.LLST54
 6990 0e4f 1A       		.uleb128 0x1a
 6991 0e50 BB080000 		.4byte	.LASF130
 6992 0e54 01       		.byte	0x1
 6993 0e55 6707     		.2byte	0x767
 6994 0e57 35010000 		.4byte	0x135
 6995 0e5b 8C070000 		.4byte	.LLST55
 6996 0e5f 1A       		.uleb128 0x1a
 6997 0e60 68100000 		.4byte	.LASF88
 6998 0e64 01       		.byte	0x1
 6999 0e65 6807     		.2byte	0x768
 7000 0e67 200E0000 		.4byte	0xe20
 7001 0e6b E5070000 		.4byte	.LLST56
 7002 0e6f 2A       		.uleb128 0x2a
 7003 0e70 7E080000 		.4byte	.LASF134
 7004 0e74 01       		.byte	0x1
 7005 0e75 6907     		.2byte	0x769
 7006 0e77 40010000 		.4byte	0x140
 7007 0e7b 2B       		.uleb128 0x2b
 7008 0e7c 21040000 		.4byte	0x421
 7009 0e80 04000000 		.4byte	.LBB47
 7010 0e84 14000000 		.4byte	.LBE47-.LBB47
 7011 0e88 01       		.byte	0x1
 7012 0e89 7F07     		.2byte	0x77f
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 235


 7013 0e8b A40E0000 		.4byte	0xea4
 7014 0e8f 25       		.uleb128 0x25
 7015 0e90 04000000 		.4byte	.LBB48
 7016 0e94 14000000 		.4byte	.LBE48-.LBB48
 7017 0e98 2C       		.uleb128 0x2c
 7018 0e99 31040000 		.4byte	0x431
 7019 0e9d 2C       		.uleb128 0x2c
 7020 0e9e 3C040000 		.4byte	0x43c
 7021 0ea2 00       		.byte	0
 7022 0ea3 00       		.byte	0
 7023 0ea4 24       		.uleb128 0x24
 7024 0ea5 60000000 		.4byte	.LBB49
 7025 0ea9 38000000 		.4byte	.LBE49-.LBB49
 7026 0ead C20E0000 		.4byte	0xec2
 7027 0eb1 1A       		.uleb128 0x1a
 7028 0eb2 D9040000 		.4byte	.LASF36
 7029 0eb6 01       		.byte	0x1
 7030 0eb7 9907     		.2byte	0x799
 7031 0eb9 E0070000 		.4byte	0x7e0
 7032 0ebd 11080000 		.4byte	.LLST57
 7033 0ec1 00       		.byte	0
 7034 0ec2 2B       		.uleb128 0x2b
 7035 0ec3 48040000 		.4byte	0x448
 7036 0ec7 AA000000 		.4byte	.LBB50
 7037 0ecb 04000000 		.4byte	.LBE50-.LBB50
 7038 0ecf 01       		.byte	0x1
 7039 0ed0 A807     		.2byte	0x7a8
 7040 0ed2 E00E0000 		.4byte	0xee0
 7041 0ed6 2E       		.uleb128 0x2e
 7042 0ed7 54040000 		.4byte	0x454
 7043 0edb 24080000 		.4byte	.LLST58
 7044 0edf 00       		.byte	0
 7045 0ee0 23       		.uleb128 0x23
 7046 0ee1 1C000000 		.4byte	.LVL158
 7047 0ee5 9F040000 		.4byte	0x49f
 7048 0ee9 F40E0000 		.4byte	0xef4
 7049 0eed 1F       		.uleb128 0x1f
 7050 0eee 01       		.uleb128 0x1
 7051 0eef 50       		.byte	0x50
 7052 0ef0 02       		.uleb128 0x2
 7053 0ef1 74       		.byte	0x74
 7054 0ef2 00       		.sleb128 0
 7055 0ef3 00       		.byte	0
 7056 0ef4 23       		.uleb128 0x23
 7057 0ef5 4C000000 		.4byte	.LVL162
 7058 0ef9 CB220000 		.4byte	0x22cb
 7059 0efd 080F0000 		.4byte	0xf08
 7060 0f01 1F       		.uleb128 0x1f
 7061 0f02 01       		.uleb128 0x1
 7062 0f03 50       		.byte	0x50
 7063 0f04 02       		.uleb128 0x2
 7064 0f05 77       		.byte	0x77
 7065 0f06 00       		.sleb128 0
 7066 0f07 00       		.byte	0
 7067 0f08 1E       		.uleb128 0x1e
 7068 0f09 A4000000 		.4byte	.LVL166
 7069 0f0d F7220000 		.4byte	0x22f7
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 236


 7070 0f11 1F       		.uleb128 0x1f
 7071 0f12 01       		.uleb128 0x1
 7072 0f13 50       		.byte	0x50
 7073 0f14 05       		.uleb128 0x5
 7074 0f15 03       		.byte	0x3
 7075 0f16 14000000 		.4byte	.LANCHOR0+20
 7076 0f1a 1F       		.uleb128 0x1f
 7077 0f1b 01       		.uleb128 0x1
 7078 0f1c 51       		.byte	0x51
 7079 0f1d 02       		.uleb128 0x2
 7080 0f1e 74       		.byte	0x74
 7081 0f1f 18       		.sleb128 24
 7082 0f20 00       		.byte	0
 7083 0f21 00       		.byte	0
 7084 0f22 28       		.uleb128 0x28
 7085 0f23 4F020000 		.4byte	.LASF135
 7086 0f27 01       		.byte	0x1
 7087 0f28 B007     		.2byte	0x7b0
 7088 0f2a 00000000 		.4byte	.LFB82
 7089 0f2e 60000000 		.4byte	.LFE82-.LFB82
 7090 0f32 01       		.uleb128 0x1
 7091 0f33 9C       		.byte	0x9c
 7092 0f34 B10F0000 		.4byte	0xfb1
 7093 0f38 1A       		.uleb128 0x1a
 7094 0f39 14040000 		.4byte	.LASF87
 7095 0f3d 01       		.byte	0x1
 7096 0f3e B207     		.2byte	0x7b2
 7097 0f40 35010000 		.4byte	0x135
 7098 0f44 37080000 		.4byte	.LLST59
 7099 0f48 2B       		.uleb128 0x2b
 7100 0f49 60040000 		.4byte	0x460
 7101 0f4d 1A000000 		.4byte	.LBB52
 7102 0f51 10000000 		.4byte	.LBE52-.LBB52
 7103 0f55 01       		.byte	0x1
 7104 0f56 F807     		.2byte	0x7f8
 7105 0f58 6C0F0000 		.4byte	0xf6c
 7106 0f5c 25       		.uleb128 0x25
 7107 0f5d 1A000000 		.4byte	.LBB53
 7108 0f61 10000000 		.4byte	.LBE53-.LBB53
 7109 0f65 2C       		.uleb128 0x2c
 7110 0f66 6C040000 		.4byte	0x46c
 7111 0f6a 00       		.byte	0
 7112 0f6b 00       		.byte	0
 7113 0f6c 23       		.uleb128 0x23
 7114 0f6d 16000000 		.4byte	.LVL170
 7115 0f71 16090000 		.4byte	0x916
 7116 0f75 A70F0000 		.4byte	0xfa7
 7117 0f79 1F       		.uleb128 0x1f
 7118 0f7a 01       		.uleb128 0x1
 7119 0f7b 50       		.byte	0x50
 7120 0f7c 05       		.uleb128 0x5
 7121 0f7d 03       		.byte	0x3
 7122 0f7e 00000000 		.4byte	prvIdleTask
 7123 0f82 1F       		.uleb128 0x1f
 7124 0f83 01       		.uleb128 0x1
 7125 0f84 51       		.byte	0x51
 7126 0f85 05       		.uleb128 0x5
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 237


 7127 0f86 03       		.byte	0x3
 7128 0f87 00000000 		.4byte	.LC0
 7129 0f8b 1F       		.uleb128 0x1f
 7130 0f8c 01       		.uleb128 0x1
 7131 0f8d 52       		.byte	0x52
 7132 0f8e 02       		.uleb128 0x2
 7133 0f8f 08       		.byte	0x8
 7134 0f90 64       		.byte	0x64
 7135 0f91 1F       		.uleb128 0x1f
 7136 0f92 01       		.uleb128 0x1
 7137 0f93 53       		.byte	0x53
 7138 0f94 01       		.uleb128 0x1
 7139 0f95 30       		.byte	0x30
 7140 0f96 1F       		.uleb128 0x1f
 7141 0f97 02       		.uleb128 0x2
 7142 0f98 7D       		.byte	0x7d
 7143 0f99 00       		.sleb128 0
 7144 0f9a 01       		.uleb128 0x1
 7145 0f9b 30       		.byte	0x30
 7146 0f9c 1F       		.uleb128 0x1f
 7147 0f9d 02       		.uleb128 0x2
 7148 0f9e 7D       		.byte	0x7d
 7149 0f9f 04       		.sleb128 4
 7150 0fa0 05       		.uleb128 0x5
 7151 0fa1 03       		.byte	0x3
 7152 0fa2 F8000000 		.4byte	.LANCHOR0+248
 7153 0fa6 00       		.byte	0
 7154 0fa7 1D       		.uleb128 0x1d
 7155 0fa8 42000000 		.4byte	.LVL171
 7156 0fac 03230000 		.4byte	0x2303
 7157 0fb0 00       		.byte	0
 7158 0fb1 28       		.uleb128 0x28
 7159 0fb2 740C0000 		.4byte	.LASF136
 7160 0fb6 01       		.byte	0x1
 7161 0fb7 2D08     		.2byte	0x82d
 7162 0fb9 00000000 		.4byte	.LFB83
 7163 0fbd 24000000 		.4byte	.LFE83-.LFB83
 7164 0fc1 01       		.uleb128 0x1
 7165 0fc2 9C       		.byte	0x9c
 7166 0fc3 F50F0000 		.4byte	0xff5
 7167 0fc7 2B       		.uleb128 0x2b
 7168 0fc8 60040000 		.4byte	0x460
 7169 0fcc 02000000 		.4byte	.LBB54
 7170 0fd0 10000000 		.4byte	.LBE54-.LBB54
 7171 0fd4 01       		.byte	0x1
 7172 0fd5 3208     		.2byte	0x832
 7173 0fd7 EB0F0000 		.4byte	0xfeb
 7174 0fdb 25       		.uleb128 0x25
 7175 0fdc 02000000 		.4byte	.LBB55
 7176 0fe0 10000000 		.4byte	.LBE55-.LBB55
 7177 0fe4 2C       		.uleb128 0x2c
 7178 0fe5 6C040000 		.4byte	0x46c
 7179 0fe9 00       		.byte	0
 7180 0fea 00       		.byte	0
 7181 0feb 1D       		.uleb128 0x1d
 7182 0fec 1E000000 		.4byte	.LVL172
 7183 0ff0 0E230000 		.4byte	0x230e
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 238


 7184 0ff4 00       		.byte	0
 7185 0ff5 2F       		.uleb128 0x2f
 7186 0ff6 D0090000 		.4byte	.LASF177
 7187 0ffa 01       		.byte	0x1
 7188 0ffb 3808     		.2byte	0x838
 7189 0ffd 00000000 		.4byte	.LFB84
 7190 1001 14000000 		.4byte	.LFE84-.LFB84
 7191 1005 01       		.uleb128 0x1
 7192 1006 9C       		.byte	0x9c
 7193 1007 27       		.uleb128 0x27
 7194 1008 3D020000 		.4byte	.LASF137
 7195 100c 01       		.byte	0x1
 7196 100d FC08     		.2byte	0x8fc
 7197 100f 4B010000 		.4byte	0x14b
 7198 1013 00000000 		.4byte	.LFB86
 7199 1017 0C000000 		.4byte	.LFE86-.LFB86
 7200 101b 01       		.uleb128 0x1
 7201 101c 9C       		.byte	0x9c
 7202 101d 30100000 		.4byte	0x1030
 7203 1021 21       		.uleb128 0x21
 7204 1022 EC060000 		.4byte	.LASF138
 7205 1026 01       		.byte	0x1
 7206 1027 FE08     		.2byte	0x8fe
 7207 1029 4B010000 		.4byte	0x14b
 7208 102d 01       		.uleb128 0x1
 7209 102e 50       		.byte	0x50
 7210 102f 00       		.byte	0
 7211 1030 27       		.uleb128 0x27
 7212 1031 5E000000 		.4byte	.LASF139
 7213 1035 01       		.byte	0x1
 7214 1036 0B09     		.2byte	0x90b
 7215 1038 4B010000 		.4byte	0x14b
 7216 103c 00000000 		.4byte	.LFB87
 7217 1040 0C000000 		.4byte	.LFE87-.LFB87
 7218 1044 01       		.uleb128 0x1
 7219 1045 9C       		.byte	0x9c
 7220 1046 66100000 		.4byte	0x1066
 7221 104a 21       		.uleb128 0x21
 7222 104b 14040000 		.4byte	.LASF87
 7223 104f 01       		.byte	0x1
 7224 1050 0D09     		.2byte	0x90d
 7225 1052 4B010000 		.4byte	0x14b
 7226 1056 01       		.uleb128 0x1
 7227 1057 50       		.byte	0x50
 7228 1058 30       		.uleb128 0x30
 7229 1059 7E080000 		.4byte	.LASF134
 7230 105d 01       		.byte	0x1
 7231 105e 0E09     		.2byte	0x90e
 7232 1060 40010000 		.4byte	0x140
 7233 1064 00       		.byte	0
 7234 1065 00       		.byte	0
 7235 1066 31       		.uleb128 0x31
 7236 1067 2F010000 		.4byte	.LASF191
 7237 106b 01       		.byte	0x1
 7238 106c 2A09     		.2byte	0x92a
 7239 106e 40010000 		.4byte	0x140
 7240 1072 00000000 		.4byte	.LFB88
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 239


 7241 1076 0C000000 		.4byte	.LFE88-.LFB88
 7242 107a 01       		.uleb128 0x1
 7243 107b 9C       		.byte	0x9c
 7244 107c 27       		.uleb128 0x27
 7245 107d D4070000 		.4byte	.LASF140
 7246 1081 01       		.byte	0x1
 7247 1082 3209     		.2byte	0x932
 7248 1084 B2000000 		.4byte	0xb2
 7249 1088 00000000 		.4byte	.LFB89
 7250 108c 14000000 		.4byte	.LFE89-.LFB89
 7251 1090 01       		.uleb128 0x1
 7252 1091 9C       		.byte	0x9c
 7253 1092 B5100000 		.4byte	0x10b5
 7254 1096 19       		.uleb128 0x19
 7255 1097 6B0E0000 		.4byte	.LASF141
 7256 109b 01       		.byte	0x1
 7257 109c 3209     		.2byte	0x932
 7258 109e 3F020000 		.4byte	0x23f
 7259 10a2 4A080000 		.4byte	.LLST60
 7260 10a6 21       		.uleb128 0x21
 7261 10a7 68100000 		.4byte	.LASF88
 7262 10ab 01       		.byte	0x1
 7263 10ac 3409     		.2byte	0x934
 7264 10ae 97050000 		.4byte	0x597
 7265 10b2 01       		.uleb128 0x1
 7266 10b3 53       		.byte	0x53
 7267 10b4 00       		.byte	0
 7268 10b5 27       		.uleb128 0x27
 7269 10b6 1D0C0000 		.4byte	.LASF142
 7270 10ba 01       		.byte	0x1
 7271 10bb DD0A     		.2byte	0xadd
 7272 10bd 35010000 		.4byte	0x135
 7273 10c1 00000000 		.4byte	.LFB91
 7274 10c5 50010000 		.4byte	.LFE91-.LFB91
 7275 10c9 01       		.uleb128 0x1
 7276 10ca 9C       		.byte	0x9c
 7277 10cb 93110000 		.4byte	0x1193
 7278 10cf 1A       		.uleb128 0x1a
 7279 10d0 68100000 		.4byte	.LASF88
 7280 10d4 01       		.byte	0x1
 7281 10d5 DF0A     		.2byte	0xadf
 7282 10d7 97050000 		.4byte	0x597
 7283 10db 5D080000 		.4byte	.LLST61
 7284 10df 1A       		.uleb128 0x1a
 7285 10e0 5D100000 		.4byte	.LASF28
 7286 10e4 01       		.byte	0x1
 7287 10e5 E00A     		.2byte	0xae0
 7288 10e7 4B010000 		.4byte	0x14b
 7289 10eb 7B080000 		.4byte	.LLST62
 7290 10ef 1A       		.uleb128 0x1a
 7291 10f0 DB0C0000 		.4byte	.LASF143
 7292 10f4 01       		.byte	0x1
 7293 10f5 E10A     		.2byte	0xae1
 7294 10f7 35010000 		.4byte	0x135
 7295 10fb 9A080000 		.4byte	.LLST63
 7296 10ff 32       		.uleb128 0x32
 7297 1100 20000000 		.4byte	.Ldebug_ranges0+0x20
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 240


 7298 1104 1A       		.uleb128 0x1a
 7299 1105 A60A0000 		.4byte	.LASF111
 7300 1109 01       		.byte	0x1
 7301 110a EC0A     		.2byte	0xaec
 7302 110c 11090000 		.4byte	0x911
 7303 1110 E7080000 		.4byte	.LLST64
 7304 1114 24       		.uleb128 0x24
 7305 1115 1C000000 		.4byte	.LBB57
 7306 1119 1A000000 		.4byte	.LBE57-.LBB57
 7307 111d 3B110000 		.4byte	0x113b
 7308 1121 1A       		.uleb128 0x1a
 7309 1122 170D0000 		.4byte	.LASF144
 7310 1126 01       		.byte	0x1
 7311 1127 F40A     		.2byte	0xaf4
 7312 1129 93110000 		.4byte	0x1193
 7313 112d 05090000 		.4byte	.LLST65
 7314 1131 1D       		.uleb128 0x1d
 7315 1132 36000000 		.4byte	.LVL183
 7316 1136 45050000 		.4byte	0x545
 7317 113a 00       		.byte	0
 7318 113b 24       		.uleb128 0x24
 7319 113c 6E000000 		.4byte	.LBB58
 7320 1140 24000000 		.4byte	.LBE58-.LBB58
 7321 1144 59110000 		.4byte	0x1159
 7322 1148 1A       		.uleb128 0x1a
 7323 1149 D40C0000 		.4byte	.LASF145
 7324 114d 01       		.byte	0x1
 7325 114e 260B     		.2byte	0xb26
 7326 1150 99110000 		.4byte	0x1199
 7327 1154 27090000 		.4byte	.LLST66
 7328 1158 00       		.byte	0
 7329 1159 24       		.uleb128 0x24
 7330 115a 96000000 		.4byte	.LBB59
 7331 115e 24000000 		.4byte	.LBE59-.LBB59
 7332 1162 77110000 		.4byte	0x1177
 7333 1166 1A       		.uleb128 0x1a
 7334 1167 D40C0000 		.4byte	.LASF145
 7335 116b 01       		.byte	0x1
 7336 116c 2C0B     		.2byte	0xb2c
 7337 116e 99110000 		.4byte	0x1199
 7338 1172 3A090000 		.4byte	.LLST67
 7339 1176 00       		.byte	0
 7340 1177 25       		.uleb128 0x25
 7341 1178 CE000000 		.4byte	.LBB60
 7342 117c 38000000 		.4byte	.LBE60-.LBB60
 7343 1180 1A       		.uleb128 0x1a
 7344 1181 D9040000 		.4byte	.LASF36
 7345 1185 01       		.byte	0x1
 7346 1186 350B     		.2byte	0xb35
 7347 1188 E0070000 		.4byte	0x7e0
 7348 118c 4D090000 		.4byte	.LLST68
 7349 1190 00       		.byte	0
 7350 1191 00       		.byte	0
 7351 1192 00       		.byte	0
 7352 1193 06       		.uleb128 0x6
 7353 1194 04       		.byte	0x4
 7354 1195 34020000 		.4byte	0x234
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 241


 7355 1199 07       		.uleb128 0x7
 7356 119a 93110000 		.4byte	0x1193
 7357 119e 27       		.uleb128 0x27
 7358 119f 550A0000 		.4byte	.LASF146
 7359 11a3 01       		.byte	0x1
 7360 11a4 8C08     		.2byte	0x88c
 7361 11a6 35010000 		.4byte	0x135
 7362 11aa 00000000 		.4byte	.LFB85
 7363 11ae 44010000 		.4byte	.LFE85-.LFB85
 7364 11b2 01       		.uleb128 0x1
 7365 11b3 9C       		.byte	0x9c
 7366 11b4 75120000 		.4byte	0x1275
 7367 11b8 1A       		.uleb128 0x1a
 7368 11b9 68100000 		.4byte	.LASF88
 7369 11bd 01       		.byte	0x1
 7370 11be 8E08     		.2byte	0x88e
 7371 11c0 97050000 		.4byte	0x597
 7372 11c4 60090000 		.4byte	.LLST69
 7373 11c8 1A       		.uleb128 0x1a
 7374 11c9 FE0C0000 		.4byte	.LASF147
 7375 11cd 01       		.byte	0x1
 7376 11ce 8F08     		.2byte	0x88f
 7377 11d0 35010000 		.4byte	0x135
 7378 11d4 AD090000 		.4byte	.LLST70
 7379 11d8 24       		.uleb128 0x24
 7380 11d9 30000000 		.4byte	.LBB63
 7381 11dd 26000000 		.4byte	.LBE63-.LBB63
 7382 11e1 F6110000 		.4byte	0x11f6
 7383 11e5 1A       		.uleb128 0x1a
 7384 11e6 D40C0000 		.4byte	.LASF145
 7385 11ea 01       		.byte	0x1
 7386 11eb A708     		.2byte	0x8a7
 7387 11ed 99110000 		.4byte	0x1199
 7388 11f1 EF090000 		.4byte	.LLST71
 7389 11f5 00       		.byte	0
 7390 11f6 24       		.uleb128 0x24
 7391 11f7 56000000 		.4byte	.LBB64
 7392 11fb 24000000 		.4byte	.LBE64-.LBB64
 7393 11ff 14120000 		.4byte	0x1214
 7394 1203 1A       		.uleb128 0x1a
 7395 1204 D40C0000 		.4byte	.LASF145
 7396 1208 01       		.byte	0x1
 7397 1209 A908     		.2byte	0x8a9
 7398 120b 99110000 		.4byte	0x1199
 7399 120f 020A0000 		.4byte	.LLST72
 7400 1213 00       		.byte	0
 7401 1214 24       		.uleb128 0x24
 7402 1215 8E000000 		.4byte	.LBB65
 7403 1219 38000000 		.4byte	.LBE65-.LBB65
 7404 121d 32120000 		.4byte	0x1232
 7405 1221 1A       		.uleb128 0x1a
 7406 1222 D9040000 		.4byte	.LASF36
 7407 1226 01       		.byte	0x1
 7408 1227 AA08     		.2byte	0x8aa
 7409 1229 E0070000 		.4byte	0x7e0
 7410 122d 150A0000 		.4byte	.LLST73
 7411 1231 00       		.byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 242


 7412 1232 24       		.uleb128 0x24
 7413 1233 EE000000 		.4byte	.LBB66
 7414 1237 22000000 		.4byte	.LBE66-.LBB66
 7415 123b 59120000 		.4byte	0x1259
 7416 123f 1A       		.uleb128 0x1a
 7417 1240 1C040000 		.4byte	.LASF148
 7418 1244 01       		.byte	0x1
 7419 1245 C808     		.2byte	0x8c8
 7420 1247 4B010000 		.4byte	0x14b
 7421 124b 280A0000 		.4byte	.LLST74
 7422 124f 1D       		.uleb128 0x1d
 7423 1250 FA000000 		.4byte	.LVL220
 7424 1254 B5100000 		.4byte	0x10b5
 7425 1258 00       		.byte	0
 7426 1259 1D       		.uleb128 0x1d
 7427 125a 06000000 		.4byte	.LVL207
 7428 125e B5220000 		.4byte	0x22b5
 7429 1262 1D       		.uleb128 0x1d
 7430 1263 EE000000 		.4byte	.LVL218
 7431 1267 45050000 		.4byte	0x545
 7432 126b 1D       		.uleb128 0x1d
 7433 126c 36010000 		.4byte	.LVL228
 7434 1270 C0220000 		.4byte	0x22c0
 7435 1274 00       		.byte	0
 7436 1275 27       		.uleb128 0x27
 7437 1276 C4070000 		.4byte	.LASF149
 7438 127a 01       		.byte	0x1
 7439 127b C204     		.2byte	0x4c2
 7440 127d 35010000 		.4byte	0x135
 7441 1281 00000000 		.4byte	.LFB72
 7442 1285 6C000000 		.4byte	.LFE72-.LFB72
 7443 1289 01       		.uleb128 0x1
 7444 128a 9C       		.byte	0x9c
 7445 128b 1B130000 		.4byte	0x131b
 7446 128f 19       		.uleb128 0x19
 7447 1290 42070000 		.4byte	.LASF150
 7448 1294 01       		.byte	0x1
 7449 1295 C204     		.2byte	0x4c2
 7450 1297 21130000 		.4byte	0x1321
 7451 129b 5E0A0000 		.4byte	.LLST75
 7452 129f 19       		.uleb128 0x19
 7453 12a0 7F0B0000 		.4byte	.LASF151
 7454 12a4 01       		.byte	0x1
 7455 12a5 C304     		.2byte	0x4c3
 7456 12a7 11090000 		.4byte	0x911
 7457 12ab 8A0A0000 		.4byte	.LLST76
 7458 12af 1A       		.uleb128 0x1a
 7459 12b0 66090000 		.4byte	.LASF110
 7460 12b4 01       		.byte	0x1
 7461 12b5 C504     		.2byte	0x4c5
 7462 12b7 4B010000 		.4byte	0x14b
 7463 12bb 330B0000 		.4byte	.LLST77
 7464 12bf 1A       		.uleb128 0x1a
 7465 12c0 FE0C0000 		.4byte	.LASF147
 7466 12c4 01       		.byte	0x1
 7467 12c5 C604     		.2byte	0x4c6
 7468 12c7 35010000 		.4byte	0x135
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 243


 7469 12cb 460B0000 		.4byte	.LLST78
 7470 12cf 1A       		.uleb128 0x1a
 7471 12d0 100B0000 		.4byte	.LASF152
 7472 12d4 01       		.byte	0x1
 7473 12d5 C604     		.2byte	0x4c6
 7474 12d7 35010000 		.4byte	0x135
 7475 12db 590B0000 		.4byte	.LLST79
 7476 12df 29       		.uleb128 0x29
 7477 12e0 40000000 		.4byte	.Ldebug_ranges0+0x40
 7478 12e4 08130000 		.4byte	0x1308
 7479 12e8 1A       		.uleb128 0x1a
 7480 12e9 A60A0000 		.4byte	.LASF111
 7481 12ed 01       		.byte	0x1
 7482 12ee D004     		.2byte	0x4d0
 7483 12f0 11090000 		.4byte	0x911
 7484 12f4 830B0000 		.4byte	.LLST80
 7485 12f8 1E       		.uleb128 0x1e
 7486 12f9 4A000000 		.4byte	.LVL247
 7487 12fd 7C080000 		.4byte	0x87c
 7488 1301 1F       		.uleb128 0x1f
 7489 1302 01       		.uleb128 0x1
 7490 1303 51       		.byte	0x51
 7491 1304 01       		.uleb128 0x1
 7492 1305 30       		.byte	0x30
 7493 1306 00       		.byte	0
 7494 1307 00       		.byte	0
 7495 1308 1D       		.uleb128 0x1d
 7496 1309 0A000000 		.4byte	.LVL232
 7497 130d F50F0000 		.4byte	0xff5
 7498 1311 1D       		.uleb128 0x1d
 7499 1312 4E000000 		.4byte	.LVL248
 7500 1316 9E110000 		.4byte	0x119e
 7501 131a 00       		.byte	0
 7502 131b 06       		.uleb128 0x6
 7503 131c 04       		.byte	0x4
 7504 131d 4B010000 		.4byte	0x14b
 7505 1321 07       		.uleb128 0x7
 7506 1322 1B130000 		.4byte	0x131b
 7507 1326 28       		.uleb128 0x28
 7508 1327 960B0000 		.4byte	.LASF153
 7509 132b 01       		.byte	0x1
 7510 132c 1905     		.2byte	0x519
 7511 132e 00000000 		.4byte	.LFB73
 7512 1332 34000000 		.4byte	.LFE73-.LFB73
 7513 1336 01       		.uleb128 0x1
 7514 1337 9C       		.byte	0x9c
 7515 1338 88130000 		.4byte	0x1388
 7516 133c 19       		.uleb128 0x19
 7517 133d 1C080000 		.4byte	.LASF154
 7518 1341 01       		.byte	0x1
 7519 1342 1905     		.2byte	0x519
 7520 1344 11090000 		.4byte	0x911
 7521 1348 960B0000 		.4byte	.LLST81
 7522 134c 1A       		.uleb128 0x1a
 7523 134d FE0C0000 		.4byte	.LASF147
 7524 1351 01       		.byte	0x1
 7525 1352 1B05     		.2byte	0x51b
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 244


 7526 1354 35010000 		.4byte	0x135
 7527 1358 CD0B0000 		.4byte	.LLST82
 7528 135c 1D       		.uleb128 0x1d
 7529 135d 0A000000 		.4byte	.LVL253
 7530 1361 F50F0000 		.4byte	0xff5
 7531 1365 23       		.uleb128 0x23
 7532 1366 12000000 		.4byte	.LVL254
 7533 136a 7C080000 		.4byte	0x87c
 7534 136e 7E130000 		.4byte	0x137e
 7535 1372 1F       		.uleb128 0x1f
 7536 1373 01       		.uleb128 0x1
 7537 1374 50       		.byte	0x50
 7538 1375 02       		.uleb128 0x2
 7539 1376 74       		.byte	0x74
 7540 1377 00       		.sleb128 0
 7541 1378 1F       		.uleb128 0x1f
 7542 1379 01       		.uleb128 0x1
 7543 137a 51       		.byte	0x51
 7544 137b 01       		.uleb128 0x1
 7545 137c 30       		.byte	0x30
 7546 137d 00       		.byte	0
 7547 137e 1D       		.uleb128 0x1d
 7548 137f 16000000 		.4byte	.LVL255
 7549 1383 9E110000 		.4byte	0x119e
 7550 1387 00       		.byte	0
 7551 1388 27       		.uleb128 0x27
 7552 1389 21030000 		.4byte	.LASF155
 7553 138d 01       		.byte	0x1
 7554 138e 750A     		.2byte	0xa75
 7555 1390 35010000 		.4byte	0x135
 7556 1394 00000000 		.4byte	.LFB90
 7557 1398 28000000 		.4byte	.LFE90-.LFB90
 7558 139c 01       		.uleb128 0x1
 7559 139d 9C       		.byte	0x9c
 7560 139e E5130000 		.4byte	0x13e5
 7561 13a2 19       		.uleb128 0x19
 7562 13a3 72090000 		.4byte	.LASF156
 7563 13a7 01       		.byte	0x1
 7564 13a8 750A     		.2byte	0xa75
 7565 13aa 4B010000 		.4byte	0x14b
 7566 13ae 030C0000 		.4byte	.LLST83
 7567 13b2 21       		.uleb128 0x21
 7568 13b3 FD0F0000 		.4byte	.LASF157
 7569 13b7 01       		.byte	0x1
 7570 13b8 770A     		.2byte	0xa77
 7571 13ba 35010000 		.4byte	0x135
 7572 13be 01       		.uleb128 0x1
 7573 13bf 50       		.byte	0x50
 7574 13c0 1D       		.uleb128 0x1d
 7575 13c1 08000000 		.4byte	.LVL259
 7576 13c5 F50F0000 		.4byte	0xff5
 7577 13c9 1D       		.uleb128 0x1d
 7578 13ca 0C000000 		.4byte	.LVL260
 7579 13ce B5220000 		.4byte	0x22b5
 7580 13d2 1D       		.uleb128 0x1d
 7581 13d3 1C000000 		.4byte	.LVL262
 7582 13d7 C0220000 		.4byte	0x22c0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 245


 7583 13db 1D       		.uleb128 0x1d
 7584 13dc 20000000 		.4byte	.LVL263
 7585 13e0 9E110000 		.4byte	0x119e
 7586 13e4 00       		.byte	0
 7587 13e5 28       		.uleb128 0x28
 7588 13e6 66060000 		.4byte	.LASF158
 7589 13ea 01       		.byte	0x1
 7590 13eb FE0B     		.2byte	0xbfe
 7591 13ed 00000000 		.4byte	.LFB92
 7592 13f1 A4000000 		.4byte	.LFE92-.LFB92
 7593 13f5 01       		.uleb128 0x1
 7594 13f6 9C       		.byte	0x9c
 7595 13f7 97140000 		.4byte	0x1497
 7596 13fb 24       		.uleb128 0x24
 7597 13fc 1C000000 		.4byte	.LBB70
 7598 1400 36000000 		.4byte	.LBE70-.LBB70
 7599 1404 33140000 		.4byte	0x1433
 7600 1408 1A       		.uleb128 0x1a
 7601 1409 01060000 		.4byte	.LASF159
 7602 140d 01       		.byte	0x1
 7603 140e 280C     		.2byte	0xc28
 7604 1410 9D140000 		.4byte	0x149d
 7605 1414 2F0C0000 		.4byte	.LLST84
 7606 1418 33       		.uleb128 0x33
 7607 1419 59060000 		.4byte	.LASF160
 7608 141d 01       		.byte	0x1
 7609 141e 280C     		.2byte	0xc28
 7610 1420 B2060000 		.4byte	0x6b2
 7611 1424 A5CB96AD 		.sleb128 -1515870811
 7611      7A
 7612 1429 1D       		.uleb128 0x1d
 7613 142a 52000000 		.4byte	.LVL266
 7614 142e 19230000 		.4byte	0x2319
 7615 1432 00       		.byte	0
 7616 1433 25       		.uleb128 0x25
 7617 1434 52000000 		.4byte	.LBB71
 7618 1438 52000000 		.4byte	.LBE71-.LBB71
 7619 143c 1A       		.uleb128 0x1a
 7620 143d B00B0000 		.4byte	.LASF161
 7621 1441 01       		.byte	0x1
 7622 1442 330C     		.2byte	0xc33
 7623 1444 40010000 		.4byte	0x140
 7624 1448 420C0000 		.4byte	.LLST85
 7625 144c 2B       		.uleb128 0x2b
 7626 144d 78040000 		.4byte	0x478
 7627 1451 58000000 		.4byte	.LBB72
 7628 1455 06000000 		.4byte	.LBE72-.LBB72
 7629 1459 01       		.byte	0x1
 7630 145a 330C     		.2byte	0xc33
 7631 145c 7B140000 		.4byte	0x147b
 7632 1460 2E       		.uleb128 0x2e
 7633 1461 88040000 		.4byte	0x488
 7634 1465 550C0000 		.4byte	.LLST86
 7635 1469 25       		.uleb128 0x25
 7636 146a 58000000 		.4byte	.LBB73
 7637 146e 06000000 		.4byte	.LBE73-.LBB73
 7638 1472 34       		.uleb128 0x34
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 246


 7639 1473 93040000 		.4byte	0x493
 7640 1477 01       		.uleb128 0x1
 7641 1478 53       		.byte	0x53
 7642 1479 00       		.byte	0
 7643 147a 00       		.byte	0
 7644 147b 25       		.uleb128 0x25
 7645 147c 62000000 		.4byte	.LBB74
 7646 1480 42000000 		.4byte	.LBE74-.LBB74
 7647 1484 1A       		.uleb128 0x1a
 7648 1485 9A060000 		.4byte	.LASF162
 7649 1489 01       		.byte	0x1
 7650 148a 330C     		.2byte	0xc33
 7651 148c 99110000 		.4byte	0x1199
 7652 1490 680C0000 		.4byte	.LLST87
 7653 1494 00       		.byte	0
 7654 1495 00       		.byte	0
 7655 1496 00       		.byte	0
 7656 1497 06       		.uleb128 0x6
 7657 1498 04       		.byte	0x4
 7658 1499 B2060000 		.4byte	0x6b2
 7659 149d 07       		.uleb128 0x7
 7660 149e 97140000 		.4byte	0x1497
 7661 14a2 28       		.uleb128 0x28
 7662 14a3 340B0000 		.4byte	.LASF163
 7663 14a7 01       		.byte	0x1
 7664 14a8 9706     		.2byte	0x697
 7665 14aa 00000000 		.4byte	.LFB78
 7666 14ae D0000000 		.4byte	.LFE78-.LFB78
 7667 14b2 01       		.uleb128 0x1
 7668 14b3 9C       		.byte	0x9c
 7669 14b4 70150000 		.4byte	0x1570
 7670 14b8 19       		.uleb128 0x19
 7671 14b9 6A010000 		.4byte	.LASF164
 7672 14bd 01       		.byte	0x1
 7673 14be 9706     		.2byte	0x697
 7674 14c0 3F020000 		.4byte	0x23f
 7675 14c4 850C0000 		.4byte	.LLST88
 7676 14c8 1A       		.uleb128 0x1a
 7677 14c9 68100000 		.4byte	.LASF88
 7678 14cd 01       		.byte	0x1
 7679 14ce 9906     		.2byte	0x699
 7680 14d0 97050000 		.4byte	0x597
 7681 14d4 A30C0000 		.4byte	.LLST89
 7682 14d8 24       		.uleb128 0x24
 7683 14d9 50000000 		.4byte	.LBB75
 7684 14dd 1E000000 		.4byte	.LBE75-.LBB75
 7685 14e1 F4140000 		.4byte	0x14f4
 7686 14e5 22       		.uleb128 0x22
 7687 14e6 7800     		.ascii	"x\000"
 7688 14e8 01       		.byte	0x1
 7689 14e9 BC06     		.2byte	0x6bc
 7690 14eb 35010000 		.4byte	0x135
 7691 14ef B60C0000 		.4byte	.LLST90
 7692 14f3 00       		.byte	0
 7693 14f4 1D       		.uleb128 0x1d
 7694 14f5 08000000 		.4byte	.LVL272
 7695 14f9 B5220000 		.4byte	0x22b5
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 247


 7696 14fd 23       		.uleb128 0x23
 7697 14fe 18000000 		.4byte	.LVL274
 7698 1502 CB220000 		.4byte	0x22cb
 7699 1506 11150000 		.4byte	0x1511
 7700 150a 1F       		.uleb128 0x1f
 7701 150b 01       		.uleb128 0x1
 7702 150c 50       		.byte	0x50
 7703 150d 02       		.uleb128 0x2
 7704 150e 75       		.byte	0x75
 7705 150f 00       		.sleb128 0
 7706 1510 00       		.byte	0
 7707 1511 23       		.uleb128 0x23
 7708 1512 48000000 		.4byte	.LVL275
 7709 1516 CB220000 		.4byte	0x22cb
 7710 151a 25150000 		.4byte	0x1525
 7711 151e 1F       		.uleb128 0x1f
 7712 151f 01       		.uleb128 0x1
 7713 1520 50       		.byte	0x50
 7714 1521 02       		.uleb128 0x2
 7715 1522 74       		.byte	0x74
 7716 1523 18       		.sleb128 24
 7717 1524 00       		.byte	0
 7718 1525 23       		.uleb128 0x23
 7719 1526 50000000 		.4byte	.LVL276
 7720 152a F7220000 		.4byte	0x22f7
 7721 152e 42150000 		.4byte	0x1542
 7722 1532 1F       		.uleb128 0x1f
 7723 1533 01       		.uleb128 0x1
 7724 1534 50       		.byte	0x50
 7725 1535 05       		.uleb128 0x5
 7726 1536 03       		.byte	0x3
 7727 1537 00000000 		.4byte	.LANCHOR0
 7728 153b 1F       		.uleb128 0x1f
 7729 153c 01       		.uleb128 0x1
 7730 153d 51       		.byte	0x51
 7731 153e 02       		.uleb128 0x2
 7732 153f 75       		.byte	0x75
 7733 1540 00       		.sleb128 0
 7734 1541 00       		.byte	0
 7735 1542 1D       		.uleb128 0x1d
 7736 1543 72000000 		.4byte	.LVL279
 7737 1547 C0220000 		.4byte	0x22c0
 7738 154b 1D       		.uleb128 0x1d
 7739 154c 7E000000 		.4byte	.LVL280
 7740 1550 B5220000 		.4byte	0x22b5
 7741 1554 1D       		.uleb128 0x1d
 7742 1555 82000000 		.4byte	.LVL281
 7743 1559 45050000 		.4byte	0x545
 7744 155d 1D       		.uleb128 0x1d
 7745 155e 86000000 		.4byte	.LVL282
 7746 1562 C0220000 		.4byte	0x22c0
 7747 1566 1D       		.uleb128 0x1d
 7748 1567 C4000000 		.4byte	.LVL285
 7749 156b E5130000 		.4byte	0x13e5
 7750 156f 00       		.byte	0
 7751 1570 28       		.uleb128 0x28
 7752 1571 45080000 		.4byte	.LASF165
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 248


 7753 1575 01       		.byte	0x1
 7754 1576 480C     		.2byte	0xc48
 7755 1578 00000000 		.4byte	.LFB93
 7756 157c 20000000 		.4byte	.LFE93-.LFB93
 7757 1580 01       		.uleb128 0x1
 7758 1581 9C       		.byte	0x9c
 7759 1582 D1150000 		.4byte	0x15d1
 7760 1586 19       		.uleb128 0x19
 7761 1587 5C070000 		.4byte	.LASF118
 7762 158b 01       		.byte	0x1
 7763 158c 480C     		.2byte	0xc48
 7764 158e 99110000 		.4byte	0x1199
 7765 1592 D50C0000 		.4byte	.LLST91
 7766 1596 19       		.uleb128 0x19
 7767 1597 480A0000 		.4byte	.LASF108
 7768 159b 01       		.byte	0x1
 7769 159c 490C     		.2byte	0xc49
 7770 159e 11090000 		.4byte	0x911
 7771 15a2 F60C0000 		.4byte	.LLST92
 7772 15a6 23       		.uleb128 0x23
 7773 15a7 10000000 		.4byte	.LVL289
 7774 15ab D7220000 		.4byte	0x22d7
 7775 15af BB150000 		.4byte	0x15bb
 7776 15b3 1F       		.uleb128 0x1f
 7777 15b4 01       		.uleb128 0x1
 7778 15b5 50       		.byte	0x50
 7779 15b6 03       		.uleb128 0x3
 7780 15b7 F3       		.byte	0xf3
 7781 15b8 01       		.uleb128 0x1
 7782 15b9 50       		.byte	0x50
 7783 15ba 00       		.byte	0
 7784 15bb 1E       		.uleb128 0x1e
 7785 15bc 18000000 		.4byte	.LVL290
 7786 15c0 7C080000 		.4byte	0x87c
 7787 15c4 1F       		.uleb128 0x1f
 7788 15c5 01       		.uleb128 0x1
 7789 15c6 50       		.byte	0x50
 7790 15c7 02       		.uleb128 0x2
 7791 15c8 74       		.byte	0x74
 7792 15c9 00       		.sleb128 0
 7793 15ca 1F       		.uleb128 0x1f
 7794 15cb 01       		.uleb128 0x1
 7795 15cc 51       		.byte	0x51
 7796 15cd 01       		.uleb128 0x1
 7797 15ce 31       		.byte	0x31
 7798 15cf 00       		.byte	0
 7799 15d0 00       		.byte	0
 7800 15d1 28       		.uleb128 0x28
 7801 15d2 9D040000 		.4byte	.LASF166
 7802 15d6 01       		.byte	0x1
 7803 15d7 610C     		.2byte	0xc61
 7804 15d9 00000000 		.4byte	.LFB94
 7805 15dd 4C000000 		.4byte	.LFE94-.LFB94
 7806 15e1 01       		.uleb128 0x1
 7807 15e2 9C       		.byte	0x9c
 7808 15e3 4C160000 		.4byte	0x164c
 7809 15e7 19       		.uleb128 0x19
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 249


 7810 15e8 5C070000 		.4byte	.LASF118
 7811 15ec 01       		.byte	0x1
 7812 15ed 610C     		.2byte	0xc61
 7813 15ef 93110000 		.4byte	0x1193
 7814 15f3 220D0000 		.4byte	.LLST93
 7815 15f7 19       		.uleb128 0x19
 7816 15f8 5D100000 		.4byte	.LASF28
 7817 15fc 01       		.byte	0x1
 7818 15fd 620C     		.2byte	0xc62
 7819 15ff 11090000 		.4byte	0x911
 7820 1603 430D0000 		.4byte	.LLST94
 7821 1607 19       		.uleb128 0x19
 7822 1608 480A0000 		.4byte	.LASF108
 7823 160c 01       		.byte	0x1
 7824 160d 630C     		.2byte	0xc63
 7825 160f 11090000 		.4byte	0x911
 7826 1613 640D0000 		.4byte	.LLST95
 7827 1617 24       		.uleb128 0x24
 7828 1618 0E000000 		.4byte	.LBB76
 7829 161c 2E000000 		.4byte	.LBE76-.LBB76
 7830 1620 35160000 		.4byte	0x1635
 7831 1624 1A       		.uleb128 0x1a
 7832 1625 D9040000 		.4byte	.LASF36
 7833 1629 01       		.byte	0x1
 7834 162a 750C     		.2byte	0xc75
 7835 162c E0070000 		.4byte	0x7e0
 7836 1630 850D0000 		.4byte	.LLST96
 7837 1634 00       		.byte	0
 7838 1635 1E       		.uleb128 0x1e
 7839 1636 44000000 		.4byte	.LVL297
 7840 163a 7C080000 		.4byte	0x87c
 7841 163e 1F       		.uleb128 0x1f
 7842 163f 01       		.uleb128 0x1
 7843 1640 50       		.byte	0x50
 7844 1641 03       		.uleb128 0x3
 7845 1642 F3       		.byte	0xf3
 7846 1643 01       		.uleb128 0x1
 7847 1644 52       		.byte	0x52
 7848 1645 1F       		.uleb128 0x1f
 7849 1646 01       		.uleb128 0x1
 7850 1647 51       		.byte	0x51
 7851 1648 01       		.uleb128 0x1
 7852 1649 31       		.byte	0x31
 7853 164a 00       		.byte	0
 7854 164b 00       		.byte	0
 7855 164c 27       		.uleb128 0x27
 7856 164d 700A0000 		.4byte	.LASF167
 7857 1651 01       		.byte	0x1
 7858 1652 9E0C     		.2byte	0xc9e
 7859 1654 35010000 		.4byte	0x135
 7860 1658 00000000 		.4byte	.LFB95
 7861 165c E8000000 		.4byte	.LFE95-.LFB95
 7862 1660 01       		.uleb128 0x1
 7863 1661 9C       		.byte	0x9c
 7864 1662 0B170000 		.4byte	0x170b
 7865 1666 19       		.uleb128 0x19
 7866 1667 5C070000 		.4byte	.LASF118
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 250


 7867 166b 01       		.byte	0x1
 7868 166c 9E0C     		.2byte	0xc9e
 7869 166e 0B170000 		.4byte	0x170b
 7870 1672 980D0000 		.4byte	.LLST97
 7871 1676 1A       		.uleb128 0x1a
 7872 1677 FB090000 		.4byte	.LASF168
 7873 167b 01       		.byte	0x1
 7874 167c A00C     		.2byte	0xca0
 7875 167e 97050000 		.4byte	0x597
 7876 1682 B90D0000 		.4byte	.LLST98
 7877 1686 1A       		.uleb128 0x1a
 7878 1687 14040000 		.4byte	.LASF87
 7879 168b 01       		.byte	0x1
 7880 168c A10C     		.2byte	0xca1
 7881 168e 35010000 		.4byte	0x135
 7882 1692 CC0D0000 		.4byte	.LLST99
 7883 1696 24       		.uleb128 0x24
 7884 1697 06000000 		.4byte	.LBB77
 7885 169b 26000000 		.4byte	.LBE77-.LBB77
 7886 169f B4160000 		.4byte	0x16b4
 7887 16a3 1A       		.uleb128 0x1a
 7888 16a4 D40C0000 		.4byte	.LASF145
 7889 16a8 01       		.byte	0x1
 7890 16a9 B20C     		.2byte	0xcb2
 7891 16ab 99110000 		.4byte	0x1199
 7892 16af EB0D0000 		.4byte	.LLST100
 7893 16b3 00       		.byte	0
 7894 16b4 24       		.uleb128 0x24
 7895 16b5 36000000 		.4byte	.LBB78
 7896 16b9 24000000 		.4byte	.LBE78-.LBB78
 7897 16bd D2160000 		.4byte	0x16d2
 7898 16c1 1A       		.uleb128 0x1a
 7899 16c2 D40C0000 		.4byte	.LASF145
 7900 16c6 01       		.byte	0x1
 7901 16c7 B60C     		.2byte	0xcb6
 7902 16c9 99110000 		.4byte	0x1199
 7903 16cd FE0D0000 		.4byte	.LLST101
 7904 16d1 00       		.byte	0
 7905 16d2 24       		.uleb128 0x24
 7906 16d3 6E000000 		.4byte	.LBB79
 7907 16d7 38000000 		.4byte	.LBE79-.LBB79
 7908 16db F0160000 		.4byte	0x16f0
 7909 16df 1A       		.uleb128 0x1a
 7910 16e0 D9040000 		.4byte	.LASF36
 7911 16e4 01       		.byte	0x1
 7912 16e5 B70C     		.2byte	0xcb7
 7913 16e7 E0070000 		.4byte	0x7e0
 7914 16eb 110E0000 		.4byte	.LLST102
 7915 16ef 00       		.byte	0
 7916 16f0 25       		.uleb128 0x25
 7917 16f1 A8000000 		.4byte	.LBB80
 7918 16f5 1C000000 		.4byte	.LBE80-.LBB80
 7919 16f9 1A       		.uleb128 0x1a
 7920 16fa D9040000 		.4byte	.LASF36
 7921 16fe 01       		.byte	0x1
 7922 16ff CB0C     		.2byte	0xccb
 7923 1701 E0070000 		.4byte	0x7e0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 251


 7924 1705 240E0000 		.4byte	.LLST103
 7925 1709 00       		.byte	0
 7926 170a 00       		.byte	0
 7927 170b 07       		.uleb128 0x7
 7928 170c D60B0000 		.4byte	0xbd6
 7929 1710 28       		.uleb128 0x28
 7930 1711 BE0E0000 		.4byte	.LASF169
 7931 1715 01       		.byte	0x1
 7932 1716 E20C     		.2byte	0xce2
 7933 1718 00000000 		.4byte	.LFB96
 7934 171c BC000000 		.4byte	.LFE96-.LFB96
 7935 1720 01       		.uleb128 0x1
 7936 1721 9C       		.byte	0x9c
 7937 1722 AD170000 		.4byte	0x17ad
 7938 1726 19       		.uleb128 0x19
 7939 1727 E0080000 		.4byte	.LASF170
 7940 172b 01       		.byte	0x1
 7941 172c E20C     		.2byte	0xce2
 7942 172e 2E020000 		.4byte	0x22e
 7943 1732 370E0000 		.4byte	.LLST104
 7944 1736 19       		.uleb128 0x19
 7945 1737 5D100000 		.4byte	.LASF28
 7946 173b 01       		.byte	0x1
 7947 173c E30C     		.2byte	0xce3
 7948 173e 11090000 		.4byte	0x911
 7949 1742 580E0000 		.4byte	.LLST105
 7950 1746 1A       		.uleb128 0x1a
 7951 1747 FB090000 		.4byte	.LASF168
 7952 174b 01       		.byte	0x1
 7953 174c E50C     		.2byte	0xce5
 7954 174e 97050000 		.4byte	0x597
 7955 1752 790E0000 		.4byte	.LLST106
 7956 1756 24       		.uleb128 0x24
 7957 1757 0A000000 		.4byte	.LBB81
 7958 175b 22000000 		.4byte	.LBE81-.LBB81
 7959 175f 74170000 		.4byte	0x1774
 7960 1763 1A       		.uleb128 0x1a
 7961 1764 D40C0000 		.4byte	.LASF145
 7962 1768 01       		.byte	0x1
 7963 1769 F20C     		.2byte	0xcf2
 7964 176b 99110000 		.4byte	0x1199
 7965 176f 8C0E0000 		.4byte	.LLST107
 7966 1773 00       		.byte	0
 7967 1774 24       		.uleb128 0x24
 7968 1775 2C000000 		.4byte	.LBB82
 7969 1779 24000000 		.4byte	.LBE82-.LBB82
 7970 177d 92170000 		.4byte	0x1792
 7971 1781 1A       		.uleb128 0x1a
 7972 1782 D40C0000 		.4byte	.LASF145
 7973 1786 01       		.byte	0x1
 7974 1787 050D     		.2byte	0xd05
 7975 1789 99110000 		.4byte	0x1199
 7976 178d 9F0E0000 		.4byte	.LLST108
 7977 1791 00       		.byte	0
 7978 1792 25       		.uleb128 0x25
 7979 1793 64000000 		.4byte	.LBB83
 7980 1797 38000000 		.4byte	.LBE83-.LBB83
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 252


 7981 179b 1A       		.uleb128 0x1a
 7982 179c D9040000 		.4byte	.LASF36
 7983 17a0 01       		.byte	0x1
 7984 17a1 060D     		.2byte	0xd06
 7985 17a3 E0070000 		.4byte	0x7e0
 7986 17a7 B20E0000 		.4byte	.LLST109
 7987 17ab 00       		.byte	0
 7988 17ac 00       		.byte	0
 7989 17ad 28       		.uleb128 0x28
 7990 17ae AF070000 		.4byte	.LASF171
 7991 17b2 01       		.byte	0x1
 7992 17b3 130D     		.2byte	0xd13
 7993 17b5 00000000 		.4byte	.LFB97
 7994 17b9 20000000 		.4byte	.LFE97-.LFB97
 7995 17bd 01       		.uleb128 0x1
 7996 17be 9C       		.byte	0x9c
 7997 17bf E6170000 		.4byte	0x17e6
 7998 17c3 19       		.uleb128 0x19
 7999 17c4 38070000 		.4byte	.LASF172
 8000 17c8 01       		.byte	0x1
 8001 17c9 130D     		.2byte	0xd13
 8002 17cb EC170000 		.4byte	0x17ec
 8003 17cf C50E0000 		.4byte	.LLST110
 8004 17d3 1D       		.uleb128 0x1d
 8005 17d4 08000000 		.4byte	.LVL324
 8006 17d8 B5220000 		.4byte	0x22b5
 8007 17dc 1D       		.uleb128 0x1d
 8008 17dd 1A000000 		.4byte	.LVL325
 8009 17e1 C0220000 		.4byte	0x22c0
 8010 17e5 00       		.byte	0
 8011 17e6 06       		.uleb128 0x6
 8012 17e7 04       		.byte	0x4
 8013 17e8 77030000 		.4byte	0x377
 8014 17ec 07       		.uleb128 0x7
 8015 17ed E6170000 		.4byte	0x17e6
 8016 17f1 28       		.uleb128 0x28
 8017 17f2 1E000000 		.4byte	.LASF173
 8018 17f6 01       		.byte	0x1
 8019 17f7 1F0D     		.2byte	0xd1f
 8020 17f9 00000000 		.4byte	.LFB98
 8021 17fd 14000000 		.4byte	.LFE98-.LFB98
 8022 1801 01       		.uleb128 0x1
 8023 1802 9C       		.byte	0x9c
 8024 1803 16180000 		.4byte	0x1816
 8025 1807 20       		.uleb128 0x20
 8026 1808 38070000 		.4byte	.LASF172
 8027 180c 01       		.byte	0x1
 8028 180d 1F0D     		.2byte	0xd1f
 8029 180f EC170000 		.4byte	0x17ec
 8030 1813 01       		.uleb128 0x1
 8031 1814 50       		.byte	0x50
 8032 1815 00       		.byte	0
 8033 1816 27       		.uleb128 0x27
 8034 1817 07080000 		.4byte	.LASF174
 8035 181b 01       		.byte	0x1
 8036 181c 270D     		.2byte	0xd27
 8037 181e 35010000 		.4byte	0x135
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 253


 8038 1822 00000000 		.4byte	.LFB99
 8039 1826 5C000000 		.4byte	.LFE99-.LFB99
 8040 182a 01       		.uleb128 0x1
 8041 182b 9C       		.byte	0x9c
 8042 182c B1180000 		.4byte	0x18b1
 8043 1830 19       		.uleb128 0x19
 8044 1831 38070000 		.4byte	.LASF172
 8045 1835 01       		.byte	0x1
 8046 1836 270D     		.2byte	0xd27
 8047 1838 EC170000 		.4byte	0x17ec
 8048 183c F10E0000 		.4byte	.LLST111
 8049 1840 19       		.uleb128 0x19
 8050 1841 13030000 		.4byte	.LASF175
 8051 1845 01       		.byte	0x1
 8052 1846 280D     		.2byte	0xd28
 8053 1848 21130000 		.4byte	0x1321
 8054 184c 680F0000 		.4byte	.LLST112
 8055 1850 1A       		.uleb128 0x1a
 8056 1851 14040000 		.4byte	.LASF87
 8057 1855 01       		.byte	0x1
 8058 1856 2A0D     		.2byte	0xd2a
 8059 1858 35010000 		.4byte	0x135
 8060 185c 940F0000 		.4byte	.LLST113
 8061 1860 24       		.uleb128 0x24
 8062 1861 0A000000 		.4byte	.LBB84
 8063 1865 46000000 		.4byte	.LBE84-.LBB84
 8064 1869 9E180000 		.4byte	0x189e
 8065 186d 1A       		.uleb128 0x1a
 8066 186e A60A0000 		.4byte	.LASF111
 8067 1872 01       		.byte	0x1
 8068 1873 320D     		.2byte	0xd32
 8069 1875 11090000 		.4byte	0x911
 8070 1879 D60F0000 		.4byte	.LLST114
 8071 187d 1A       		.uleb128 0x1a
 8072 187e 3B0E0000 		.4byte	.LASF176
 8073 1882 01       		.byte	0x1
 8074 1883 330D     		.2byte	0xd33
 8075 1885 11090000 		.4byte	0x911
 8076 1889 F40F0000 		.4byte	.LLST115
 8077 188d 1E       		.uleb128 0x1e
 8078 188e 42000000 		.4byte	.LVL336
 8079 1892 F1170000 		.4byte	0x17f1
 8080 1896 1F       		.uleb128 0x1f
 8081 1897 01       		.uleb128 0x1
 8082 1898 50       		.byte	0x50
 8083 1899 02       		.uleb128 0x2
 8084 189a 74       		.byte	0x74
 8085 189b 00       		.sleb128 0
 8086 189c 00       		.byte	0
 8087 189d 00       		.byte	0
 8088 189e 1D       		.uleb128 0x1d
 8089 189f 0A000000 		.4byte	.LVL329
 8090 18a3 B5220000 		.4byte	0x22b5
 8091 18a7 1D       		.uleb128 0x1d
 8092 18a8 54000000 		.4byte	.LVL343
 8093 18ac C0220000 		.4byte	0x22c0
 8094 18b0 00       		.byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 254


 8095 18b1 2F       		.uleb128 0x2f
 8096 18b2 7A070000 		.4byte	.LASF178
 8097 18b6 01       		.byte	0x1
 8098 18b7 680D     		.2byte	0xd68
 8099 18b9 00000000 		.4byte	.LFB100
 8100 18bd 10000000 		.4byte	.LFE100-.LFB100
 8101 18c1 01       		.uleb128 0x1
 8102 18c2 9C       		.byte	0x9c
 8103 18c3 27       		.uleb128 0x27
 8104 18c4 180A0000 		.4byte	.LASF179
 8105 18c8 01       		.byte	0x1
 8106 18c9 860F     		.2byte	0xf86
 8107 18cb 40010000 		.4byte	0x140
 8108 18cf 00000000 		.4byte	.LFB105
 8109 18d3 18000000 		.4byte	.LFE105-.LFB105
 8110 18d7 01       		.uleb128 0x1
 8111 18d8 9C       		.byte	0x9c
 8112 18d9 25190000 		.4byte	0x1925
 8113 18dd 19       		.uleb128 0x19
 8114 18de 79010000 		.4byte	.LASF91
 8115 18e2 01       		.byte	0x1
 8116 18e3 860F     		.2byte	0xf86
 8117 18e5 3F020000 		.4byte	0x23f
 8118 18e9 22100000 		.4byte	.LLST116
 8119 18ed 1A       		.uleb128 0x1a
 8120 18ee 68100000 		.4byte	.LASF88
 8121 18f2 01       		.byte	0x1
 8122 18f3 880F     		.2byte	0xf88
 8123 18f5 97050000 		.4byte	0x597
 8124 18f9 35100000 		.4byte	.LLST117
 8125 18fd 1A       		.uleb128 0x1a
 8126 18fe 79060000 		.4byte	.LASF180
 8127 1902 01       		.byte	0x1
 8128 1903 890F     		.2byte	0xf89
 8129 1905 56010000 		.4byte	0x156
 8130 1909 48100000 		.4byte	.LLST118
 8131 190d 21       		.uleb128 0x21
 8132 190e 97010000 		.4byte	.LASF122
 8133 1912 01       		.byte	0x1
 8134 1913 8A0F     		.2byte	0xf8a
 8135 1915 40010000 		.4byte	0x140
 8136 1919 01       		.uleb128 0x1
 8137 191a 50       		.byte	0x50
 8138 191b 1D       		.uleb128 0x1d
 8139 191c 12000000 		.4byte	.LVL347
 8140 1920 FF040000 		.4byte	0x4ff
 8141 1924 00       		.byte	0
 8142 1925 27       		.uleb128 0x27
 8143 1926 900D0000 		.4byte	.LASF181
 8144 192a 01       		.byte	0x1
 8145 192b EE0F     		.2byte	0xfee
 8146 192d 3F020000 		.4byte	0x23f
 8147 1931 00000000 		.4byte	.LFB108
 8148 1935 0C000000 		.4byte	.LFE108-.LFB108
 8149 1939 01       		.uleb128 0x1
 8150 193a 9C       		.byte	0x9c
 8151 193b 4E190000 		.4byte	0x194e
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 255


 8152 193f 21       		.uleb128 0x21
 8153 1940 14040000 		.4byte	.LASF87
 8154 1944 01       		.byte	0x1
 8155 1945 F00F     		.2byte	0xff0
 8156 1947 3F020000 		.4byte	0x23f
 8157 194b 01       		.uleb128 0x1
 8158 194c 50       		.byte	0x50
 8159 194d 00       		.byte	0
 8160 194e 27       		.uleb128 0x27
 8161 194f FB080000 		.4byte	.LASF182
 8162 1953 01       		.byte	0x1
 8163 1954 1B10     		.2byte	0x101b
 8164 1956 35010000 		.4byte	0x135
 8165 195a 00000000 		.4byte	.LFB109
 8166 195e DC000000 		.4byte	.LFE109-.LFB109
 8167 1962 01       		.uleb128 0x1
 8168 1963 9C       		.byte	0x9c
 8169 1964 C7190000 		.4byte	0x19c7
 8170 1968 19       		.uleb128 0x19
 8171 1969 2A080000 		.4byte	.LASF183
 8172 196d 01       		.byte	0x1
 8173 196e 1B10     		.2byte	0x101b
 8174 1970 EA040000 		.4byte	0x4ea
 8175 1974 5C100000 		.4byte	.LLST119
 8176 1978 1A       		.uleb128 0x1a
 8177 1979 1E0D0000 		.4byte	.LASF184
 8178 197d 01       		.byte	0x1
 8179 197e 1D10     		.2byte	0x101d
 8180 1980 200E0000 		.4byte	0xe20
 8181 1984 E9100000 		.4byte	.LLST120
 8182 1988 1A       		.uleb128 0x1a
 8183 1989 14040000 		.4byte	.LASF87
 8184 198d 01       		.byte	0x1
 8185 198e 1E10     		.2byte	0x101e
 8186 1990 35010000 		.4byte	0x135
 8187 1994 76110000 		.4byte	.LLST121
 8188 1998 24       		.uleb128 0x24
 8189 1999 76000000 		.4byte	.LBB85
 8190 199d 34000000 		.4byte	.LBE85-.LBB85
 8191 19a1 B6190000 		.4byte	0x19b6
 8192 19a5 1A       		.uleb128 0x1a
 8193 19a6 D9040000 		.4byte	.LASF36
 8194 19aa 01       		.byte	0x1
 8195 19ab 4810     		.2byte	0x1048
 8196 19ad E0070000 		.4byte	0x7e0
 8197 19b1 AC110000 		.4byte	.LLST122
 8198 19b5 00       		.byte	0
 8199 19b6 1E       		.uleb128 0x1e
 8200 19b7 44000000 		.4byte	.LVL351
 8201 19bb CB220000 		.4byte	0x22cb
 8202 19bf 1F       		.uleb128 0x1f
 8203 19c0 01       		.uleb128 0x1
 8204 19c1 50       		.byte	0x50
 8205 19c2 02       		.uleb128 0x2
 8206 19c3 75       		.byte	0x75
 8207 19c4 00       		.sleb128 0
 8208 19c5 00       		.byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 256


 8209 19c6 00       		.byte	0
 8210 19c7 27       		.uleb128 0x27
 8211 19c8 46010000 		.4byte	.LASF185
 8212 19cc 01       		.byte	0x1
 8213 19cd 7510     		.2byte	0x1075
 8214 19cf 35010000 		.4byte	0x135
 8215 19d3 00000000 		.4byte	.LFB110
 8216 19d7 A0000000 		.4byte	.LFE110-.LFB110
 8217 19db 01       		.uleb128 0x1
 8218 19dc 9C       		.byte	0x9c
 8219 19dd 401A0000 		.4byte	0x1a40
 8220 19e1 19       		.uleb128 0x19
 8221 19e2 2A080000 		.4byte	.LASF183
 8222 19e6 01       		.byte	0x1
 8223 19e7 7510     		.2byte	0x1075
 8224 19e9 EA040000 		.4byte	0x4ea
 8225 19ed BF110000 		.4byte	.LLST123
 8226 19f1 1A       		.uleb128 0x1a
 8227 19f2 68100000 		.4byte	.LASF88
 8228 19f6 01       		.byte	0x1
 8229 19f7 7710     		.2byte	0x1077
 8230 19f9 200E0000 		.4byte	0xe20
 8231 19fd 28120000 		.4byte	.LLST124
 8232 1a01 1A       		.uleb128 0x1a
 8233 1a02 14040000 		.4byte	.LASF87
 8234 1a06 01       		.byte	0x1
 8235 1a07 7810     		.2byte	0x1078
 8236 1a09 35010000 		.4byte	0x135
 8237 1a0d 91120000 		.4byte	.LLST125
 8238 1a11 24       		.uleb128 0x24
 8239 1a12 58000000 		.4byte	.LBB86
 8240 1a16 34000000 		.4byte	.LBE86-.LBB86
 8241 1a1a 2F1A0000 		.4byte	0x1a2f
 8242 1a1e 1A       		.uleb128 0x1a
 8243 1a1f D9040000 		.4byte	.LASF36
 8244 1a23 01       		.byte	0x1
 8245 1a24 A210     		.2byte	0x10a2
 8246 1a26 E0070000 		.4byte	0x7e0
 8247 1a2a DF120000 		.4byte	.LLST126
 8248 1a2e 00       		.byte	0
 8249 1a2f 1E       		.uleb128 0x1e
 8250 1a30 24000000 		.4byte	.LVL364
 8251 1a34 CB220000 		.4byte	0x22cb
 8252 1a38 1F       		.uleb128 0x1f
 8253 1a39 01       		.uleb128 0x1
 8254 1a3a 50       		.byte	0x50
 8255 1a3b 02       		.uleb128 0x2
 8256 1a3c 75       		.byte	0x75
 8257 1a3d 00       		.sleb128 0
 8258 1a3e 00       		.byte	0
 8259 1a3f 00       		.byte	0
 8260 1a40 28       		.uleb128 0x28
 8261 1a41 BE0B0000 		.4byte	.LASF186
 8262 1a45 01       		.byte	0x1
 8263 1a46 C510     		.2byte	0x10c5
 8264 1a48 00000000 		.4byte	.LFB111
 8265 1a4c B4000000 		.4byte	.LFE111-.LFB111
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 257


 8266 1a50 01       		.uleb128 0x1
 8267 1a51 9C       		.byte	0x9c
 8268 1a52 E21A0000 		.4byte	0x1ae2
 8269 1a56 19       		.uleb128 0x19
 8270 1a57 2A080000 		.4byte	.LASF183
 8271 1a5b 01       		.byte	0x1
 8272 1a5c C510     		.2byte	0x10c5
 8273 1a5e EA040000 		.4byte	0x4ea
 8274 1a62 F2120000 		.4byte	.LLST127
 8275 1a66 19       		.uleb128 0x19
 8276 1a67 730D0000 		.4byte	.LASF187
 8277 1a6b 01       		.byte	0x1
 8278 1a6c C610     		.2byte	0x10c6
 8279 1a6e 40010000 		.4byte	0x140
 8280 1a72 29130000 		.4byte	.LLST128
 8281 1a76 1A       		.uleb128 0x1a
 8282 1a77 68100000 		.4byte	.LASF88
 8283 1a7b 01       		.byte	0x1
 8284 1a7c C810     		.2byte	0x10c8
 8285 1a7e 200E0000 		.4byte	0xe20
 8286 1a82 4A130000 		.4byte	.LLST129
 8287 1a86 1A       		.uleb128 0x1a
 8288 1a87 E2070000 		.4byte	.LASF129
 8289 1a8b 01       		.byte	0x1
 8290 1a8c C910     		.2byte	0x10c9
 8291 1a8e 40010000 		.4byte	0x140
 8292 1a92 81130000 		.4byte	.LLST130
 8293 1a96 1A       		.uleb128 0x1a
 8294 1a97 D7030000 		.4byte	.LASF188
 8295 1a9b 01       		.byte	0x1
 8296 1a9c C910     		.2byte	0x10c9
 8297 1a9e 40010000 		.4byte	0x140
 8298 1aa2 94130000 		.4byte	.LLST131
 8299 1aa6 30       		.uleb128 0x30
 8300 1aa7 7A040000 		.4byte	.LASF189
 8301 1aab 01       		.byte	0x1
 8302 1aac CA10     		.2byte	0x10ca
 8303 1aae E21A0000 		.4byte	0x1ae2
 8304 1ab2 01       		.byte	0x1
 8305 1ab3 24       		.uleb128 0x24
 8306 1ab4 70000000 		.4byte	.LBB87
 8307 1ab8 44000000 		.4byte	.LBE87-.LBB87
 8308 1abc D11A0000 		.4byte	0x1ad1
 8309 1ac0 1A       		.uleb128 0x1a
 8310 1ac1 D9040000 		.4byte	.LASF36
 8311 1ac5 01       		.byte	0x1
 8312 1ac6 1311     		.2byte	0x1113
 8313 1ac8 E0070000 		.4byte	0x7e0
 8314 1acc B3130000 		.4byte	.LLST132
 8315 1ad0 00       		.byte	0
 8316 1ad1 1E       		.uleb128 0x1e
 8317 1ad2 44000000 		.4byte	.LVL382
 8318 1ad6 CB220000 		.4byte	0x22cb
 8319 1ada 1F       		.uleb128 0x1f
 8320 1adb 01       		.uleb128 0x1
 8321 1adc 50       		.byte	0x50
 8322 1add 02       		.uleb128 0x2
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 258


 8323 1ade 75       		.byte	0x75
 8324 1adf 00       		.sleb128 0
 8325 1ae0 00       		.byte	0
 8326 1ae1 00       		.byte	0
 8327 1ae2 07       		.uleb128 0x7
 8328 1ae3 40010000 		.4byte	0x140
 8329 1ae7 27       		.uleb128 0x27
 8330 1ae8 BF050000 		.4byte	.LASF190
 8331 1aec 01       		.byte	0x1
 8332 1aed 6A12     		.2byte	0x126a
 8333 1aef 4B010000 		.4byte	0x14b
 8334 1af3 00000000 		.4byte	.LFB112
 8335 1af7 20000000 		.4byte	.LFE112-.LFB112
 8336 1afb 01       		.uleb128 0x1
 8337 1afc 9C       		.byte	0x9c
 8338 1afd 101B0000 		.4byte	0x1b10
 8339 1b01 21       		.uleb128 0x21
 8340 1b02 97010000 		.4byte	.LASF122
 8341 1b06 01       		.byte	0x1
 8342 1b07 6C12     		.2byte	0x126c
 8343 1b09 4B010000 		.4byte	0x14b
 8344 1b0d 01       		.uleb128 0x1
 8345 1b0e 50       		.byte	0x50
 8346 1b0f 00       		.byte	0
 8347 1b10 31       		.uleb128 0x31
 8348 1b11 B4060000 		.4byte	.LASF192
 8349 1b15 01       		.byte	0x1
 8350 1b16 7A12     		.2byte	0x127a
 8351 1b18 3F020000 		.4byte	0x23f
 8352 1b1c 00000000 		.4byte	.LFB113
 8353 1b20 20000000 		.4byte	.LFE113-.LFB113
 8354 1b24 01       		.uleb128 0x1
 8355 1b25 9C       		.byte	0x9c
 8356 1b26 27       		.uleb128 0x27
 8357 1b27 95080000 		.4byte	.LASF193
 8358 1b2b 01       		.byte	0x1
 8359 1b2c 8B12     		.2byte	0x128b
 8360 1b2e EB000000 		.4byte	0xeb
 8361 1b32 00000000 		.4byte	.LFB114
 8362 1b36 A0000000 		.4byte	.LFE114-.LFB114
 8363 1b3a 01       		.uleb128 0x1
 8364 1b3b 9C       		.byte	0x9c
 8365 1b3c BE1B0000 		.4byte	0x1bbe
 8366 1b40 19       		.uleb128 0x19
 8367 1b41 54050000 		.4byte	.LASF194
 8368 1b45 01       		.byte	0x1
 8369 1b46 8B12     		.2byte	0x128b
 8370 1b48 40010000 		.4byte	0x140
 8371 1b4c C6130000 		.4byte	.LLST133
 8372 1b50 19       		.uleb128 0x19
 8373 1b51 90030000 		.4byte	.LASF195
 8374 1b55 01       		.byte	0x1
 8375 1b56 8C12     		.2byte	0x128c
 8376 1b58 35010000 		.4byte	0x135
 8377 1b5c F2130000 		.4byte	.LLST134
 8378 1b60 19       		.uleb128 0x19
 8379 1b61 480A0000 		.4byte	.LASF108
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 259


 8380 1b65 01       		.byte	0x1
 8381 1b66 8D12     		.2byte	0x128d
 8382 1b68 4B010000 		.4byte	0x14b
 8383 1b6c 1E140000 		.4byte	.LLST135
 8384 1b70 1A       		.uleb128 0x1a
 8385 1b71 2D090000 		.4byte	.LASF196
 8386 1b75 01       		.byte	0x1
 8387 1b76 8F12     		.2byte	0x128f
 8388 1b78 EB000000 		.4byte	0xeb
 8389 1b7c 4A140000 		.4byte	.LLST136
 8390 1b80 1D       		.uleb128 0x1d
 8391 1b81 0C000000 		.4byte	.LVL388
 8392 1b85 B5220000 		.4byte	0x22b5
 8393 1b89 23       		.uleb128 0x23
 8394 1b8a 34000000 		.4byte	.LVL389
 8395 1b8e 7C080000 		.4byte	0x87c
 8396 1b92 A21B0000 		.4byte	0x1ba2
 8397 1b96 1F       		.uleb128 0x1f
 8398 1b97 01       		.uleb128 0x1
 8399 1b98 50       		.byte	0x50
 8400 1b99 02       		.uleb128 0x2
 8401 1b9a 75       		.byte	0x75
 8402 1b9b 00       		.sleb128 0
 8403 1b9c 1F       		.uleb128 0x1f
 8404 1b9d 01       		.uleb128 0x1
 8405 1b9e 51       		.byte	0x51
 8406 1b9f 01       		.uleb128 0x1
 8407 1ba0 31       		.byte	0x31
 8408 1ba1 00       		.byte	0
 8409 1ba2 1D       		.uleb128 0x1d
 8410 1ba3 48000000 		.4byte	.LVL390
 8411 1ba7 C0220000 		.4byte	0x22c0
 8412 1bab 1D       		.uleb128 0x1d
 8413 1bac 4C000000 		.4byte	.LVL391
 8414 1bb0 B5220000 		.4byte	0x22b5
 8415 1bb4 1D       		.uleb128 0x1d
 8416 1bb5 92000000 		.4byte	.LVL394
 8417 1bb9 C0220000 		.4byte	0x22c0
 8418 1bbd 00       		.byte	0
 8419 1bbe 27       		.uleb128 0x27
 8420 1bbf 59030000 		.4byte	.LASF197
 8421 1bc3 01       		.byte	0x1
 8422 1bc4 D312     		.2byte	0x12d3
 8423 1bc6 35010000 		.4byte	0x135
 8424 1bca 00000000 		.4byte	.LFB115
 8425 1bce C4000000 		.4byte	.LFE115-.LFB115
 8426 1bd2 01       		.uleb128 0x1
 8427 1bd3 9C       		.byte	0x9c
 8428 1bd4 771C0000 		.4byte	0x1c77
 8429 1bd8 19       		.uleb128 0x19
 8430 1bd9 54050000 		.4byte	.LASF194
 8431 1bdd 01       		.byte	0x1
 8432 1bde D312     		.2byte	0x12d3
 8433 1be0 40010000 		.4byte	0x140
 8434 1be4 68140000 		.4byte	.LLST137
 8435 1be8 19       		.uleb128 0x19
 8436 1be9 3A0F0000 		.4byte	.LASF198
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 260


 8437 1bed 01       		.byte	0x1
 8438 1bee D412     		.2byte	0x12d4
 8439 1bf0 EB000000 		.4byte	0xeb
 8440 1bf4 94140000 		.4byte	.LLST138
 8441 1bf8 19       		.uleb128 0x19
 8442 1bf9 890A0000 		.4byte	.LASF199
 8443 1bfd 01       		.byte	0x1
 8444 1bfe D512     		.2byte	0x12d5
 8445 1c00 EB000000 		.4byte	0xeb
 8446 1c04 C0140000 		.4byte	.LLST139
 8447 1c08 19       		.uleb128 0x19
 8448 1c09 560E0000 		.4byte	.LASF200
 8449 1c0d 01       		.byte	0x1
 8450 1c0e D612     		.2byte	0x12d6
 8451 1c10 771C0000 		.4byte	0x1c77
 8452 1c14 05150000 		.4byte	.LLST140
 8453 1c18 19       		.uleb128 0x19
 8454 1c19 480A0000 		.4byte	.LASF108
 8455 1c1d 01       		.byte	0x1
 8456 1c1e D712     		.2byte	0x12d7
 8457 1c20 4B010000 		.4byte	0x14b
 8458 1c24 31150000 		.4byte	.LLST141
 8459 1c28 1A       		.uleb128 0x1a
 8460 1c29 14040000 		.4byte	.LASF87
 8461 1c2d 01       		.byte	0x1
 8462 1c2e D912     		.2byte	0x12d9
 8463 1c30 35010000 		.4byte	0x135
 8464 1c34 51150000 		.4byte	.LLST142
 8465 1c38 1D       		.uleb128 0x1d
 8466 1c39 0E000000 		.4byte	.LVL397
 8467 1c3d B5220000 		.4byte	0x22b5
 8468 1c41 23       		.uleb128 0x23
 8469 1c42 4E000000 		.4byte	.LVL398
 8470 1c46 7C080000 		.4byte	0x87c
 8471 1c4a 5B1C0000 		.4byte	0x1c5b
 8472 1c4e 1F       		.uleb128 0x1f
 8473 1c4f 01       		.uleb128 0x1
 8474 1c50 50       		.byte	0x50
 8475 1c51 03       		.uleb128 0x3
 8476 1c52 91       		.byte	0x91
 8477 1c53 00       		.sleb128 0
 8478 1c54 06       		.byte	0x6
 8479 1c55 1F       		.uleb128 0x1f
 8480 1c56 01       		.uleb128 0x1
 8481 1c57 51       		.byte	0x51
 8482 1c58 01       		.uleb128 0x1
 8483 1c59 31       		.byte	0x31
 8484 1c5a 00       		.byte	0
 8485 1c5b 1D       		.uleb128 0x1d
 8486 1c5c 62000000 		.4byte	.LVL399
 8487 1c60 C0220000 		.4byte	0x22c0
 8488 1c64 1D       		.uleb128 0x1d
 8489 1c65 66000000 		.4byte	.LVL400
 8490 1c69 B5220000 		.4byte	0x22b5
 8491 1c6d 1D       		.uleb128 0x1d
 8492 1c6e B8000000 		.4byte	.LVL406
 8493 1c72 C0220000 		.4byte	0x22c0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 261


 8494 1c76 00       		.byte	0
 8495 1c77 06       		.uleb128 0x6
 8496 1c78 04       		.byte	0x4
 8497 1c79 EB000000 		.4byte	0xeb
 8498 1c7d 27       		.uleb128 0x27
 8499 1c7e EB000000 		.4byte	.LASF201
 8500 1c82 01       		.byte	0x1
 8501 1c83 2913     		.2byte	0x1329
 8502 1c85 35010000 		.4byte	0x135
 8503 1c89 00000000 		.4byte	.LFB116
 8504 1c8d 24010000 		.4byte	.LFE116-.LFB116
 8505 1c91 01       		.uleb128 0x1
 8506 1c92 9C       		.byte	0x9c
 8507 1c93 661D0000 		.4byte	0x1d66
 8508 1c97 19       		.uleb128 0x19
 8509 1c98 150F0000 		.4byte	.LASF202
 8510 1c9c 01       		.byte	0x1
 8511 1c9d 2913     		.2byte	0x1329
 8512 1c9f 3F020000 		.4byte	0x23f
 8513 1ca3 7B150000 		.4byte	.LLST143
 8514 1ca7 19       		.uleb128 0x19
 8515 1ca8 8A0E0000 		.4byte	.LASF203
 8516 1cac 01       		.byte	0x1
 8517 1cad 2A13     		.2byte	0x132a
 8518 1caf 40010000 		.4byte	0x140
 8519 1cb3 A7150000 		.4byte	.LLST144
 8520 1cb7 19       		.uleb128 0x19
 8521 1cb8 0C0C0000 		.4byte	.LASF204
 8522 1cbc 01       		.byte	0x1
 8523 1cbd 2B13     		.2byte	0x132b
 8524 1cbf EB000000 		.4byte	0xeb
 8525 1cc3 84160000 		.4byte	.LLST145
 8526 1cc7 19       		.uleb128 0x19
 8527 1cc8 8E0B0000 		.4byte	.LASF205
 8528 1ccc 01       		.byte	0x1
 8529 1ccd 2C13     		.2byte	0x132c
 8530 1ccf 47030000 		.4byte	0x347
 8531 1cd3 C9160000 		.4byte	.LLST146
 8532 1cd7 19       		.uleb128 0x19
 8533 1cd8 BC040000 		.4byte	.LASF206
 8534 1cdc 01       		.byte	0x1
 8535 1cdd 2D13     		.2byte	0x132d
 8536 1cdf 771C0000 		.4byte	0x1c77
 8537 1ce3 EA160000 		.4byte	.LLST147
 8538 1ce7 1A       		.uleb128 0x1a
 8539 1ce8 68100000 		.4byte	.LASF88
 8540 1cec 01       		.byte	0x1
 8541 1ced 2F13     		.2byte	0x132f
 8542 1cef 97050000 		.4byte	0x597
 8543 1cf3 0A170000 		.4byte	.LLST148
 8544 1cf7 1A       		.uleb128 0x1a
 8545 1cf8 14040000 		.4byte	.LASF87
 8546 1cfc 01       		.byte	0x1
 8547 1cfd 3013     		.2byte	0x1330
 8548 1cff 35010000 		.4byte	0x135
 8549 1d03 36170000 		.4byte	.LLST149
 8550 1d07 1A       		.uleb128 0x1a
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 262


 8551 1d08 C1030000 		.4byte	.LASF207
 8552 1d0c 01       		.byte	0x1
 8553 1d0d 3113     		.2byte	0x1331
 8554 1d0f CA000000 		.4byte	0xca
 8555 1d13 60170000 		.4byte	.LLST150
 8556 1d17 24       		.uleb128 0x24
 8557 1d18 84000000 		.4byte	.LBB88
 8558 1d1c 24000000 		.4byte	.LBE88-.LBB88
 8559 1d20 351D0000 		.4byte	0x1d35
 8560 1d24 1A       		.uleb128 0x1a
 8561 1d25 D40C0000 		.4byte	.LASF145
 8562 1d29 01       		.byte	0x1
 8563 1d2a 7413     		.2byte	0x1374
 8564 1d2c 99110000 		.4byte	0x1199
 8565 1d30 73170000 		.4byte	.LLST151
 8566 1d34 00       		.byte	0
 8567 1d35 24       		.uleb128 0x24
 8568 1d36 BC000000 		.4byte	.LBB89
 8569 1d3a 38000000 		.4byte	.LBE89-.LBB89
 8570 1d3e 531D0000 		.4byte	0x1d53
 8571 1d42 1A       		.uleb128 0x1a
 8572 1d43 D9040000 		.4byte	.LASF36
 8573 1d47 01       		.byte	0x1
 8574 1d48 7513     		.2byte	0x1375
 8575 1d4a E0070000 		.4byte	0x7e0
 8576 1d4e 86170000 		.4byte	.LLST152
 8577 1d52 00       		.byte	0
 8578 1d53 1D       		.uleb128 0x1d
 8579 1d54 14000000 		.4byte	.LVL410
 8580 1d58 B5220000 		.4byte	0x22b5
 8581 1d5c 1D       		.uleb128 0x1d
 8582 1d5d 14010000 		.4byte	.LVL433
 8583 1d61 C0220000 		.4byte	0x22c0
 8584 1d65 00       		.byte	0
 8585 1d66 27       		.uleb128 0x27
 8586 1d67 2F0D0000 		.4byte	.LASF208
 8587 1d6b 01       		.byte	0x1
 8588 1d6c A413     		.2byte	0x13a4
 8589 1d6e 35010000 		.4byte	0x135
 8590 1d72 00000000 		.4byte	.LFB117
 8591 1d76 4C010000 		.4byte	.LFE117-.LFB117
 8592 1d7a 01       		.uleb128 0x1
 8593 1d7b 9C       		.byte	0x9c
 8594 1d7c BA1E0000 		.4byte	0x1eba
 8595 1d80 19       		.uleb128 0x19
 8596 1d81 150F0000 		.4byte	.LASF202
 8597 1d85 01       		.byte	0x1
 8598 1d86 A413     		.2byte	0x13a4
 8599 1d88 3F020000 		.4byte	0x23f
 8600 1d8c 99170000 		.4byte	.LLST153
 8601 1d90 19       		.uleb128 0x19
 8602 1d91 8A0E0000 		.4byte	.LASF203
 8603 1d95 01       		.byte	0x1
 8604 1d96 A513     		.2byte	0x13a5
 8605 1d98 40010000 		.4byte	0x140
 8606 1d9c BA170000 		.4byte	.LLST154
 8607 1da0 19       		.uleb128 0x19
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 263


 8608 1da1 0C0C0000 		.4byte	.LASF204
 8609 1da5 01       		.byte	0x1
 8610 1da6 A613     		.2byte	0x13a6
 8611 1da8 EB000000 		.4byte	0xeb
 8612 1dac 3B180000 		.4byte	.LLST155
 8613 1db0 19       		.uleb128 0x19
 8614 1db1 8E0B0000 		.4byte	.LASF205
 8615 1db5 01       		.byte	0x1
 8616 1db6 A713     		.2byte	0x13a7
 8617 1db8 47030000 		.4byte	0x347
 8618 1dbc 75180000 		.4byte	.LLST156
 8619 1dc0 19       		.uleb128 0x19
 8620 1dc1 BC040000 		.4byte	.LASF206
 8621 1dc5 01       		.byte	0x1
 8622 1dc6 A813     		.2byte	0x13a8
 8623 1dc8 771C0000 		.4byte	0x1c77
 8624 1dcc 96180000 		.4byte	.LLST157
 8625 1dd0 19       		.uleb128 0x19
 8626 1dd1 C90D0000 		.4byte	.LASF209
 8627 1dd5 01       		.byte	0x1
 8628 1dd6 A913     		.2byte	0x13a9
 8629 1dd8 BA1E0000 		.4byte	0x1eba
 8630 1ddc B6180000 		.4byte	.LLST158
 8631 1de0 1A       		.uleb128 0x1a
 8632 1de1 68100000 		.4byte	.LASF88
 8633 1de5 01       		.byte	0x1
 8634 1de6 AB13     		.2byte	0x13ab
 8635 1de8 97050000 		.4byte	0x597
 8636 1dec D6180000 		.4byte	.LLST159
 8637 1df0 1A       		.uleb128 0x1a
 8638 1df1 C1030000 		.4byte	.LASF207
 8639 1df5 01       		.byte	0x1
 8640 1df6 AC13     		.2byte	0x13ac
 8641 1df8 CA000000 		.4byte	0xca
 8642 1dfc F7180000 		.4byte	.LLST160
 8643 1e00 1A       		.uleb128 0x1a
 8644 1e01 14040000 		.4byte	.LASF87
 8645 1e05 01       		.byte	0x1
 8646 1e06 AD13     		.2byte	0x13ad
 8647 1e08 35010000 		.4byte	0x135
 8648 1e0c 15190000 		.4byte	.LLST161
 8649 1e10 2A       		.uleb128 0x2a
 8650 1e11 7E080000 		.4byte	.LASF134
 8651 1e15 01       		.byte	0x1
 8652 1e16 AE13     		.2byte	0x13ae
 8653 1e18 40010000 		.4byte	0x140
 8654 1e1c 2B       		.uleb128 0x2b
 8655 1e1d 21040000 		.4byte	0x421
 8656 1e21 04000000 		.4byte	.LBB90
 8657 1e25 14000000 		.4byte	.LBE90-.LBB90
 8658 1e29 01       		.byte	0x1
 8659 1e2a C713     		.2byte	0x13c7
 8660 1e2c 451E0000 		.4byte	0x1e45
 8661 1e30 25       		.uleb128 0x25
 8662 1e31 04000000 		.4byte	.LBB91
 8663 1e35 14000000 		.4byte	.LBE91-.LBB91
 8664 1e39 2C       		.uleb128 0x2c
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 264


 8665 1e3a 31040000 		.4byte	0x431
 8666 1e3e 2C       		.uleb128 0x2c
 8667 1e3f 3C040000 		.4byte	0x43c
 8668 1e43 00       		.byte	0
 8669 1e44 00       		.byte	0
 8670 1e45 24       		.uleb128 0x24
 8671 1e46 8C000000 		.4byte	.LBB92
 8672 1e4a 24000000 		.4byte	.LBE92-.LBB92
 8673 1e4e 631E0000 		.4byte	0x1e63
 8674 1e52 1A       		.uleb128 0x1a
 8675 1e53 D40C0000 		.4byte	.LASF145
 8676 1e57 01       		.byte	0x1
 8677 1e58 0714     		.2byte	0x1407
 8678 1e5a 99110000 		.4byte	0x1199
 8679 1e5e 34190000 		.4byte	.LLST162
 8680 1e62 00       		.byte	0
 8681 1e63 24       		.uleb128 0x24
 8682 1e64 C4000000 		.4byte	.LBB93
 8683 1e68 38000000 		.4byte	.LBE93-.LBB93
 8684 1e6c 811E0000 		.4byte	0x1e81
 8685 1e70 1A       		.uleb128 0x1a
 8686 1e71 D9040000 		.4byte	.LASF36
 8687 1e75 01       		.byte	0x1
 8688 1e76 0814     		.2byte	0x1408
 8689 1e78 E0070000 		.4byte	0x7e0
 8690 1e7c 47190000 		.4byte	.LLST163
 8691 1e80 00       		.byte	0
 8692 1e81 24       		.uleb128 0x24
 8693 1e82 FE000000 		.4byte	.LBB94
 8694 1e86 20000000 		.4byte	.LBE94-.LBB94
 8695 1e8a 9F1E0000 		.4byte	0x1e9f
 8696 1e8e 1A       		.uleb128 0x1a
 8697 1e8f D9040000 		.4byte	.LASF36
 8698 1e93 01       		.byte	0x1
 8699 1e94 0E14     		.2byte	0x140e
 8700 1e96 E0070000 		.4byte	0x7e0
 8701 1e9a 5A190000 		.4byte	.LLST164
 8702 1e9e 00       		.byte	0
 8703 1e9f 2D       		.uleb128 0x2d
 8704 1ea0 48040000 		.4byte	0x448
 8705 1ea4 3E010000 		.4byte	.LBB95
 8706 1ea8 04000000 		.4byte	.LBE95-.LBB95
 8707 1eac 01       		.byte	0x1
 8708 1ead 2514     		.2byte	0x1425
 8709 1eaf 2E       		.uleb128 0x2e
 8710 1eb0 54040000 		.4byte	0x454
 8711 1eb4 6D190000 		.4byte	.LLST165
 8712 1eb8 00       		.byte	0
 8713 1eb9 00       		.byte	0
 8714 1eba 06       		.uleb128 0x6
 8715 1ebb 04       		.byte	0x4
 8716 1ebc 35010000 		.4byte	0x135
 8717 1ec0 28       		.uleb128 0x28
 8718 1ec1 B0010000 		.4byte	.LASF210
 8719 1ec5 01       		.byte	0x1
 8720 1ec6 2F14     		.2byte	0x142f
 8721 1ec8 00000000 		.4byte	.LFB118
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 265


 8722 1ecc F8000000 		.4byte	.LFE118-.LFB118
 8723 1ed0 01       		.uleb128 0x1
 8724 1ed1 9C       		.byte	0x9c
 8725 1ed2 CC1F0000 		.4byte	0x1fcc
 8726 1ed6 20       		.uleb128 0x20
 8727 1ed7 150F0000 		.4byte	.LASF202
 8728 1edb 01       		.byte	0x1
 8729 1edc 2F14     		.2byte	0x142f
 8730 1ede 3F020000 		.4byte	0x23f
 8731 1ee2 01       		.uleb128 0x1
 8732 1ee3 50       		.byte	0x50
 8733 1ee4 19       		.uleb128 0x19
 8734 1ee5 8A0E0000 		.4byte	.LASF203
 8735 1ee9 01       		.byte	0x1
 8736 1eea 3014     		.2byte	0x1430
 8737 1eec 40010000 		.4byte	0x140
 8738 1ef0 80190000 		.4byte	.LLST166
 8739 1ef4 19       		.uleb128 0x19
 8740 1ef5 C90D0000 		.4byte	.LASF209
 8741 1ef9 01       		.byte	0x1
 8742 1efa 3114     		.2byte	0x1431
 8743 1efc BA1E0000 		.4byte	0x1eba
 8744 1f00 AE190000 		.4byte	.LLST167
 8745 1f04 21       		.uleb128 0x21
 8746 1f05 68100000 		.4byte	.LASF88
 8747 1f09 01       		.byte	0x1
 8748 1f0a 3314     		.2byte	0x1433
 8749 1f0c 97050000 		.4byte	0x597
 8750 1f10 01       		.uleb128 0x1
 8751 1f11 50       		.byte	0x50
 8752 1f12 1A       		.uleb128 0x1a
 8753 1f13 C1030000 		.4byte	.LASF207
 8754 1f17 01       		.byte	0x1
 8755 1f18 3414     		.2byte	0x1434
 8756 1f1a CA000000 		.4byte	0xca
 8757 1f1e CF190000 		.4byte	.LLST168
 8758 1f22 2A       		.uleb128 0x2a
 8759 1f23 7E080000 		.4byte	.LASF134
 8760 1f27 01       		.byte	0x1
 8761 1f28 3514     		.2byte	0x1435
 8762 1f2a 40010000 		.4byte	0x140
 8763 1f2e 2B       		.uleb128 0x2b
 8764 1f2f 21040000 		.4byte	0x421
 8765 1f33 02000000 		.4byte	.LBB97
 8766 1f37 14000000 		.4byte	.LBE97-.LBB97
 8767 1f3b 01       		.byte	0x1
 8768 1f3c 4E14     		.2byte	0x144e
 8769 1f3e 571F0000 		.4byte	0x1f57
 8770 1f42 25       		.uleb128 0x25
 8771 1f43 02000000 		.4byte	.LBB98
 8772 1f47 14000000 		.4byte	.LBE98-.LBB98
 8773 1f4b 2C       		.uleb128 0x2c
 8774 1f4c 31040000 		.4byte	0x431
 8775 1f50 2C       		.uleb128 0x2c
 8776 1f51 3C040000 		.4byte	0x43c
 8777 1f55 00       		.byte	0
 8778 1f56 00       		.byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 266


 8779 1f57 24       		.uleb128 0x24
 8780 1f58 3E000000 		.4byte	.LBB99
 8781 1f5c 24000000 		.4byte	.LBE99-.LBB99
 8782 1f60 751F0000 		.4byte	0x1f75
 8783 1f64 1A       		.uleb128 0x1a
 8784 1f65 D40C0000 		.4byte	.LASF145
 8785 1f69 01       		.byte	0x1
 8786 1f6a 6214     		.2byte	0x1462
 8787 1f6c 99110000 		.4byte	0x1199
 8788 1f70 E2190000 		.4byte	.LLST169
 8789 1f74 00       		.byte	0
 8790 1f75 24       		.uleb128 0x24
 8791 1f76 76000000 		.4byte	.LBB100
 8792 1f7a 38000000 		.4byte	.LBE100-.LBB100
 8793 1f7e 931F0000 		.4byte	0x1f93
 8794 1f82 1A       		.uleb128 0x1a
 8795 1f83 D9040000 		.4byte	.LASF36
 8796 1f87 01       		.byte	0x1
 8797 1f88 6314     		.2byte	0x1463
 8798 1f8a E0070000 		.4byte	0x7e0
 8799 1f8e F5190000 		.4byte	.LLST170
 8800 1f92 00       		.byte	0
 8801 1f93 24       		.uleb128 0x24
 8802 1f94 B0000000 		.4byte	.LBB101
 8803 1f98 20000000 		.4byte	.LBE101-.LBB101
 8804 1f9c B11F0000 		.4byte	0x1fb1
 8805 1fa0 1A       		.uleb128 0x1a
 8806 1fa1 D9040000 		.4byte	.LASF36
 8807 1fa5 01       		.byte	0x1
 8808 1fa6 6914     		.2byte	0x1469
 8809 1fa8 E0070000 		.4byte	0x7e0
 8810 1fac 081A0000 		.4byte	.LLST171
 8811 1fb0 00       		.byte	0
 8812 1fb1 2D       		.uleb128 0x2d
 8813 1fb2 48040000 		.4byte	0x448
 8814 1fb6 EC000000 		.4byte	.LBB102
 8815 1fba 0C000000 		.4byte	.LBE102-.LBB102
 8816 1fbe 01       		.byte	0x1
 8817 1fbf 8014     		.2byte	0x1480
 8818 1fc1 2E       		.uleb128 0x2e
 8819 1fc2 54040000 		.4byte	0x454
 8820 1fc6 1B1A0000 		.4byte	.LLST172
 8821 1fca 00       		.byte	0
 8822 1fcb 00       		.byte	0
 8823 1fcc 27       		.uleb128 0x27
 8824 1fcd 560D0000 		.4byte	.LASF211
 8825 1fd1 01       		.byte	0x1
 8826 1fd2 8814     		.2byte	0x1488
 8827 1fd4 35010000 		.4byte	0x135
 8828 1fd8 00000000 		.4byte	.LFB119
 8829 1fdc 38000000 		.4byte	.LFE119-.LFB119
 8830 1fe0 01       		.uleb128 0x1
 8831 1fe1 9C       		.byte	0x9c
 8832 1fe2 39200000 		.4byte	0x2039
 8833 1fe6 19       		.uleb128 0x19
 8834 1fe7 79010000 		.4byte	.LASF91
 8835 1feb 01       		.byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 267


 8836 1fec 8814     		.2byte	0x1488
 8837 1fee 3F020000 		.4byte	0x23f
 8838 1ff2 2E1A0000 		.4byte	.LLST173
 8839 1ff6 19       		.uleb128 0x19
 8840 1ff7 CA080000 		.4byte	.LASF212
 8841 1ffb 01       		.byte	0x1
 8842 1ffc 8914     		.2byte	0x1489
 8843 1ffe 40010000 		.4byte	0x140
 8844 2002 411A0000 		.4byte	.LLST174
 8845 2006 1A       		.uleb128 0x1a
 8846 2007 68100000 		.4byte	.LASF88
 8847 200b 01       		.byte	0x1
 8848 200c 8B14     		.2byte	0x148b
 8849 200e 97050000 		.4byte	0x597
 8850 2012 861A0000 		.4byte	.LLST175
 8851 2016 1A       		.uleb128 0x1a
 8852 2017 14040000 		.4byte	.LASF87
 8853 201b 01       		.byte	0x1
 8854 201c 8C14     		.2byte	0x148c
 8855 201e 35010000 		.4byte	0x135
 8856 2022 991A0000 		.4byte	.LLST176
 8857 2026 1D       		.uleb128 0x1d
 8858 2027 12000000 		.4byte	.LVL479
 8859 202b B5220000 		.4byte	0x22b5
 8860 202f 1D       		.uleb128 0x1d
 8861 2030 30000000 		.4byte	.LVL484
 8862 2034 C0220000 		.4byte	0x22c0
 8863 2038 00       		.byte	0
 8864 2039 27       		.uleb128 0x27
 8865 203a BF0A0000 		.4byte	.LASF213
 8866 203e 01       		.byte	0x1
 8867 203f AA14     		.2byte	0x14aa
 8868 2041 EB000000 		.4byte	0xeb
 8869 2045 00000000 		.4byte	.LFB120
 8870 2049 34000000 		.4byte	.LFE120-.LFB120
 8871 204d 01       		.uleb128 0x1
 8872 204e 9C       		.byte	0x9c
 8873 204f B6200000 		.4byte	0x20b6
 8874 2053 19       		.uleb128 0x19
 8875 2054 79010000 		.4byte	.LASF91
 8876 2058 01       		.byte	0x1
 8877 2059 AA14     		.2byte	0x14aa
 8878 205b 3F020000 		.4byte	0x23f
 8879 205f C31A0000 		.4byte	.LLST177
 8880 2063 19       		.uleb128 0x19
 8881 2064 CA080000 		.4byte	.LASF212
 8882 2068 01       		.byte	0x1
 8883 2069 AB14     		.2byte	0x14ab
 8884 206b 40010000 		.4byte	0x140
 8885 206f D61A0000 		.4byte	.LLST178
 8886 2073 19       		.uleb128 0x19
 8887 2074 9D050000 		.4byte	.LASF214
 8888 2078 01       		.byte	0x1
 8889 2079 AC14     		.2byte	0x14ac
 8890 207b EB000000 		.4byte	0xeb
 8891 207f 0F1B0000 		.4byte	.LLST179
 8892 2083 1A       		.uleb128 0x1a
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 268


 8893 2084 68100000 		.4byte	.LASF88
 8894 2088 01       		.byte	0x1
 8895 2089 AE14     		.2byte	0x14ae
 8896 208b 97050000 		.4byte	0x597
 8897 208f 3B1B0000 		.4byte	.LLST180
 8898 2093 1A       		.uleb128 0x1a
 8899 2094 2D090000 		.4byte	.LASF196
 8900 2098 01       		.byte	0x1
 8901 2099 AF14     		.2byte	0x14af
 8902 209b EB000000 		.4byte	0xeb
 8903 209f 4E1B0000 		.4byte	.LLST181
 8904 20a3 1D       		.uleb128 0x1d
 8905 20a4 14000000 		.4byte	.LVL488
 8906 20a8 B5220000 		.4byte	0x22b5
 8907 20ac 1D       		.uleb128 0x1d
 8908 20ad 2C000000 		.4byte	.LVL490
 8909 20b1 C0220000 		.4byte	0x22c0
 8910 20b5 00       		.byte	0
 8911 20b6 11       		.uleb128 0x11
 8912 20b7 34020000 		.4byte	0x234
 8913 20bb C6200000 		.4byte	0x20c6
 8914 20bf 12       		.uleb128 0x12
 8915 20c0 A9000000 		.4byte	0xa9
 8916 20c4 04       		.byte	0x4
 8917 20c5 00       		.byte	0
 8918 20c6 21       		.uleb128 0x21
 8919 20c7 36090000 		.4byte	.LASF215
 8920 20cb 01       		.byte	0x1
 8921 20cc 5301     		.2byte	0x153
 8922 20ce B6200000 		.4byte	0x20b6
 8923 20d2 05       		.uleb128 0x5
 8924 20d3 03       		.byte	0x3
 8925 20d4 30000000 		.4byte	pxReadyTasksLists
 8926 20d8 21       		.uleb128 0x21
 8927 20d9 BB0F0000 		.4byte	.LASF216
 8928 20dd 01       		.byte	0x1
 8929 20de 5401     		.2byte	0x154
 8930 20e0 34020000 		.4byte	0x234
 8931 20e4 05       		.uleb128 0x5
 8932 20e5 03       		.byte	0x3
 8933 20e6 94000000 		.4byte	xDelayedTaskList1
 8934 20ea 21       		.uleb128 0x21
 8935 20eb CD0F0000 		.4byte	.LASF217
 8936 20ef 01       		.byte	0x1
 8937 20f0 5501     		.2byte	0x155
 8938 20f2 34020000 		.4byte	0x234
 8939 20f6 05       		.uleb128 0x5
 8940 20f7 03       		.byte	0x3
 8941 20f8 A8000000 		.4byte	xDelayedTaskList2
 8942 20fc 21       		.uleb128 0x21
 8943 20fd B70D0000 		.4byte	.LASF218
 8944 2101 01       		.byte	0x1
 8945 2102 5601     		.2byte	0x156
 8946 2104 0E210000 		.4byte	0x210e
 8947 2108 05       		.uleb128 0x5
 8948 2109 03       		.byte	0x3
 8949 210a 28000000 		.4byte	pxDelayedTaskList
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 269


 8950 210e 08       		.uleb128 0x8
 8951 210f 93110000 		.4byte	0x1193
 8952 2113 21       		.uleb128 0x21
 8953 2114 170E0000 		.4byte	.LASF219
 8954 2118 01       		.byte	0x1
 8955 2119 5701     		.2byte	0x157
 8956 211b 0E210000 		.4byte	0x210e
 8957 211f 05       		.uleb128 0x5
 8958 2120 03       		.byte	0x3
 8959 2121 D0000000 		.4byte	pxOverflowDelayedTaskList
 8960 2125 21       		.uleb128 0x21
 8961 2126 1F060000 		.4byte	.LASF220
 8962 212a 01       		.byte	0x1
 8963 212b 5801     		.2byte	0x158
 8964 212d 34020000 		.4byte	0x234
 8965 2131 05       		.uleb128 0x5
 8966 2132 03       		.byte	0x3
 8967 2133 14000000 		.4byte	xPendingReadyList
 8968 2137 21       		.uleb128 0x21
 8969 2138 9A0E0000 		.4byte	.LASF221
 8970 213c 01       		.byte	0x1
 8971 213d 5C01     		.2byte	0x15c
 8972 213f 34020000 		.4byte	0x234
 8973 2143 05       		.uleb128 0x5
 8974 2144 03       		.byte	0x3
 8975 2145 BC000000 		.4byte	xTasksWaitingTermination
 8976 2149 21       		.uleb128 0x21
 8977 214a 20020000 		.4byte	.LASF222
 8978 214e 01       		.byte	0x1
 8979 214f 5D01     		.2byte	0x15d
 8980 2151 29020000 		.4byte	0x229
 8981 2155 05       		.uleb128 0x5
 8982 2156 03       		.byte	0x3
 8983 2157 E8000000 		.4byte	uxDeletedTasksWaitingCleanUp
 8984 215b 21       		.uleb128 0x21
 8985 215c 7D030000 		.4byte	.LASF223
 8986 2160 01       		.byte	0x1
 8987 2161 6301     		.2byte	0x163
 8988 2163 34020000 		.4byte	0x234
 8989 2167 05       		.uleb128 0x5
 8990 2168 03       		.byte	0x3
 8991 2169 00000000 		.4byte	xSuspendedTaskList
 8992 216d 21       		.uleb128 0x21
 8993 216e 01070000 		.4byte	.LASF224
 8994 2172 01       		.byte	0x1
 8995 2173 6E01     		.2byte	0x16e
 8996 2175 29020000 		.4byte	0x229
 8997 2179 05       		.uleb128 0x5
 8998 217a 03       		.byte	0x3
 8999 217b D4000000 		.4byte	uxCurrentNumberOfTasks
 9000 217f 21       		.uleb128 0x21
 9001 2180 B2000000 		.4byte	.LASF225
 9002 2184 01       		.byte	0x1
 9003 2185 6F01     		.2byte	0x16f
 9004 2187 91210000 		.4byte	0x2191
 9005 218b 05       		.uleb128 0x5
 9006 218c 03       		.byte	0x3
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 270


 9007 218d EC000000 		.4byte	xTickCount
 9008 2191 08       		.uleb128 0x8
 9009 2192 4B010000 		.4byte	0x14b
 9010 2196 21       		.uleb128 0x21
 9011 2197 EB0C0000 		.4byte	.LASF226
 9012 219b 01       		.byte	0x1
 9013 219c 7001     		.2byte	0x170
 9014 219e 29020000 		.4byte	0x229
 9015 21a2 05       		.uleb128 0x5
 9016 21a3 03       		.byte	0x3
 9017 21a4 E4000000 		.4byte	uxTopReadyPriority
 9018 21a8 21       		.uleb128 0x21
 9019 21a9 EE040000 		.4byte	.LASF227
 9020 21ad 01       		.byte	0x1
 9021 21ae 7101     		.2byte	0x171
 9022 21b0 BA210000 		.4byte	0x21ba
 9023 21b4 05       		.uleb128 0x5
 9024 21b5 03       		.byte	0x3
 9025 21b6 DC000000 		.4byte	xSchedulerRunning
 9026 21ba 08       		.uleb128 0x8
 9027 21bb 35010000 		.4byte	0x135
 9028 21bf 21       		.uleb128 0x21
 9029 21c0 850F0000 		.4byte	.LASF228
 9030 21c4 01       		.byte	0x1
 9031 21c5 7201     		.2byte	0x172
 9032 21c7 91210000 		.4byte	0x2191
 9033 21cb 05       		.uleb128 0x5
 9034 21cc 03       		.byte	0x3
 9035 21cd 00010000 		.4byte	xPendedTicks
 9036 21d1 21       		.uleb128 0x21
 9037 21d2 00000000 		.4byte	.LASF229
 9038 21d6 01       		.byte	0x1
 9039 21d7 7301     		.2byte	0x173
 9040 21d9 BA210000 		.4byte	0x21ba
 9041 21dd 05       		.uleb128 0x5
 9042 21de 03       		.byte	0x3
 9043 21df F4000000 		.4byte	xYieldPending
 9044 21e3 21       		.uleb128 0x21
 9045 21e4 04040000 		.4byte	.LASF230
 9046 21e8 01       		.byte	0x1
 9047 21e9 7401     		.2byte	0x174
 9048 21eb BA210000 		.4byte	0x21ba
 9049 21ef 05       		.uleb128 0x5
 9050 21f0 03       		.byte	0x3
 9051 21f1 FC000000 		.4byte	xNumOfOverflows
 9052 21f5 21       		.uleb128 0x21
 9053 21f6 BD000000 		.4byte	.LASF231
 9054 21fa 01       		.byte	0x1
 9055 21fb 7501     		.2byte	0x175
 9056 21fd 40010000 		.4byte	0x140
 9057 2201 05       		.uleb128 0x5
 9058 2202 03       		.byte	0x3
 9059 2203 E0000000 		.4byte	uxTaskNumber
 9060 2207 21       		.uleb128 0x21
 9061 2208 0A060000 		.4byte	.LASF232
 9062 220c 01       		.byte	0x1
 9063 220d 7601     		.2byte	0x176
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 271


 9064 220f 91210000 		.4byte	0x2191
 9065 2213 05       		.uleb128 0x5
 9066 2214 03       		.byte	0x3
 9067 2215 2C000000 		.4byte	xNextTaskUnblockTime
 9068 2219 21       		.uleb128 0x21
 9069 221a 9F070000 		.4byte	.LASF233
 9070 221e 01       		.byte	0x1
 9071 221f 7701     		.2byte	0x177
 9072 2221 3F020000 		.4byte	0x23f
 9073 2225 05       		.uleb128 0x5
 9074 2226 03       		.byte	0x3
 9075 2227 F8000000 		.4byte	xIdleTaskHandle
 9076 222b 21       		.uleb128 0x21
 9077 222c EC050000 		.4byte	.LASF234
 9078 2230 01       		.byte	0x1
 9079 2231 8601     		.2byte	0x186
 9080 2233 29020000 		.4byte	0x229
 9081 2237 05       		.uleb128 0x5
 9082 2238 03       		.byte	0x3
 9083 2239 F0000000 		.4byte	uxSchedulerSuspended
 9084 223d 35       		.uleb128 0x35
 9085 223e 10090000 		.4byte	.LASF235
 9086 2242 09       		.byte	0x9
 9087 2243 1207     		.2byte	0x712
 9088 2245 49220000 		.4byte	0x2249
 9089 2249 08       		.uleb128 0x8
 9090 224a E0000000 		.4byte	0xe0
 9091 224e 36       		.uleb128 0x36
 9092 224f 0D020000 		.4byte	.LASF236
 9093 2253 01       		.byte	0x1
 9094 2254 4D01     		.2byte	0x14d
 9095 2256 60220000 		.4byte	0x2260
 9096 225a 05       		.uleb128 0x5
 9097 225b 03       		.byte	0x3
 9098 225c 00000000 		.4byte	pxCurrentTCB
 9099 2260 08       		.uleb128 0x8
 9100 2261 97050000 		.4byte	0x597
 9101 2265 36       		.uleb128 0x36
 9102 2266 4B100000 		.4byte	.LASF237
 9103 226a 01       		.byte	0x1
 9104 226b 7C01     		.2byte	0x17c
 9105 226d 77220000 		.4byte	0x2277
 9106 2271 05       		.uleb128 0x5
 9107 2272 03       		.byte	0x3
 9108 2273 00000000 		.4byte	uxTopUsedPriority
 9109 2277 08       		.uleb128 0x8
 9110 2278 E21A0000 		.4byte	0x1ae2
 9111 227c 37       		.uleb128 0x37
 9112 227d DF0F0000 		.4byte	.LASF238
 9113 2281 DF0F0000 		.4byte	.LASF238
 9114 2285 0A       		.byte	0xa
 9115 2286 B2       		.byte	0xb2
 9116 2287 37       		.uleb128 0x37
 9117 2288 CD0C0000 		.4byte	.LASF239
 9118 228c CD0C0000 		.4byte	.LASF239
 9119 2290 0B       		.byte	0xb
 9120 2291 19       		.byte	0x19
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 272


 9121 2292 38       		.uleb128 0x38
 9122 2293 DD0A0000 		.4byte	.LASF240
 9123 2297 DD0A0000 		.4byte	.LASF240
 9124 229b 07       		.byte	0x7
 9125 229c BC01     		.2byte	0x1bc
 9126 229e 37       		.uleb128 0x37
 9127 229f 87050000 		.4byte	.LASF241
 9128 22a3 87050000 		.4byte	.LASF241
 9129 22a7 0A       		.byte	0xa
 9130 22a8 7F       		.byte	0x7f
 9131 22a9 38       		.uleb128 0x38
 9132 22aa 3A030000 		.4byte	.LASF242
 9133 22ae 3A030000 		.4byte	.LASF242
 9134 22b2 07       		.byte	0x7
 9135 22b3 B101     		.2byte	0x1b1
 9136 22b5 37       		.uleb128 0x37
 9137 22b6 F90B0000 		.4byte	.LASF243
 9138 22ba F90B0000 		.4byte	.LASF243
 9139 22be 02       		.byte	0x2
 9140 22bf 67       		.byte	0x67
 9141 22c0 37       		.uleb128 0x37
 9142 22c1 AE090000 		.4byte	.LASF244
 9143 22c5 AE090000 		.4byte	.LASF244
 9144 22c9 02       		.byte	0x2
 9145 22ca 68       		.byte	0x68
 9146 22cb 38       		.uleb128 0x38
 9147 22cc AA0D0000 		.4byte	.LASF245
 9148 22d0 AA0D0000 		.4byte	.LASF245
 9149 22d4 07       		.byte	0x7
 9150 22d5 EF01     		.2byte	0x1ef
 9151 22d7 38       		.uleb128 0x38
 9152 22d8 5E010000 		.4byte	.LASF246
 9153 22dc 5E010000 		.4byte	.LASF246
 9154 22e0 07       		.byte	0x7
 9155 22e1 C901     		.2byte	0x1c9
 9156 22e3 37       		.uleb128 0x37
 9157 22e4 70030000 		.4byte	.LASF247
 9158 22e8 70030000 		.4byte	.LASF247
 9159 22ec 0A       		.byte	0xa
 9160 22ed AF       		.byte	0xaf
 9161 22ee 39       		.uleb128 0x39
 9162 22ef CD0C0000 		.4byte	.LASF239
 9163 22f3 CD0C0000 		.4byte	.LASF239
 9164 22f7 38       		.uleb128 0x38
 9165 22f8 4A030000 		.4byte	.LASF248
 9166 22fc 4A030000 		.4byte	.LASF248
 9167 2300 07       		.byte	0x7
 9168 2301 DF01     		.2byte	0x1df
 9169 2303 37       		.uleb128 0x37
 9170 2304 8B070000 		.4byte	.LASF249
 9171 2308 8B070000 		.4byte	.LASF249
 9172 230c 0A       		.byte	0xa
 9173 230d D0       		.byte	0xd0
 9174 230e 37       		.uleb128 0x37
 9175 230f 920F0000 		.4byte	.LASF250
 9176 2313 920F0000 		.4byte	.LASF250
 9177 2317 0A       		.byte	0xa
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 273


 9178 2318 D7       		.byte	0xd7
 9179 2319 38       		.uleb128 0x38
 9180 231a 1C050000 		.4byte	.LASF251
 9181 231e 1C050000 		.4byte	.LASF251
 9182 2322 08       		.byte	0x8
 9183 2323 8D06     		.2byte	0x68d
 9184 2325 00       		.byte	0
 9185              		.section	.debug_abbrev,"",%progbits
 9186              	.Ldebug_abbrev0:
 9187 0000 01       		.uleb128 0x1
 9188 0001 11       		.uleb128 0x11
 9189 0002 01       		.byte	0x1
 9190 0003 25       		.uleb128 0x25
 9191 0004 0E       		.uleb128 0xe
 9192 0005 13       		.uleb128 0x13
 9193 0006 0B       		.uleb128 0xb
 9194 0007 03       		.uleb128 0x3
 9195 0008 0E       		.uleb128 0xe
 9196 0009 1B       		.uleb128 0x1b
 9197 000a 0E       		.uleb128 0xe
 9198 000b 55       		.uleb128 0x55
 9199 000c 17       		.uleb128 0x17
 9200 000d 11       		.uleb128 0x11
 9201 000e 01       		.uleb128 0x1
 9202 000f 10       		.uleb128 0x10
 9203 0010 17       		.uleb128 0x17
 9204 0011 00       		.byte	0
 9205 0012 00       		.byte	0
 9206 0013 02       		.uleb128 0x2
 9207 0014 16       		.uleb128 0x16
 9208 0015 00       		.byte	0
 9209 0016 03       		.uleb128 0x3
 9210 0017 0E       		.uleb128 0xe
 9211 0018 3A       		.uleb128 0x3a
 9212 0019 0B       		.uleb128 0xb
 9213 001a 3B       		.uleb128 0x3b
 9214 001b 0B       		.uleb128 0xb
 9215 001c 49       		.uleb128 0x49
 9216 001d 13       		.uleb128 0x13
 9217 001e 00       		.byte	0
 9218 001f 00       		.byte	0
 9219 0020 03       		.uleb128 0x3
 9220 0021 24       		.uleb128 0x24
 9221 0022 00       		.byte	0
 9222 0023 0B       		.uleb128 0xb
 9223 0024 0B       		.uleb128 0xb
 9224 0025 3E       		.uleb128 0x3e
 9225 0026 0B       		.uleb128 0xb
 9226 0027 03       		.uleb128 0x3
 9227 0028 0E       		.uleb128 0xe
 9228 0029 00       		.byte	0
 9229 002a 00       		.byte	0
 9230 002b 04       		.uleb128 0x4
 9231 002c 24       		.uleb128 0x24
 9232 002d 00       		.byte	0
 9233 002e 0B       		.uleb128 0xb
 9234 002f 0B       		.uleb128 0xb
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 274


 9235 0030 3E       		.uleb128 0x3e
 9236 0031 0B       		.uleb128 0xb
 9237 0032 03       		.uleb128 0x3
 9238 0033 08       		.uleb128 0x8
 9239 0034 00       		.byte	0
 9240 0035 00       		.byte	0
 9241 0036 05       		.uleb128 0x5
 9242 0037 0F       		.uleb128 0xf
 9243 0038 00       		.byte	0
 9244 0039 0B       		.uleb128 0xb
 9245 003a 0B       		.uleb128 0xb
 9246 003b 00       		.byte	0
 9247 003c 00       		.byte	0
 9248 003d 06       		.uleb128 0x6
 9249 003e 0F       		.uleb128 0xf
 9250 003f 00       		.byte	0
 9251 0040 0B       		.uleb128 0xb
 9252 0041 0B       		.uleb128 0xb
 9253 0042 49       		.uleb128 0x49
 9254 0043 13       		.uleb128 0x13
 9255 0044 00       		.byte	0
 9256 0045 00       		.byte	0
 9257 0046 07       		.uleb128 0x7
 9258 0047 26       		.uleb128 0x26
 9259 0048 00       		.byte	0
 9260 0049 49       		.uleb128 0x49
 9261 004a 13       		.uleb128 0x13
 9262 004b 00       		.byte	0
 9263 004c 00       		.byte	0
 9264 004d 08       		.uleb128 0x8
 9265 004e 35       		.uleb128 0x35
 9266 004f 00       		.byte	0
 9267 0050 49       		.uleb128 0x49
 9268 0051 13       		.uleb128 0x13
 9269 0052 00       		.byte	0
 9270 0053 00       		.byte	0
 9271 0054 09       		.uleb128 0x9
 9272 0055 15       		.uleb128 0x15
 9273 0056 01       		.byte	0x1
 9274 0057 27       		.uleb128 0x27
 9275 0058 19       		.uleb128 0x19
 9276 0059 01       		.uleb128 0x1
 9277 005a 13       		.uleb128 0x13
 9278 005b 00       		.byte	0
 9279 005c 00       		.byte	0
 9280 005d 0A       		.uleb128 0xa
 9281 005e 05       		.uleb128 0x5
 9282 005f 00       		.byte	0
 9283 0060 49       		.uleb128 0x49
 9284 0061 13       		.uleb128 0x13
 9285 0062 00       		.byte	0
 9286 0063 00       		.byte	0
 9287 0064 0B       		.uleb128 0xb
 9288 0065 13       		.uleb128 0x13
 9289 0066 01       		.byte	0x1
 9290 0067 03       		.uleb128 0x3
 9291 0068 0E       		.uleb128 0xe
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 275


 9292 0069 0B       		.uleb128 0xb
 9293 006a 0B       		.uleb128 0xb
 9294 006b 3A       		.uleb128 0x3a
 9295 006c 0B       		.uleb128 0xb
 9296 006d 3B       		.uleb128 0x3b
 9297 006e 0B       		.uleb128 0xb
 9298 006f 01       		.uleb128 0x1
 9299 0070 13       		.uleb128 0x13
 9300 0071 00       		.byte	0
 9301 0072 00       		.byte	0
 9302 0073 0C       		.uleb128 0xc
 9303 0074 0D       		.uleb128 0xd
 9304 0075 00       		.byte	0
 9305 0076 03       		.uleb128 0x3
 9306 0077 0E       		.uleb128 0xe
 9307 0078 3A       		.uleb128 0x3a
 9308 0079 0B       		.uleb128 0xb
 9309 007a 3B       		.uleb128 0x3b
 9310 007b 0B       		.uleb128 0xb
 9311 007c 49       		.uleb128 0x49
 9312 007d 13       		.uleb128 0x13
 9313 007e 38       		.uleb128 0x38
 9314 007f 0B       		.uleb128 0xb
 9315 0080 00       		.byte	0
 9316 0081 00       		.byte	0
 9317 0082 0D       		.uleb128 0xd
 9318 0083 13       		.uleb128 0x13
 9319 0084 01       		.byte	0x1
 9320 0085 03       		.uleb128 0x3
 9321 0086 0E       		.uleb128 0xe
 9322 0087 0B       		.uleb128 0xb
 9323 0088 0B       		.uleb128 0xb
 9324 0089 3A       		.uleb128 0x3a
 9325 008a 0B       		.uleb128 0xb
 9326 008b 3B       		.uleb128 0x3b
 9327 008c 05       		.uleb128 0x5
 9328 008d 01       		.uleb128 0x1
 9329 008e 13       		.uleb128 0x13
 9330 008f 00       		.byte	0
 9331 0090 00       		.byte	0
 9332 0091 0E       		.uleb128 0xe
 9333 0092 0D       		.uleb128 0xd
 9334 0093 00       		.byte	0
 9335 0094 03       		.uleb128 0x3
 9336 0095 0E       		.uleb128 0xe
 9337 0096 3A       		.uleb128 0x3a
 9338 0097 0B       		.uleb128 0xb
 9339 0098 3B       		.uleb128 0x3b
 9340 0099 05       		.uleb128 0x5
 9341 009a 49       		.uleb128 0x49
 9342 009b 13       		.uleb128 0x13
 9343 009c 38       		.uleb128 0x38
 9344 009d 0B       		.uleb128 0xb
 9345 009e 00       		.byte	0
 9346 009f 00       		.byte	0
 9347 00a0 0F       		.uleb128 0xf
 9348 00a1 04       		.uleb128 0x4
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 276


 9349 00a2 01       		.byte	0x1
 9350 00a3 0B       		.uleb128 0xb
 9351 00a4 0B       		.uleb128 0xb
 9352 00a5 49       		.uleb128 0x49
 9353 00a6 13       		.uleb128 0x13
 9354 00a7 3A       		.uleb128 0x3a
 9355 00a8 0B       		.uleb128 0xb
 9356 00a9 3B       		.uleb128 0x3b
 9357 00aa 0B       		.uleb128 0xb
 9358 00ab 01       		.uleb128 0x1
 9359 00ac 13       		.uleb128 0x13
 9360 00ad 00       		.byte	0
 9361 00ae 00       		.byte	0
 9362 00af 10       		.uleb128 0x10
 9363 00b0 28       		.uleb128 0x28
 9364 00b1 00       		.byte	0
 9365 00b2 03       		.uleb128 0x3
 9366 00b3 0E       		.uleb128 0xe
 9367 00b4 1C       		.uleb128 0x1c
 9368 00b5 0B       		.uleb128 0xb
 9369 00b6 00       		.byte	0
 9370 00b7 00       		.byte	0
 9371 00b8 11       		.uleb128 0x11
 9372 00b9 01       		.uleb128 0x1
 9373 00ba 01       		.byte	0x1
 9374 00bb 49       		.uleb128 0x49
 9375 00bc 13       		.uleb128 0x13
 9376 00bd 01       		.uleb128 0x1
 9377 00be 13       		.uleb128 0x13
 9378 00bf 00       		.byte	0
 9379 00c0 00       		.byte	0
 9380 00c1 12       		.uleb128 0x12
 9381 00c2 21       		.uleb128 0x21
 9382 00c3 00       		.byte	0
 9383 00c4 49       		.uleb128 0x49
 9384 00c5 13       		.uleb128 0x13
 9385 00c6 2F       		.uleb128 0x2f
 9386 00c7 0B       		.uleb128 0xb
 9387 00c8 00       		.byte	0
 9388 00c9 00       		.byte	0
 9389 00ca 13       		.uleb128 0x13
 9390 00cb 16       		.uleb128 0x16
 9391 00cc 00       		.byte	0
 9392 00cd 03       		.uleb128 0x3
 9393 00ce 0E       		.uleb128 0xe
 9394 00cf 3A       		.uleb128 0x3a
 9395 00d0 0B       		.uleb128 0xb
 9396 00d1 3B       		.uleb128 0x3b
 9397 00d2 05       		.uleb128 0x5
 9398 00d3 49       		.uleb128 0x49
 9399 00d4 13       		.uleb128 0x13
 9400 00d5 00       		.byte	0
 9401 00d6 00       		.byte	0
 9402 00d7 14       		.uleb128 0x14
 9403 00d8 2E       		.uleb128 0x2e
 9404 00d9 01       		.byte	0x1
 9405 00da 03       		.uleb128 0x3
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 277


 9406 00db 0E       		.uleb128 0xe
 9407 00dc 3A       		.uleb128 0x3a
 9408 00dd 0B       		.uleb128 0xb
 9409 00de 3B       		.uleb128 0x3b
 9410 00df 0B       		.uleb128 0xb
 9411 00e0 27       		.uleb128 0x27
 9412 00e1 19       		.uleb128 0x19
 9413 00e2 49       		.uleb128 0x49
 9414 00e3 13       		.uleb128 0x13
 9415 00e4 20       		.uleb128 0x20
 9416 00e5 0B       		.uleb128 0xb
 9417 00e6 01       		.uleb128 0x1
 9418 00e7 13       		.uleb128 0x13
 9419 00e8 00       		.byte	0
 9420 00e9 00       		.byte	0
 9421 00ea 15       		.uleb128 0x15
 9422 00eb 34       		.uleb128 0x34
 9423 00ec 00       		.byte	0
 9424 00ed 03       		.uleb128 0x3
 9425 00ee 0E       		.uleb128 0xe
 9426 00ef 3A       		.uleb128 0x3a
 9427 00f0 0B       		.uleb128 0xb
 9428 00f1 3B       		.uleb128 0x3b
 9429 00f2 0B       		.uleb128 0xb
 9430 00f3 49       		.uleb128 0x49
 9431 00f4 13       		.uleb128 0x13
 9432 00f5 00       		.byte	0
 9433 00f6 00       		.byte	0
 9434 00f7 16       		.uleb128 0x16
 9435 00f8 2E       		.uleb128 0x2e
 9436 00f9 01       		.byte	0x1
 9437 00fa 03       		.uleb128 0x3
 9438 00fb 0E       		.uleb128 0xe
 9439 00fc 3A       		.uleb128 0x3a
 9440 00fd 0B       		.uleb128 0xb
 9441 00fe 3B       		.uleb128 0x3b
 9442 00ff 0B       		.uleb128 0xb
 9443 0100 27       		.uleb128 0x27
 9444 0101 19       		.uleb128 0x19
 9445 0102 20       		.uleb128 0x20
 9446 0103 0B       		.uleb128 0xb
 9447 0104 01       		.uleb128 0x1
 9448 0105 13       		.uleb128 0x13
 9449 0106 00       		.byte	0
 9450 0107 00       		.byte	0
 9451 0108 17       		.uleb128 0x17
 9452 0109 05       		.uleb128 0x5
 9453 010a 00       		.byte	0
 9454 010b 03       		.uleb128 0x3
 9455 010c 0E       		.uleb128 0xe
 9456 010d 3A       		.uleb128 0x3a
 9457 010e 0B       		.uleb128 0xb
 9458 010f 3B       		.uleb128 0x3b
 9459 0110 0B       		.uleb128 0xb
 9460 0111 49       		.uleb128 0x49
 9461 0112 13       		.uleb128 0x13
 9462 0113 00       		.byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 278


 9463 0114 00       		.byte	0
 9464 0115 18       		.uleb128 0x18
 9465 0116 2E       		.uleb128 0x2e
 9466 0117 01       		.byte	0x1
 9467 0118 03       		.uleb128 0x3
 9468 0119 0E       		.uleb128 0xe
 9469 011a 3A       		.uleb128 0x3a
 9470 011b 0B       		.uleb128 0xb
 9471 011c 3B       		.uleb128 0x3b
 9472 011d 05       		.uleb128 0x5
 9473 011e 27       		.uleb128 0x27
 9474 011f 19       		.uleb128 0x19
 9475 0120 49       		.uleb128 0x49
 9476 0121 13       		.uleb128 0x13
 9477 0122 11       		.uleb128 0x11
 9478 0123 01       		.uleb128 0x1
 9479 0124 12       		.uleb128 0x12
 9480 0125 06       		.uleb128 0x6
 9481 0126 40       		.uleb128 0x40
 9482 0127 18       		.uleb128 0x18
 9483 0128 9742     		.uleb128 0x2117
 9484 012a 19       		.uleb128 0x19
 9485 012b 01       		.uleb128 0x1
 9486 012c 13       		.uleb128 0x13
 9487 012d 00       		.byte	0
 9488 012e 00       		.byte	0
 9489 012f 19       		.uleb128 0x19
 9490 0130 05       		.uleb128 0x5
 9491 0131 00       		.byte	0
 9492 0132 03       		.uleb128 0x3
 9493 0133 0E       		.uleb128 0xe
 9494 0134 3A       		.uleb128 0x3a
 9495 0135 0B       		.uleb128 0xb
 9496 0136 3B       		.uleb128 0x3b
 9497 0137 05       		.uleb128 0x5
 9498 0138 49       		.uleb128 0x49
 9499 0139 13       		.uleb128 0x13
 9500 013a 02       		.uleb128 0x2
 9501 013b 17       		.uleb128 0x17
 9502 013c 00       		.byte	0
 9503 013d 00       		.byte	0
 9504 013e 1A       		.uleb128 0x1a
 9505 013f 34       		.uleb128 0x34
 9506 0140 00       		.byte	0
 9507 0141 03       		.uleb128 0x3
 9508 0142 0E       		.uleb128 0xe
 9509 0143 3A       		.uleb128 0x3a
 9510 0144 0B       		.uleb128 0xb
 9511 0145 3B       		.uleb128 0x3b
 9512 0146 05       		.uleb128 0x5
 9513 0147 49       		.uleb128 0x49
 9514 0148 13       		.uleb128 0x13
 9515 0149 02       		.uleb128 0x2
 9516 014a 17       		.uleb128 0x17
 9517 014b 00       		.byte	0
 9518 014c 00       		.byte	0
 9519 014d 1B       		.uleb128 0x1b
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 279


 9520 014e 2E       		.uleb128 0x2e
 9521 014f 00       		.byte	0
 9522 0150 03       		.uleb128 0x3
 9523 0151 0E       		.uleb128 0xe
 9524 0152 3A       		.uleb128 0x3a
 9525 0153 0B       		.uleb128 0xb
 9526 0154 3B       		.uleb128 0x3b
 9527 0155 05       		.uleb128 0x5
 9528 0156 27       		.uleb128 0x27
 9529 0157 19       		.uleb128 0x19
 9530 0158 11       		.uleb128 0x11
 9531 0159 01       		.uleb128 0x1
 9532 015a 12       		.uleb128 0x12
 9533 015b 06       		.uleb128 0x6
 9534 015c 40       		.uleb128 0x40
 9535 015d 18       		.uleb128 0x18
 9536 015e 9742     		.uleb128 0x2117
 9537 0160 19       		.uleb128 0x19
 9538 0161 00       		.byte	0
 9539 0162 00       		.byte	0
 9540 0163 1C       		.uleb128 0x1c
 9541 0164 2E       		.uleb128 0x2e
 9542 0165 01       		.byte	0x1
 9543 0166 03       		.uleb128 0x3
 9544 0167 0E       		.uleb128 0xe
 9545 0168 3A       		.uleb128 0x3a
 9546 0169 0B       		.uleb128 0xb
 9547 016a 3B       		.uleb128 0x3b
 9548 016b 05       		.uleb128 0x5
 9549 016c 27       		.uleb128 0x27
 9550 016d 19       		.uleb128 0x19
 9551 016e 11       		.uleb128 0x11
 9552 016f 01       		.uleb128 0x1
 9553 0170 12       		.uleb128 0x12
 9554 0171 06       		.uleb128 0x6
 9555 0172 40       		.uleb128 0x40
 9556 0173 18       		.uleb128 0x18
 9557 0174 9742     		.uleb128 0x2117
 9558 0176 19       		.uleb128 0x19
 9559 0177 01       		.uleb128 0x1
 9560 0178 13       		.uleb128 0x13
 9561 0179 00       		.byte	0
 9562 017a 00       		.byte	0
 9563 017b 1D       		.uleb128 0x1d
 9564 017c 898201   		.uleb128 0x4109
 9565 017f 00       		.byte	0
 9566 0180 11       		.uleb128 0x11
 9567 0181 01       		.uleb128 0x1
 9568 0182 31       		.uleb128 0x31
 9569 0183 13       		.uleb128 0x13
 9570 0184 00       		.byte	0
 9571 0185 00       		.byte	0
 9572 0186 1E       		.uleb128 0x1e
 9573 0187 898201   		.uleb128 0x4109
 9574 018a 01       		.byte	0x1
 9575 018b 11       		.uleb128 0x11
 9576 018c 01       		.uleb128 0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 280


 9577 018d 31       		.uleb128 0x31
 9578 018e 13       		.uleb128 0x13
 9579 018f 00       		.byte	0
 9580 0190 00       		.byte	0
 9581 0191 1F       		.uleb128 0x1f
 9582 0192 8A8201   		.uleb128 0x410a
 9583 0195 00       		.byte	0
 9584 0196 02       		.uleb128 0x2
 9585 0197 18       		.uleb128 0x18
 9586 0198 9142     		.uleb128 0x2111
 9587 019a 18       		.uleb128 0x18
 9588 019b 00       		.byte	0
 9589 019c 00       		.byte	0
 9590 019d 20       		.uleb128 0x20
 9591 019e 05       		.uleb128 0x5
 9592 019f 00       		.byte	0
 9593 01a0 03       		.uleb128 0x3
 9594 01a1 0E       		.uleb128 0xe
 9595 01a2 3A       		.uleb128 0x3a
 9596 01a3 0B       		.uleb128 0xb
 9597 01a4 3B       		.uleb128 0x3b
 9598 01a5 05       		.uleb128 0x5
 9599 01a6 49       		.uleb128 0x49
 9600 01a7 13       		.uleb128 0x13
 9601 01a8 02       		.uleb128 0x2
 9602 01a9 18       		.uleb128 0x18
 9603 01aa 00       		.byte	0
 9604 01ab 00       		.byte	0
 9605 01ac 21       		.uleb128 0x21
 9606 01ad 34       		.uleb128 0x34
 9607 01ae 00       		.byte	0
 9608 01af 03       		.uleb128 0x3
 9609 01b0 0E       		.uleb128 0xe
 9610 01b1 3A       		.uleb128 0x3a
 9611 01b2 0B       		.uleb128 0xb
 9612 01b3 3B       		.uleb128 0x3b
 9613 01b4 05       		.uleb128 0x5
 9614 01b5 49       		.uleb128 0x49
 9615 01b6 13       		.uleb128 0x13
 9616 01b7 02       		.uleb128 0x2
 9617 01b8 18       		.uleb128 0x18
 9618 01b9 00       		.byte	0
 9619 01ba 00       		.byte	0
 9620 01bb 22       		.uleb128 0x22
 9621 01bc 34       		.uleb128 0x34
 9622 01bd 00       		.byte	0
 9623 01be 03       		.uleb128 0x3
 9624 01bf 08       		.uleb128 0x8
 9625 01c0 3A       		.uleb128 0x3a
 9626 01c1 0B       		.uleb128 0xb
 9627 01c2 3B       		.uleb128 0x3b
 9628 01c3 05       		.uleb128 0x5
 9629 01c4 49       		.uleb128 0x49
 9630 01c5 13       		.uleb128 0x13
 9631 01c6 02       		.uleb128 0x2
 9632 01c7 17       		.uleb128 0x17
 9633 01c8 00       		.byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 281


 9634 01c9 00       		.byte	0
 9635 01ca 23       		.uleb128 0x23
 9636 01cb 898201   		.uleb128 0x4109
 9637 01ce 01       		.byte	0x1
 9638 01cf 11       		.uleb128 0x11
 9639 01d0 01       		.uleb128 0x1
 9640 01d1 31       		.uleb128 0x31
 9641 01d2 13       		.uleb128 0x13
 9642 01d3 01       		.uleb128 0x1
 9643 01d4 13       		.uleb128 0x13
 9644 01d5 00       		.byte	0
 9645 01d6 00       		.byte	0
 9646 01d7 24       		.uleb128 0x24
 9647 01d8 0B       		.uleb128 0xb
 9648 01d9 01       		.byte	0x1
 9649 01da 11       		.uleb128 0x11
 9650 01db 01       		.uleb128 0x1
 9651 01dc 12       		.uleb128 0x12
 9652 01dd 06       		.uleb128 0x6
 9653 01de 01       		.uleb128 0x1
 9654 01df 13       		.uleb128 0x13
 9655 01e0 00       		.byte	0
 9656 01e1 00       		.byte	0
 9657 01e2 25       		.uleb128 0x25
 9658 01e3 0B       		.uleb128 0xb
 9659 01e4 01       		.byte	0x1
 9660 01e5 11       		.uleb128 0x11
 9661 01e6 01       		.uleb128 0x1
 9662 01e7 12       		.uleb128 0x12
 9663 01e8 06       		.uleb128 0x6
 9664 01e9 00       		.byte	0
 9665 01ea 00       		.byte	0
 9666 01eb 26       		.uleb128 0x26
 9667 01ec 2E       		.uleb128 0x2e
 9668 01ed 01       		.byte	0x1
 9669 01ee 03       		.uleb128 0x3
 9670 01ef 0E       		.uleb128 0xe
 9671 01f0 3A       		.uleb128 0x3a
 9672 01f1 0B       		.uleb128 0xb
 9673 01f2 3B       		.uleb128 0x3b
 9674 01f3 05       		.uleb128 0x5
 9675 01f4 27       		.uleb128 0x27
 9676 01f5 19       		.uleb128 0x19
 9677 01f6 8701     		.uleb128 0x87
 9678 01f8 19       		.uleb128 0x19
 9679 01f9 11       		.uleb128 0x11
 9680 01fa 01       		.uleb128 0x1
 9681 01fb 12       		.uleb128 0x12
 9682 01fc 06       		.uleb128 0x6
 9683 01fd 40       		.uleb128 0x40
 9684 01fe 18       		.uleb128 0x18
 9685 01ff 9742     		.uleb128 0x2117
 9686 0201 19       		.uleb128 0x19
 9687 0202 01       		.uleb128 0x1
 9688 0203 13       		.uleb128 0x13
 9689 0204 00       		.byte	0
 9690 0205 00       		.byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 282


 9691 0206 27       		.uleb128 0x27
 9692 0207 2E       		.uleb128 0x2e
 9693 0208 01       		.byte	0x1
 9694 0209 3F       		.uleb128 0x3f
 9695 020a 19       		.uleb128 0x19
 9696 020b 03       		.uleb128 0x3
 9697 020c 0E       		.uleb128 0xe
 9698 020d 3A       		.uleb128 0x3a
 9699 020e 0B       		.uleb128 0xb
 9700 020f 3B       		.uleb128 0x3b
 9701 0210 05       		.uleb128 0x5
 9702 0211 27       		.uleb128 0x27
 9703 0212 19       		.uleb128 0x19
 9704 0213 49       		.uleb128 0x49
 9705 0214 13       		.uleb128 0x13
 9706 0215 11       		.uleb128 0x11
 9707 0216 01       		.uleb128 0x1
 9708 0217 12       		.uleb128 0x12
 9709 0218 06       		.uleb128 0x6
 9710 0219 40       		.uleb128 0x40
 9711 021a 18       		.uleb128 0x18
 9712 021b 9742     		.uleb128 0x2117
 9713 021d 19       		.uleb128 0x19
 9714 021e 01       		.uleb128 0x1
 9715 021f 13       		.uleb128 0x13
 9716 0220 00       		.byte	0
 9717 0221 00       		.byte	0
 9718 0222 28       		.uleb128 0x28
 9719 0223 2E       		.uleb128 0x2e
 9720 0224 01       		.byte	0x1
 9721 0225 3F       		.uleb128 0x3f
 9722 0226 19       		.uleb128 0x19
 9723 0227 03       		.uleb128 0x3
 9724 0228 0E       		.uleb128 0xe
 9725 0229 3A       		.uleb128 0x3a
 9726 022a 0B       		.uleb128 0xb
 9727 022b 3B       		.uleb128 0x3b
 9728 022c 05       		.uleb128 0x5
 9729 022d 27       		.uleb128 0x27
 9730 022e 19       		.uleb128 0x19
 9731 022f 11       		.uleb128 0x11
 9732 0230 01       		.uleb128 0x1
 9733 0231 12       		.uleb128 0x12
 9734 0232 06       		.uleb128 0x6
 9735 0233 40       		.uleb128 0x40
 9736 0234 18       		.uleb128 0x18
 9737 0235 9742     		.uleb128 0x2117
 9738 0237 19       		.uleb128 0x19
 9739 0238 01       		.uleb128 0x1
 9740 0239 13       		.uleb128 0x13
 9741 023a 00       		.byte	0
 9742 023b 00       		.byte	0
 9743 023c 29       		.uleb128 0x29
 9744 023d 0B       		.uleb128 0xb
 9745 023e 01       		.byte	0x1
 9746 023f 55       		.uleb128 0x55
 9747 0240 17       		.uleb128 0x17
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 283


 9748 0241 01       		.uleb128 0x1
 9749 0242 13       		.uleb128 0x13
 9750 0243 00       		.byte	0
 9751 0244 00       		.byte	0
 9752 0245 2A       		.uleb128 0x2a
 9753 0246 34       		.uleb128 0x34
 9754 0247 00       		.byte	0
 9755 0248 03       		.uleb128 0x3
 9756 0249 0E       		.uleb128 0xe
 9757 024a 3A       		.uleb128 0x3a
 9758 024b 0B       		.uleb128 0xb
 9759 024c 3B       		.uleb128 0x3b
 9760 024d 05       		.uleb128 0x5
 9761 024e 49       		.uleb128 0x49
 9762 024f 13       		.uleb128 0x13
 9763 0250 00       		.byte	0
 9764 0251 00       		.byte	0
 9765 0252 2B       		.uleb128 0x2b
 9766 0253 1D       		.uleb128 0x1d
 9767 0254 01       		.byte	0x1
 9768 0255 31       		.uleb128 0x31
 9769 0256 13       		.uleb128 0x13
 9770 0257 11       		.uleb128 0x11
 9771 0258 01       		.uleb128 0x1
 9772 0259 12       		.uleb128 0x12
 9773 025a 06       		.uleb128 0x6
 9774 025b 58       		.uleb128 0x58
 9775 025c 0B       		.uleb128 0xb
 9776 025d 59       		.uleb128 0x59
 9777 025e 05       		.uleb128 0x5
 9778 025f 01       		.uleb128 0x1
 9779 0260 13       		.uleb128 0x13
 9780 0261 00       		.byte	0
 9781 0262 00       		.byte	0
 9782 0263 2C       		.uleb128 0x2c
 9783 0264 34       		.uleb128 0x34
 9784 0265 00       		.byte	0
 9785 0266 31       		.uleb128 0x31
 9786 0267 13       		.uleb128 0x13
 9787 0268 00       		.byte	0
 9788 0269 00       		.byte	0
 9789 026a 2D       		.uleb128 0x2d
 9790 026b 1D       		.uleb128 0x1d
 9791 026c 01       		.byte	0x1
 9792 026d 31       		.uleb128 0x31
 9793 026e 13       		.uleb128 0x13
 9794 026f 11       		.uleb128 0x11
 9795 0270 01       		.uleb128 0x1
 9796 0271 12       		.uleb128 0x12
 9797 0272 06       		.uleb128 0x6
 9798 0273 58       		.uleb128 0x58
 9799 0274 0B       		.uleb128 0xb
 9800 0275 59       		.uleb128 0x59
 9801 0276 05       		.uleb128 0x5
 9802 0277 00       		.byte	0
 9803 0278 00       		.byte	0
 9804 0279 2E       		.uleb128 0x2e
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 284


 9805 027a 05       		.uleb128 0x5
 9806 027b 00       		.byte	0
 9807 027c 31       		.uleb128 0x31
 9808 027d 13       		.uleb128 0x13
 9809 027e 02       		.uleb128 0x2
 9810 027f 17       		.uleb128 0x17
 9811 0280 00       		.byte	0
 9812 0281 00       		.byte	0
 9813 0282 2F       		.uleb128 0x2f
 9814 0283 2E       		.uleb128 0x2e
 9815 0284 00       		.byte	0
 9816 0285 3F       		.uleb128 0x3f
 9817 0286 19       		.uleb128 0x19
 9818 0287 03       		.uleb128 0x3
 9819 0288 0E       		.uleb128 0xe
 9820 0289 3A       		.uleb128 0x3a
 9821 028a 0B       		.uleb128 0xb
 9822 028b 3B       		.uleb128 0x3b
 9823 028c 05       		.uleb128 0x5
 9824 028d 27       		.uleb128 0x27
 9825 028e 19       		.uleb128 0x19
 9826 028f 11       		.uleb128 0x11
 9827 0290 01       		.uleb128 0x1
 9828 0291 12       		.uleb128 0x12
 9829 0292 06       		.uleb128 0x6
 9830 0293 40       		.uleb128 0x40
 9831 0294 18       		.uleb128 0x18
 9832 0295 9742     		.uleb128 0x2117
 9833 0297 19       		.uleb128 0x19
 9834 0298 00       		.byte	0
 9835 0299 00       		.byte	0
 9836 029a 30       		.uleb128 0x30
 9837 029b 34       		.uleb128 0x34
 9838 029c 00       		.byte	0
 9839 029d 03       		.uleb128 0x3
 9840 029e 0E       		.uleb128 0xe
 9841 029f 3A       		.uleb128 0x3a
 9842 02a0 0B       		.uleb128 0xb
 9843 02a1 3B       		.uleb128 0x3b
 9844 02a2 05       		.uleb128 0x5
 9845 02a3 49       		.uleb128 0x49
 9846 02a4 13       		.uleb128 0x13
 9847 02a5 1C       		.uleb128 0x1c
 9848 02a6 0B       		.uleb128 0xb
 9849 02a7 00       		.byte	0
 9850 02a8 00       		.byte	0
 9851 02a9 31       		.uleb128 0x31
 9852 02aa 2E       		.uleb128 0x2e
 9853 02ab 00       		.byte	0
 9854 02ac 3F       		.uleb128 0x3f
 9855 02ad 19       		.uleb128 0x19
 9856 02ae 03       		.uleb128 0x3
 9857 02af 0E       		.uleb128 0xe
 9858 02b0 3A       		.uleb128 0x3a
 9859 02b1 0B       		.uleb128 0xb
 9860 02b2 3B       		.uleb128 0x3b
 9861 02b3 05       		.uleb128 0x5
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 285


 9862 02b4 27       		.uleb128 0x27
 9863 02b5 19       		.uleb128 0x19
 9864 02b6 49       		.uleb128 0x49
 9865 02b7 13       		.uleb128 0x13
 9866 02b8 11       		.uleb128 0x11
 9867 02b9 01       		.uleb128 0x1
 9868 02ba 12       		.uleb128 0x12
 9869 02bb 06       		.uleb128 0x6
 9870 02bc 40       		.uleb128 0x40
 9871 02bd 18       		.uleb128 0x18
 9872 02be 9742     		.uleb128 0x2117
 9873 02c0 19       		.uleb128 0x19
 9874 02c1 00       		.byte	0
 9875 02c2 00       		.byte	0
 9876 02c3 32       		.uleb128 0x32
 9877 02c4 0B       		.uleb128 0xb
 9878 02c5 01       		.byte	0x1
 9879 02c6 55       		.uleb128 0x55
 9880 02c7 17       		.uleb128 0x17
 9881 02c8 00       		.byte	0
 9882 02c9 00       		.byte	0
 9883 02ca 33       		.uleb128 0x33
 9884 02cb 34       		.uleb128 0x34
 9885 02cc 00       		.byte	0
 9886 02cd 03       		.uleb128 0x3
 9887 02ce 0E       		.uleb128 0xe
 9888 02cf 3A       		.uleb128 0x3a
 9889 02d0 0B       		.uleb128 0xb
 9890 02d1 3B       		.uleb128 0x3b
 9891 02d2 05       		.uleb128 0x5
 9892 02d3 49       		.uleb128 0x49
 9893 02d4 13       		.uleb128 0x13
 9894 02d5 1C       		.uleb128 0x1c
 9895 02d6 0D       		.uleb128 0xd
 9896 02d7 00       		.byte	0
 9897 02d8 00       		.byte	0
 9898 02d9 34       		.uleb128 0x34
 9899 02da 34       		.uleb128 0x34
 9900 02db 00       		.byte	0
 9901 02dc 31       		.uleb128 0x31
 9902 02dd 13       		.uleb128 0x13
 9903 02de 02       		.uleb128 0x2
 9904 02df 18       		.uleb128 0x18
 9905 02e0 00       		.byte	0
 9906 02e1 00       		.byte	0
 9907 02e2 35       		.uleb128 0x35
 9908 02e3 34       		.uleb128 0x34
 9909 02e4 00       		.byte	0
 9910 02e5 03       		.uleb128 0x3
 9911 02e6 0E       		.uleb128 0xe
 9912 02e7 3A       		.uleb128 0x3a
 9913 02e8 0B       		.uleb128 0xb
 9914 02e9 3B       		.uleb128 0x3b
 9915 02ea 05       		.uleb128 0x5
 9916 02eb 49       		.uleb128 0x49
 9917 02ec 13       		.uleb128 0x13
 9918 02ed 3F       		.uleb128 0x3f
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 286


 9919 02ee 19       		.uleb128 0x19
 9920 02ef 3C       		.uleb128 0x3c
 9921 02f0 19       		.uleb128 0x19
 9922 02f1 00       		.byte	0
 9923 02f2 00       		.byte	0
 9924 02f3 36       		.uleb128 0x36
 9925 02f4 34       		.uleb128 0x34
 9926 02f5 00       		.byte	0
 9927 02f6 03       		.uleb128 0x3
 9928 02f7 0E       		.uleb128 0xe
 9929 02f8 3A       		.uleb128 0x3a
 9930 02f9 0B       		.uleb128 0xb
 9931 02fa 3B       		.uleb128 0x3b
 9932 02fb 05       		.uleb128 0x5
 9933 02fc 49       		.uleb128 0x49
 9934 02fd 13       		.uleb128 0x13
 9935 02fe 3F       		.uleb128 0x3f
 9936 02ff 19       		.uleb128 0x19
 9937 0300 02       		.uleb128 0x2
 9938 0301 18       		.uleb128 0x18
 9939 0302 00       		.byte	0
 9940 0303 00       		.byte	0
 9941 0304 37       		.uleb128 0x37
 9942 0305 2E       		.uleb128 0x2e
 9943 0306 00       		.byte	0
 9944 0307 3F       		.uleb128 0x3f
 9945 0308 19       		.uleb128 0x19
 9946 0309 3C       		.uleb128 0x3c
 9947 030a 19       		.uleb128 0x19
 9948 030b 6E       		.uleb128 0x6e
 9949 030c 0E       		.uleb128 0xe
 9950 030d 03       		.uleb128 0x3
 9951 030e 0E       		.uleb128 0xe
 9952 030f 3A       		.uleb128 0x3a
 9953 0310 0B       		.uleb128 0xb
 9954 0311 3B       		.uleb128 0x3b
 9955 0312 0B       		.uleb128 0xb
 9956 0313 00       		.byte	0
 9957 0314 00       		.byte	0
 9958 0315 38       		.uleb128 0x38
 9959 0316 2E       		.uleb128 0x2e
 9960 0317 00       		.byte	0
 9961 0318 3F       		.uleb128 0x3f
 9962 0319 19       		.uleb128 0x19
 9963 031a 3C       		.uleb128 0x3c
 9964 031b 19       		.uleb128 0x19
 9965 031c 6E       		.uleb128 0x6e
 9966 031d 0E       		.uleb128 0xe
 9967 031e 03       		.uleb128 0x3
 9968 031f 0E       		.uleb128 0xe
 9969 0320 3A       		.uleb128 0x3a
 9970 0321 0B       		.uleb128 0xb
 9971 0322 3B       		.uleb128 0x3b
 9972 0323 05       		.uleb128 0x5
 9973 0324 00       		.byte	0
 9974 0325 00       		.byte	0
 9975 0326 39       		.uleb128 0x39
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 287


 9976 0327 2E       		.uleb128 0x2e
 9977 0328 00       		.byte	0
 9978 0329 3F       		.uleb128 0x3f
 9979 032a 19       		.uleb128 0x19
 9980 032b 3C       		.uleb128 0x3c
 9981 032c 19       		.uleb128 0x19
 9982 032d 6E       		.uleb128 0x6e
 9983 032e 0E       		.uleb128 0xe
 9984 032f 03       		.uleb128 0x3
 9985 0330 0E       		.uleb128 0xe
 9986 0331 00       		.byte	0
 9987 0332 00       		.byte	0
 9988 0333 00       		.byte	0
 9989              		.section	.debug_loc,"",%progbits
 9990              	.Ldebug_loc0:
 9991              	.LLST0:
 9992 0000 00000000 		.4byte	.LVL0
 9993 0004 14000000 		.4byte	.LVL1
 9994 0008 0100     		.2byte	0x1
 9995 000a 50       		.byte	0x50
 9996 000b 14000000 		.4byte	.LVL1
 9997 000f 16000000 		.4byte	.LVL2
 9998 0013 0400     		.2byte	0x4
 9999 0015 F3       		.byte	0xf3
 10000 0016 01       		.uleb128 0x1
 10001 0017 50       		.byte	0x50
 10002 0018 9F       		.byte	0x9f
 10003 0019 16000000 		.4byte	.LVL2
 10004 001d 18000000 		.4byte	.LVL3
 10005 0021 0100     		.2byte	0x1
 10006 0023 50       		.byte	0x50
 10007 0024 18000000 		.4byte	.LVL3
 10008 0028 1A000000 		.4byte	.LVL4
 10009 002c 0400     		.2byte	0x4
 10010 002e F3       		.byte	0xf3
 10011 002f 01       		.uleb128 0x1
 10012 0030 50       		.byte	0x50
 10013 0031 9F       		.byte	0x9f
 10014 0032 1A000000 		.4byte	.LVL4
 10015 0036 1C000000 		.4byte	.LVL5
 10016 003a 0100     		.2byte	0x1
 10017 003c 50       		.byte	0x50
 10018 003d 1C000000 		.4byte	.LVL5
 10019 0041 1E000000 		.4byte	.LVL6
 10020 0045 0400     		.2byte	0x4
 10021 0047 F3       		.byte	0xf3
 10022 0048 01       		.uleb128 0x1
 10023 0049 50       		.byte	0x50
 10024 004a 9F       		.byte	0x9f
 10025 004b 1E000000 		.4byte	.LVL6
 10026 004f 20000000 		.4byte	.LVL7
 10027 0053 0100     		.2byte	0x1
 10028 0055 50       		.byte	0x50
 10029 0056 20000000 		.4byte	.LVL7
 10030 005a 2C000000 		.4byte	.LFE79
 10031 005e 0400     		.2byte	0x4
 10032 0060 F3       		.byte	0xf3
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 288


 10033 0061 01       		.uleb128 0x1
 10034 0062 50       		.byte	0x50
 10035 0063 9F       		.byte	0x9f
 10036 0064 00000000 		.4byte	0
 10037 0068 00000000 		.4byte	0
 10038              	.LLST1:
 10039 006c 00000000 		.4byte	.LVL0
 10040 0070 20000000 		.4byte	.LVL7
 10041 0074 0200     		.2byte	0x2
 10042 0076 30       		.byte	0x30
 10043 0077 9F       		.byte	0x9f
 10044 0078 20000000 		.4byte	.LVL7
 10045 007c 2C000000 		.4byte	.LFE79
 10046 0080 0100     		.2byte	0x1
 10047 0082 50       		.byte	0x50
 10048 0083 00000000 		.4byte	0
 10049 0087 00000000 		.4byte	0
 10050              	.LLST2:
 10051 008b 00000000 		.4byte	.LVL0
 10052 008f 14000000 		.4byte	.LVL1
 10053 0093 0100     		.2byte	0x1
 10054 0095 50       		.byte	0x50
 10055 0096 14000000 		.4byte	.LVL1
 10056 009a 16000000 		.4byte	.LVL2
 10057 009e 0400     		.2byte	0x4
 10058 00a0 F3       		.byte	0xf3
 10059 00a1 01       		.uleb128 0x1
 10060 00a2 50       		.byte	0x50
 10061 00a3 9F       		.byte	0x9f
 10062 00a4 16000000 		.4byte	.LVL2
 10063 00a8 18000000 		.4byte	.LVL3
 10064 00ac 0100     		.2byte	0x1
 10065 00ae 50       		.byte	0x50
 10066 00af 18000000 		.4byte	.LVL3
 10067 00b3 1A000000 		.4byte	.LVL4
 10068 00b7 0400     		.2byte	0x4
 10069 00b9 F3       		.byte	0xf3
 10070 00ba 01       		.uleb128 0x1
 10071 00bb 50       		.byte	0x50
 10072 00bc 9F       		.byte	0x9f
 10073 00bd 1A000000 		.4byte	.LVL4
 10074 00c1 1C000000 		.4byte	.LVL5
 10075 00c5 0100     		.2byte	0x1
 10076 00c7 50       		.byte	0x50
 10077 00c8 1C000000 		.4byte	.LVL5
 10078 00cc 1E000000 		.4byte	.LVL6
 10079 00d0 0400     		.2byte	0x4
 10080 00d2 F3       		.byte	0xf3
 10081 00d3 01       		.uleb128 0x1
 10082 00d4 50       		.byte	0x50
 10083 00d5 9F       		.byte	0x9f
 10084 00d6 1E000000 		.4byte	.LVL6
 10085 00da 20000000 		.4byte	.LVL7
 10086 00de 0100     		.2byte	0x1
 10087 00e0 50       		.byte	0x50
 10088 00e1 20000000 		.4byte	.LVL7
 10089 00e5 2C000000 		.4byte	.LFE79
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 289


 10090 00e9 0400     		.2byte	0x4
 10091 00eb F3       		.byte	0xf3
 10092 00ec 01       		.uleb128 0x1
 10093 00ed 50       		.byte	0x50
 10094 00ee 9F       		.byte	0x9f
 10095 00ef 00000000 		.4byte	0
 10096 00f3 00000000 		.4byte	0
 10097              	.LLST3:
 10098 00f7 00000000 		.4byte	.LVL8
 10099 00fb 06000000 		.4byte	.LVL10
 10100 00ff 0100     		.2byte	0x1
 10101 0101 50       		.byte	0x50
 10102 0102 06000000 		.4byte	.LVL10
 10103 0106 12000000 		.4byte	.LVL13
 10104 010a 0100     		.2byte	0x1
 10105 010c 50       		.byte	0x50
 10106 010d 00000000 		.4byte	0
 10107 0111 00000000 		.4byte	0
 10108              	.LLST4:
 10109 0115 00000000 		.4byte	.LVL8
 10110 0119 04000000 		.4byte	.LVL9
 10111 011d 0200     		.2byte	0x2
 10112 011f 30       		.byte	0x30
 10113 0120 9F       		.byte	0x9f
 10114 0121 04000000 		.4byte	.LVL9
 10115 0125 0E000000 		.4byte	.LVL12
 10116 0129 0100     		.2byte	0x1
 10117 012b 53       		.byte	0x53
 10118 012c 0E000000 		.4byte	.LVL12
 10119 0130 14000000 		.4byte	.LFE104
 10120 0134 0500     		.2byte	0x5
 10121 0136 73       		.byte	0x73
 10122 0137 00       		.sleb128 0
 10123 0138 32       		.byte	0x32
 10124 0139 25       		.byte	0x25
 10125 013a 9F       		.byte	0x9f
 10126 013b 00000000 		.4byte	0
 10127 013f 00000000 		.4byte	0
 10128              	.LLST5:
 10129 0143 00000000 		.4byte	.LVL14
 10130 0147 06000000 		.4byte	.LVL15
 10131 014b 0100     		.2byte	0x1
 10132 014d 50       		.byte	0x50
 10133 014e 06000000 		.4byte	.LVL15
 10134 0152 12000000 		.4byte	.LFE106
 10135 0156 0100     		.2byte	0x1
 10136 0158 54       		.byte	0x54
 10137 0159 00000000 		.4byte	0
 10138 015d 00000000 		.4byte	0
 10139              	.LLST6:
 10140 0161 00000000 		.4byte	.LVL18
 10141 0165 1A000000 		.4byte	.LVL21
 10142 0169 0100     		.2byte	0x1
 10143 016b 50       		.byte	0x50
 10144 016c 1A000000 		.4byte	.LVL21
 10145 0170 8A000000 		.4byte	.LFE69
 10146 0174 0100     		.2byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 290


 10147 0176 59       		.byte	0x59
 10148 0177 00000000 		.4byte	0
 10149 017b 00000000 		.4byte	0
 10150              	.LLST7:
 10151 017f 00000000 		.4byte	.LVL18
 10152 0183 18000000 		.4byte	.LVL20
 10153 0187 0100     		.2byte	0x1
 10154 0189 51       		.byte	0x51
 10155 018a 18000000 		.4byte	.LVL20
 10156 018e 8A000000 		.4byte	.LFE69
 10157 0192 0100     		.2byte	0x1
 10158 0194 55       		.byte	0x55
 10159 0195 00000000 		.4byte	0
 10160 0199 00000000 		.4byte	0
 10161              	.LLST8:
 10162 019d 00000000 		.4byte	.LVL18
 10163 01a1 16000000 		.4byte	.LVL19
 10164 01a5 0100     		.2byte	0x1
 10165 01a7 52       		.byte	0x52
 10166 01a8 16000000 		.4byte	.LVL19
 10167 01ac 2A000000 		.4byte	.LVL23
 10168 01b0 0100     		.2byte	0x1
 10169 01b2 57       		.byte	0x57
 10170 01b3 2A000000 		.4byte	.LVL23
 10171 01b7 32000000 		.4byte	.LVL25
 10172 01bb 0700     		.2byte	0x7
 10173 01bd 72       		.byte	0x72
 10174 01be 81808080 		.sleb128 -1073741823
 10174      7C
 10175 01c3 9F       		.byte	0x9f
 10176 01c4 32000000 		.4byte	.LVL25
 10177 01c8 8A000000 		.4byte	.LFE69
 10178 01cc 0400     		.2byte	0x4
 10179 01ce F3       		.byte	0xf3
 10180 01cf 01       		.uleb128 0x1
 10181 01d0 52       		.byte	0x52
 10182 01d1 9F       		.byte	0x9f
 10183 01d2 00000000 		.4byte	0
 10184 01d6 00000000 		.4byte	0
 10185              	.LLST9:
 10186 01da 00000000 		.4byte	.LVL18
 10187 01de 1D000000 		.4byte	.LVL22-1
 10188 01e2 0100     		.2byte	0x1
 10189 01e4 53       		.byte	0x53
 10190 01e5 1D000000 		.4byte	.LVL22-1
 10191 01e9 8A000000 		.4byte	.LFE69
 10192 01ed 0100     		.2byte	0x1
 10193 01ef 5A       		.byte	0x5a
 10194 01f0 00000000 		.4byte	0
 10195 01f4 00000000 		.4byte	0
 10196              	.LLST10:
 10197 01f8 00000000 		.4byte	.LVL18
 10198 01fc 54000000 		.4byte	.LVL30
 10199 0200 0200     		.2byte	0x2
 10200 0202 91       		.byte	0x91
 10201 0203 00       		.sleb128 0
 10202 0204 54000000 		.4byte	.LVL30
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 291


 10203 0208 6C000000 		.4byte	.LVL33
 10204 020c 0100     		.2byte	0x1
 10205 020e 56       		.byte	0x56
 10206 020f 00000000 		.4byte	0
 10207 0213 00000000 		.4byte	0
 10208              	.LLST11:
 10209 0217 32000000 		.4byte	.LVL25
 10210 021b 42000000 		.4byte	.LVL27
 10211 021f 0100     		.2byte	0x1
 10212 0221 53       		.byte	0x53
 10213 0222 44000000 		.4byte	.LVL28
 10214 0226 4A000000 		.4byte	.LVL29
 10215 022a 0100     		.2byte	0x1
 10216 022c 53       		.byte	0x53
 10217 022d 00000000 		.4byte	0
 10218 0231 00000000 		.4byte	0
 10219              	.LLST12:
 10220 0235 02000000 		.4byte	.LVL35
 10221 0239 06000000 		.4byte	.LVL36
 10222 023d 0200     		.2byte	0x2
 10223 023f 30       		.byte	0x30
 10224 0240 9F       		.byte	0x9f
 10225 0241 06000000 		.4byte	.LVL36
 10226 0245 1C000000 		.4byte	.LVL39
 10227 0249 0100     		.2byte	0x1
 10228 024b 54       		.byte	0x54
 10229 024c 00000000 		.4byte	0
 10230 0250 00000000 		.4byte	0
 10231              	.LLST13:
 10232 0254 00000000 		.4byte	.LVL45
 10233 0258 07000000 		.4byte	.LVL46-1
 10234 025c 0100     		.2byte	0x1
 10235 025e 50       		.byte	0x50
 10236 025f 07000000 		.4byte	.LVL46-1
 10237 0263 CA000000 		.4byte	.LVL51
 10238 0267 0100     		.2byte	0x1
 10239 0269 55       		.byte	0x55
 10240 026a CA000000 		.4byte	.LVL51
 10241 026e D4000000 		.4byte	.LFE70
 10242 0272 0400     		.2byte	0x4
 10243 0274 F3       		.byte	0xf3
 10244 0275 01       		.uleb128 0x1
 10245 0276 50       		.byte	0x50
 10246 0277 9F       		.byte	0x9f
 10247 0278 00000000 		.4byte	0
 10248 027c 00000000 		.4byte	0
 10249              	.LLST14:
 10250 0280 72000000 		.4byte	.LVL48
 10251 0284 82000000 		.4byte	.LVL49
 10252 0288 0100     		.2byte	0x1
 10253 028a 53       		.byte	0x53
 10254 028b 00000000 		.4byte	0
 10255 028f 00000000 		.4byte	0
 10256              	.LLST15:
 10257 0293 10000000 		.4byte	.LVL53
 10258 0297 34000000 		.4byte	.LVL56
 10259 029b 0100     		.2byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 292


 10260 029d 55       		.byte	0x55
 10261 029e 00000000 		.4byte	0
 10262 02a2 00000000 		.4byte	0
 10263              	.LLST16:
 10264 02a6 00000000 		.4byte	.LVL57
 10265 02aa 02000000 		.4byte	.LVL58
 10266 02ae 0100     		.2byte	0x1
 10267 02b0 50       		.byte	0x50
 10268 02b1 02000000 		.4byte	.LVL58
 10269 02b5 08000000 		.4byte	.LFE101
 10270 02b9 0400     		.2byte	0x4
 10271 02bb F3       		.byte	0xf3
 10272 02bc 01       		.uleb128 0x1
 10273 02bd 50       		.byte	0x50
 10274 02be 9F       		.byte	0x9f
 10275 02bf 00000000 		.4byte	0
 10276 02c3 00000000 		.4byte	0
 10277              	.LLST17:
 10278 02c7 00000000 		.4byte	.LVL60
 10279 02cb 10000000 		.4byte	.LVL62
 10280 02cf 0100     		.2byte	0x1
 10281 02d1 50       		.byte	0x50
 10282 02d2 10000000 		.4byte	.LVL62
 10283 02d6 6E000000 		.4byte	.LVL67
 10284 02da 0100     		.2byte	0x1
 10285 02dc 54       		.byte	0x54
 10286 02dd 6E000000 		.4byte	.LVL67
 10287 02e1 A8000000 		.4byte	.LFE121
 10288 02e5 0400     		.2byte	0x4
 10289 02e7 F3       		.byte	0xf3
 10290 02e8 01       		.uleb128 0x1
 10291 02e9 50       		.byte	0x50
 10292 02ea 9F       		.byte	0x9f
 10293 02eb 00000000 		.4byte	0
 10294 02ef 00000000 		.4byte	0
 10295              	.LLST18:
 10296 02f3 00000000 		.4byte	.LVL60
 10297 02f7 15000000 		.4byte	.LVL63-1
 10298 02fb 0100     		.2byte	0x1
 10299 02fd 51       		.byte	0x51
 10300 02fe 15000000 		.4byte	.LVL63-1
 10301 0302 A4000000 		.4byte	.LVL72
 10302 0306 0100     		.2byte	0x1
 10303 0308 56       		.byte	0x56
 10304 0309 A4000000 		.4byte	.LVL72
 10305 030d A8000000 		.4byte	.LFE121
 10306 0311 0400     		.2byte	0x4
 10307 0313 F3       		.byte	0xf3
 10308 0314 01       		.uleb128 0x1
 10309 0315 51       		.byte	0x51
 10310 0316 9F       		.byte	0x9f
 10311 0317 00000000 		.4byte	0
 10312 031b 00000000 		.4byte	0
 10313              	.LLST19:
 10314 031f 6E000000 		.4byte	.LVL67
 10315 0323 A4000000 		.4byte	.LVL72
 10316 0327 0100     		.2byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 293


 10317 0329 54       		.byte	0x54
 10318 032a 00000000 		.4byte	0
 10319 032e 00000000 		.4byte	0
 10320              	.LLST20:
 10321 0332 0C000000 		.4byte	.LVL61
 10322 0336 8E000000 		.4byte	.LVL70
 10323 033a 0100     		.2byte	0x1
 10324 033c 55       		.byte	0x55
 10325 033d 00000000 		.4byte	0
 10326 0341 00000000 		.4byte	0
 10327              	.LLST21:
 10328 0345 3E000000 		.4byte	.LVL64
 10329 0349 62000000 		.4byte	.LVL65
 10330 034d 0100     		.2byte	0x1
 10331 034f 52       		.byte	0x52
 10332 0350 00000000 		.4byte	0
 10333 0354 00000000 		.4byte	0
 10334              	.LLST22:
 10335 0358 00000000 		.4byte	.LVL73
 10336 035c 10000000 		.4byte	.LVL74
 10337 0360 0100     		.2byte	0x1
 10338 0362 50       		.byte	0x50
 10339 0363 10000000 		.4byte	.LVL74
 10340 0367 6A000000 		.4byte	.LFE68
 10341 036b 0100     		.2byte	0x1
 10342 036d 56       		.byte	0x56
 10343 036e 00000000 		.4byte	0
 10344 0372 00000000 		.4byte	0
 10345              	.LLST23:
 10346 0376 00000000 		.4byte	.LVL73
 10347 037a 13000000 		.4byte	.LVL75-1
 10348 037e 0100     		.2byte	0x1
 10349 0380 51       		.byte	0x51
 10350 0381 13000000 		.4byte	.LVL75-1
 10351 0385 6A000000 		.4byte	.LFE68
 10352 0389 0100     		.2byte	0x1
 10353 038b 57       		.byte	0x57
 10354 038c 00000000 		.4byte	0
 10355 0390 00000000 		.4byte	0
 10356              	.LLST24:
 10357 0394 00000000 		.4byte	.LVL73
 10358 0398 13000000 		.4byte	.LVL75-1
 10359 039c 0100     		.2byte	0x1
 10360 039e 52       		.byte	0x52
 10361 039f 13000000 		.4byte	.LVL75-1
 10362 03a3 6A000000 		.4byte	.LFE68
 10363 03a7 0400     		.2byte	0x4
 10364 03a9 F3       		.byte	0xf3
 10365 03aa 01       		.uleb128 0x1
 10366 03ab 52       		.byte	0x52
 10367 03ac 9F       		.byte	0x9f
 10368 03ad 00000000 		.4byte	0
 10369 03b1 00000000 		.4byte	0
 10370              	.LLST25:
 10371 03b5 00000000 		.4byte	.LVL73
 10372 03b9 13000000 		.4byte	.LVL75-1
 10373 03bd 0100     		.2byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 294


 10374 03bf 53       		.byte	0x53
 10375 03c0 13000000 		.4byte	.LVL75-1
 10376 03c4 6A000000 		.4byte	.LFE68
 10377 03c8 0100     		.2byte	0x1
 10378 03ca 58       		.byte	0x58
 10379 03cb 00000000 		.4byte	0
 10380 03cf 00000000 		.4byte	0
 10381              	.LLST26:
 10382 03d3 1E000000 		.4byte	.LVL77
 10383 03d7 29000000 		.4byte	.LVL78-1
 10384 03db 0100     		.2byte	0x1
 10385 03dd 50       		.byte	0x50
 10386 03de 29000000 		.4byte	.LVL78-1
 10387 03e2 30000000 		.4byte	.LVL79
 10388 03e6 0100     		.2byte	0x1
 10389 03e8 54       		.byte	0x54
 10390 03e9 30000000 		.4byte	.LVL79
 10391 03ed 32000000 		.4byte	.LVL80
 10392 03f1 0100     		.2byte	0x1
 10393 03f3 50       		.byte	0x50
 10394 03f4 32000000 		.4byte	.LVL80
 10395 03f8 38000000 		.4byte	.LVL82
 10396 03fc 0100     		.2byte	0x1
 10397 03fe 54       		.byte	0x54
 10398 03ff 3A000000 		.4byte	.LVL83
 10399 0403 6A000000 		.4byte	.LFE68
 10400 0407 0100     		.2byte	0x1
 10401 0409 54       		.byte	0x54
 10402 040a 00000000 		.4byte	0
 10403 040e 00000000 		.4byte	0
 10404              	.LLST27:
 10405 0412 5C000000 		.4byte	.LVL85
 10406 0416 60000000 		.4byte	.LVL86
 10407 041a 0200     		.2byte	0x2
 10408 041c 31       		.byte	0x31
 10409 041d 9F       		.byte	0x9f
 10410 041e 64000000 		.4byte	.LVL87
 10411 0422 6A000000 		.4byte	.LFE68
 10412 0426 0100     		.2byte	0x1
 10413 0428 50       		.byte	0x50
 10414 0429 00000000 		.4byte	0
 10415 042d 00000000 		.4byte	0
 10416              	.LLST28:
 10417 0431 14000000 		.4byte	.LVL75
 10418 0435 1A000000 		.4byte	.LVL76
 10419 0439 0100     		.2byte	0x1
 10420 043b 50       		.byte	0x50
 10421 043c 1A000000 		.4byte	.LVL76
 10422 0440 38000000 		.4byte	.LVL82
 10423 0444 0100     		.2byte	0x1
 10424 0446 59       		.byte	0x59
 10425 0447 38000000 		.4byte	.LVL82
 10426 044b 3A000000 		.4byte	.LVL83
 10427 044f 0100     		.2byte	0x1
 10428 0451 50       		.byte	0x50
 10429 0452 00000000 		.4byte	0
 10430 0456 00000000 		.4byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 295


 10431              	.LLST29:
 10432 045a 00000000 		.4byte	.LVL88
 10433 045e 07000000 		.4byte	.LVL89-1
 10434 0462 0100     		.2byte	0x1
 10435 0464 50       		.byte	0x50
 10436 0465 07000000 		.4byte	.LVL89-1
 10437 0469 10000000 		.4byte	.LVL90
 10438 046d 0100     		.2byte	0x1
 10439 046f 54       		.byte	0x54
 10440 0470 00000000 		.4byte	0
 10441 0474 00000000 		.4byte	0
 10442              	.LLST30:
 10443 0478 10000000 		.4byte	.LVL90
 10444 047c BC000000 		.4byte	.LVL97
 10445 0480 0100     		.2byte	0x1
 10446 0482 54       		.byte	0x54
 10447 0483 00000000 		.4byte	0
 10448 0487 00000000 		.4byte	0
 10449              	.LLST31:
 10450 048b 00000000 		.4byte	.LVL98
 10451 048f 13000000 		.4byte	.LVL100-1
 10452 0493 0100     		.2byte	0x1
 10453 0495 50       		.byte	0x50
 10454 0496 13000000 		.4byte	.LVL100-1
 10455 049a 70000000 		.4byte	.LVL111
 10456 049e 0100     		.2byte	0x1
 10457 04a0 55       		.byte	0x55
 10458 04a1 70000000 		.4byte	.LVL111
 10459 04a5 72000000 		.4byte	.LVL112
 10460 04a9 0100     		.2byte	0x1
 10461 04ab 50       		.byte	0x50
 10462 04ac 72000000 		.4byte	.LVL112
 10463 04b0 76000000 		.4byte	.LVL113
 10464 04b4 0400     		.2byte	0x4
 10465 04b6 F3       		.byte	0xf3
 10466 04b7 01       		.uleb128 0x1
 10467 04b8 50       		.byte	0x50
 10468 04b9 9F       		.byte	0x9f
 10469 04ba 76000000 		.4byte	.LVL113
 10470 04be 9A000000 		.4byte	.LVL120
 10471 04c2 0100     		.2byte	0x1
 10472 04c4 55       		.byte	0x55
 10473 04c5 9A000000 		.4byte	.LVL120
 10474 04c9 A4000000 		.4byte	.LFE74
 10475 04cd 0400     		.2byte	0x4
 10476 04cf F3       		.byte	0xf3
 10477 04d0 01       		.uleb128 0x1
 10478 04d1 50       		.byte	0x50
 10479 04d2 9F       		.byte	0x9f
 10480 04d3 00000000 		.4byte	0
 10481 04d7 00000000 		.4byte	0
 10482              	.LLST32:
 10483 04db 16000000 		.4byte	.LVL101
 10484 04df 70000000 		.4byte	.LVL111
 10485 04e3 0100     		.2byte	0x1
 10486 04e5 56       		.byte	0x56
 10487 04e6 76000000 		.4byte	.LVL113
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 296


 10488 04ea 9A000000 		.4byte	.LVL120
 10489 04ee 0100     		.2byte	0x1
 10490 04f0 56       		.byte	0x56
 10491 04f1 00000000 		.4byte	0
 10492 04f5 00000000 		.4byte	0
 10493              	.LLST33:
 10494 04f9 18000000 		.4byte	.LVL102
 10495 04fd 70000000 		.4byte	.LVL111
 10496 0501 0100     		.2byte	0x1
 10497 0503 57       		.byte	0x57
 10498 0504 76000000 		.4byte	.LVL113
 10499 0508 9A000000 		.4byte	.LVL120
 10500 050c 0100     		.2byte	0x1
 10501 050e 57       		.byte	0x57
 10502 050f 00000000 		.4byte	0
 10503 0513 00000000 		.4byte	0
 10504              	.LLST34:
 10505 0517 1E000000 		.4byte	.LVL103
 10506 051b 70000000 		.4byte	.LVL111
 10507 051f 0100     		.2byte	0x1
 10508 0521 58       		.byte	0x58
 10509 0522 76000000 		.4byte	.LVL113
 10510 0526 9A000000 		.4byte	.LVL120
 10511 052a 0100     		.2byte	0x1
 10512 052c 58       		.byte	0x58
 10513 052d 00000000 		.4byte	0
 10514 0531 00000000 		.4byte	0
 10515              	.LLST35:
 10516 0535 22000000 		.4byte	.LVL104
 10517 0539 70000000 		.4byte	.LVL111
 10518 053d 0100     		.2byte	0x1
 10519 053f 59       		.byte	0x59
 10520 0540 76000000 		.4byte	.LVL113
 10521 0544 9A000000 		.4byte	.LVL120
 10522 0548 0100     		.2byte	0x1
 10523 054a 59       		.byte	0x59
 10524 054b 00000000 		.4byte	0
 10525 054f 00000000 		.4byte	0
 10526              	.LLST36:
 10527 0553 04000000 		.4byte	.LVL99
 10528 0557 13000000 		.4byte	.LVL100-1
 10529 055b 0100     		.2byte	0x1
 10530 055d 50       		.byte	0x50
 10531 055e 13000000 		.4byte	.LVL100-1
 10532 0562 70000000 		.4byte	.LVL111
 10533 0566 0100     		.2byte	0x1
 10534 0568 55       		.byte	0x55
 10535 0569 70000000 		.4byte	.LVL111
 10536 056d 72000000 		.4byte	.LVL112
 10537 0571 0100     		.2byte	0x1
 10538 0573 50       		.byte	0x50
 10539 0574 72000000 		.4byte	.LVL112
 10540 0578 76000000 		.4byte	.LVL113
 10541 057c 0400     		.2byte	0x4
 10542 057e F3       		.byte	0xf3
 10543 057f 01       		.uleb128 0x1
 10544 0580 50       		.byte	0x50
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 297


 10545 0581 9F       		.byte	0x9f
 10546 0582 76000000 		.4byte	.LVL113
 10547 0586 9A000000 		.4byte	.LVL120
 10548 058a 0100     		.2byte	0x1
 10549 058c 55       		.byte	0x55
 10550 058d 9A000000 		.4byte	.LVL120
 10551 0591 A4000000 		.4byte	.LFE74
 10552 0595 0400     		.2byte	0x4
 10553 0597 F3       		.byte	0xf3
 10554 0598 01       		.uleb128 0x1
 10555 0599 50       		.byte	0x50
 10556 059a 9F       		.byte	0x9f
 10557 059b 00000000 		.4byte	0
 10558 059f 00000000 		.4byte	0
 10559              	.LLST37:
 10560 05a3 46000000 		.4byte	.LVL106
 10561 05a7 56000000 		.4byte	.LVL108
 10562 05ab 0100     		.2byte	0x1
 10563 05ad 53       		.byte	0x53
 10564 05ae 58000000 		.4byte	.LVL109
 10565 05b2 62000000 		.4byte	.LVL110
 10566 05b6 0100     		.2byte	0x1
 10567 05b8 53       		.byte	0x53
 10568 05b9 88000000 		.4byte	.LVL116
 10569 05bd 8E000000 		.4byte	.LVL117
 10570 05c1 0100     		.2byte	0x1
 10571 05c3 53       		.byte	0x53
 10572 05c4 00000000 		.4byte	0
 10573 05c8 00000000 		.4byte	0
 10574              	.LLST38:
 10575 05cc 00000000 		.4byte	.LVL121
 10576 05d0 07000000 		.4byte	.LVL122-1
 10577 05d4 0100     		.2byte	0x1
 10578 05d6 50       		.byte	0x50
 10579 05d7 07000000 		.4byte	.LVL122-1
 10580 05db 10000000 		.4byte	.LVL123
 10581 05df 0100     		.2byte	0x1
 10582 05e1 54       		.byte	0x54
 10583 05e2 10000000 		.4byte	.LVL123
 10584 05e6 20000000 		.4byte	.LFE75
 10585 05ea 0400     		.2byte	0x4
 10586 05ec F3       		.byte	0xf3
 10587 05ed 01       		.uleb128 0x1
 10588 05ee 50       		.byte	0x50
 10589 05ef 9F       		.byte	0x9f
 10590 05f0 00000000 		.4byte	0
 10591 05f4 00000000 		.4byte	0
 10592              	.LLST39:
 10593 05f8 10000000 		.4byte	.LVL123
 10594 05fc 12000000 		.4byte	.LVL124
 10595 0600 0100     		.2byte	0x1
 10596 0602 54       		.byte	0x54
 10597 0603 00000000 		.4byte	0
 10598 0607 00000000 		.4byte	0
 10599              	.LLST40:
 10600 060b 12000000 		.4byte	.LVL124
 10601 060f 1A000000 		.4byte	.LVL126
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 298


 10602 0613 0100     		.2byte	0x1
 10603 0615 54       		.byte	0x54
 10604 0616 1A000000 		.4byte	.LVL126
 10605 061a 20000000 		.4byte	.LFE75
 10606 061e 0100     		.2byte	0x1
 10607 0620 50       		.byte	0x50
 10608 0621 00000000 		.4byte	0
 10609 0625 00000000 		.4byte	0
 10610              	.LLST41:
 10611 0629 00000000 		.4byte	.LVL127
 10612 062d 1C000000 		.4byte	.LVL128
 10613 0631 0100     		.2byte	0x1
 10614 0633 50       		.byte	0x50
 10615 0634 1C000000 		.4byte	.LVL128
 10616 0638 28000000 		.4byte	.LFE76
 10617 063c 0400     		.2byte	0x4
 10618 063e F3       		.byte	0xf3
 10619 063f 01       		.uleb128 0x1
 10620 0640 50       		.byte	0x50
 10621 0641 9F       		.byte	0x9f
 10622 0642 00000000 		.4byte	0
 10623 0646 00000000 		.4byte	0
 10624              	.LLST42:
 10625 064a 1C000000 		.4byte	.LVL128
 10626 064e 1E000000 		.4byte	.LVL129
 10627 0652 0100     		.2byte	0x1
 10628 0654 50       		.byte	0x50
 10629 0655 00000000 		.4byte	0
 10630 0659 00000000 		.4byte	0
 10631              	.LLST43:
 10632 065d 1E000000 		.4byte	.LVL129
 10633 0661 22000000 		.4byte	.LVL130
 10634 0665 0100     		.2byte	0x1
 10635 0667 53       		.byte	0x53
 10636 0668 00000000 		.4byte	0
 10637 066c 00000000 		.4byte	0
 10638              	.LLST44:
 10639 0670 00000000 		.4byte	.LVL131
 10640 0674 0F000000 		.4byte	.LVL134-1
 10641 0678 0100     		.2byte	0x1
 10642 067a 50       		.byte	0x50
 10643 067b 0F000000 		.4byte	.LVL134-1
 10644 067f 18000000 		.4byte	.LVL135
 10645 0683 0100     		.2byte	0x1
 10646 0685 54       		.byte	0x54
 10647 0686 00000000 		.4byte	0
 10648 068a 00000000 		.4byte	0
 10649              	.LLST45:
 10650 068e 00000000 		.4byte	.LVL131
 10651 0692 0C000000 		.4byte	.LVL133
 10652 0696 0100     		.2byte	0x1
 10653 0698 51       		.byte	0x51
 10654 0699 0C000000 		.4byte	.LVL133
 10655 069d 66000000 		.4byte	.LVL140
 10656 06a1 0100     		.2byte	0x1
 10657 06a3 55       		.byte	0x55
 10658 06a4 66000000 		.4byte	.LVL140
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 299


 10659 06a8 7F000000 		.4byte	.LVL141-1
 10660 06ac 0300     		.2byte	0x3
 10661 06ae 74       		.byte	0x74
 10662 06af C000     		.sleb128 64
 10663 06b1 00000000 		.4byte	0
 10664 06b5 00000000 		.4byte	0
 10665              	.LLST46:
 10666 06b9 18000000 		.4byte	.LVL135
 10667 06bd FA000000 		.4byte	.LVL147
 10668 06c1 0100     		.2byte	0x1
 10669 06c3 54       		.byte	0x54
 10670 06c4 00000000 		.4byte	0
 10671 06c8 00000000 		.4byte	0
 10672              	.LLST47:
 10673 06cc 1A000000 		.4byte	.LVL136
 10674 06d0 5E000000 		.4byte	.LVL139
 10675 06d4 0100     		.2byte	0x1
 10676 06d6 53       		.byte	0x53
 10677 06d7 00000000 		.4byte	0
 10678 06db 00000000 		.4byte	0
 10679              	.LLST48:
 10680 06df 54000000 		.4byte	.LVL138
 10681 06e3 88000000 		.4byte	.LVL142
 10682 06e7 0100     		.2byte	0x1
 10683 06e9 56       		.byte	0x56
 10684 06ea 00000000 		.4byte	0
 10685 06ee 00000000 		.4byte	0
 10686              	.LLST49:
 10687 06f2 06000000 		.4byte	.LVL132
 10688 06f6 52000000 		.4byte	.LVL137
 10689 06fa 0200     		.2byte	0x2
 10690 06fc 30       		.byte	0x30
 10691 06fd 9F       		.byte	0x9f
 10692 06fe 52000000 		.4byte	.LVL137
 10693 0702 F4000000 		.4byte	.LVL145
 10694 0706 0100     		.2byte	0x1
 10695 0708 57       		.byte	0x57
 10696 0709 00000000 		.4byte	0
 10697 070d 00000000 		.4byte	0
 10698              	.LLST50:
 10699 0711 B4000000 		.4byte	.LVL143
 10700 0715 C2000000 		.4byte	.LVL144
 10701 0719 0100     		.2byte	0x1
 10702 071b 53       		.byte	0x53
 10703 071c 00000000 		.4byte	0
 10704 0720 00000000 		.4byte	0
 10705              	.LLST51:
 10706 0724 00000000 		.4byte	.LVL148
 10707 0728 15000000 		.4byte	.LVL149-1
 10708 072c 0100     		.2byte	0x1
 10709 072e 50       		.byte	0x50
 10710 072f 15000000 		.4byte	.LVL149-1
 10711 0733 96000000 		.4byte	.LVL155
 10712 0737 0100     		.2byte	0x1
 10713 0739 54       		.byte	0x54
 10714 073a 96000000 		.4byte	.LVL155
 10715 073e A0000000 		.4byte	.LFE80
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 300


 10716 0742 0100     		.2byte	0x1
 10717 0744 50       		.byte	0x50
 10718 0745 00000000 		.4byte	0
 10719 0749 00000000 		.4byte	0
 10720              	.LLST53:
 10721 074d 46000000 		.4byte	.LVL152
 10722 0751 54000000 		.4byte	.LVL153
 10723 0755 0100     		.2byte	0x1
 10724 0757 52       		.byte	0x52
 10725 0758 00000000 		.4byte	0
 10726 075c 00000000 		.4byte	0
 10727              	.LLST54:
 10728 0760 00000000 		.4byte	.LVL156
 10729 0764 1B000000 		.4byte	.LVL158-1
 10730 0768 0100     		.2byte	0x1
 10731 076a 50       		.byte	0x50
 10732 076b 1B000000 		.4byte	.LVL158-1
 10733 076f B2000000 		.4byte	.LVL169
 10734 0773 0100     		.2byte	0x1
 10735 0775 54       		.byte	0x54
 10736 0776 B2000000 		.4byte	.LVL169
 10737 077a BC000000 		.4byte	.LFE81
 10738 077e 0400     		.2byte	0x4
 10739 0780 F3       		.byte	0xf3
 10740 0781 01       		.uleb128 0x1
 10741 0782 50       		.byte	0x50
 10742 0783 9F       		.byte	0x9f
 10743 0784 00000000 		.4byte	0
 10744 0788 00000000 		.4byte	0
 10745              	.LLST55:
 10746 078c 04000000 		.4byte	.LVL157
 10747 0790 38000000 		.4byte	.LVL159
 10748 0794 0200     		.2byte	0x2
 10749 0796 30       		.byte	0x30
 10750 0797 9F       		.byte	0x9f
 10751 0798 38000000 		.4byte	.LVL159
 10752 079c 42000000 		.4byte	.LVL160
 10753 07a0 0200     		.2byte	0x2
 10754 07a2 31       		.byte	0x31
 10755 07a3 9F       		.byte	0x9f
 10756 07a4 42000000 		.4byte	.LVL160
 10757 07a8 44000000 		.4byte	.LVL161
 10758 07ac 0200     		.2byte	0x2
 10759 07ae 30       		.byte	0x30
 10760 07af 9F       		.byte	0x9f
 10761 07b0 44000000 		.4byte	.LVL161
 10762 07b4 9A000000 		.4byte	.LVL165
 10763 07b8 0100     		.2byte	0x1
 10764 07ba 55       		.byte	0x55
 10765 07bb 9A000000 		.4byte	.LVL165
 10766 07bf AA000000 		.4byte	.LVL167
 10767 07c3 0200     		.2byte	0x2
 10768 07c5 30       		.byte	0x30
 10769 07c6 9F       		.byte	0x9f
 10770 07c7 AA000000 		.4byte	.LVL167
 10771 07cb B2000000 		.4byte	.LVL169
 10772 07cf 0100     		.2byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 301


 10773 07d1 55       		.byte	0x55
 10774 07d2 B2000000 		.4byte	.LVL169
 10775 07d6 BC000000 		.4byte	.LFE81
 10776 07da 0100     		.2byte	0x1
 10777 07dc 50       		.byte	0x50
 10778 07dd 00000000 		.4byte	0
 10779 07e1 00000000 		.4byte	0
 10780              	.LLST56:
 10781 07e5 04000000 		.4byte	.LVL157
 10782 07e9 1B000000 		.4byte	.LVL158-1
 10783 07ed 0100     		.2byte	0x1
 10784 07ef 50       		.byte	0x50
 10785 07f0 1B000000 		.4byte	.LVL158-1
 10786 07f4 B2000000 		.4byte	.LVL169
 10787 07f8 0100     		.2byte	0x1
 10788 07fa 54       		.byte	0x54
 10789 07fb B2000000 		.4byte	.LVL169
 10790 07ff BC000000 		.4byte	.LFE81
 10791 0803 0400     		.2byte	0x4
 10792 0805 F3       		.byte	0xf3
 10793 0806 01       		.uleb128 0x1
 10794 0807 50       		.byte	0x50
 10795 0808 9F       		.byte	0x9f
 10796 0809 00000000 		.4byte	0
 10797 080d 00000000 		.4byte	0
 10798              	.LLST57:
 10799 0811 6A000000 		.4byte	.LVL163
 10800 0815 78000000 		.4byte	.LVL164
 10801 0819 0100     		.2byte	0x1
 10802 081b 53       		.byte	0x53
 10803 081c 00000000 		.4byte	0
 10804 0820 00000000 		.4byte	0
 10805              	.LLST58:
 10806 0824 AA000000 		.4byte	.LVL167
 10807 0828 AE000000 		.4byte	.LVL168
 10808 082c 0100     		.2byte	0x1
 10809 082e 56       		.byte	0x56
 10810 082f 00000000 		.4byte	0
 10811 0833 00000000 		.4byte	0
 10812              	.LLST59:
 10813 0837 16000000 		.4byte	.LVL170
 10814 083b 41000000 		.4byte	.LVL171-1
 10815 083f 0100     		.2byte	0x1
 10816 0841 50       		.byte	0x50
 10817 0842 00000000 		.4byte	0
 10818 0846 00000000 		.4byte	0
 10819              	.LLST60:
 10820 084a 00000000 		.4byte	.LVL176
 10821 084e 0A000000 		.4byte	.LVL177
 10822 0852 0100     		.2byte	0x1
 10823 0854 50       		.byte	0x50
 10824 0855 00000000 		.4byte	0
 10825 0859 00000000 		.4byte	0
 10826              	.LLST61:
 10827 085d 62000000 		.4byte	.LVL188
 10828 0861 6A000000 		.4byte	.LVL190
 10829 0865 0100     		.2byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 302


 10830 0867 53       		.byte	0x53
 10831 0868 6E000000 		.4byte	.LVL191
 10832 086c 0C010000 		.4byte	.LVL199
 10833 0870 0100     		.2byte	0x1
 10834 0872 53       		.byte	0x53
 10835 0873 00000000 		.4byte	0
 10836 0877 00000000 		.4byte	0
 10837              	.LLST62:
 10838 087b 64000000 		.4byte	.LVL189
 10839 087f 70000000 		.4byte	.LVL192
 10840 0883 0100     		.2byte	0x1
 10841 0885 52       		.byte	0x52
 10842 0886 70000000 		.4byte	.LVL192
 10843 088a 76000000 		.4byte	.LVL193
 10844 088e 0200     		.2byte	0x2
 10845 0890 73       		.byte	0x73
 10846 0891 04       		.sleb128 4
 10847 0892 00000000 		.4byte	0
 10848 0896 00000000 		.4byte	0
 10849              	.LLST63:
 10850 089a 02000000 		.4byte	.LVL178
 10851 089e 42000000 		.4byte	.LVL184
 10852 08a2 0200     		.2byte	0x2
 10853 08a4 30       		.byte	0x30
 10854 08a5 9F       		.byte	0x9f
 10855 08a6 42000000 		.4byte	.LVL184
 10856 08aa 44000000 		.4byte	.LVL185
 10857 08ae 0100     		.2byte	0x1
 10858 08b0 50       		.byte	0x50
 10859 08b1 46000000 		.4byte	.LVL186
 10860 08b5 48000000 		.4byte	.LVL187
 10861 08b9 0200     		.2byte	0x2
 10862 08bb 30       		.byte	0x30
 10863 08bc 9F       		.byte	0x9f
 10864 08bd 48000000 		.4byte	.LVL187
 10865 08c1 36010000 		.4byte	.LVL202
 10866 08c5 0100     		.2byte	0x1
 10867 08c7 50       		.byte	0x50
 10868 08c8 36010000 		.4byte	.LVL202
 10869 08cc 46010000 		.4byte	.LVL203
 10870 08d0 0200     		.2byte	0x2
 10871 08d2 30       		.byte	0x30
 10872 08d3 9F       		.byte	0x9f
 10873 08d4 46010000 		.4byte	.LVL203
 10874 08d8 50010000 		.4byte	.LFE91
 10875 08dc 0100     		.2byte	0x1
 10876 08de 50       		.byte	0x50
 10877 08df 00000000 		.4byte	0
 10878 08e3 00000000 		.4byte	0
 10879              	.LLST64:
 10880 08e7 16000000 		.4byte	.LVL179
 10881 08eb 36010000 		.4byte	.LVL202
 10882 08ef 0100     		.2byte	0x1
 10883 08f1 55       		.byte	0x55
 10884 08f2 46010000 		.4byte	.LVL203
 10885 08f6 4A010000 		.4byte	.LVL205
 10886 08fa 0100     		.2byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 303


 10887 08fc 55       		.byte	0x55
 10888 08fd 00000000 		.4byte	0
 10889 0901 00000000 		.4byte	0
 10890              	.LLST65:
 10891 0905 1E000000 		.4byte	.LVL180
 10892 0909 2C000000 		.4byte	.LVL181
 10893 090d 0100     		.2byte	0x1
 10894 090f 52       		.byte	0x52
 10895 0910 2C000000 		.4byte	.LVL181
 10896 0914 32000000 		.4byte	.LVL182
 10897 0918 0500     		.2byte	0x5
 10898 091a 03       		.byte	0x3
 10899 091b D0000000 		.4byte	pxOverflowDelayedTaskList
 10900 091f 00000000 		.4byte	0
 10901 0923 00000000 		.4byte	0
 10902              	.LLST66:
 10903 0927 70000000 		.4byte	.LVL192
 10904 092b 94000000 		.4byte	.LVL194
 10905 092f 0100     		.2byte	0x1
 10906 0931 52       		.byte	0x52
 10907 0932 00000000 		.4byte	0
 10908 0936 00000000 		.4byte	0
 10909              	.LLST67:
 10910 093a 96000000 		.4byte	.LVL195
 10911 093e BA000000 		.4byte	.LVL196
 10912 0942 0100     		.2byte	0x1
 10913 0944 52       		.byte	0x52
 10914 0945 00000000 		.4byte	0
 10915 0949 00000000 		.4byte	0
 10916              	.LLST68:
 10917 094d D8000000 		.4byte	.LVL197
 10918 0951 E6000000 		.4byte	.LVL198
 10919 0955 0100     		.2byte	0x1
 10920 0957 51       		.byte	0x51
 10921 0958 00000000 		.4byte	0
 10922 095c 00000000 		.4byte	0
 10923              	.LLST69:
 10924 0960 02000000 		.4byte	.LVL206
 10925 0964 2A000000 		.4byte	.LVL208
 10926 0968 0200     		.2byte	0x2
 10927 096a 30       		.byte	0x30
 10928 096b 9F       		.byte	0x9f
 10929 096c 2A000000 		.4byte	.LVL208
 10930 0970 2C000000 		.4byte	.LVL209
 10931 0974 0100     		.2byte	0x1
 10932 0976 53       		.byte	0x53
 10933 0977 30000000 		.4byte	.LVL210
 10934 097b DE000000 		.4byte	.LVL216
 10935 097f 0100     		.2byte	0x1
 10936 0981 53       		.byte	0x53
 10937 0982 DE000000 		.4byte	.LVL216
 10938 0986 E0000000 		.4byte	.LVL217
 10939 098a 0200     		.2byte	0x2
 10940 098c 30       		.byte	0x30
 10941 098d 9F       		.byte	0x9f
 10942 098e E0000000 		.4byte	.LVL217
 10943 0992 ED000000 		.4byte	.LVL218-1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 304


 10944 0996 0100     		.2byte	0x1
 10945 0998 53       		.byte	0x53
 10946 0999 2C010000 		.4byte	.LVL225
 10947 099d 30010000 		.4byte	.LVL226
 10948 09a1 0200     		.2byte	0x2
 10949 09a3 30       		.byte	0x30
 10950 09a4 9F       		.byte	0x9f
 10951 09a5 00000000 		.4byte	0
 10952 09a9 00000000 		.4byte	0
 10953              	.LLST70:
 10954 09ad 02000000 		.4byte	.LVL206
 10955 09b1 18010000 		.4byte	.LVL223
 10956 09b5 0200     		.2byte	0x2
 10957 09b7 30       		.byte	0x30
 10958 09b8 9F       		.byte	0x9f
 10959 09b9 18010000 		.4byte	.LVL223
 10960 09bd 2C010000 		.4byte	.LVL225
 10961 09c1 0200     		.2byte	0x2
 10962 09c3 31       		.byte	0x31
 10963 09c4 9F       		.byte	0x9f
 10964 09c5 2C010000 		.4byte	.LVL225
 10965 09c9 32010000 		.4byte	.LVL227
 10966 09cd 0200     		.2byte	0x2
 10967 09cf 30       		.byte	0x30
 10968 09d0 9F       		.byte	0x9f
 10969 09d1 32010000 		.4byte	.LVL227
 10970 09d5 3A010000 		.4byte	.LVL229
 10971 09d9 0100     		.2byte	0x1
 10972 09db 54       		.byte	0x54
 10973 09dc 3A010000 		.4byte	.LVL229
 10974 09e0 44010000 		.4byte	.LFE85
 10975 09e4 0100     		.2byte	0x1
 10976 09e6 50       		.byte	0x50
 10977 09e7 00000000 		.4byte	0
 10978 09eb 00000000 		.4byte	0
 10979              	.LLST71:
 10980 09ef 32000000 		.4byte	.LVL211
 10981 09f3 58000000 		.4byte	.LVL212
 10982 09f7 0100     		.2byte	0x1
 10983 09f9 52       		.byte	0x52
 10984 09fa 00000000 		.4byte	0
 10985 09fe 00000000 		.4byte	0
 10986              	.LLST72:
 10987 0a02 58000000 		.4byte	.LVL212
 10988 0a06 84000000 		.4byte	.LVL213
 10989 0a0a 0100     		.2byte	0x1
 10990 0a0c 52       		.byte	0x52
 10991 0a0d 00000000 		.4byte	0
 10992 0a11 00000000 		.4byte	0
 10993              	.LLST73:
 10994 0a15 98000000 		.4byte	.LVL214
 10995 0a19 A6000000 		.4byte	.LVL215
 10996 0a1d 0100     		.2byte	0x1
 10997 0a1f 51       		.byte	0x51
 10998 0a20 00000000 		.4byte	0
 10999 0a24 00000000 		.4byte	0
 11000              	.LLST74:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 305


 11001 0a28 F4000000 		.4byte	.LVL219
 11002 0a2c 04010000 		.4byte	.LVL221
 11003 0a30 0100     		.2byte	0x1
 11004 0a32 54       		.byte	0x54
 11005 0a33 04010000 		.4byte	.LVL221
 11006 0a37 06010000 		.4byte	.LVL222
 11007 0a3b 0300     		.2byte	0x3
 11008 0a3d 74       		.byte	0x74
 11009 0a3e 7F       		.sleb128 -1
 11010 0a3f 9F       		.byte	0x9f
 11011 0a40 06010000 		.4byte	.LVL222
 11012 0a44 2A010000 		.4byte	.LVL224
 11013 0a48 0100     		.2byte	0x1
 11014 0a4a 54       		.byte	0x54
 11015 0a4b 30010000 		.4byte	.LVL226
 11016 0a4f 32010000 		.4byte	.LVL227
 11017 0a53 0100     		.2byte	0x1
 11018 0a55 54       		.byte	0x54
 11019 0a56 00000000 		.4byte	0
 11020 0a5a 00000000 		.4byte	0
 11021              	.LLST75:
 11022 0a5e 00000000 		.4byte	.LVL230
 11023 0a62 09000000 		.4byte	.LVL232-1
 11024 0a66 0100     		.2byte	0x1
 11025 0a68 50       		.byte	0x50
 11026 0a69 09000000 		.4byte	.LVL232-1
 11027 0a6d 64000000 		.4byte	.LVL250
 11028 0a71 0100     		.2byte	0x1
 11029 0a73 55       		.byte	0x55
 11030 0a74 64000000 		.4byte	.LVL250
 11031 0a78 6C000000 		.4byte	.LFE72
 11032 0a7c 0400     		.2byte	0x4
 11033 0a7e F3       		.byte	0xf3
 11034 0a7f 01       		.uleb128 0x1
 11035 0a80 50       		.byte	0x50
 11036 0a81 9F       		.byte	0x9f
 11037 0a82 00000000 		.4byte	0
 11038 0a86 00000000 		.4byte	0
 11039              	.LLST76:
 11040 0a8a 00000000 		.4byte	.LVL230
 11041 0a8e 09000000 		.4byte	.LVL232-1
 11042 0a92 0100     		.2byte	0x1
 11043 0a94 51       		.byte	0x51
 11044 0a95 09000000 		.4byte	.LVL232-1
 11045 0a99 22000000 		.4byte	.LVL235
 11046 0a9d 0100     		.2byte	0x1
 11047 0a9f 54       		.byte	0x54
 11048 0aa0 22000000 		.4byte	.LVL235
 11049 0aa4 24000000 		.4byte	.LVL236
 11050 0aa8 0400     		.2byte	0x4
 11051 0aaa F3       		.byte	0xf3
 11052 0aab 01       		.uleb128 0x1
 11053 0aac 51       		.byte	0x51
 11054 0aad 9F       		.byte	0x9f
 11055 0aae 24000000 		.4byte	.LVL236
 11056 0ab2 2E000000 		.4byte	.LVL237
 11057 0ab6 0100     		.2byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 306


 11058 0ab8 54       		.byte	0x54
 11059 0ab9 2E000000 		.4byte	.LVL237
 11060 0abd 30000000 		.4byte	.LVL238
 11061 0ac1 0400     		.2byte	0x4
 11062 0ac3 F3       		.byte	0xf3
 11063 0ac4 01       		.uleb128 0x1
 11064 0ac5 51       		.byte	0x51
 11065 0ac6 9F       		.byte	0x9f
 11066 0ac7 30000000 		.4byte	.LVL238
 11067 0acb 32000000 		.4byte	.LVL239
 11068 0acf 0100     		.2byte	0x1
 11069 0ad1 54       		.byte	0x54
 11070 0ad2 32000000 		.4byte	.LVL239
 11071 0ad6 34000000 		.4byte	.LVL240
 11072 0ada 0400     		.2byte	0x4
 11073 0adc F3       		.byte	0xf3
 11074 0add 01       		.uleb128 0x1
 11075 0ade 51       		.byte	0x51
 11076 0adf 9F       		.byte	0x9f
 11077 0ae0 34000000 		.4byte	.LVL240
 11078 0ae4 36000000 		.4byte	.LVL241
 11079 0ae8 0100     		.2byte	0x1
 11080 0aea 54       		.byte	0x54
 11081 0aeb 36000000 		.4byte	.LVL241
 11082 0aef 38000000 		.4byte	.LVL242
 11083 0af3 0400     		.2byte	0x4
 11084 0af5 F3       		.byte	0xf3
 11085 0af6 01       		.uleb128 0x1
 11086 0af7 51       		.byte	0x51
 11087 0af8 9F       		.byte	0x9f
 11088 0af9 38000000 		.4byte	.LVL242
 11089 0afd 3A000000 		.4byte	.LVL243
 11090 0b01 0100     		.2byte	0x1
 11091 0b03 54       		.byte	0x54
 11092 0b04 3A000000 		.4byte	.LVL243
 11093 0b08 3C000000 		.4byte	.LVL244
 11094 0b0c 0400     		.2byte	0x4
 11095 0b0e F3       		.byte	0xf3
 11096 0b0f 01       		.uleb128 0x1
 11097 0b10 51       		.byte	0x51
 11098 0b11 9F       		.byte	0x9f
 11099 0b12 3C000000 		.4byte	.LVL244
 11100 0b16 3E000000 		.4byte	.LVL245
 11101 0b1a 0100     		.2byte	0x1
 11102 0b1c 54       		.byte	0x54
 11103 0b1d 3E000000 		.4byte	.LVL245
 11104 0b21 6C000000 		.4byte	.LFE72
 11105 0b25 0400     		.2byte	0x4
 11106 0b27 F3       		.byte	0xf3
 11107 0b28 01       		.uleb128 0x1
 11108 0b29 51       		.byte	0x51
 11109 0b2a 9F       		.byte	0x9f
 11110 0b2b 00000000 		.4byte	0
 11111 0b2f 00000000 		.4byte	0
 11112              	.LLST77:
 11113 0b33 14000000 		.4byte	.LVL234
 11114 0b37 49000000 		.4byte	.LVL247-1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 307


 11115 0b3b 0100     		.2byte	0x1
 11116 0b3d 53       		.byte	0x53
 11117 0b3e 00000000 		.4byte	0
 11118 0b42 00000000 		.4byte	0
 11119              	.LLST78:
 11120 0b46 4E000000 		.4byte	.LVL248
 11121 0b4a 62000000 		.4byte	.LVL249
 11122 0b4e 0100     		.2byte	0x1
 11123 0b50 50       		.byte	0x50
 11124 0b51 00000000 		.4byte	0
 11125 0b55 00000000 		.4byte	0
 11126              	.LLST79:
 11127 0b59 06000000 		.4byte	.LVL231
 11128 0b5d 3E000000 		.4byte	.LVL245
 11129 0b61 0200     		.2byte	0x2
 11130 0b63 30       		.byte	0x30
 11131 0b64 9F       		.byte	0x9f
 11132 0b65 3E000000 		.4byte	.LVL245
 11133 0b69 64000000 		.4byte	.LVL250
 11134 0b6d 0100     		.2byte	0x1
 11135 0b6f 54       		.byte	0x54
 11136 0b70 64000000 		.4byte	.LVL250
 11137 0b74 6C000000 		.4byte	.LFE72
 11138 0b78 0100     		.2byte	0x1
 11139 0b7a 50       		.byte	0x50
 11140 0b7b 00000000 		.4byte	0
 11141 0b7f 00000000 		.4byte	0
 11142              	.LLST80:
 11143 0b83 10000000 		.4byte	.LVL233
 11144 0b87 46000000 		.4byte	.LVL246
 11145 0b8b 0100     		.2byte	0x1
 11146 0b8d 50       		.byte	0x50
 11147 0b8e 00000000 		.4byte	0
 11148 0b92 00000000 		.4byte	0
 11149              	.LLST81:
 11150 0b96 00000000 		.4byte	.LVL251
 11151 0b9a 09000000 		.4byte	.LVL253-1
 11152 0b9e 0100     		.2byte	0x1
 11153 0ba0 50       		.byte	0x50
 11154 0ba1 09000000 		.4byte	.LVL253-1
 11155 0ba5 18000000 		.4byte	.LVL256
 11156 0ba9 0100     		.2byte	0x1
 11157 0bab 54       		.byte	0x54
 11158 0bac 18000000 		.4byte	.LVL256
 11159 0bb0 1A000000 		.4byte	.LVL257
 11160 0bb4 0100     		.2byte	0x1
 11161 0bb6 50       		.byte	0x50
 11162 0bb7 1A000000 		.4byte	.LVL257
 11163 0bbb 34000000 		.4byte	.LFE73
 11164 0bbf 0400     		.2byte	0x4
 11165 0bc1 F3       		.byte	0xf3
 11166 0bc2 01       		.uleb128 0x1
 11167 0bc3 50       		.byte	0x50
 11168 0bc4 9F       		.byte	0x9f
 11169 0bc5 00000000 		.4byte	0
 11170 0bc9 00000000 		.4byte	0
 11171              	.LLST82:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 308


 11172 0bcd 02000000 		.4byte	.LVL252
 11173 0bd1 16000000 		.4byte	.LVL255
 11174 0bd5 0200     		.2byte	0x2
 11175 0bd7 30       		.byte	0x30
 11176 0bd8 9F       		.byte	0x9f
 11177 0bd9 16000000 		.4byte	.LVL255
 11178 0bdd 18000000 		.4byte	.LVL256
 11179 0be1 0100     		.2byte	0x1
 11180 0be3 50       		.byte	0x50
 11181 0be4 18000000 		.4byte	.LVL256
 11182 0be8 1A000000 		.4byte	.LVL257
 11183 0bec 0200     		.2byte	0x2
 11184 0bee 30       		.byte	0x30
 11185 0bef 9F       		.byte	0x9f
 11186 0bf0 1A000000 		.4byte	.LVL257
 11187 0bf4 34000000 		.4byte	.LFE73
 11188 0bf8 0100     		.2byte	0x1
 11189 0bfa 50       		.byte	0x50
 11190 0bfb 00000000 		.4byte	0
 11191 0bff 00000000 		.4byte	0
 11192              	.LLST83:
 11193 0c03 00000000 		.4byte	.LVL258
 11194 0c07 07000000 		.4byte	.LVL259-1
 11195 0c0b 0100     		.2byte	0x1
 11196 0c0d 50       		.byte	0x50
 11197 0c0e 07000000 		.4byte	.LVL259-1
 11198 0c12 14000000 		.4byte	.LVL261
 11199 0c16 0100     		.2byte	0x1
 11200 0c18 54       		.byte	0x54
 11201 0c19 14000000 		.4byte	.LVL261
 11202 0c1d 28000000 		.4byte	.LFE90
 11203 0c21 0400     		.2byte	0x4
 11204 0c23 F3       		.byte	0xf3
 11205 0c24 01       		.uleb128 0x1
 11206 0c25 50       		.byte	0x50
 11207 0c26 9F       		.byte	0x9f
 11208 0c27 00000000 		.4byte	0
 11209 0c2b 00000000 		.4byte	0
 11210              	.LLST84:
 11211 0c2f 22000000 		.4byte	.LVL264
 11212 0c33 3C000000 		.4byte	.LVL265
 11213 0c37 0100     		.2byte	0x1
 11214 0c39 53       		.byte	0x53
 11215 0c3a 00000000 		.4byte	0
 11216 0c3e 00000000 		.4byte	0
 11217              	.LLST85:
 11218 0c42 62000000 		.4byte	.LVL269
 11219 0c46 92000000 		.4byte	.LVL270
 11220 0c4a 0100     		.2byte	0x1
 11221 0c4c 53       		.byte	0x53
 11222 0c4d 00000000 		.4byte	0
 11223 0c51 00000000 		.4byte	0
 11224              	.LLST86:
 11225 0c55 58000000 		.4byte	.LVL267
 11226 0c59 5C000000 		.4byte	.LVL268
 11227 0c5d 0100     		.2byte	0x1
 11228 0c5f 53       		.byte	0x53
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 309


 11229 0c60 00000000 		.4byte	0
 11230 0c64 00000000 		.4byte	0
 11231              	.LLST87:
 11232 0c68 62000000 		.4byte	.LVL269
 11233 0c6c 92000000 		.4byte	.LVL270
 11234 0c70 0B00     		.2byte	0xb
 11235 0c72 73       		.byte	0x73
 11236 0c73 00       		.sleb128 0
 11237 0c74 44       		.byte	0x44
 11238 0c75 1E       		.byte	0x1e
 11239 0c76 03       		.byte	0x3
 11240 0c77 30000000 		.4byte	pxReadyTasksLists
 11241 0c7b 22       		.byte	0x22
 11242 0c7c 9F       		.byte	0x9f
 11243 0c7d 00000000 		.4byte	0
 11244 0c81 00000000 		.4byte	0
 11245              	.LLST88:
 11246 0c85 00000000 		.4byte	.LVL271
 11247 0c89 07000000 		.4byte	.LVL272-1
 11248 0c8d 0100     		.2byte	0x1
 11249 0c8f 50       		.byte	0x50
 11250 0c90 07000000 		.4byte	.LVL272-1
 11251 0c94 10000000 		.4byte	.LVL273
 11252 0c98 0100     		.2byte	0x1
 11253 0c9a 54       		.byte	0x54
 11254 0c9b 00000000 		.4byte	0
 11255 0c9f 00000000 		.4byte	0
 11256              	.LLST89:
 11257 0ca3 10000000 		.4byte	.LVL273
 11258 0ca7 C6000000 		.4byte	.LVL286
 11259 0cab 0100     		.2byte	0x1
 11260 0cad 54       		.byte	0x54
 11261 0cae 00000000 		.4byte	0
 11262 0cb2 00000000 		.4byte	0
 11263              	.LLST90:
 11264 0cb6 50000000 		.4byte	.LVL276
 11265 0cba 54000000 		.4byte	.LVL277
 11266 0cbe 0200     		.2byte	0x2
 11267 0cc0 30       		.byte	0x30
 11268 0cc1 9F       		.byte	0x9f
 11269 0cc2 54000000 		.4byte	.LVL277
 11270 0cc6 71000000 		.4byte	.LVL279-1
 11271 0cca 0100     		.2byte	0x1
 11272 0ccc 53       		.byte	0x53
 11273 0ccd 00000000 		.4byte	0
 11274 0cd1 00000000 		.4byte	0
 11275              	.LLST91:
 11276 0cd5 00000000 		.4byte	.LVL287
 11277 0cd9 0F000000 		.4byte	.LVL289-1
 11278 0cdd 0100     		.2byte	0x1
 11279 0cdf 50       		.byte	0x50
 11280 0ce0 0F000000 		.4byte	.LVL289-1
 11281 0ce4 20000000 		.4byte	.LFE93
 11282 0ce8 0400     		.2byte	0x4
 11283 0cea F3       		.byte	0xf3
 11284 0ceb 01       		.uleb128 0x1
 11285 0cec 50       		.byte	0x50
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 310


 11286 0ced 9F       		.byte	0x9f
 11287 0cee 00000000 		.4byte	0
 11288 0cf2 00000000 		.4byte	0
 11289              	.LLST92:
 11290 0cf6 00000000 		.4byte	.LVL287
 11291 0cfa 0A000000 		.4byte	.LVL288
 11292 0cfe 0100     		.2byte	0x1
 11293 0d00 51       		.byte	0x51
 11294 0d01 0A000000 		.4byte	.LVL288
 11295 0d05 1A000000 		.4byte	.LVL291
 11296 0d09 0100     		.2byte	0x1
 11297 0d0b 54       		.byte	0x54
 11298 0d0c 1A000000 		.4byte	.LVL291
 11299 0d10 20000000 		.4byte	.LFE93
 11300 0d14 0400     		.2byte	0x4
 11301 0d16 F3       		.byte	0xf3
 11302 0d17 01       		.uleb128 0x1
 11303 0d18 51       		.byte	0x51
 11304 0d19 9F       		.byte	0x9f
 11305 0d1a 00000000 		.4byte	0
 11306 0d1e 00000000 		.4byte	0
 11307              	.LLST93:
 11308 0d22 00000000 		.4byte	.LVL292
 11309 0d26 40000000 		.4byte	.LVL296
 11310 0d2a 0100     		.2byte	0x1
 11311 0d2c 50       		.byte	0x50
 11312 0d2d 40000000 		.4byte	.LVL296
 11313 0d31 4C000000 		.4byte	.LFE94
 11314 0d35 0400     		.2byte	0x4
 11315 0d37 F3       		.byte	0xf3
 11316 0d38 01       		.uleb128 0x1
 11317 0d39 50       		.byte	0x50
 11318 0d3a 9F       		.byte	0x9f
 11319 0d3b 00000000 		.4byte	0
 11320 0d3f 00000000 		.4byte	0
 11321              	.LLST94:
 11322 0d43 00000000 		.4byte	.LVL292
 11323 0d47 0C000000 		.4byte	.LVL293
 11324 0d4b 0100     		.2byte	0x1
 11325 0d4d 51       		.byte	0x51
 11326 0d4e 0C000000 		.4byte	.LVL293
 11327 0d52 4C000000 		.4byte	.LFE94
 11328 0d56 0400     		.2byte	0x4
 11329 0d58 F3       		.byte	0xf3
 11330 0d59 01       		.uleb128 0x1
 11331 0d5a 51       		.byte	0x51
 11332 0d5b 9F       		.byte	0x9f
 11333 0d5c 00000000 		.4byte	0
 11334 0d60 00000000 		.4byte	0
 11335              	.LLST95:
 11336 0d64 00000000 		.4byte	.LVL292
 11337 0d68 43000000 		.4byte	.LVL297-1
 11338 0d6c 0100     		.2byte	0x1
 11339 0d6e 52       		.byte	0x52
 11340 0d6f 43000000 		.4byte	.LVL297-1
 11341 0d73 4C000000 		.4byte	.LFE94
 11342 0d77 0400     		.2byte	0x4
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 311


 11343 0d79 F3       		.byte	0xf3
 11344 0d7a 01       		.uleb128 0x1
 11345 0d7b 52       		.byte	0x52
 11346 0d7c 9F       		.byte	0x9f
 11347 0d7d 00000000 		.4byte	0
 11348 0d81 00000000 		.4byte	0
 11349              	.LLST96:
 11350 0d85 10000000 		.4byte	.LVL294
 11351 0d89 3E000000 		.4byte	.LVL295
 11352 0d8d 0100     		.2byte	0x1
 11353 0d8f 51       		.byte	0x51
 11354 0d90 00000000 		.4byte	0
 11355 0d94 00000000 		.4byte	0
 11356              	.LLST97:
 11357 0d98 00000000 		.4byte	.LVL298
 11358 0d9c 0C000000 		.4byte	.LVL301
 11359 0da0 0100     		.2byte	0x1
 11360 0da2 50       		.byte	0x50
 11361 0da3 0C000000 		.4byte	.LVL301
 11362 0da7 E8000000 		.4byte	.LFE95
 11363 0dab 0400     		.2byte	0x4
 11364 0dad F3       		.byte	0xf3
 11365 0dae 01       		.uleb128 0x1
 11366 0daf 50       		.byte	0x50
 11367 0db0 9F       		.byte	0x9f
 11368 0db1 00000000 		.4byte	0
 11369 0db5 00000000 		.4byte	0
 11370              	.LLST98:
 11371 0db9 06000000 		.4byte	.LVL299
 11372 0dbd C8000000 		.4byte	.LVL309
 11373 0dc1 0100     		.2byte	0x1
 11374 0dc3 53       		.byte	0x53
 11375 0dc4 00000000 		.4byte	0
 11376 0dc8 00000000 		.4byte	0
 11377              	.LLST99:
 11378 0dcc D2000000 		.4byte	.LVL310
 11379 0dd0 DC000000 		.4byte	.LVL311
 11380 0dd4 0200     		.2byte	0x2
 11381 0dd6 31       		.byte	0x31
 11382 0dd7 9F       		.byte	0x9f
 11383 0dd8 DE000000 		.4byte	.LVL312
 11384 0ddc E8000000 		.4byte	.LFE95
 11385 0de0 0100     		.2byte	0x1
 11386 0de2 50       		.byte	0x50
 11387 0de3 00000000 		.4byte	0
 11388 0de7 00000000 		.4byte	0
 11389              	.LLST100:
 11390 0deb 08000000 		.4byte	.LVL300
 11391 0def 2E000000 		.4byte	.LVL302
 11392 0df3 0100     		.2byte	0x1
 11393 0df5 52       		.byte	0x52
 11394 0df6 00000000 		.4byte	0
 11395 0dfa 00000000 		.4byte	0
 11396              	.LLST101:
 11397 0dfe 38000000 		.4byte	.LVL303
 11398 0e02 5C000000 		.4byte	.LVL304
 11399 0e06 0100     		.2byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 312


 11400 0e08 52       		.byte	0x52
 11401 0e09 00000000 		.4byte	0
 11402 0e0d 00000000 		.4byte	0
 11403              	.LLST102:
 11404 0e11 78000000 		.4byte	.LVL305
 11405 0e15 86000000 		.4byte	.LVL306
 11406 0e19 0100     		.2byte	0x1
 11407 0e1b 52       		.byte	0x52
 11408 0e1c 00000000 		.4byte	0
 11409 0e20 00000000 		.4byte	0
 11410              	.LLST103:
 11411 0e24 AC000000 		.4byte	.LVL307
 11412 0e28 BC000000 		.4byte	.LVL308
 11413 0e2c 0100     		.2byte	0x1
 11414 0e2e 51       		.byte	0x51
 11415 0e2f 00000000 		.4byte	0
 11416 0e33 00000000 		.4byte	0
 11417              	.LLST104:
 11418 0e37 00000000 		.4byte	.LVL313
 11419 0e3b 32000000 		.4byte	.LVL318
 11420 0e3f 0100     		.2byte	0x1
 11421 0e41 50       		.byte	0x50
 11422 0e42 32000000 		.4byte	.LVL318
 11423 0e46 BC000000 		.4byte	.LFE96
 11424 0e4a 0400     		.2byte	0x4
 11425 0e4c F3       		.byte	0xf3
 11426 0e4d 01       		.uleb128 0x1
 11427 0e4e 50       		.byte	0x50
 11428 0e4f 9F       		.byte	0x9f
 11429 0e50 00000000 		.4byte	0
 11430 0e54 00000000 		.4byte	0
 11431              	.LLST105:
 11432 0e58 00000000 		.4byte	.LVL313
 11433 0e5c 06000000 		.4byte	.LVL314
 11434 0e60 0100     		.2byte	0x1
 11435 0e62 51       		.byte	0x51
 11436 0e63 06000000 		.4byte	.LVL314
 11437 0e67 BC000000 		.4byte	.LFE96
 11438 0e6b 0400     		.2byte	0x4
 11439 0e6d F3       		.byte	0xf3
 11440 0e6e 01       		.uleb128 0x1
 11441 0e6f 51       		.byte	0x51
 11442 0e70 9F       		.byte	0x9f
 11443 0e71 00000000 		.4byte	0
 11444 0e75 00000000 		.4byte	0
 11445              	.LLST106:
 11446 0e79 0A000000 		.4byte	.LVL315
 11447 0e7d A2000000 		.4byte	.LVL322
 11448 0e81 0100     		.2byte	0x1
 11449 0e83 53       		.byte	0x53
 11450 0e84 00000000 		.4byte	0
 11451 0e88 00000000 		.4byte	0
 11452              	.LLST107:
 11453 0e8c 0C000000 		.4byte	.LVL316
 11454 0e90 2E000000 		.4byte	.LVL317
 11455 0e94 0100     		.2byte	0x1
 11456 0e96 52       		.byte	0x52
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 313


 11457 0e97 00000000 		.4byte	0
 11458 0e9b 00000000 		.4byte	0
 11459              	.LLST108:
 11460 0e9f 2E000000 		.4byte	.LVL317
 11461 0ea3 5A000000 		.4byte	.LVL319
 11462 0ea7 0100     		.2byte	0x1
 11463 0ea9 52       		.byte	0x52
 11464 0eaa 00000000 		.4byte	0
 11465 0eae 00000000 		.4byte	0
 11466              	.LLST109:
 11467 0eb2 6E000000 		.4byte	.LVL320
 11468 0eb6 7C000000 		.4byte	.LVL321
 11469 0eba 0100     		.2byte	0x1
 11470 0ebc 51       		.byte	0x51
 11471 0ebd 00000000 		.4byte	0
 11472 0ec1 00000000 		.4byte	0
 11473              	.LLST110:
 11474 0ec5 00000000 		.4byte	.LVL323
 11475 0ec9 07000000 		.4byte	.LVL324-1
 11476 0ecd 0100     		.2byte	0x1
 11477 0ecf 50       		.byte	0x50
 11478 0ed0 07000000 		.4byte	.LVL324-1
 11479 0ed4 1C000000 		.4byte	.LVL326
 11480 0ed8 0100     		.2byte	0x1
 11481 0eda 54       		.byte	0x54
 11482 0edb 1C000000 		.4byte	.LVL326
 11483 0edf 20000000 		.4byte	.LFE97
 11484 0ee3 0400     		.2byte	0x4
 11485 0ee5 F3       		.byte	0xf3
 11486 0ee6 01       		.uleb128 0x1
 11487 0ee7 50       		.byte	0x50
 11488 0ee8 9F       		.byte	0x9f
 11489 0ee9 00000000 		.4byte	0
 11490 0eed 00000000 		.4byte	0
 11491              	.LLST111:
 11492 0ef1 00000000 		.4byte	.LVL328
 11493 0ef5 09000000 		.4byte	.LVL329-1
 11494 0ef9 0100     		.2byte	0x1
 11495 0efb 50       		.byte	0x50
 11496 0efc 09000000 		.4byte	.LVL329-1
 11497 0f00 32000000 		.4byte	.LVL333
 11498 0f04 0100     		.2byte	0x1
 11499 0f06 54       		.byte	0x54
 11500 0f07 32000000 		.4byte	.LVL333
 11501 0f0b 34000000 		.4byte	.LVL334
 11502 0f0f 0400     		.2byte	0x4
 11503 0f11 F3       		.byte	0xf3
 11504 0f12 01       		.uleb128 0x1
 11505 0f13 50       		.byte	0x50
 11506 0f14 9F       		.byte	0x9f
 11507 0f15 34000000 		.4byte	.LVL334
 11508 0f19 44000000 		.4byte	.LVL337
 11509 0f1d 0100     		.2byte	0x1
 11510 0f1f 54       		.byte	0x54
 11511 0f20 44000000 		.4byte	.LVL337
 11512 0f24 46000000 		.4byte	.LVL338
 11513 0f28 0400     		.2byte	0x4
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 314


 11514 0f2a F3       		.byte	0xf3
 11515 0f2b 01       		.uleb128 0x1
 11516 0f2c 50       		.byte	0x50
 11517 0f2d 9F       		.byte	0x9f
 11518 0f2e 46000000 		.4byte	.LVL338
 11519 0f32 4C000000 		.4byte	.LVL340
 11520 0f36 0100     		.2byte	0x1
 11521 0f38 54       		.byte	0x54
 11522 0f39 4C000000 		.4byte	.LVL340
 11523 0f3d 4E000000 		.4byte	.LVL341
 11524 0f41 0400     		.2byte	0x4
 11525 0f43 F3       		.byte	0xf3
 11526 0f44 01       		.uleb128 0x1
 11527 0f45 50       		.byte	0x50
 11528 0f46 9F       		.byte	0x9f
 11529 0f47 4E000000 		.4byte	.LVL341
 11530 0f4b 50000000 		.4byte	.LVL342
 11531 0f4f 0100     		.2byte	0x1
 11532 0f51 54       		.byte	0x54
 11533 0f52 50000000 		.4byte	.LVL342
 11534 0f56 5C000000 		.4byte	.LFE99
 11535 0f5a 0400     		.2byte	0x4
 11536 0f5c F3       		.byte	0xf3
 11537 0f5d 01       		.uleb128 0x1
 11538 0f5e 50       		.byte	0x50
 11539 0f5f 9F       		.byte	0x9f
 11540 0f60 00000000 		.4byte	0
 11541 0f64 00000000 		.4byte	0
 11542              	.LLST112:
 11543 0f68 00000000 		.4byte	.LVL328
 11544 0f6c 09000000 		.4byte	.LVL329-1
 11545 0f70 0100     		.2byte	0x1
 11546 0f72 51       		.byte	0x51
 11547 0f73 09000000 		.4byte	.LVL329-1
 11548 0f77 58000000 		.4byte	.LVL344
 11549 0f7b 0100     		.2byte	0x1
 11550 0f7d 55       		.byte	0x55
 11551 0f7e 58000000 		.4byte	.LVL344
 11552 0f82 5C000000 		.4byte	.LFE99
 11553 0f86 0400     		.2byte	0x4
 11554 0f88 F3       		.byte	0xf3
 11555 0f89 01       		.uleb128 0x1
 11556 0f8a 51       		.byte	0x51
 11557 0f8b 9F       		.byte	0x9f
 11558 0f8c 00000000 		.4byte	0
 11559 0f90 00000000 		.4byte	0
 11560              	.LLST113:
 11561 0f94 2C000000 		.4byte	.LVL332
 11562 0f98 34000000 		.4byte	.LVL334
 11563 0f9c 0200     		.2byte	0x2
 11564 0f9e 31       		.byte	0x31
 11565 0f9f 9F       		.byte	0x9f
 11566 0fa0 42000000 		.4byte	.LVL336
 11567 0fa4 46000000 		.4byte	.LVL338
 11568 0fa8 0200     		.2byte	0x2
 11569 0faa 30       		.byte	0x30
 11570 0fab 9F       		.byte	0x9f
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 315


 11571 0fac 4A000000 		.4byte	.LVL339
 11572 0fb0 4E000000 		.4byte	.LVL341
 11573 0fb4 0200     		.2byte	0x2
 11574 0fb6 31       		.byte	0x31
 11575 0fb7 9F       		.byte	0x9f
 11576 0fb8 50000000 		.4byte	.LVL342
 11577 0fbc 58000000 		.4byte	.LVL344
 11578 0fc0 0100     		.2byte	0x1
 11579 0fc2 54       		.byte	0x54
 11580 0fc3 58000000 		.4byte	.LVL344
 11581 0fc7 5C000000 		.4byte	.LFE99
 11582 0fcb 0100     		.2byte	0x1
 11583 0fcd 50       		.byte	0x50
 11584 0fce 00000000 		.4byte	0
 11585 0fd2 00000000 		.4byte	0
 11586              	.LLST114:
 11587 0fd6 10000000 		.4byte	.LVL330
 11588 0fda 41000000 		.4byte	.LVL336-1
 11589 0fde 0100     		.2byte	0x1
 11590 0fe0 51       		.byte	0x51
 11591 0fe1 46000000 		.4byte	.LVL338
 11592 0fe5 50000000 		.4byte	.LVL342
 11593 0fe9 0100     		.2byte	0x1
 11594 0feb 51       		.byte	0x51
 11595 0fec 00000000 		.4byte	0
 11596 0ff0 00000000 		.4byte	0
 11597              	.LLST115:
 11598 0ff4 14000000 		.4byte	.LVL331
 11599 0ff8 3E000000 		.4byte	.LVL335
 11600 0ffc 0100     		.2byte	0x1
 11601 0ffe 50       		.byte	0x50
 11602 0fff 3E000000 		.4byte	.LVL335
 11603 1003 41000000 		.4byte	.LVL336-1
 11604 1007 0600     		.2byte	0x6
 11605 1009 71       		.byte	0x71
 11606 100a 00       		.sleb128 0
 11607 100b 72       		.byte	0x72
 11608 100c 00       		.sleb128 0
 11609 100d 1C       		.byte	0x1c
 11610 100e 9F       		.byte	0x9f
 11611 100f 46000000 		.4byte	.LVL338
 11612 1013 50000000 		.4byte	.LVL342
 11613 1017 0100     		.2byte	0x1
 11614 1019 50       		.byte	0x50
 11615 101a 00000000 		.4byte	0
 11616 101e 00000000 		.4byte	0
 11617              	.LLST116:
 11618 1022 00000000 		.4byte	.LVL345
 11619 1026 0C000000 		.4byte	.LVL346
 11620 102a 0100     		.2byte	0x1
 11621 102c 50       		.byte	0x50
 11622 102d 00000000 		.4byte	0
 11623 1031 00000000 		.4byte	0
 11624              	.LLST117:
 11625 1035 0C000000 		.4byte	.LVL346
 11626 1039 11000000 		.4byte	.LVL347-1
 11627 103d 0100     		.2byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 316


 11628 103f 53       		.byte	0x53
 11629 1040 00000000 		.4byte	0
 11630 1044 00000000 		.4byte	0
 11631              	.LLST118:
 11632 1048 0C000000 		.4byte	.LVL346
 11633 104c 11000000 		.4byte	.LVL347-1
 11634 1050 0200     		.2byte	0x2
 11635 1052 73       		.byte	0x73
 11636 1053 30       		.sleb128 48
 11637 1054 00000000 		.4byte	0
 11638 1058 00000000 		.4byte	0
 11639              	.LLST119:
 11640 105c 00000000 		.4byte	.LVL349
 11641 1060 2C000000 		.4byte	.LVL350
 11642 1064 0100     		.2byte	0x1
 11643 1066 50       		.byte	0x50
 11644 1067 2C000000 		.4byte	.LVL350
 11645 106b 43000000 		.4byte	.LVL351-1
 11646 106f 0100     		.2byte	0x1
 11647 1071 53       		.byte	0x53
 11648 1072 43000000 		.4byte	.LVL351-1
 11649 1076 A4000000 		.4byte	.LVL354
 11650 107a 0100     		.2byte	0x1
 11651 107c 54       		.byte	0x54
 11652 107d A4000000 		.4byte	.LVL354
 11653 1081 AC000000 		.4byte	.LVL355
 11654 1085 0400     		.2byte	0x4
 11655 1087 F3       		.byte	0xf3
 11656 1088 01       		.uleb128 0x1
 11657 1089 50       		.byte	0x50
 11658 108a 9F       		.byte	0x9f
 11659 108b AC000000 		.4byte	.LVL355
 11660 108f BA000000 		.4byte	.LVL356
 11661 1093 0100     		.2byte	0x1
 11662 1095 53       		.byte	0x53
 11663 1096 BA000000 		.4byte	.LVL356
 11664 109a CA000000 		.4byte	.LVL357
 11665 109e 0100     		.2byte	0x1
 11666 10a0 50       		.byte	0x50
 11667 10a1 CA000000 		.4byte	.LVL357
 11668 10a5 CC000000 		.4byte	.LVL358
 11669 10a9 0400     		.2byte	0x4
 11670 10ab F3       		.byte	0xf3
 11671 10ac 01       		.uleb128 0x1
 11672 10ad 50       		.byte	0x50
 11673 10ae 9F       		.byte	0x9f
 11674 10af CC000000 		.4byte	.LVL358
 11675 10b3 CE000000 		.4byte	.LVL359
 11676 10b7 0100     		.2byte	0x1
 11677 10b9 50       		.byte	0x50
 11678 10ba CE000000 		.4byte	.LVL359
 11679 10be D0000000 		.4byte	.LVL360
 11680 10c2 0400     		.2byte	0x4
 11681 10c4 F3       		.byte	0xf3
 11682 10c5 01       		.uleb128 0x1
 11683 10c6 50       		.byte	0x50
 11684 10c7 9F       		.byte	0x9f
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 317


 11685 10c8 D0000000 		.4byte	.LVL360
 11686 10cc D2000000 		.4byte	.LVL361
 11687 10d0 0100     		.2byte	0x1
 11688 10d2 50       		.byte	0x50
 11689 10d3 D2000000 		.4byte	.LVL361
 11690 10d7 DC000000 		.4byte	.LFE109
 11691 10db 0400     		.2byte	0x4
 11692 10dd F3       		.byte	0xf3
 11693 10de 01       		.uleb128 0x1
 11694 10df 50       		.byte	0x50
 11695 10e0 9F       		.byte	0x9f
 11696 10e1 00000000 		.4byte	0
 11697 10e5 00000000 		.4byte	0
 11698              	.LLST120:
 11699 10e9 00000000 		.4byte	.LVL349
 11700 10ed 2C000000 		.4byte	.LVL350
 11701 10f1 0100     		.2byte	0x1
 11702 10f3 50       		.byte	0x50
 11703 10f4 2C000000 		.4byte	.LVL350
 11704 10f8 43000000 		.4byte	.LVL351-1
 11705 10fc 0100     		.2byte	0x1
 11706 10fe 53       		.byte	0x53
 11707 10ff 43000000 		.4byte	.LVL351-1
 11708 1103 A4000000 		.4byte	.LVL354
 11709 1107 0100     		.2byte	0x1
 11710 1109 54       		.byte	0x54
 11711 110a A4000000 		.4byte	.LVL354
 11712 110e AC000000 		.4byte	.LVL355
 11713 1112 0400     		.2byte	0x4
 11714 1114 F3       		.byte	0xf3
 11715 1115 01       		.uleb128 0x1
 11716 1116 50       		.byte	0x50
 11717 1117 9F       		.byte	0x9f
 11718 1118 AC000000 		.4byte	.LVL355
 11719 111c BA000000 		.4byte	.LVL356
 11720 1120 0100     		.2byte	0x1
 11721 1122 53       		.byte	0x53
 11722 1123 BA000000 		.4byte	.LVL356
 11723 1127 CA000000 		.4byte	.LVL357
 11724 112b 0100     		.2byte	0x1
 11725 112d 50       		.byte	0x50
 11726 112e CA000000 		.4byte	.LVL357
 11727 1132 CC000000 		.4byte	.LVL358
 11728 1136 0400     		.2byte	0x4
 11729 1138 F3       		.byte	0xf3
 11730 1139 01       		.uleb128 0x1
 11731 113a 50       		.byte	0x50
 11732 113b 9F       		.byte	0x9f
 11733 113c CC000000 		.4byte	.LVL358
 11734 1140 CE000000 		.4byte	.LVL359
 11735 1144 0100     		.2byte	0x1
 11736 1146 50       		.byte	0x50
 11737 1147 CE000000 		.4byte	.LVL359
 11738 114b D0000000 		.4byte	.LVL360
 11739 114f 0400     		.2byte	0x4
 11740 1151 F3       		.byte	0xf3
 11741 1152 01       		.uleb128 0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 318


 11742 1153 50       		.byte	0x50
 11743 1154 9F       		.byte	0x9f
 11744 1155 D0000000 		.4byte	.LVL360
 11745 1159 D2000000 		.4byte	.LVL361
 11746 115d 0100     		.2byte	0x1
 11747 115f 50       		.byte	0x50
 11748 1160 D2000000 		.4byte	.LVL361
 11749 1164 DC000000 		.4byte	.LFE109
 11750 1168 0400     		.2byte	0x4
 11751 116a F3       		.byte	0xf3
 11752 116b 01       		.uleb128 0x1
 11753 116c 50       		.byte	0x50
 11754 116d 9F       		.byte	0x9f
 11755 116e 00000000 		.4byte	0
 11756 1172 00000000 		.4byte	0
 11757              	.LLST121:
 11758 1176 00000000 		.4byte	.LVL349
 11759 117a CE000000 		.4byte	.LVL359
 11760 117e 0200     		.2byte	0x2
 11761 1180 30       		.byte	0x30
 11762 1181 9F       		.byte	0x9f
 11763 1182 CE000000 		.4byte	.LVL359
 11764 1186 D0000000 		.4byte	.LVL360
 11765 118a 0100     		.2byte	0x1
 11766 118c 50       		.byte	0x50
 11767 118d D0000000 		.4byte	.LVL360
 11768 1191 D2000000 		.4byte	.LVL361
 11769 1195 0200     		.2byte	0x2
 11770 1197 30       		.byte	0x30
 11771 1198 9F       		.byte	0x9f
 11772 1199 D2000000 		.4byte	.LVL361
 11773 119d DC000000 		.4byte	.LFE109
 11774 11a1 0100     		.2byte	0x1
 11775 11a3 50       		.byte	0x50
 11776 11a4 00000000 		.4byte	0
 11777 11a8 00000000 		.4byte	0
 11778              	.LLST122:
 11779 11ac 80000000 		.4byte	.LVL352
 11780 11b0 8E000000 		.4byte	.LVL353
 11781 11b4 0100     		.2byte	0x1
 11782 11b6 52       		.byte	0x52
 11783 11b7 00000000 		.4byte	0
 11784 11bb 00000000 		.4byte	0
 11785              	.LLST123:
 11786 11bf 00000000 		.4byte	.LVL362
 11787 11c3 10000000 		.4byte	.LVL363
 11788 11c7 0100     		.2byte	0x1
 11789 11c9 50       		.byte	0x50
 11790 11ca 10000000 		.4byte	.LVL363
 11791 11ce 23000000 		.4byte	.LVL364-1
 11792 11d2 0100     		.2byte	0x1
 11793 11d4 53       		.byte	0x53
 11794 11d5 23000000 		.4byte	.LVL364-1
 11795 11d9 86000000 		.4byte	.LVL367
 11796 11dd 0100     		.2byte	0x1
 11797 11df 54       		.byte	0x54
 11798 11e0 86000000 		.4byte	.LVL367
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 319


 11799 11e4 8E000000 		.4byte	.LVL369
 11800 11e8 0400     		.2byte	0x4
 11801 11ea F3       		.byte	0xf3
 11802 11eb 01       		.uleb128 0x1
 11803 11ec 50       		.byte	0x50
 11804 11ed 9F       		.byte	0x9f
 11805 11ee 8E000000 		.4byte	.LVL369
 11806 11f2 90000000 		.4byte	.LVL370
 11807 11f6 0100     		.2byte	0x1
 11808 11f8 50       		.byte	0x50
 11809 11f9 90000000 		.4byte	.LVL370
 11810 11fd 92000000 		.4byte	.LVL371
 11811 1201 0400     		.2byte	0x4
 11812 1203 F3       		.byte	0xf3
 11813 1204 01       		.uleb128 0x1
 11814 1205 50       		.byte	0x50
 11815 1206 9F       		.byte	0x9f
 11816 1207 92000000 		.4byte	.LVL371
 11817 120b 9A000000 		.4byte	.LVL374
 11818 120f 0100     		.2byte	0x1
 11819 1211 53       		.byte	0x53
 11820 1212 9A000000 		.4byte	.LVL374
 11821 1216 A0000000 		.4byte	.LFE110
 11822 121a 0400     		.2byte	0x4
 11823 121c F3       		.byte	0xf3
 11824 121d 01       		.uleb128 0x1
 11825 121e 50       		.byte	0x50
 11826 121f 9F       		.byte	0x9f
 11827 1220 00000000 		.4byte	0
 11828 1224 00000000 		.4byte	0
 11829              	.LLST124:
 11830 1228 00000000 		.4byte	.LVL362
 11831 122c 10000000 		.4byte	.LVL363
 11832 1230 0100     		.2byte	0x1
 11833 1232 50       		.byte	0x50
 11834 1233 10000000 		.4byte	.LVL363
 11835 1237 23000000 		.4byte	.LVL364-1
 11836 123b 0100     		.2byte	0x1
 11837 123d 53       		.byte	0x53
 11838 123e 23000000 		.4byte	.LVL364-1
 11839 1242 86000000 		.4byte	.LVL367
 11840 1246 0100     		.2byte	0x1
 11841 1248 54       		.byte	0x54
 11842 1249 86000000 		.4byte	.LVL367
 11843 124d 8E000000 		.4byte	.LVL369
 11844 1251 0400     		.2byte	0x4
 11845 1253 F3       		.byte	0xf3
 11846 1254 01       		.uleb128 0x1
 11847 1255 50       		.byte	0x50
 11848 1256 9F       		.byte	0x9f
 11849 1257 8E000000 		.4byte	.LVL369
 11850 125b 90000000 		.4byte	.LVL370
 11851 125f 0100     		.2byte	0x1
 11852 1261 50       		.byte	0x50
 11853 1262 90000000 		.4byte	.LVL370
 11854 1266 92000000 		.4byte	.LVL371
 11855 126a 0400     		.2byte	0x4
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 320


 11856 126c F3       		.byte	0xf3
 11857 126d 01       		.uleb128 0x1
 11858 126e 50       		.byte	0x50
 11859 126f 9F       		.byte	0x9f
 11860 1270 92000000 		.4byte	.LVL371
 11861 1274 9A000000 		.4byte	.LVL374
 11862 1278 0100     		.2byte	0x1
 11863 127a 53       		.byte	0x53
 11864 127b 9A000000 		.4byte	.LVL374
 11865 127f A0000000 		.4byte	.LFE110
 11866 1283 0400     		.2byte	0x4
 11867 1285 F3       		.byte	0xf3
 11868 1286 01       		.uleb128 0x1
 11869 1287 50       		.byte	0x50
 11870 1288 9F       		.byte	0x9f
 11871 1289 00000000 		.4byte	0
 11872 128d 00000000 		.4byte	0
 11873              	.LLST125:
 11874 1291 00000000 		.4byte	.LVL362
 11875 1295 8C000000 		.4byte	.LVL368
 11876 1299 0200     		.2byte	0x2
 11877 129b 30       		.byte	0x30
 11878 129c 9F       		.byte	0x9f
 11879 129d 8C000000 		.4byte	.LVL368
 11880 12a1 8E000000 		.4byte	.LVL369
 11881 12a5 0200     		.2byte	0x2
 11882 12a7 31       		.byte	0x31
 11883 12a8 9F       		.byte	0x9f
 11884 12a9 8E000000 		.4byte	.LVL369
 11885 12ad 90000000 		.4byte	.LVL370
 11886 12b1 0200     		.2byte	0x2
 11887 12b3 30       		.byte	0x30
 11888 12b4 9F       		.byte	0x9f
 11889 12b5 90000000 		.4byte	.LVL370
 11890 12b9 92000000 		.4byte	.LVL371
 11891 12bd 0100     		.2byte	0x1
 11892 12bf 50       		.byte	0x50
 11893 12c0 92000000 		.4byte	.LVL371
 11894 12c4 98000000 		.4byte	.LVL373
 11895 12c8 0200     		.2byte	0x2
 11896 12ca 30       		.byte	0x30
 11897 12cb 9F       		.byte	0x9f
 11898 12cc 98000000 		.4byte	.LVL373
 11899 12d0 A0000000 		.4byte	.LFE110
 11900 12d4 0100     		.2byte	0x1
 11901 12d6 50       		.byte	0x50
 11902 12d7 00000000 		.4byte	0
 11903 12db 00000000 		.4byte	0
 11904              	.LLST126:
 11905 12df 62000000 		.4byte	.LVL365
 11906 12e3 70000000 		.4byte	.LVL366
 11907 12e7 0100     		.2byte	0x1
 11908 12e9 53       		.byte	0x53
 11909 12ea 00000000 		.4byte	0
 11910 12ee 00000000 		.4byte	0
 11911              	.LLST127:
 11912 12f2 00000000 		.4byte	.LVL375
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 321


 11913 12f6 16000000 		.4byte	.LVL378
 11914 12fa 0100     		.2byte	0x1
 11915 12fc 50       		.byte	0x50
 11916 12fd 16000000 		.4byte	.LVL378
 11917 1301 43000000 		.4byte	.LVL382-1
 11918 1305 0100     		.2byte	0x1
 11919 1307 53       		.byte	0x53
 11920 1308 43000000 		.4byte	.LVL382-1
 11921 130c AA000000 		.4byte	.LVL385
 11922 1310 0100     		.2byte	0x1
 11923 1312 54       		.byte	0x54
 11924 1313 AA000000 		.4byte	.LVL385
 11925 1317 B4000000 		.4byte	.LFE111
 11926 131b 0400     		.2byte	0x4
 11927 131d F3       		.byte	0xf3
 11928 131e 01       		.uleb128 0x1
 11929 131f 50       		.byte	0x50
 11930 1320 9F       		.byte	0x9f
 11931 1321 00000000 		.4byte	0
 11932 1325 00000000 		.4byte	0
 11933              	.LLST128:
 11934 1329 00000000 		.4byte	.LVL375
 11935 132d 10000000 		.4byte	.LVL377
 11936 1331 0100     		.2byte	0x1
 11937 1333 51       		.byte	0x51
 11938 1334 10000000 		.4byte	.LVL377
 11939 1338 B4000000 		.4byte	.LFE111
 11940 133c 0400     		.2byte	0x4
 11941 133e F3       		.byte	0xf3
 11942 133f 01       		.uleb128 0x1
 11943 1340 51       		.byte	0x51
 11944 1341 9F       		.byte	0x9f
 11945 1342 00000000 		.4byte	0
 11946 1346 00000000 		.4byte	0
 11947              	.LLST129:
 11948 134a 00000000 		.4byte	.LVL375
 11949 134e 16000000 		.4byte	.LVL378
 11950 1352 0100     		.2byte	0x1
 11951 1354 50       		.byte	0x50
 11952 1355 16000000 		.4byte	.LVL378
 11953 1359 43000000 		.4byte	.LVL382-1
 11954 135d 0100     		.2byte	0x1
 11955 135f 53       		.byte	0x53
 11956 1360 43000000 		.4byte	.LVL382-1
 11957 1364 AA000000 		.4byte	.LVL385
 11958 1368 0100     		.2byte	0x1
 11959 136a 54       		.byte	0x54
 11960 136b AA000000 		.4byte	.LVL385
 11961 136f B4000000 		.4byte	.LFE111
 11962 1373 0400     		.2byte	0x4
 11963 1375 F3       		.byte	0xf3
 11964 1376 01       		.uleb128 0x1
 11965 1377 50       		.byte	0x50
 11966 1378 9F       		.byte	0x9f
 11967 1379 00000000 		.4byte	0
 11968 137d 00000000 		.4byte	0
 11969              	.LLST130:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 322


 11970 1381 1A000000 		.4byte	.LVL379
 11971 1385 2E000000 		.4byte	.LVL381
 11972 1389 0100     		.2byte	0x1
 11973 138b 51       		.byte	0x51
 11974 138c 00000000 		.4byte	0
 11975 1390 00000000 		.4byte	0
 11976              	.LLST131:
 11977 1394 0E000000 		.4byte	.LVL376
 11978 1398 26000000 		.4byte	.LVL380
 11979 139c 0100     		.2byte	0x1
 11980 139e 52       		.byte	0x52
 11981 139f 26000000 		.4byte	.LVL380
 11982 13a3 43000000 		.4byte	.LVL382-1
 11983 13a7 0200     		.2byte	0x2
 11984 13a9 73       		.byte	0x73
 11985 13aa 2C       		.sleb128 44
 11986 13ab 00000000 		.4byte	0
 11987 13af 00000000 		.4byte	0
 11988              	.LLST132:
 11989 13b3 7A000000 		.4byte	.LVL383
 11990 13b7 88000000 		.4byte	.LVL384
 11991 13bb 0100     		.2byte	0x1
 11992 13bd 53       		.byte	0x53
 11993 13be 00000000 		.4byte	0
 11994 13c2 00000000 		.4byte	0
 11995              	.LLST133:
 11996 13c6 00000000 		.4byte	.LVL387
 11997 13ca 0B000000 		.4byte	.LVL388-1
 11998 13ce 0100     		.2byte	0x1
 11999 13d0 50       		.byte	0x50
 12000 13d1 0B000000 		.4byte	.LVL388-1
 12001 13d5 88000000 		.4byte	.LVL393
 12002 13d9 0100     		.2byte	0x1
 12003 13db 54       		.byte	0x54
 12004 13dc 88000000 		.4byte	.LVL393
 12005 13e0 A0000000 		.4byte	.LFE114
 12006 13e4 0400     		.2byte	0x4
 12007 13e6 F3       		.byte	0xf3
 12008 13e7 01       		.uleb128 0x1
 12009 13e8 50       		.byte	0x50
 12010 13e9 9F       		.byte	0x9f
 12011 13ea 00000000 		.4byte	0
 12012 13ee 00000000 		.4byte	0
 12013              	.LLST134:
 12014 13f2 00000000 		.4byte	.LVL387
 12015 13f6 0B000000 		.4byte	.LVL388-1
 12016 13fa 0100     		.2byte	0x1
 12017 13fc 51       		.byte	0x51
 12018 13fd 0B000000 		.4byte	.LVL388-1
 12019 1401 96000000 		.4byte	.LVL395
 12020 1405 0100     		.2byte	0x1
 12021 1407 56       		.byte	0x56
 12022 1408 96000000 		.4byte	.LVL395
 12023 140c A0000000 		.4byte	.LFE114
 12024 1410 0400     		.2byte	0x4
 12025 1412 F3       		.byte	0xf3
 12026 1413 01       		.uleb128 0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 323


 12027 1414 51       		.byte	0x51
 12028 1415 9F       		.byte	0x9f
 12029 1416 00000000 		.4byte	0
 12030 141a 00000000 		.4byte	0
 12031              	.LLST135:
 12032 141e 00000000 		.4byte	.LVL387
 12033 1422 0B000000 		.4byte	.LVL388-1
 12034 1426 0100     		.2byte	0x1
 12035 1428 52       		.byte	0x52
 12036 1429 0B000000 		.4byte	.LVL388-1
 12037 142d 5A000000 		.4byte	.LVL392
 12038 1431 0100     		.2byte	0x1
 12039 1433 55       		.byte	0x55
 12040 1434 5A000000 		.4byte	.LVL392
 12041 1438 A0000000 		.4byte	.LFE114
 12042 143c 0400     		.2byte	0x4
 12043 143e F3       		.byte	0xf3
 12044 143f 01       		.uleb128 0x1
 12045 1440 52       		.byte	0x52
 12046 1441 9F       		.byte	0x9f
 12047 1442 00000000 		.4byte	0
 12048 1446 00000000 		.4byte	0
 12049              	.LLST136:
 12050 144a 5A000000 		.4byte	.LVL392
 12051 144e 96000000 		.4byte	.LVL395
 12052 1452 0100     		.2byte	0x1
 12053 1454 55       		.byte	0x55
 12054 1455 96000000 		.4byte	.LVL395
 12055 1459 A0000000 		.4byte	.LFE114
 12056 145d 0100     		.2byte	0x1
 12057 145f 50       		.byte	0x50
 12058 1460 00000000 		.4byte	0
 12059 1464 00000000 		.4byte	0
 12060              	.LLST137:
 12061 1468 00000000 		.4byte	.LVL396
 12062 146c 0D000000 		.4byte	.LVL397-1
 12063 1470 0100     		.2byte	0x1
 12064 1472 50       		.byte	0x50
 12065 1473 0D000000 		.4byte	.LVL397-1
 12066 1477 AE000000 		.4byte	.LVL405
 12067 147b 0100     		.2byte	0x1
 12068 147d 54       		.byte	0x54
 12069 147e AE000000 		.4byte	.LVL405
 12070 1482 C4000000 		.4byte	.LFE115
 12071 1486 0400     		.2byte	0x4
 12072 1488 F3       		.byte	0xf3
 12073 1489 01       		.uleb128 0x1
 12074 148a 50       		.byte	0x50
 12075 148b 9F       		.byte	0x9f
 12076 148c 00000000 		.4byte	0
 12077 1490 00000000 		.4byte	0
 12078              	.LLST138:
 12079 1494 00000000 		.4byte	.LVL396
 12080 1498 0D000000 		.4byte	.LVL397-1
 12081 149c 0100     		.2byte	0x1
 12082 149e 51       		.byte	0x51
 12083 149f 0D000000 		.4byte	.LVL397-1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 324


 12084 14a3 BC000000 		.4byte	.LVL407
 12085 14a7 0100     		.2byte	0x1
 12086 14a9 57       		.byte	0x57
 12087 14aa BC000000 		.4byte	.LVL407
 12088 14ae C4000000 		.4byte	.LFE115
 12089 14b2 0400     		.2byte	0x4
 12090 14b4 F3       		.byte	0xf3
 12091 14b5 01       		.uleb128 0x1
 12092 14b6 51       		.byte	0x51
 12093 14b7 9F       		.byte	0x9f
 12094 14b8 00000000 		.4byte	0
 12095 14bc 00000000 		.4byte	0
 12096              	.LLST139:
 12097 14c0 00000000 		.4byte	.LVL396
 12098 14c4 0D000000 		.4byte	.LVL397-1
 12099 14c8 0100     		.2byte	0x1
 12100 14ca 52       		.byte	0x52
 12101 14cb 0D000000 		.4byte	.LVL397-1
 12102 14cf 9C000000 		.4byte	.LVL401
 12103 14d3 0100     		.2byte	0x1
 12104 14d5 55       		.byte	0x55
 12105 14d6 9C000000 		.4byte	.LVL401
 12106 14da A4000000 		.4byte	.LVL403
 12107 14de 0400     		.2byte	0x4
 12108 14e0 F3       		.byte	0xf3
 12109 14e1 01       		.uleb128 0x1
 12110 14e2 52       		.byte	0x52
 12111 14e3 9F       		.byte	0x9f
 12112 14e4 A4000000 		.4byte	.LVL403
 12113 14e8 A6000000 		.4byte	.LVL404
 12114 14ec 0100     		.2byte	0x1
 12115 14ee 55       		.byte	0x55
 12116 14ef A6000000 		.4byte	.LVL404
 12117 14f3 C4000000 		.4byte	.LFE115
 12118 14f7 0400     		.2byte	0x4
 12119 14f9 F3       		.byte	0xf3
 12120 14fa 01       		.uleb128 0x1
 12121 14fb 52       		.byte	0x52
 12122 14fc 9F       		.byte	0x9f
 12123 14fd 00000000 		.4byte	0
 12124 1501 00000000 		.4byte	0
 12125              	.LLST140:
 12126 1505 00000000 		.4byte	.LVL396
 12127 1509 0D000000 		.4byte	.LVL397-1
 12128 150d 0100     		.2byte	0x1
 12129 150f 53       		.byte	0x53
 12130 1510 0D000000 		.4byte	.LVL397-1
 12131 1514 BC000000 		.4byte	.LVL407
 12132 1518 0100     		.2byte	0x1
 12133 151a 56       		.byte	0x56
 12134 151b BC000000 		.4byte	.LVL407
 12135 151f C4000000 		.4byte	.LFE115
 12136 1523 0400     		.2byte	0x4
 12137 1525 F3       		.byte	0xf3
 12138 1526 01       		.uleb128 0x1
 12139 1527 53       		.byte	0x53
 12140 1528 9F       		.byte	0x9f
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 325


 12141 1529 00000000 		.4byte	0
 12142 152d 00000000 		.4byte	0
 12143              	.LLST141:
 12144 1531 00000000 		.4byte	.LVL396
 12145 1535 BC000000 		.4byte	.LVL407
 12146 1539 0200     		.2byte	0x2
 12147 153b 91       		.byte	0x91
 12148 153c 00       		.sleb128 0
 12149 153d BC000000 		.4byte	.LVL407
 12150 1541 C4000000 		.4byte	.LFE115
 12151 1545 0200     		.2byte	0x2
 12152 1547 7D       		.byte	0x7d
 12153 1548 00       		.sleb128 0
 12154 1549 00000000 		.4byte	0
 12155 154d 00000000 		.4byte	0
 12156              	.LLST142:
 12157 1551 A0000000 		.4byte	.LVL402
 12158 1555 A4000000 		.4byte	.LVL403
 12159 1559 0200     		.2byte	0x2
 12160 155b 31       		.byte	0x31
 12161 155c 9F       		.byte	0x9f
 12162 155d A6000000 		.4byte	.LVL404
 12163 1561 BC000000 		.4byte	.LVL407
 12164 1565 0100     		.2byte	0x1
 12165 1567 55       		.byte	0x55
 12166 1568 BC000000 		.4byte	.LVL407
 12167 156c C4000000 		.4byte	.LFE115
 12168 1570 0100     		.2byte	0x1
 12169 1572 50       		.byte	0x50
 12170 1573 00000000 		.4byte	0
 12171 1577 00000000 		.4byte	0
 12172              	.LLST143:
 12173 157b 00000000 		.4byte	.LVL408
 12174 157f 13000000 		.4byte	.LVL410-1
 12175 1583 0100     		.2byte	0x1
 12176 1585 50       		.byte	0x50
 12177 1586 13000000 		.4byte	.LVL410-1
 12178 158a 1A010000 		.4byte	.LVL434
 12179 158e 0100     		.2byte	0x1
 12180 1590 54       		.byte	0x54
 12181 1591 1A010000 		.4byte	.LVL434
 12182 1595 24010000 		.4byte	.LFE116
 12183 1599 0400     		.2byte	0x4
 12184 159b F3       		.byte	0xf3
 12185 159c 01       		.uleb128 0x1
 12186 159d 50       		.byte	0x50
 12187 159e 9F       		.byte	0x9f
 12188 159f 00000000 		.4byte	0
 12189 15a3 00000000 		.4byte	0
 12190              	.LLST144:
 12191 15a7 00000000 		.4byte	.LVL408
 12192 15ab 13000000 		.4byte	.LVL410-1
 12193 15af 0100     		.2byte	0x1
 12194 15b1 51       		.byte	0x51
 12195 15b2 13000000 		.4byte	.LVL410-1
 12196 15b6 44000000 		.4byte	.LVL412
 12197 15ba 0100     		.2byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 326


 12198 15bc 55       		.byte	0x55
 12199 15bd 44000000 		.4byte	.LVL412
 12200 15c1 50000000 		.4byte	.LVL414
 12201 15c5 0300     		.2byte	0x3
 12202 15c7 75       		.byte	0x75
 12203 15c8 6E       		.sleb128 -18
 12204 15c9 9F       		.byte	0x9f
 12205 15ca 50000000 		.4byte	.LVL414
 12206 15ce 52000000 		.4byte	.LVL415
 12207 15d2 0400     		.2byte	0x4
 12208 15d4 F3       		.byte	0xf3
 12209 15d5 01       		.uleb128 0x1
 12210 15d6 51       		.byte	0x51
 12211 15d7 9F       		.byte	0x9f
 12212 15d8 52000000 		.4byte	.LVL415
 12213 15dc 54000000 		.4byte	.LVL416
 12214 15e0 0100     		.2byte	0x1
 12215 15e2 55       		.byte	0x55
 12216 15e3 54000000 		.4byte	.LVL416
 12217 15e7 60000000 		.4byte	.LVL417
 12218 15eb 0300     		.2byte	0x3
 12219 15ed 75       		.byte	0x75
 12220 15ee 6E       		.sleb128 -18
 12221 15ef 9F       		.byte	0x9f
 12222 15f0 60000000 		.4byte	.LVL417
 12223 15f4 62000000 		.4byte	.LVL418
 12224 15f8 0400     		.2byte	0x4
 12225 15fa F3       		.byte	0xf3
 12226 15fb 01       		.uleb128 0x1
 12227 15fc 51       		.byte	0x51
 12228 15fd 9F       		.byte	0x9f
 12229 15fe 62000000 		.4byte	.LVL418
 12230 1602 64000000 		.4byte	.LVL419
 12231 1606 0100     		.2byte	0x1
 12232 1608 55       		.byte	0x55
 12233 1609 64000000 		.4byte	.LVL419
 12234 160d 6A000000 		.4byte	.LVL420
 12235 1611 0300     		.2byte	0x3
 12236 1613 75       		.byte	0x75
 12237 1614 6E       		.sleb128 -18
 12238 1615 9F       		.byte	0x9f
 12239 1616 6A000000 		.4byte	.LVL420
 12240 161a 6C000000 		.4byte	.LVL421
 12241 161e 0400     		.2byte	0x4
 12242 1620 F3       		.byte	0xf3
 12243 1621 01       		.uleb128 0x1
 12244 1622 51       		.byte	0x51
 12245 1623 9F       		.byte	0x9f
 12246 1624 6C000000 		.4byte	.LVL421
 12247 1628 72000000 		.4byte	.LVL422
 12248 162c 0100     		.2byte	0x1
 12249 162e 55       		.byte	0x55
 12250 162f 72000000 		.4byte	.LVL422
 12251 1633 78000000 		.4byte	.LVL423
 12252 1637 0300     		.2byte	0x3
 12253 1639 75       		.byte	0x75
 12254 163a 6E       		.sleb128 -18
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 327


 12255 163b 9F       		.byte	0x9f
 12256 163c 78000000 		.4byte	.LVL423
 12257 1640 7A000000 		.4byte	.LVL424
 12258 1644 0400     		.2byte	0x4
 12259 1646 F3       		.byte	0xf3
 12260 1647 01       		.uleb128 0x1
 12261 1648 51       		.byte	0x51
 12262 1649 9F       		.byte	0x9f
 12263 164a 7A000000 		.4byte	.LVL424
 12264 164e 7C000000 		.4byte	.LVL425
 12265 1652 0100     		.2byte	0x1
 12266 1654 55       		.byte	0x55
 12267 1655 7C000000 		.4byte	.LVL425
 12268 1659 7E000000 		.4byte	.LVL426
 12269 165d 0400     		.2byte	0x4
 12270 165f F3       		.byte	0xf3
 12271 1660 01       		.uleb128 0x1
 12272 1661 51       		.byte	0x51
 12273 1662 9F       		.byte	0x9f
 12274 1663 7E000000 		.4byte	.LVL426
 12275 1667 80000000 		.4byte	.LVL427
 12276 166b 0100     		.2byte	0x1
 12277 166d 55       		.byte	0x55
 12278 166e 80000000 		.4byte	.LVL427
 12279 1672 24010000 		.4byte	.LFE116
 12280 1676 0400     		.2byte	0x4
 12281 1678 F3       		.byte	0xf3
 12282 1679 01       		.uleb128 0x1
 12283 167a 51       		.byte	0x51
 12284 167b 9F       		.byte	0x9f
 12285 167c 00000000 		.4byte	0
 12286 1680 00000000 		.4byte	0
 12287              	.LLST145:
 12288 1684 00000000 		.4byte	.LVL408
 12289 1688 13000000 		.4byte	.LVL410-1
 12290 168c 0100     		.2byte	0x1
 12291 168e 52       		.byte	0x52
 12292 168f 13000000 		.4byte	.LVL410-1
 12293 1693 4A000000 		.4byte	.LVL413
 12294 1697 0100     		.2byte	0x1
 12295 1699 57       		.byte	0x57
 12296 169a 4A000000 		.4byte	.LVL413
 12297 169e 52000000 		.4byte	.LVL415
 12298 16a2 0400     		.2byte	0x4
 12299 16a4 F3       		.byte	0xf3
 12300 16a5 01       		.uleb128 0x1
 12301 16a6 52       		.byte	0x52
 12302 16a7 9F       		.byte	0x9f
 12303 16a8 52000000 		.4byte	.LVL415
 12304 16ac 80000000 		.4byte	.LVL427
 12305 16b0 0100     		.2byte	0x1
 12306 16b2 57       		.byte	0x57
 12307 16b3 80000000 		.4byte	.LVL427
 12308 16b7 24010000 		.4byte	.LFE116
 12309 16bb 0400     		.2byte	0x4
 12310 16bd F3       		.byte	0xf3
 12311 16be 01       		.uleb128 0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 328


 12312 16bf 52       		.byte	0x52
 12313 16c0 9F       		.byte	0x9f
 12314 16c1 00000000 		.4byte	0
 12315 16c5 00000000 		.4byte	0
 12316              	.LLST146:
 12317 16c9 00000000 		.4byte	.LVL408
 12318 16cd 13000000 		.4byte	.LVL410-1
 12319 16d1 0100     		.2byte	0x1
 12320 16d3 53       		.byte	0x53
 12321 16d4 13000000 		.4byte	.LVL410-1
 12322 16d8 24010000 		.4byte	.LFE116
 12323 16dc 0400     		.2byte	0x4
 12324 16de F3       		.byte	0xf3
 12325 16df 01       		.uleb128 0x1
 12326 16e0 53       		.byte	0x53
 12327 16e1 9F       		.byte	0x9f
 12328 16e2 00000000 		.4byte	0
 12329 16e6 00000000 		.4byte	0
 12330              	.LLST147:
 12331 16ea 00000000 		.4byte	.LVL408
 12332 16ee 1A010000 		.4byte	.LVL434
 12333 16f2 0200     		.2byte	0x2
 12334 16f4 91       		.byte	0x91
 12335 16f5 00       		.sleb128 0
 12336 16f6 1A010000 		.4byte	.LVL434
 12337 16fa 24010000 		.4byte	.LFE116
 12338 16fe 0200     		.2byte	0x2
 12339 1700 7D       		.byte	0x7d
 12340 1701 00       		.sleb128 0
 12341 1702 00000000 		.4byte	0
 12342 1706 00000000 		.4byte	0
 12343              	.LLST148:
 12344 170a 10000000 		.4byte	.LVL409
 12345 170e 13000000 		.4byte	.LVL410-1
 12346 1712 0100     		.2byte	0x1
 12347 1714 50       		.byte	0x50
 12348 1715 13000000 		.4byte	.LVL410-1
 12349 1719 1A010000 		.4byte	.LVL434
 12350 171d 0100     		.2byte	0x1
 12351 171f 54       		.byte	0x54
 12352 1720 1A010000 		.4byte	.LVL434
 12353 1724 24010000 		.4byte	.LFE116
 12354 1728 0400     		.2byte	0x4
 12355 172a F3       		.byte	0xf3
 12356 172b 01       		.uleb128 0x1
 12357 172c 50       		.byte	0x50
 12358 172d 9F       		.byte	0x9f
 12359 172e 00000000 		.4byte	0
 12360 1732 00000000 		.4byte	0
 12361              	.LLST149:
 12362 1736 10000000 		.4byte	.LVL409
 12363 173a 80000000 		.4byte	.LVL427
 12364 173e 0200     		.2byte	0x2
 12365 1740 31       		.byte	0x31
 12366 1741 9F       		.byte	0x9f
 12367 1742 80000000 		.4byte	.LVL427
 12368 1746 1A010000 		.4byte	.LVL434
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 329


 12369 174a 0100     		.2byte	0x1
 12370 174c 55       		.byte	0x55
 12371 174d 1A010000 		.4byte	.LVL434
 12372 1751 24010000 		.4byte	.LFE116
 12373 1755 0100     		.2byte	0x1
 12374 1757 50       		.byte	0x50
 12375 1758 00000000 		.4byte	0
 12376 175c 00000000 		.4byte	0
 12377              	.LLST150:
 12378 1760 2E000000 		.4byte	.LVL411
 12379 1764 8A000000 		.4byte	.LVL429
 12380 1768 0100     		.2byte	0x1
 12381 176a 51       		.byte	0x51
 12382 176b 00000000 		.4byte	0
 12383 176f 00000000 		.4byte	0
 12384              	.LLST151:
 12385 1773 86000000 		.4byte	.LVL428
 12386 1777 AA000000 		.4byte	.LVL430
 12387 177b 0100     		.2byte	0x1
 12388 177d 53       		.byte	0x53
 12389 177e 00000000 		.4byte	0
 12390 1782 00000000 		.4byte	0
 12391              	.LLST152:
 12392 1786 C6000000 		.4byte	.LVL431
 12393 178a D4000000 		.4byte	.LVL432
 12394 178e 0100     		.2byte	0x1
 12395 1790 53       		.byte	0x53
 12396 1791 00000000 		.4byte	0
 12397 1795 00000000 		.4byte	0
 12398              	.LLST153:
 12399 1799 00000000 		.4byte	.LVL435
 12400 179d 44010000 		.4byte	.LVL460
 12401 17a1 0100     		.2byte	0x1
 12402 17a3 50       		.byte	0x50
 12403 17a4 44010000 		.4byte	.LVL460
 12404 17a8 4C010000 		.4byte	.LFE117
 12405 17ac 0400     		.2byte	0x4
 12406 17ae F3       		.byte	0xf3
 12407 17af 01       		.uleb128 0x1
 12408 17b0 50       		.byte	0x50
 12409 17b1 9F       		.byte	0x9f
 12410 17b2 00000000 		.4byte	0
 12411 17b6 00000000 		.4byte	0
 12412              	.LLST154:
 12413 17ba 00000000 		.4byte	.LVL435
 12414 17be 42000000 		.4byte	.LVL439
 12415 17c2 0100     		.2byte	0x1
 12416 17c4 51       		.byte	0x51
 12417 17c5 42000000 		.4byte	.LVL439
 12418 17c9 50000000 		.4byte	.LVL441
 12419 17cd 0300     		.2byte	0x3
 12420 17cf 71       		.byte	0x71
 12421 17d0 6E       		.sleb128 -18
 12422 17d1 9F       		.byte	0x9f
 12423 17d2 50000000 		.4byte	.LVL441
 12424 17d6 52000000 		.4byte	.LVL442
 12425 17da 0100     		.2byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 330


 12426 17dc 51       		.byte	0x51
 12427 17dd 52000000 		.4byte	.LVL442
 12428 17e1 60000000 		.4byte	.LVL443
 12429 17e5 0300     		.2byte	0x3
 12430 17e7 71       		.byte	0x71
 12431 17e8 6E       		.sleb128 -18
 12432 17e9 9F       		.byte	0x9f
 12433 17ea 60000000 		.4byte	.LVL443
 12434 17ee 62000000 		.4byte	.LVL444
 12435 17f2 0100     		.2byte	0x1
 12436 17f4 51       		.byte	0x51
 12437 17f5 62000000 		.4byte	.LVL444
 12438 17f9 6A000000 		.4byte	.LVL445
 12439 17fd 0300     		.2byte	0x3
 12440 17ff 71       		.byte	0x71
 12441 1800 6E       		.sleb128 -18
 12442 1801 9F       		.byte	0x9f
 12443 1802 6A000000 		.4byte	.LVL445
 12444 1806 70000000 		.4byte	.LVL446
 12445 180a 0100     		.2byte	0x1
 12446 180c 51       		.byte	0x51
 12447 180d 70000000 		.4byte	.LVL446
 12448 1811 78000000 		.4byte	.LVL447
 12449 1815 0300     		.2byte	0x3
 12450 1817 71       		.byte	0x71
 12451 1818 6E       		.sleb128 -18
 12452 1819 9F       		.byte	0x9f
 12453 181a 78000000 		.4byte	.LVL447
 12454 181e 7E000000 		.4byte	.LVL448
 12455 1822 0100     		.2byte	0x1
 12456 1824 51       		.byte	0x51
 12457 1825 7E000000 		.4byte	.LVL448
 12458 1829 4C010000 		.4byte	.LFE117
 12459 182d 0400     		.2byte	0x4
 12460 182f F3       		.byte	0xf3
 12461 1830 01       		.uleb128 0x1
 12462 1831 51       		.byte	0x51
 12463 1832 9F       		.byte	0x9f
 12464 1833 00000000 		.4byte	0
 12465 1837 00000000 		.4byte	0
 12466              	.LLST155:
 12467 183b 00000000 		.4byte	.LVL435
 12468 183f 48000000 		.4byte	.LVL440
 12469 1843 0100     		.2byte	0x1
 12470 1845 52       		.byte	0x52
 12471 1846 48000000 		.4byte	.LVL440
 12472 184a 50000000 		.4byte	.LVL441
 12473 184e 0400     		.2byte	0x4
 12474 1850 F3       		.byte	0xf3
 12475 1851 01       		.uleb128 0x1
 12476 1852 52       		.byte	0x52
 12477 1853 9F       		.byte	0x9f
 12478 1854 50000000 		.4byte	.LVL441
 12479 1858 7E000000 		.4byte	.LVL448
 12480 185c 0100     		.2byte	0x1
 12481 185e 52       		.byte	0x52
 12482 185f 7E000000 		.4byte	.LVL448
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 331


 12483 1863 4C010000 		.4byte	.LFE117
 12484 1867 0400     		.2byte	0x4
 12485 1869 F3       		.byte	0xf3
 12486 186a 01       		.uleb128 0x1
 12487 186b 52       		.byte	0x52
 12488 186c 9F       		.byte	0x9f
 12489 186d 00000000 		.4byte	0
 12490 1871 00000000 		.4byte	0
 12491              	.LLST156:
 12492 1875 00000000 		.4byte	.LVL435
 12493 1879 34000000 		.4byte	.LVL438
 12494 187d 0100     		.2byte	0x1
 12495 187f 53       		.byte	0x53
 12496 1880 34000000 		.4byte	.LVL438
 12497 1884 4C010000 		.4byte	.LFE117
 12498 1888 0400     		.2byte	0x4
 12499 188a F3       		.byte	0xf3
 12500 188b 01       		.uleb128 0x1
 12501 188c 53       		.byte	0x53
 12502 188d 9F       		.byte	0x9f
 12503 188e 00000000 		.4byte	0
 12504 1892 00000000 		.4byte	0
 12505              	.LLST157:
 12506 1896 00000000 		.4byte	.LVL435
 12507 189a 46010000 		.4byte	.LVL461
 12508 189e 0200     		.2byte	0x2
 12509 18a0 91       		.byte	0x91
 12510 18a1 00       		.sleb128 0
 12511 18a2 46010000 		.4byte	.LVL461
 12512 18a6 4C010000 		.4byte	.LFE117
 12513 18aa 0200     		.2byte	0x2
 12514 18ac 7D       		.byte	0x7d
 12515 18ad 00       		.sleb128 0
 12516 18ae 00000000 		.4byte	0
 12517 18b2 00000000 		.4byte	0
 12518              	.LLST158:
 12519 18b6 00000000 		.4byte	.LVL435
 12520 18ba 46010000 		.4byte	.LVL461
 12521 18be 0200     		.2byte	0x2
 12522 18c0 91       		.byte	0x91
 12523 18c1 04       		.sleb128 4
 12524 18c2 46010000 		.4byte	.LVL461
 12525 18c6 4C010000 		.4byte	.LFE117
 12526 18ca 0200     		.2byte	0x2
 12527 18cc 7D       		.byte	0x7d
 12528 18cd 04       		.sleb128 4
 12529 18ce 00000000 		.4byte	0
 12530 18d2 00000000 		.4byte	0
 12531              	.LLST159:
 12532 18d6 04000000 		.4byte	.LVL436
 12533 18da 44010000 		.4byte	.LVL460
 12534 18de 0100     		.2byte	0x1
 12535 18e0 50       		.byte	0x50
 12536 18e1 44010000 		.4byte	.LVL460
 12537 18e5 4C010000 		.4byte	.LFE117
 12538 18e9 0400     		.2byte	0x4
 12539 18eb F3       		.byte	0xf3
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 332


 12540 18ec 01       		.uleb128 0x1
 12541 18ed 50       		.byte	0x50
 12542 18ee 9F       		.byte	0x9f
 12543 18ef 00000000 		.4byte	0
 12544 18f3 00000000 		.4byte	0
 12545              	.LLST160:
 12546 18f7 2C000000 		.4byte	.LVL437
 12547 18fb 92000000 		.4byte	.LVL450
 12548 18ff 0100     		.2byte	0x1
 12549 1901 54       		.byte	0x54
 12550 1902 FE000000 		.4byte	.LVL454
 12551 1906 06010000 		.4byte	.LVL456
 12552 190a 0100     		.2byte	0x1
 12553 190c 54       		.byte	0x54
 12554 190d 00000000 		.4byte	0
 12555 1911 00000000 		.4byte	0
 12556              	.LLST161:
 12557 1915 04000000 		.4byte	.LVL436
 12558 1919 7E000000 		.4byte	.LVL448
 12559 191d 0200     		.2byte	0x2
 12560 191f 31       		.byte	0x31
 12561 1920 9F       		.byte	0x9f
 12562 1921 7E000000 		.4byte	.LVL448
 12563 1925 4C010000 		.4byte	.LFE117
 12564 1929 0100     		.2byte	0x1
 12565 192b 53       		.byte	0x53
 12566 192c 00000000 		.4byte	0
 12567 1930 00000000 		.4byte	0
 12568              	.LLST162:
 12569 1934 8E000000 		.4byte	.LVL449
 12570 1938 B2000000 		.4byte	.LVL451
 12571 193c 0100     		.2byte	0x1
 12572 193e 52       		.byte	0x52
 12573 193f 00000000 		.4byte	0
 12574 1943 00000000 		.4byte	0
 12575              	.LLST163:
 12576 1947 CE000000 		.4byte	.LVL452
 12577 194b DC000000 		.4byte	.LVL453
 12578 194f 0100     		.2byte	0x1
 12579 1951 52       		.byte	0x52
 12580 1952 00000000 		.4byte	0
 12581 1956 00000000 		.4byte	0
 12582              	.LLST164:
 12583 195a 02010000 		.4byte	.LVL455
 12584 195e 16010000 		.4byte	.LVL457
 12585 1962 0100     		.2byte	0x1
 12586 1964 51       		.byte	0x51
 12587 1965 00000000 		.4byte	0
 12588 1969 00000000 		.4byte	0
 12589              	.LLST165:
 12590 196d 3E010000 		.4byte	.LVL458
 12591 1971 42010000 		.4byte	.LVL459
 12592 1975 0100     		.2byte	0x1
 12593 1977 57       		.byte	0x57
 12594 1978 00000000 		.4byte	0
 12595 197c 00000000 		.4byte	0
 12596              	.LLST166:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 333


 12597 1980 00000000 		.4byte	.LVL462
 12598 1984 26000000 		.4byte	.LVL465
 12599 1988 0100     		.2byte	0x1
 12600 198a 51       		.byte	0x51
 12601 198b 26000000 		.4byte	.LVL465
 12602 198f 42000000 		.4byte	.LVL468
 12603 1993 0300     		.2byte	0x3
 12604 1995 71       		.byte	0x71
 12605 1996 6E       		.sleb128 -18
 12606 1997 9F       		.byte	0x9f
 12607 1998 42000000 		.4byte	.LVL468
 12608 199c F8000000 		.4byte	.LFE118
 12609 19a0 0400     		.2byte	0x4
 12610 19a2 F3       		.byte	0xf3
 12611 19a3 01       		.uleb128 0x1
 12612 19a4 51       		.byte	0x51
 12613 19a5 9F       		.byte	0x9f
 12614 19a6 00000000 		.4byte	0
 12615 19aa 00000000 		.4byte	0
 12616              	.LLST167:
 12617 19ae 00000000 		.4byte	.LVL462
 12618 19b2 E6000000 		.4byte	.LVL474
 12619 19b6 0100     		.2byte	0x1
 12620 19b8 52       		.byte	0x52
 12621 19b9 E6000000 		.4byte	.LVL474
 12622 19bd F8000000 		.4byte	.LFE118
 12623 19c1 0400     		.2byte	0x4
 12624 19c3 F3       		.byte	0xf3
 12625 19c4 01       		.uleb128 0x1
 12626 19c5 52       		.byte	0x52
 12627 19c6 9F       		.byte	0x9f
 12628 19c7 00000000 		.4byte	0
 12629 19cb 00000000 		.4byte	0
 12630              	.LLST168:
 12631 19cf 1E000000 		.4byte	.LVL464
 12632 19d3 36000000 		.4byte	.LVL466
 12633 19d7 0100     		.2byte	0x1
 12634 19d9 53       		.byte	0x53
 12635 19da 00000000 		.4byte	0
 12636 19de 00000000 		.4byte	0
 12637              	.LLST169:
 12638 19e2 40000000 		.4byte	.LVL467
 12639 19e6 64000000 		.4byte	.LVL469
 12640 19ea 0100     		.2byte	0x1
 12641 19ec 53       		.byte	0x53
 12642 19ed 00000000 		.4byte	0
 12643 19f1 00000000 		.4byte	0
 12644              	.LLST170:
 12645 19f5 80000000 		.4byte	.LVL470
 12646 19f9 8E000000 		.4byte	.LVL471
 12647 19fd 0100     		.2byte	0x1
 12648 19ff 53       		.byte	0x53
 12649 1a00 00000000 		.4byte	0
 12650 1a04 00000000 		.4byte	0
 12651              	.LLST171:
 12652 1a08 B4000000 		.4byte	.LVL472
 12653 1a0c C8000000 		.4byte	.LVL473
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 334


 12654 1a10 0100     		.2byte	0x1
 12655 1a12 51       		.byte	0x51
 12656 1a13 00000000 		.4byte	0
 12657 1a17 00000000 		.4byte	0
 12658              	.LLST172:
 12659 1a1b EC000000 		.4byte	.LVL475
 12660 1a1f F0000000 		.4byte	.LVL476
 12661 1a23 0100     		.2byte	0x1
 12662 1a25 55       		.byte	0x55
 12663 1a26 00000000 		.4byte	0
 12664 1a2a 00000000 		.4byte	0
 12665              	.LLST173:
 12666 1a2e 00000000 		.4byte	.LVL477
 12667 1a32 0E000000 		.4byte	.LVL478
 12668 1a36 0100     		.2byte	0x1
 12669 1a38 50       		.byte	0x50
 12670 1a39 00000000 		.4byte	0
 12671 1a3d 00000000 		.4byte	0
 12672              	.LLST174:
 12673 1a41 00000000 		.4byte	.LVL477
 12674 1a45 11000000 		.4byte	.LVL479-1
 12675 1a49 0100     		.2byte	0x1
 12676 1a4b 51       		.byte	0x51
 12677 1a4c 11000000 		.4byte	.LVL479-1
 12678 1a50 20000000 		.4byte	.LVL480
 12679 1a54 0100     		.2byte	0x1
 12680 1a56 54       		.byte	0x54
 12681 1a57 20000000 		.4byte	.LVL480
 12682 1a5b 2A000000 		.4byte	.LVL482
 12683 1a5f 0400     		.2byte	0x4
 12684 1a61 F3       		.byte	0xf3
 12685 1a62 01       		.uleb128 0x1
 12686 1a63 51       		.byte	0x51
 12687 1a64 9F       		.byte	0x9f
 12688 1a65 2A000000 		.4byte	.LVL482
 12689 1a69 2C000000 		.4byte	.LVL483
 12690 1a6d 0100     		.2byte	0x1
 12691 1a6f 54       		.byte	0x54
 12692 1a70 2C000000 		.4byte	.LVL483
 12693 1a74 38000000 		.4byte	.LFE119
 12694 1a78 0400     		.2byte	0x4
 12695 1a7a F3       		.byte	0xf3
 12696 1a7b 01       		.uleb128 0x1
 12697 1a7c 51       		.byte	0x51
 12698 1a7d 9F       		.byte	0x9f
 12699 1a7e 00000000 		.4byte	0
 12700 1a82 00000000 		.4byte	0
 12701              	.LLST175:
 12702 1a86 0E000000 		.4byte	.LVL478
 12703 1a8a 34000000 		.4byte	.LVL485
 12704 1a8e 0100     		.2byte	0x1
 12705 1a90 55       		.byte	0x55
 12706 1a91 00000000 		.4byte	0
 12707 1a95 00000000 		.4byte	0
 12708              	.LLST176:
 12709 1a99 26000000 		.4byte	.LVL481
 12710 1a9d 2A000000 		.4byte	.LVL482
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 335


 12711 1aa1 0200     		.2byte	0x2
 12712 1aa3 31       		.byte	0x31
 12713 1aa4 9F       		.byte	0x9f
 12714 1aa5 2C000000 		.4byte	.LVL483
 12715 1aa9 34000000 		.4byte	.LVL485
 12716 1aad 0100     		.2byte	0x1
 12717 1aaf 54       		.byte	0x54
 12718 1ab0 34000000 		.4byte	.LVL485
 12719 1ab4 38000000 		.4byte	.LFE119
 12720 1ab8 0100     		.2byte	0x1
 12721 1aba 50       		.byte	0x50
 12722 1abb 00000000 		.4byte	0
 12723 1abf 00000000 		.4byte	0
 12724              	.LLST177:
 12725 1ac3 00000000 		.4byte	.LVL486
 12726 1ac7 10000000 		.4byte	.LVL487
 12727 1acb 0100     		.2byte	0x1
 12728 1acd 50       		.byte	0x50
 12729 1ace 00000000 		.4byte	0
 12730 1ad2 00000000 		.4byte	0
 12731              	.LLST178:
 12732 1ad6 00000000 		.4byte	.LVL486
 12733 1ada 13000000 		.4byte	.LVL488-1
 12734 1ade 0100     		.2byte	0x1
 12735 1ae0 51       		.byte	0x51
 12736 1ae1 13000000 		.4byte	.LVL488-1
 12737 1ae5 1C000000 		.4byte	.LVL489
 12738 1ae9 0100     		.2byte	0x1
 12739 1aeb 54       		.byte	0x54
 12740 1aec 1C000000 		.4byte	.LVL489
 12741 1af0 2B000000 		.4byte	.LVL490-1
 12742 1af4 0300     		.2byte	0x3
 12743 1af6 71       		.byte	0x71
 12744 1af7 6E       		.sleb128 -18
 12745 1af8 9F       		.byte	0x9f
 12746 1af9 2B000000 		.4byte	.LVL490-1
 12747 1afd 34000000 		.4byte	.LFE120
 12748 1b01 0400     		.2byte	0x4
 12749 1b03 F3       		.byte	0xf3
 12750 1b04 01       		.uleb128 0x1
 12751 1b05 51       		.byte	0x51
 12752 1b06 9F       		.byte	0x9f
 12753 1b07 00000000 		.4byte	0
 12754 1b0b 00000000 		.4byte	0
 12755              	.LLST179:
 12756 1b0f 00000000 		.4byte	.LVL486
 12757 1b13 13000000 		.4byte	.LVL488-1
 12758 1b17 0100     		.2byte	0x1
 12759 1b19 52       		.byte	0x52
 12760 1b1a 13000000 		.4byte	.LVL488-1
 12761 1b1e 30000000 		.4byte	.LVL491
 12762 1b22 0100     		.2byte	0x1
 12763 1b24 56       		.byte	0x56
 12764 1b25 30000000 		.4byte	.LVL491
 12765 1b29 34000000 		.4byte	.LFE120
 12766 1b2d 0400     		.2byte	0x4
 12767 1b2f F3       		.byte	0xf3
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 336


 12768 1b30 01       		.uleb128 0x1
 12769 1b31 52       		.byte	0x52
 12770 1b32 9F       		.byte	0x9f
 12771 1b33 00000000 		.4byte	0
 12772 1b37 00000000 		.4byte	0
 12773              	.LLST180:
 12774 1b3b 10000000 		.4byte	.LVL487
 12775 1b3f 30000000 		.4byte	.LVL491
 12776 1b43 0100     		.2byte	0x1
 12777 1b45 55       		.byte	0x55
 12778 1b46 00000000 		.4byte	0
 12779 1b4a 00000000 		.4byte	0
 12780              	.LLST181:
 12781 1b4e 1C000000 		.4byte	.LVL489
 12782 1b52 30000000 		.4byte	.LVL491
 12783 1b56 0100     		.2byte	0x1
 12784 1b58 54       		.byte	0x54
 12785 1b59 30000000 		.4byte	.LVL491
 12786 1b5d 34000000 		.4byte	.LFE120
 12787 1b61 0100     		.2byte	0x1
 12788 1b63 50       		.byte	0x50
 12789 1b64 00000000 		.4byte	0
 12790 1b68 00000000 		.4byte	0
 12791              		.section	.debug_aranges,"",%progbits
 12792 0000 C4010000 		.4byte	0x1c4
 12793 0004 0200     		.2byte	0x2
 12794 0006 00000000 		.4byte	.Ldebug_info0
 12795 000a 04       		.byte	0x4
 12796 000b 00       		.byte	0
 12797 000c 0000     		.2byte	0
 12798 000e 0000     		.2byte	0
 12799 0010 00000000 		.4byte	.LFB79
 12800 0014 2C000000 		.4byte	.LFE79-.LFB79
 12801 0018 00000000 		.4byte	.LFB104
 12802 001c 14000000 		.4byte	.LFE104-.LFB104
 12803 0020 00000000 		.4byte	.LFB107
 12804 0024 24000000 		.4byte	.LFE107-.LFB107
 12805 0028 00000000 		.4byte	.LFB106
 12806 002c 12000000 		.4byte	.LFE106-.LFB106
 12807 0030 00000000 		.4byte	.LFB69
 12808 0034 8A000000 		.4byte	.LFE69-.LFB69
 12809 0038 00000000 		.4byte	.LFB102
 12810 003c 58000000 		.4byte	.LFE102-.LFB102
 12811 0040 00000000 		.4byte	.LFB70
 12812 0044 D4000000 		.4byte	.LFE70-.LFB70
 12813 0048 00000000 		.4byte	.LFB103
 12814 004c 44000000 		.4byte	.LFE103-.LFB103
 12815 0050 00000000 		.4byte	.LFB101
 12816 0054 08000000 		.4byte	.LFE101-.LFB101
 12817 0058 00000000 		.4byte	.LFB121
 12818 005c A8000000 		.4byte	.LFE121-.LFB121
 12819 0060 00000000 		.4byte	.LFB68
 12820 0064 6A000000 		.4byte	.LFE68-.LFB68
 12821 0068 00000000 		.4byte	.LFB71
 12822 006c C4000000 		.4byte	.LFE71-.LFB71
 12823 0070 00000000 		.4byte	.LFB74
 12824 0074 A4000000 		.4byte	.LFE74-.LFB74
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 337


 12825 0078 00000000 		.4byte	.LFB75
 12826 007c 20000000 		.4byte	.LFE75-.LFB75
 12827 0080 00000000 		.4byte	.LFB76
 12828 0084 28000000 		.4byte	.LFE76-.LFB76
 12829 0088 00000000 		.4byte	.LFB77
 12830 008c 08010000 		.4byte	.LFE77-.LFB77
 12831 0090 00000000 		.4byte	.LFB80
 12832 0094 A0000000 		.4byte	.LFE80-.LFB80
 12833 0098 00000000 		.4byte	.LFB81
 12834 009c BC000000 		.4byte	.LFE81-.LFB81
 12835 00a0 00000000 		.4byte	.LFB82
 12836 00a4 60000000 		.4byte	.LFE82-.LFB82
 12837 00a8 00000000 		.4byte	.LFB83
 12838 00ac 24000000 		.4byte	.LFE83-.LFB83
 12839 00b0 00000000 		.4byte	.LFB84
 12840 00b4 14000000 		.4byte	.LFE84-.LFB84
 12841 00b8 00000000 		.4byte	.LFB86
 12842 00bc 0C000000 		.4byte	.LFE86-.LFB86
 12843 00c0 00000000 		.4byte	.LFB87
 12844 00c4 0C000000 		.4byte	.LFE87-.LFB87
 12845 00c8 00000000 		.4byte	.LFB88
 12846 00cc 0C000000 		.4byte	.LFE88-.LFB88
 12847 00d0 00000000 		.4byte	.LFB89
 12848 00d4 14000000 		.4byte	.LFE89-.LFB89
 12849 00d8 00000000 		.4byte	.LFB91
 12850 00dc 50010000 		.4byte	.LFE91-.LFB91
 12851 00e0 00000000 		.4byte	.LFB85
 12852 00e4 44010000 		.4byte	.LFE85-.LFB85
 12853 00e8 00000000 		.4byte	.LFB72
 12854 00ec 6C000000 		.4byte	.LFE72-.LFB72
 12855 00f0 00000000 		.4byte	.LFB73
 12856 00f4 34000000 		.4byte	.LFE73-.LFB73
 12857 00f8 00000000 		.4byte	.LFB90
 12858 00fc 28000000 		.4byte	.LFE90-.LFB90
 12859 0100 00000000 		.4byte	.LFB92
 12860 0104 A4000000 		.4byte	.LFE92-.LFB92
 12861 0108 00000000 		.4byte	.LFB78
 12862 010c D0000000 		.4byte	.LFE78-.LFB78
 12863 0110 00000000 		.4byte	.LFB93
 12864 0114 20000000 		.4byte	.LFE93-.LFB93
 12865 0118 00000000 		.4byte	.LFB94
 12866 011c 4C000000 		.4byte	.LFE94-.LFB94
 12867 0120 00000000 		.4byte	.LFB95
 12868 0124 E8000000 		.4byte	.LFE95-.LFB95
 12869 0128 00000000 		.4byte	.LFB96
 12870 012c BC000000 		.4byte	.LFE96-.LFB96
 12871 0130 00000000 		.4byte	.LFB97
 12872 0134 20000000 		.4byte	.LFE97-.LFB97
 12873 0138 00000000 		.4byte	.LFB98
 12874 013c 14000000 		.4byte	.LFE98-.LFB98
 12875 0140 00000000 		.4byte	.LFB99
 12876 0144 5C000000 		.4byte	.LFE99-.LFB99
 12877 0148 00000000 		.4byte	.LFB100
 12878 014c 10000000 		.4byte	.LFE100-.LFB100
 12879 0150 00000000 		.4byte	.LFB105
 12880 0154 18000000 		.4byte	.LFE105-.LFB105
 12881 0158 00000000 		.4byte	.LFB108
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 338


 12882 015c 0C000000 		.4byte	.LFE108-.LFB108
 12883 0160 00000000 		.4byte	.LFB109
 12884 0164 DC000000 		.4byte	.LFE109-.LFB109
 12885 0168 00000000 		.4byte	.LFB110
 12886 016c A0000000 		.4byte	.LFE110-.LFB110
 12887 0170 00000000 		.4byte	.LFB111
 12888 0174 B4000000 		.4byte	.LFE111-.LFB111
 12889 0178 00000000 		.4byte	.LFB112
 12890 017c 20000000 		.4byte	.LFE112-.LFB112
 12891 0180 00000000 		.4byte	.LFB113
 12892 0184 20000000 		.4byte	.LFE113-.LFB113
 12893 0188 00000000 		.4byte	.LFB114
 12894 018c A0000000 		.4byte	.LFE114-.LFB114
 12895 0190 00000000 		.4byte	.LFB115
 12896 0194 C4000000 		.4byte	.LFE115-.LFB115
 12897 0198 00000000 		.4byte	.LFB116
 12898 019c 24010000 		.4byte	.LFE116-.LFB116
 12899 01a0 00000000 		.4byte	.LFB117
 12900 01a4 4C010000 		.4byte	.LFE117-.LFB117
 12901 01a8 00000000 		.4byte	.LFB118
 12902 01ac F8000000 		.4byte	.LFE118-.LFB118
 12903 01b0 00000000 		.4byte	.LFB119
 12904 01b4 38000000 		.4byte	.LFE119-.LFB119
 12905 01b8 00000000 		.4byte	.LFB120
 12906 01bc 34000000 		.4byte	.LFE120-.LFB120
 12907 01c0 00000000 		.4byte	0
 12908 01c4 00000000 		.4byte	0
 12909              		.section	.debug_ranges,"",%progbits
 12910              	.Ldebug_ranges0:
 12911 0000 46000000 		.4byte	.LBB38
 12912 0004 56000000 		.4byte	.LBE38
 12913 0008 58000000 		.4byte	.LBB39
 12914 000c 62000000 		.4byte	.LBE39
 12915 0010 88000000 		.4byte	.LBB40
 12916 0014 8E000000 		.4byte	.LBE40
 12917 0018 00000000 		.4byte	0
 12918 001c 00000000 		.4byte	0
 12919 0020 0E000000 		.4byte	.LBB56
 12920 0024 3E000000 		.4byte	.LBE56
 12921 0028 42000000 		.4byte	.LBB61
 12922 002c 36010000 		.4byte	.LBE61
 12923 0030 46010000 		.4byte	.LBB62
 12924 0034 48010000 		.4byte	.LBE62
 12925 0038 00000000 		.4byte	0
 12926 003c 00000000 		.4byte	0
 12927 0040 0A000000 		.4byte	.LBB67
 12928 0044 20000000 		.4byte	.LBE67
 12929 0048 24000000 		.4byte	.LBB68
 12930 004c 2C000000 		.4byte	.LBE68
 12931 0050 34000000 		.4byte	.LBB69
 12932 0054 4A000000 		.4byte	.LBE69
 12933 0058 00000000 		.4byte	0
 12934 005c 00000000 		.4byte	0
 12935 0060 00000000 		.4byte	.LFB79
 12936 0064 2C000000 		.4byte	.LFE79
 12937 0068 00000000 		.4byte	.LFB104
 12938 006c 14000000 		.4byte	.LFE104
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 339


 12939 0070 00000000 		.4byte	.LFB107
 12940 0074 24000000 		.4byte	.LFE107
 12941 0078 00000000 		.4byte	.LFB106
 12942 007c 12000000 		.4byte	.LFE106
 12943 0080 00000000 		.4byte	.LFB69
 12944 0084 8A000000 		.4byte	.LFE69
 12945 0088 00000000 		.4byte	.LFB102
 12946 008c 58000000 		.4byte	.LFE102
 12947 0090 00000000 		.4byte	.LFB70
 12948 0094 D4000000 		.4byte	.LFE70
 12949 0098 00000000 		.4byte	.LFB103
 12950 009c 44000000 		.4byte	.LFE103
 12951 00a0 00000000 		.4byte	.LFB101
 12952 00a4 08000000 		.4byte	.LFE101
 12953 00a8 00000000 		.4byte	.LFB121
 12954 00ac A8000000 		.4byte	.LFE121
 12955 00b0 00000000 		.4byte	.LFB68
 12956 00b4 6A000000 		.4byte	.LFE68
 12957 00b8 00000000 		.4byte	.LFB71
 12958 00bc C4000000 		.4byte	.LFE71
 12959 00c0 00000000 		.4byte	.LFB74
 12960 00c4 A4000000 		.4byte	.LFE74
 12961 00c8 00000000 		.4byte	.LFB75
 12962 00cc 20000000 		.4byte	.LFE75
 12963 00d0 00000000 		.4byte	.LFB76
 12964 00d4 28000000 		.4byte	.LFE76
 12965 00d8 00000000 		.4byte	.LFB77
 12966 00dc 08010000 		.4byte	.LFE77
 12967 00e0 00000000 		.4byte	.LFB80
 12968 00e4 A0000000 		.4byte	.LFE80
 12969 00e8 00000000 		.4byte	.LFB81
 12970 00ec BC000000 		.4byte	.LFE81
 12971 00f0 00000000 		.4byte	.LFB82
 12972 00f4 60000000 		.4byte	.LFE82
 12973 00f8 00000000 		.4byte	.LFB83
 12974 00fc 24000000 		.4byte	.LFE83
 12975 0100 00000000 		.4byte	.LFB84
 12976 0104 14000000 		.4byte	.LFE84
 12977 0108 00000000 		.4byte	.LFB86
 12978 010c 0C000000 		.4byte	.LFE86
 12979 0110 00000000 		.4byte	.LFB87
 12980 0114 0C000000 		.4byte	.LFE87
 12981 0118 00000000 		.4byte	.LFB88
 12982 011c 0C000000 		.4byte	.LFE88
 12983 0120 00000000 		.4byte	.LFB89
 12984 0124 14000000 		.4byte	.LFE89
 12985 0128 00000000 		.4byte	.LFB91
 12986 012c 50010000 		.4byte	.LFE91
 12987 0130 00000000 		.4byte	.LFB85
 12988 0134 44010000 		.4byte	.LFE85
 12989 0138 00000000 		.4byte	.LFB72
 12990 013c 6C000000 		.4byte	.LFE72
 12991 0140 00000000 		.4byte	.LFB73
 12992 0144 34000000 		.4byte	.LFE73
 12993 0148 00000000 		.4byte	.LFB90
 12994 014c 28000000 		.4byte	.LFE90
 12995 0150 00000000 		.4byte	.LFB92
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 340


 12996 0154 A4000000 		.4byte	.LFE92
 12997 0158 00000000 		.4byte	.LFB78
 12998 015c D0000000 		.4byte	.LFE78
 12999 0160 00000000 		.4byte	.LFB93
 13000 0164 20000000 		.4byte	.LFE93
 13001 0168 00000000 		.4byte	.LFB94
 13002 016c 4C000000 		.4byte	.LFE94
 13003 0170 00000000 		.4byte	.LFB95
 13004 0174 E8000000 		.4byte	.LFE95
 13005 0178 00000000 		.4byte	.LFB96
 13006 017c BC000000 		.4byte	.LFE96
 13007 0180 00000000 		.4byte	.LFB97
 13008 0184 20000000 		.4byte	.LFE97
 13009 0188 00000000 		.4byte	.LFB98
 13010 018c 14000000 		.4byte	.LFE98
 13011 0190 00000000 		.4byte	.LFB99
 13012 0194 5C000000 		.4byte	.LFE99
 13013 0198 00000000 		.4byte	.LFB100
 13014 019c 10000000 		.4byte	.LFE100
 13015 01a0 00000000 		.4byte	.LFB105
 13016 01a4 18000000 		.4byte	.LFE105
 13017 01a8 00000000 		.4byte	.LFB108
 13018 01ac 0C000000 		.4byte	.LFE108
 13019 01b0 00000000 		.4byte	.LFB109
 13020 01b4 DC000000 		.4byte	.LFE109
 13021 01b8 00000000 		.4byte	.LFB110
 13022 01bc A0000000 		.4byte	.LFE110
 13023 01c0 00000000 		.4byte	.LFB111
 13024 01c4 B4000000 		.4byte	.LFE111
 13025 01c8 00000000 		.4byte	.LFB112
 13026 01cc 20000000 		.4byte	.LFE112
 13027 01d0 00000000 		.4byte	.LFB113
 13028 01d4 20000000 		.4byte	.LFE113
 13029 01d8 00000000 		.4byte	.LFB114
 13030 01dc A0000000 		.4byte	.LFE114
 13031 01e0 00000000 		.4byte	.LFB115
 13032 01e4 C4000000 		.4byte	.LFE115
 13033 01e8 00000000 		.4byte	.LFB116
 13034 01ec 24010000 		.4byte	.LFE116
 13035 01f0 00000000 		.4byte	.LFB117
 13036 01f4 4C010000 		.4byte	.LFE117
 13037 01f8 00000000 		.4byte	.LFB118
 13038 01fc F8000000 		.4byte	.LFE118
 13039 0200 00000000 		.4byte	.LFB119
 13040 0204 38000000 		.4byte	.LFE119
 13041 0208 00000000 		.4byte	.LFB120
 13042 020c 34000000 		.4byte	.LFE120
 13043 0210 00000000 		.4byte	0
 13044 0214 00000000 		.4byte	0
 13045              		.section	.debug_line,"",%progbits
 13046              	.Ldebug_line0:
 13047 0000 1F0C0000 		.section	.debug_str,"MS",%progbits,1
 13047      0200F802 
 13047      00000201 
 13047      FB0E0D00 
 13047      01010101 
 13048              	.LASF229:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 341


 13049 0000 78596965 		.ascii	"xYieldPending\000"
 13049      6C645065 
 13049      6E64696E 
 13049      6700
 13050              	.LASF4:
 13051 000e 73697A65 		.ascii	"size_t\000"
 13051      5F7400
 13052              	.LASF15:
 13053 0015 73697A65 		.ascii	"sizetype\000"
 13053      74797065 
 13053      00
 13054              	.LASF173:
 13055 001e 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 13055      6B496E74 
 13055      65726E61 
 13055      6C536574 
 13055      54696D65 
 13056              	.LASF112:
 13057 003b 75735374 		.ascii	"usStackDepth\000"
 13057      61636B44 
 13057      65707468 
 13057      00
 13058              	.LASF109:
 13059 0048 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 13059      426C6F63 
 13059      6B496E64 
 13059      6566696E 
 13059      6974656C 
 13060              	.LASF139:
 13061 005e 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 13061      6B476574 
 13061      5469636B 
 13061      436F756E 
 13061      7446726F 
 13062              	.LASF75:
 13063 0077 4D656D6F 		.ascii	"MemoryRegion_t\000"
 13063      72795265 
 13063      67696F6E 
 13063      5F7400
 13064              	.LASF46:
 13065 0086 78457665 		.ascii	"xEventListItem\000"
 13065      6E744C69 
 13065      73744974 
 13065      656D00
 13066              	.LASF19:
 13067 0095 696E7433 		.ascii	"int32_t\000"
 13067      325F7400 
 13068              	.LASF60:
 13069 009d 65546173 		.ascii	"eTaskState\000"
 13069      6B537461 
 13069      746500
 13070              	.LASF67:
 13071 00a8 7854494D 		.ascii	"xTIME_OUT\000"
 13071      455F4F55 
 13071      5400
 13072              	.LASF225:
 13073 00b2 78546963 		.ascii	"xTickCount\000"
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 342


 13073      6B436F75 
 13073      6E7400
 13074              	.LASF231:
 13075 00bd 75785461 		.ascii	"uxTaskNumber\000"
 13075      736B4E75 
 13075      6D626572 
 13075      00
 13076              	.LASF96:
 13077 00ca 70785461 		.ascii	"pxTaskCode\000"
 13077      736B436F 
 13077      646500
 13078              	.LASF124:
 13079 00d5 75785361 		.ascii	"uxSavedInterruptState\000"
 13079      76656449 
 13079      6E746572 
 13079      72757074 
 13079      53746174 
 13080              	.LASF201:
 13081 00eb 78546173 		.ascii	"xTaskGenericNotify\000"
 13081      6B47656E 
 13081      65726963 
 13081      4E6F7469 
 13081      667900
 13082              	.LASF25:
 13083 00fe 42617365 		.ascii	"BaseType_t\000"
 13083      54797065 
 13083      5F7400
 13084              	.LASF86:
 13085 0109 75635265 		.ascii	"ucReturn\000"
 13085      7475726E 
 13085      00
 13086              	.LASF58:
 13087 0112 6544656C 		.ascii	"eDeleted\000"
 13087      65746564 
 13087      00
 13088              	.LASF48:
 13089 011b 70785374 		.ascii	"pxStack\000"
 13089      61636B00 
 13090              	.LASF131:
 13091 0123 76546173 		.ascii	"vTaskResume\000"
 13091      6B526573 
 13091      756D6500 
 13092              	.LASF191:
 13093 012f 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 13093      736B4765 
 13093      744E756D 
 13093      6265724F 
 13093      66546173 
 13094              	.LASF185:
 13095 0146 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 13095      6B507269 
 13095      6F726974 
 13095      79446973 
 13095      696E6865 
 13096              	.LASF246:
 13097 015e 764C6973 		.ascii	"vListInsert\000"
 13097      74496E73 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 343


 13097      65727400 
 13098              	.LASF164:
 13099 016a 78546173 		.ascii	"xTaskToSuspend\000"
 13099      6B546F53 
 13099      75737065 
 13099      6E6400
 13100              	.LASF91:
 13101 0179 78546173 		.ascii	"xTask\000"
 13101      6B00
 13102              	.LASF120:
 13103 017f 70784F76 		.ascii	"pxOverflowedDelayedList\000"
 13103      6572666C 
 13103      6F776564 
 13103      44656C61 
 13103      7965644C 
 13104              	.LASF122:
 13105 0197 75785265 		.ascii	"uxReturn\000"
 13105      7475726E 
 13105      00
 13106              	.LASF29:
 13107 01a0 70784E65 		.ascii	"pxNext\000"
 13107      787400
 13108              	.LASF101:
 13109 01a7 70784E65 		.ascii	"pxNewTCB\000"
 13109      77544342 
 13109      00
 13110              	.LASF210:
 13111 01b0 76546173 		.ascii	"vTaskGenericNotifyGiveFromISR\000"
 13111      6B47656E 
 13111      65726963 
 13111      4E6F7469 
 13111      66794769 
 13112              	.LASF5:
 13113 01ce 5F5F7569 		.ascii	"__uint8_t\000"
 13113      6E74385F 
 13113      7400
 13114              	.LASF50:
 13115 01d8 75784261 		.ascii	"uxBasePriority\000"
 13115      73655072 
 13115      696F7269 
 13115      747900
 13116              	.LASF76:
 13117 01e7 74736B54 		.ascii	"tskTCB\000"
 13117      434200
 13118              	.LASF128:
 13119 01ee 75784375 		.ascii	"uxCurrentBasePriority\000"
 13119      7272656E 
 13119      74426173 
 13119      65507269 
 13119      6F726974 
 13120              	.LASF11:
 13121 0204 6C6F6E67 		.ascii	"long int\000"
 13121      20696E74 
 13121      00
 13122              	.LASF236:
 13123 020d 70784375 		.ascii	"pxCurrentTCB\000"
 13123      7272656E 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 344


 13123      74544342 
 13123      00
 13124              	.LASF34:
 13125 021a 784C4953 		.ascii	"xLIST\000"
 13125      5400
 13126              	.LASF222:
 13127 0220 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 13127      6C657465 
 13127      64546173 
 13127      6B735761 
 13127      6974696E 
 13128              	.LASF137:
 13129 023d 78546173 		.ascii	"xTaskGetTickCount\000"
 13129      6B476574 
 13129      5469636B 
 13129      436F756E 
 13129      7400
 13130              	.LASF135:
 13131 024f 76546173 		.ascii	"vTaskStartScheduler\000"
 13131      6B537461 
 13131      72745363 
 13131      68656475 
 13131      6C657200 
 13132              	.LASF62:
 13133 0263 65536574 		.ascii	"eSetBits\000"
 13133      42697473 
 13133      00
 13134              	.LASF104:
 13135 026c 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 13135      64644E65 
 13135      77546173 
 13135      6B546F52 
 13135      65616479 
 13136              	.LASF252:
 13137 0285 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 13137      43313120 
 13137      352E342E 
 13137      31203230 
 13137      31363036 
 13138 02b8 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 13138      20726576 
 13138      6973696F 
 13138      6E203233 
 13138      37373135 
 13139 02eb 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 13139      66756E63 
 13139      74696F6E 
 13139      2D736563 
 13139      74696F6E 
 13140              	.LASF175:
 13141 0313 70785469 		.ascii	"pxTicksToWait\000"
 13141      636B7354 
 13141      6F576169 
 13141      7400
 13142              	.LASF155:
 13143 0321 78546173 		.ascii	"xTaskCatchUpTicks\000"
 13143      6B436174 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 345


 13143      63685570 
 13143      5469636B 
 13143      7300
 13144              	.LASF97:
 13145 0333 70634E61 		.ascii	"pcName\000"
 13145      6D6500
 13146              	.LASF242:
 13147 033a 764C6973 		.ascii	"vListInitialise\000"
 13147      74496E69 
 13147      7469616C 
 13147      69736500 
 13148              	.LASF248:
 13149 034a 764C6973 		.ascii	"vListInsertEnd\000"
 13149      74496E73 
 13149      65727445 
 13149      6E6400
 13150              	.LASF197:
 13151 0359 78546173 		.ascii	"xTaskGenericNotifyWait\000"
 13151      6B47656E 
 13151      65726963 
 13151      4E6F7469 
 13151      66795761 
 13152              	.LASF247:
 13153 0370 7076506F 		.ascii	"pvPortMalloc\000"
 13153      72744D61 
 13153      6C6C6F63 
 13153      00
 13154              	.LASF223:
 13155 037d 78537573 		.ascii	"xSuspendedTaskList\000"
 13155      70656E64 
 13155      65645461 
 13155      736B4C69 
 13155      737400
 13156              	.LASF195:
 13157 0390 78436C65 		.ascii	"xClearCountOnExit\000"
 13157      6172436F 
 13157      756E744F 
 13157      6E457869 
 13157      7400
 13158              	.LASF3:
 13159 03a2 7369676E 		.ascii	"signed char\000"
 13159      65642063 
 13159      68617200 
 13160              	.LASF57:
 13161 03ae 65537573 		.ascii	"eSuspended\000"
 13161      70656E64 
 13161      656400
 13162              	.LASF17:
 13163 03b9 75696E74 		.ascii	"uint8_t\000"
 13163      385F7400 
 13164              	.LASF207:
 13165 03c1 75634F72 		.ascii	"ucOriginalNotifyState\000"
 13165      6967696E 
 13165      616C4E6F 
 13165      74696679 
 13165      53746174 
 13166              	.LASF188:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 346


 13167 03d7 75785072 		.ascii	"uxPriorityToUse\000"
 13167      696F7269 
 13167      7479546F 
 13167      55736500 
 13168              	.LASF84:
 13169 03e7 756C4E65 		.ascii	"ulNewMaskValue\000"
 13169      774D6173 
 13169      6B56616C 
 13169      756500
 13170              	.LASF6:
 13171 03f6 756E7369 		.ascii	"unsigned char\000"
 13171      676E6564 
 13171      20636861 
 13171      7200
 13172              	.LASF230:
 13173 0404 784E756D 		.ascii	"xNumOfOverflows\000"
 13173      4F664F76 
 13173      6572666C 
 13173      6F777300 
 13174              	.LASF87:
 13175 0414 78526574 		.ascii	"xReturn\000"
 13175      75726E00 
 13176              	.LASF148:
 13177 041c 7850656E 		.ascii	"xPendedCounts\000"
 13177      64656443 
 13177      6F756E74 
 13177      7300
 13178              	.LASF40:
 13179 042a 4D696E69 		.ascii	"MiniListItem_t\000"
 13179      4C697374 
 13179      4974656D 
 13179      5F7400
 13180              	.LASF80:
 13181 0439 76506F72 		.ascii	"vPortSetBASEPRI\000"
 13181      74536574 
 13181      42415345 
 13181      50524900 
 13182              	.LASF255:
 13183 0449 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 13183      65736574 
 13183      4E657874 
 13183      5461736B 
 13183      556E626C 
 13184              	.LASF95:
 13185 0465 70727649 		.ascii	"prvInitialiseNewTask\000"
 13185      6E697469 
 13185      616C6973 
 13185      654E6577 
 13185      5461736B 
 13186              	.LASF189:
 13187 047a 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 13187      6C794F6E 
 13187      654D7574 
 13187      65784865 
 13187      6C6400
 13188              	.LASF69:
 13189 048d 7854696D 		.ascii	"xTimeOnEntering\000"
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 347


 13189      654F6E45 
 13189      6E746572 
 13189      696E6700 
 13190              	.LASF166:
 13191 049d 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 13191      6B506C61 
 13191      63654F6E 
 13191      556E6F72 
 13191      64657265 
 13192              	.LASF206:
 13193 04bc 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 13193      72657669 
 13193      6F75734E 
 13193      6F746966 
 13193      69636174 
 13194              	.LASF36:
 13195 04d9 7078496E 		.ascii	"pxIndex\000"
 13195      64657800 
 13196              	.LASF44:
 13197 04e1 7078546F 		.ascii	"pxTopOfStack\000"
 13197      704F6653 
 13197      7461636B 
 13197      00
 13198              	.LASF227:
 13199 04ee 78536368 		.ascii	"xSchedulerRunning\000"
 13199      6564756C 
 13199      65725275 
 13199      6E6E696E 
 13199      6700
 13200              	.LASF89:
 13201 0500 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 13201      61736B49 
 13201      73546173 
 13201      6B537573 
 13201      70656E64 
 13202              	.LASF16:
 13203 0517 63686172 		.ascii	"char\000"
 13203      00
 13204              	.LASF251:
 13205 051c 76417070 		.ascii	"vApplicationStackOverflowHook\000"
 13205      6C696361 
 13205      74696F6E 
 13205      53746163 
 13205      6B4F7665 
 13206              	.LASF70:
 13207 053a 54696D65 		.ascii	"TimeOut_t\000"
 13207      4F75745F 
 13207      7400
 13208              	.LASF39:
 13209 0544 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 13209      495F4C49 
 13209      53545F49 
 13209      54454D00 
 13210              	.LASF194:
 13211 0554 7578496E 		.ascii	"uxIndexToWait\000"
 13211      64657854 
 13211      6F576169 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 348


 13211      7400
 13212              	.LASF8:
 13213 0562 5F5F7569 		.ascii	"__uint16_t\000"
 13213      6E743136 
 13213      5F7400
 13214              	.LASF65:
 13215 056d 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 13215      56616C75 
 13215      65576974 
 13215      686F7574 
 13215      4F766572 
 13216              	.LASF241:
 13217 0587 7078506F 		.ascii	"pxPortInitialiseStack\000"
 13217      7274496E 
 13217      69746961 
 13217      6C697365 
 13217      53746163 
 13218              	.LASF214:
 13219 059d 756C4269 		.ascii	"ulBitsToClear\000"
 13219      7473546F 
 13219      436C6561 
 13219      7200
 13220              	.LASF125:
 13221 05ab 76546173 		.ascii	"vTaskDelete\000"
 13221      6B44656C 
 13221      65746500 
 13222              	.LASF93:
 13223 05b7 756C436F 		.ascii	"ulCount\000"
 13223      756E7400 
 13224              	.LASF190:
 13225 05bf 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 13225      736B5265 
 13225      73657445 
 13225      76656E74 
 13225      4974656D 
 13226              	.LASF133:
 13227 05d9 78546173 		.ascii	"xTaskResumeFromISR\000"
 13227      6B526573 
 13227      756D6546 
 13227      726F6D49 
 13227      535200
 13228              	.LASF234:
 13229 05ec 75785363 		.ascii	"uxSchedulerSuspended\000"
 13229      68656475 
 13229      6C657253 
 13229      75737065 
 13229      6E646564 
 13230              	.LASF159:
 13231 0601 70756C53 		.ascii	"pulStack\000"
 13231      7461636B 
 13231      00
 13232              	.LASF232:
 13233 060a 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 13233      74546173 
 13233      6B556E62 
 13233      6C6F636B 
 13233      54696D65 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 349


 13234              	.LASF220:
 13235 061f 7850656E 		.ascii	"xPendingReadyList\000"
 13235      64696E67 
 13235      52656164 
 13235      794C6973 
 13235      7400
 13236              	.LASF83:
 13237 0631 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 13237      7274436F 
 13237      756E744C 
 13237      65616469 
 13237      6E675A65 
 13238              	.LASF52:
 13239 0649 756C4E6F 		.ascii	"ulNotifiedValue\000"
 13239      74696669 
 13239      65645661 
 13239      6C756500 
 13240              	.LASF160:
 13241 0659 756C4368 		.ascii	"ulCheckValue\000"
 13241      65636B56 
 13241      616C7565 
 13241      00
 13242              	.LASF158:
 13243 0666 76546173 		.ascii	"vTaskSwitchContext\000"
 13243      6B537769 
 13243      74636843 
 13243      6F6E7465 
 13243      787400
 13244              	.LASF180:
 13245 0679 70756345 		.ascii	"pucEndOfStack\000"
 13245      6E644F66 
 13245      53746163 
 13245      6B00
 13246              	.LASF82:
 13247 0687 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 13247      72745261 
 13247      69736542 
 13247      41534550 
 13247      524900
 13248              	.LASF162:
 13249 069a 7078436F 		.ascii	"pxConstList\000"
 13249      6E73744C 
 13249      69737400 
 13250              	.LASF100:
 13251 06a6 70784372 		.ascii	"pxCreatedTask\000"
 13251      65617465 
 13251      64546173 
 13251      6B00
 13252              	.LASF192:
 13253 06b4 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 13253      736B496E 
 13253      6372656D 
 13253      656E744D 
 13253      75746578 
 13254              	.LASF132:
 13255 06d2 78546173 		.ascii	"xTaskToResume\000"
 13255      6B546F52 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 350


 13255      6573756D 
 13255      6500
 13256              	.LASF117:
 13257 06e0 70785374 		.ascii	"pxStateList\000"
 13257      6174654C 
 13257      69737400 
 13258              	.LASF138:
 13259 06ec 78546963 		.ascii	"xTicks\000"
 13259      6B7300
 13260              	.LASF72:
 13261 06f3 70764261 		.ascii	"pvBaseAddress\000"
 13261      73654164 
 13261      64726573 
 13261      7300
 13262              	.LASF224:
 13263 0701 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 13263      7272656E 
 13263      744E756D 
 13263      6265724F 
 13263      66546173 
 13264              	.LASF126:
 13265 0718 76546173 		.ascii	"vTaskPrioritySet\000"
 13265      6B507269 
 13265      6F726974 
 13265      79536574 
 13265      00
 13266              	.LASF68:
 13267 0729 784F7665 		.ascii	"xOverflowCount\000"
 13267      72666C6F 
 13267      77436F75 
 13267      6E7400
 13268              	.LASF172:
 13269 0738 70785469 		.ascii	"pxTimeOut\000"
 13269      6D654F75 
 13269      7400
 13270              	.LASF150:
 13271 0742 70785072 		.ascii	"pxPreviousWakeTime\000"
 13271      6576696F 
 13271      75735761 
 13271      6B655469 
 13271      6D6500
 13272              	.LASF55:
 13273 0755 65526561 		.ascii	"eReady\000"
 13273      647900
 13274              	.LASF118:
 13275 075c 70784576 		.ascii	"pxEventList\000"
 13275      656E744C 
 13275      69737400 
 13276              	.LASF13:
 13277 0768 6C6F6E67 		.ascii	"long unsigned int\000"
 13277      20756E73 
 13277      69676E65 
 13277      6420696E 
 13277      7400
 13278              	.LASF178:
 13279 077a 76546173 		.ascii	"vTaskMissedYield\000"
 13279      6B4D6973 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 351


 13279      73656459 
 13279      69656C64 
 13279      00
 13280              	.LASF249:
 13281 078b 78506F72 		.ascii	"xPortStartScheduler\000"
 13281      74537461 
 13281      72745363 
 13281      68656475 
 13281      6C657200 
 13282              	.LASF233:
 13283 079f 7849646C 		.ascii	"xIdleTaskHandle\000"
 13283      65546173 
 13283      6B48616E 
 13283      646C6500 
 13284              	.LASF171:
 13285 07af 76546173 		.ascii	"vTaskSetTimeOutState\000"
 13285      6B536574 
 13285      54696D65 
 13285      4F757453 
 13285      74617465 
 13286              	.LASF149:
 13287 07c4 78546173 		.ascii	"xTaskDelayUntil\000"
 13287      6B44656C 
 13287      6179556E 
 13287      74696C00 
 13288              	.LASF140:
 13289 07d4 70635461 		.ascii	"pcTaskGetName\000"
 13289      736B4765 
 13289      744E616D 
 13289      6500
 13290              	.LASF129:
 13291 07e2 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 13291      696F7269 
 13291      74795573 
 13291      65644F6E 
 13291      456E7472 
 13292              	.LASF71:
 13293 07f8 784D454D 		.ascii	"xMEMORY_REGION\000"
 13293      4F52595F 
 13293      52454749 
 13293      4F4E00
 13294              	.LASF174:
 13295 0807 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 13295      6B436865 
 13295      636B466F 
 13295      7254696D 
 13295      654F7574 
 13296              	.LASF154:
 13297 081c 78546963 		.ascii	"xTicksToDelay\000"
 13297      6B73546F 
 13297      44656C61 
 13297      7900
 13298              	.LASF183:
 13299 082a 70784D75 		.ascii	"pxMutexHolder\000"
 13299      74657848 
 13299      6F6C6465 
 13299      7200
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 352


 13300              	.LASF98:
 13301 0838 756C5374 		.ascii	"ulStackDepth\000"
 13301      61636B44 
 13301      65707468 
 13301      00
 13302              	.LASF165:
 13303 0845 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 13303      6B506C61 
 13303      63654F6E 
 13303      4576656E 
 13303      744C6973 
 13304              	.LASF106:
 13305 085b 70727649 		.ascii	"prvIdleTask\000"
 13305      646C6554 
 13305      61736B00 
 13306              	.LASF32:
 13307 0867 7076436F 		.ascii	"pvContainer\000"
 13307      6E746169 
 13307      6E657200 
 13308              	.LASF12:
 13309 0873 5F5F7569 		.ascii	"__uint32_t\000"
 13309      6E743332 
 13309      5F7400
 13310              	.LASF134:
 13311 087e 75785361 		.ascii	"uxSavedInterruptStatus\000"
 13311      76656449 
 13311      6E746572 
 13311      72757074 
 13311      53746174 
 13312              	.LASF193:
 13313 0895 756C5461 		.ascii	"ulTaskGenericNotifyTake\000"
 13313      736B4765 
 13313      6E657269 
 13313      634E6F74 
 13313      69667954 
 13314              	.LASF1:
 13315 08ad 6C6F6E67 		.ascii	"long long int\000"
 13315      206C6F6E 
 13315      6720696E 
 13315      7400
 13316              	.LASF130:
 13317 08bb 78596965 		.ascii	"xYieldRequired\000"
 13317      6C645265 
 13317      71756972 
 13317      656400
 13318              	.LASF212:
 13319 08ca 7578496E 		.ascii	"uxIndexToClear\000"
 13319      64657854 
 13319      6F436C65 
 13319      617200
 13320              	.LASF22:
 13321 08d9 646F7562 		.ascii	"double\000"
 13321      6C6500
 13322              	.LASF170:
 13323 08e0 70784576 		.ascii	"pxEventListItem\000"
 13323      656E744C 
 13323      69737449 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 353


 13323      74656D00 
 13324              	.LASF33:
 13325 08f0 784C4953 		.ascii	"xLIST_ITEM\000"
 13325      545F4954 
 13325      454D00
 13326              	.LASF182:
 13327 08fb 78546173 		.ascii	"xTaskPriorityInherit\000"
 13327      6B507269 
 13327      6F726974 
 13327      79496E68 
 13327      65726974 
 13328              	.LASF235:
 13329 0910 49544D5F 		.ascii	"ITM_RxBuffer\000"
 13329      52784275 
 13329      66666572 
 13329      00
 13330              	.LASF73:
 13331 091d 756C4C65 		.ascii	"ulLengthInBytes\000"
 13331      6E677468 
 13331      496E4279 
 13331      74657300 
 13332              	.LASF196:
 13333 092d 756C5265 		.ascii	"ulReturn\000"
 13333      7475726E 
 13333      00
 13334              	.LASF215:
 13335 0936 70785265 		.ascii	"pxReadyTasksLists\000"
 13335      61647954 
 13335      61736B73 
 13335      4C697374 
 13335      7300
 13336              	.LASF21:
 13337 0948 666C6F61 		.ascii	"float\000"
 13337      7400
 13338              	.LASF54:
 13339 094e 6552756E 		.ascii	"eRunning\000"
 13339      6E696E67 
 13339      00
 13340              	.LASF23:
 13341 0957 5461736B 		.ascii	"TaskFunction_t\000"
 13341      46756E63 
 13341      74696F6E 
 13341      5F7400
 13342              	.LASF110:
 13343 0966 7854696D 		.ascii	"xTimeToWake\000"
 13343      65546F57 
 13343      616B6500 
 13344              	.LASF156:
 13345 0972 78546963 		.ascii	"xTicksToCatchUp\000"
 13345      6B73546F 
 13345      43617463 
 13345      68557000 
 13346              	.LASF0:
 13347 0982 756E7369 		.ascii	"unsigned int\000"
 13347      676E6564 
 13347      20696E74 
 13347      00
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 354


 13348              	.LASF78:
 13349 098f 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 13349      6967696E 
 13349      616C4241 
 13349      53455052 
 13349      4900
 13350              	.LASF94:
 13351 09a1 70727644 		.ascii	"prvDeleteTCB\000"
 13351      656C6574 
 13351      65544342 
 13351      00
 13352              	.LASF244:
 13353 09ae 76506F72 		.ascii	"vPortExitCritical\000"
 13353      74457869 
 13353      74437269 
 13353      74696361 
 13353      6C00
 13354              	.LASF35:
 13355 09c0 75784E75 		.ascii	"uxNumberOfItems\000"
 13355      6D626572 
 13355      4F664974 
 13355      656D7300 
 13356              	.LASF177:
 13357 09d0 76546173 		.ascii	"vTaskSuspendAll\000"
 13357      6B537573 
 13357      70656E64 
 13357      416C6C00 
 13358              	.LASF90:
 13359 09e0 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 13359      61736B43 
 13359      6865636B 
 13359      46726565 
 13359      53746163 
 13360              	.LASF168:
 13361 09fb 7078556E 		.ascii	"pxUnblockedTCB\000"
 13361      626C6F63 
 13361      6B656454 
 13361      434200
 13362              	.LASF51:
 13363 0a0a 75784D75 		.ascii	"uxMutexesHeld\000"
 13363      74657865 
 13363      7348656C 
 13363      6400
 13364              	.LASF179:
 13365 0a18 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 13365      736B4765 
 13365      74537461 
 13365      636B4869 
 13365      67685761 
 13366              	.LASF42:
 13367 0a34 5461736B 		.ascii	"TaskHandle_t\000"
 13367      48616E64 
 13367      6C655F74 
 13367      00
 13368              	.LASF41:
 13369 0a41 4C697374 		.ascii	"List_t\000"
 13369      5F7400
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 355


 13370              	.LASF108:
 13371 0a48 78546963 		.ascii	"xTicksToWait\000"
 13371      6B73546F 
 13371      57616974 
 13371      00
 13372              	.LASF146:
 13373 0a55 78546173 		.ascii	"xTaskResumeAll\000"
 13373      6B526573 
 13373      756D6541 
 13373      6C6C00
 13374              	.LASF114:
 13375 0a64 78546173 		.ascii	"xTaskCreate\000"
 13375      6B437265 
 13375      61746500 
 13376              	.LASF167:
 13377 0a70 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 13377      6B52656D 
 13377      6F766546 
 13377      726F6D45 
 13377      76656E74 
 13378              	.LASF199:
 13379 0a89 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 13379      7473546F 
 13379      436C6561 
 13379      724F6E45 
 13379      78697400 
 13380              	.LASF37:
 13381 0a9d 784C6973 		.ascii	"xListEnd\000"
 13381      74456E64 
 13381      00
 13382              	.LASF111:
 13383 0aa6 78436F6E 		.ascii	"xConstTickCount\000"
 13383      73745469 
 13383      636B436F 
 13383      756E7400 
 13384              	.LASF56:
 13385 0ab6 65426C6F 		.ascii	"eBlocked\000"
 13385      636B6564 
 13385      00
 13386              	.LASF213:
 13387 0abf 756C5461 		.ascii	"ulTaskGenericNotifyValueClear\000"
 13387      736B4765 
 13387      6E657269 
 13387      634E6F74 
 13387      69667956 
 13388              	.LASF240:
 13389 0add 764C6973 		.ascii	"vListInitialiseItem\000"
 13389      74496E69 
 13389      7469616C 
 13389      69736549 
 13389      74656D00 
 13390              	.LASF121:
 13391 0af1 75785461 		.ascii	"uxTaskPriorityGet\000"
 13391      736B5072 
 13391      696F7269 
 13391      74794765 
 13391      7400
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 356


 13392              	.LASF79:
 13393 0b03 756C4E65 		.ascii	"ulNewBASEPRI\000"
 13393      77424153 
 13393      45505249 
 13393      00
 13394              	.LASF152:
 13395 0b10 7853686F 		.ascii	"xShouldDelay\000"
 13395      756C6444 
 13395      656C6179 
 13395      00
 13396              	.LASF2:
 13397 0b1d 6C6F6E67 		.ascii	"long double\000"
 13397      20646F75 
 13397      626C6500 
 13398              	.LASF63:
 13399 0b29 65496E63 		.ascii	"eIncrement\000"
 13399      72656D65 
 13399      6E7400
 13400              	.LASF163:
 13401 0b34 76546173 		.ascii	"vTaskSuspend\000"
 13401      6B537573 
 13401      70656E64 
 13401      00
 13402              	.LASF64:
 13403 0b41 65536574 		.ascii	"eSetValueWithOverwrite\000"
 13403      56616C75 
 13403      65576974 
 13403      684F7665 
 13403      72777269 
 13404              	.LASF31:
 13405 0b58 70764F77 		.ascii	"pvOwner\000"
 13405      6E657200 
 13406              	.LASF49:
 13407 0b60 70635461 		.ascii	"pcTaskName\000"
 13407      736B4E61 
 13407      6D6500
 13408              	.LASF43:
 13409 0b6b 74736B54 		.ascii	"tskTaskControlBlock\000"
 13409      61736B43 
 13409      6F6E7472 
 13409      6F6C426C 
 13409      6F636B00 
 13410              	.LASF151:
 13411 0b7f 7854696D 		.ascii	"xTimeIncrement\000"
 13411      65496E63 
 13411      72656D65 
 13411      6E7400
 13412              	.LASF205:
 13413 0b8e 65416374 		.ascii	"eAction\000"
 13413      696F6E00 
 13414              	.LASF153:
 13415 0b96 76546173 		.ascii	"vTaskDelay\000"
 13415      6B44656C 
 13415      617900
 13416              	.LASF45:
 13417 0ba1 78537461 		.ascii	"xStateListItem\000"
 13417      74654C69 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 357


 13417      73744974 
 13417      656D00
 13418              	.LASF161:
 13419 0bb0 7578546F 		.ascii	"uxTopPriority\000"
 13419      70507269 
 13419      6F726974 
 13419      7900
 13420              	.LASF186:
 13421 0bbe 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 13421      6B507269 
 13421      6F726974 
 13421      79446973 
 13421      696E6865 
 13422              	.LASF14:
 13423 0be2 6C6F6E67 		.ascii	"long long unsigned int\000"
 13423      206C6F6E 
 13423      6720756E 
 13423      7369676E 
 13423      65642069 
 13424              	.LASF243:
 13425 0bf9 76506F72 		.ascii	"vPortEnterCritical\000"
 13425      74456E74 
 13425      65724372 
 13425      69746963 
 13425      616C00
 13426              	.LASF204:
 13427 0c0c 756C5661 		.ascii	"ulValue\000"
 13427      6C756500 
 13428              	.LASF18:
 13429 0c14 75696E74 		.ascii	"uint16_t\000"
 13429      31365F74 
 13429      00
 13430              	.LASF142:
 13431 0c1d 78546173 		.ascii	"xTaskIncrementTick\000"
 13431      6B496E63 
 13431      72656D65 
 13431      6E745469 
 13431      636B00
 13432              	.LASF107:
 13433 0c30 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 13433      64644375 
 13433      7272656E 
 13433      74546173 
 13433      6B546F44 
 13434              	.LASF26:
 13435 0c4f 55426173 		.ascii	"UBaseType_t\000"
 13435      65547970 
 13435      655F7400 
 13436              	.LASF119:
 13437 0c5b 70784465 		.ascii	"pxDelayedList\000"
 13437      6C617965 
 13437      644C6973 
 13437      7400
 13438              	.LASF30:
 13439 0c69 70785072 		.ascii	"pxPrevious\000"
 13439      6576696F 
 13439      757300
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 358


 13440              	.LASF136:
 13441 0c74 76546173 		.ascii	"vTaskEndScheduler\000"
 13441      6B456E64 
 13441      53636865 
 13441      64756C65 
 13441      7200
 13442              	.LASF27:
 13443 0c86 5469636B 		.ascii	"TickType_t\000"
 13443      54797065 
 13443      5F7400
 13444              	.LASF105:
 13445 0c91 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 13445      6865636B 
 13445      5461736B 
 13445      73576169 
 13445      74696E67 
 13446              	.LASF115:
 13447 0cb1 65546173 		.ascii	"eTaskGetState\000"
 13447      6B476574 
 13447      53746174 
 13447      6500
 13448              	.LASF53:
 13449 0cbf 75634E6F 		.ascii	"ucNotifyState\000"
 13449      74696679 
 13449      53746174 
 13449      6500
 13450              	.LASF239:
 13451 0ccd 6D656D73 		.ascii	"memset\000"
 13451      657400
 13452              	.LASF145:
 13453 0cd4 70784C69 		.ascii	"pxList\000"
 13453      737400
 13454              	.LASF143:
 13455 0cdb 78537769 		.ascii	"xSwitchRequired\000"
 13455      74636852 
 13455      65717569 
 13455      72656400 
 13456              	.LASF226:
 13457 0ceb 7578546F 		.ascii	"uxTopReadyPriority\000"
 13457      70526561 
 13457      64795072 
 13457      696F7269 
 13457      747900
 13458              	.LASF147:
 13459 0cfe 78416C72 		.ascii	"xAlreadyYielded\000"
 13459      65616479 
 13459      5969656C 
 13459      64656400 
 13460              	.LASF59:
 13461 0d0e 65496E76 		.ascii	"eInvalid\000"
 13461      616C6964 
 13461      00
 13462              	.LASF144:
 13463 0d17 70785465 		.ascii	"pxTemp\000"
 13463      6D7000
 13464              	.LASF184:
 13465 0d1e 70784D75 		.ascii	"pxMutexHolderTCB\000"
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 359


 13465      74657848 
 13465      6F6C6465 
 13465      72544342 
 13465      00
 13466              	.LASF208:
 13467 0d2f 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 13467      6B47656E 
 13467      65726963 
 13467      4E6F7469 
 13467      66794672 
 13468              	.LASF92:
 13469 0d49 70756353 		.ascii	"pucStackByte\000"
 13469      7461636B 
 13469      42797465 
 13469      00
 13470              	.LASF211:
 13471 0d56 78546173 		.ascii	"xTaskGenericNotifyStateClear\000"
 13471      6B47656E 
 13471      65726963 
 13471      4E6F7469 
 13471      66795374 
 13472              	.LASF187:
 13473 0d73 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 13473      67686573 
 13473      74507269 
 13473      6F726974 
 13473      79576169 
 13474              	.LASF181:
 13475 0d90 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 13475      6B476574 
 13475      43757272 
 13475      656E7454 
 13475      61736B48 
 13476              	.LASF245:
 13477 0daa 75784C69 		.ascii	"uxListRemove\000"
 13477      73745265 
 13477      6D6F7665 
 13477      00
 13478              	.LASF218:
 13479 0db7 70784465 		.ascii	"pxDelayedTaskList\000"
 13479      6C617965 
 13479      64546173 
 13479      6B4C6973 
 13479      7400
 13480              	.LASF209:
 13481 0dc9 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 13481      67686572 
 13481      5072696F 
 13481      72697479 
 13481      5461736B 
 13482              	.LASF254:
 13483 0de3 453A5C47 		.ascii	"E:\\GIT Hub Project\\protocov\\Protocov\\Protocov.c"
 13483      49542048 
 13483      75622050 
 13483      726F6A65 
 13483      63745C70 
 13484 0e12 7964736E 		.ascii	"ydsn\000"
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 360


 13484      00
 13485              	.LASF219:
 13486 0e17 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 13486      6572666C 
 13486      6F774465 
 13486      6C617965 
 13486      64546173 
 13487              	.LASF7:
 13488 0e31 73686F72 		.ascii	"short int\000"
 13488      7420696E 
 13488      7400
 13489              	.LASF176:
 13490 0e3b 78456C61 		.ascii	"xElapsedTime\000"
 13490      70736564 
 13490      54696D65 
 13490      00
 13491              	.LASF127:
 13492 0e48 75784E65 		.ascii	"uxNewPriority\000"
 13492      77507269 
 13492      6F726974 
 13492      7900
 13493              	.LASF200:
 13494 0e56 70756C4E 		.ascii	"pulNotificationValue\000"
 13494      6F746966 
 13494      69636174 
 13494      696F6E56 
 13494      616C7565 
 13495              	.LASF141:
 13496 0e6b 78546173 		.ascii	"xTaskToQuery\000"
 13496      6B546F51 
 13496      75657279 
 13496      00
 13497              	.LASF81:
 13498 0e78 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 13498      74526169 
 13498      73654241 
 13498      53455052 
 13498      4900
 13499              	.LASF203:
 13500 0e8a 7578496E 		.ascii	"uxIndexToNotify\000"
 13500      64657854 
 13500      6F4E6F74 
 13500      69667900 
 13501              	.LASF221:
 13502 0e9a 78546173 		.ascii	"xTasksWaitingTermination\000"
 13502      6B735761 
 13502      6974696E 
 13502      67546572 
 13502      6D696E61 
 13503              	.LASF38:
 13504 0eb3 4C697374 		.ascii	"ListItem_t\000"
 13504      4974656D 
 13504      5F7400
 13505              	.LASF169:
 13506 0ebe 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 13506      6B52656D 
 13506      6F766546 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 361


 13506      726F6D55 
 13506      6E6F7264 
 13507              	.LASF77:
 13508 0ee0 5443425F 		.ascii	"TCB_t\000"
 13508      7400
 13509              	.LASF99:
 13510 0ee6 70765061 		.ascii	"pvParameters\000"
 13510      72616D65 
 13510      74657273 
 13510      00
 13511              	.LASF123:
 13512 0ef3 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 13512      736B5072 
 13512      696F7269 
 13512      74794765 
 13512      7446726F 
 13513              	.LASF20:
 13514 0f0c 75696E74 		.ascii	"uint32_t\000"
 13514      33325F74 
 13514      00
 13515              	.LASF202:
 13516 0f15 78546173 		.ascii	"xTaskToNotify\000"
 13516      6B546F4E 
 13516      6F746966 
 13516      7900
 13517              	.LASF102:
 13518 0f23 78526567 		.ascii	"xRegions\000"
 13518      696F6E73 
 13518      00
 13519              	.LASF66:
 13520 0f2c 654E6F74 		.ascii	"eNotifyAction\000"
 13520      69667941 
 13520      6374696F 
 13520      6E00
 13521              	.LASF198:
 13522 0f3a 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 13522      7473546F 
 13522      436C6561 
 13522      724F6E45 
 13522      6E747279 
 13523              	.LASF24:
 13524 0f4f 53746163 		.ascii	"StackType_t\000"
 13524      6B547970 
 13524      655F7400 
 13525              	.LASF85:
 13526 0f5b 756C4269 		.ascii	"ulBitmap\000"
 13526      746D6170 
 13526      00
 13527              	.LASF113:
 13528 0f64 78546173 		.ascii	"xTaskToDelete\000"
 13528      6B546F44 
 13528      656C6574 
 13528      6500
 13529              	.LASF9:
 13530 0f72 73686F72 		.ascii	"short unsigned int\000"
 13530      7420756E 
 13530      7369676E 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 362


 13530      65642069 
 13530      6E7400
 13531              	.LASF228:
 13532 0f85 7850656E 		.ascii	"xPendedTicks\000"
 13532      64656454 
 13532      69636B73 
 13532      00
 13533              	.LASF250:
 13534 0f92 76506F72 		.ascii	"vPortEndScheduler\000"
 13534      74456E64 
 13534      53636865 
 13534      64756C65 
 13534      7200
 13535              	.LASF103:
 13536 0fa4 70727649 		.ascii	"prvInitialiseTaskLists\000"
 13536      6E697469 
 13536      616C6973 
 13536      65546173 
 13536      6B4C6973 
 13537              	.LASF216:
 13538 0fbb 7844656C 		.ascii	"xDelayedTaskList1\000"
 13538      61796564 
 13538      5461736B 
 13538      4C697374 
 13538      3100
 13539              	.LASF217:
 13540 0fcd 7844656C 		.ascii	"xDelayedTaskList2\000"
 13540      61796564 
 13540      5461736B 
 13540      4C697374 
 13540      3200
 13541              	.LASF238:
 13542 0fdf 76506F72 		.ascii	"vPortFree\000"
 13542      74467265 
 13542      6500
 13543              	.LASF10:
 13544 0fe9 5F5F696E 		.ascii	"__int32_t\000"
 13544      7433325F 
 13544      7400
 13545              	.LASF61:
 13546 0ff3 654E6F41 		.ascii	"eNoAction\000"
 13546      6374696F 
 13546      6E00
 13547              	.LASF157:
 13548 0ffd 78596965 		.ascii	"xYieldOccurred\000"
 13548      6C644F63 
 13548      63757272 
 13548      656400
 13549              	.LASF253:
 13550 100c 2E2E5C2E 		.ascii	"..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\tasks.c\000"
 13550      2E5C2E2E 
 13550      5C467265 
 13550      6552544F 
 13550      535C4672 
 13551              	.LASF74:
 13552 1036 756C5061 		.ascii	"ulParameters\000"
 13552      72616D65 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cctnlTio.s 			page 363


 13552      74657273 
 13552      00
 13553              	.LASF116:
 13554 1043 65526574 		.ascii	"eReturn\000"
 13554      75726E00 
 13555              	.LASF237:
 13556 104b 7578546F 		.ascii	"uxTopUsedPriority\000"
 13556      70557365 
 13556      64507269 
 13556      6F726974 
 13556      7900
 13557              	.LASF28:
 13558 105d 78497465 		.ascii	"xItemValue\000"
 13558      6D56616C 
 13558      756500
 13559              	.LASF88:
 13560 1068 70785443 		.ascii	"pxTCB\000"
 13560      4200
 13561              	.LASF47:
 13562 106e 75785072 		.ascii	"uxPriority\000"
 13562      696F7269 
 13562      747900
 13563              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
