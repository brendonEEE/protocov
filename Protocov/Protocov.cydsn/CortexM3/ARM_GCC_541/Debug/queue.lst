ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"queue.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvGetDisinheritPriorityAfterTimeout, %function
  24              	prvGetDisinheritPriorityAfterTimeout:
  25              	.LFB88:
  26              		.file 1 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\queue.c"
   1:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*
   2:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * FreeRTOS Kernel <DEVELOPMENT BRANCH>
   3:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  *
   5:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * SPDX-License-Identifier: MIT
   6:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  *
   7:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * the Software without restriction, including without limitation the rights to
  10:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * subject to the following conditions:
  13:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  *
  14:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  15:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * copies or substantial portions of the Software.
  16:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  *
  17:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  *
  24:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * https://www.FreeRTOS.org
  25:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * https://github.com/FreeRTOS
  26:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  *
  27:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  */
  28:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
  29:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #include <stdlib.h>
  30:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #include <string.h>
  31:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 2


  32:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  34:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * task.h is included from an application file. */
  35:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
  37:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #include "FreeRTOS.h"
  38:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #include "task.h"
  39:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #include "queue.h"
  40:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
  41:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  42:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #include "croutine.h"
  43:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif
  44:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
  45:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  46:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  47:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * for the header files above, but not in this file, in order to generate the
  48:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * correct privileged Vs unprivileged linkage and placement. */
  49:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  50:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
  51:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
  52:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  53:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #define queueUNLOCKED             ( ( int8_t ) -1 )
  54:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #define queueLOCKED_UNMODIFIED    ( ( int8_t ) 0 )
  55:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #define queueINT8_MAX             ( ( int8_t ) 127 )
  56:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
  57:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  58:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * pcTail members are used as pointers into the queue storage area.  When the
  59:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  60:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * not necessary, and the pcHead pointer is set to NULL to indicate that the
  61:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * structure instead holds a pointer to the mutex holder (if any).  Map alternative
  62:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * names to the pcHead and structure member to ensure the readability of the code
  63:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  64:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * a union as their usage is mutually exclusive dependent on what the queue is
  65:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * being used for. */
  66:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #define uxQueueType               pcHead
  67:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #define queueQUEUE_IS_MUTEX       NULL
  68:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
  69:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** typedef struct QueuePointers
  70:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
  71:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     int8_t * pcTail;     /**< Points to the byte at the end of the queue storage area.  Once more b
  72:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     int8_t * pcReadFrom; /**< Points to the last place that a queued item was read from when the st
  73:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** } QueuePointers_t;
  74:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
  75:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** typedef struct SemaphoreData
  76:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
  77:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     TaskHandle_t xMutexHolder;        /**< The handle of the task that holds the mutex. */
  78:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxRecursiveCallCount; /**< Maintains a count of the number of times a recursive mut
  79:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** } SemaphoreData_t;
  80:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
  81:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  82:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * zero. */
  83:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH    ( ( UBaseType_t ) 0 )
  84:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME          ( ( TickType_t ) 0U )
  85:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
  86:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_PREEMPTION == 0 )
  87:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
  88:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /* If the cooperative scheduler is being used then a yield should not be
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 3


  89:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * performed just because a higher priority task has been woken. */
  90:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()
  91:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #else
  92:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #define queueYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  93:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif
  94:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
  95:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*
  96:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Definition of the queue used by the scheduler.
  97:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  98:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * rationale: https://www.FreeRTOS.org/Embedded-RTOS-Queues.html
  99:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  */
 100:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** typedef struct QueueDefinition /* The old naming convention is used to prevent breaking kernel awar
 101:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
 102:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     int8_t * pcHead;           /**< Points to the beginning of the queue storage area. */
 103:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     int8_t * pcWriteTo;        /**< Points to the free next place in the storage area. */
 104:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 105:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     union
 106:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 107:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         QueuePointers_t xQueue;     /**< Data required exclusively when this structure is used as a
 108:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         SemaphoreData_t xSemaphore; /**< Data required exclusively when this structure is used as a
 109:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     } u;
 110:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 111:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     List_t xTasksWaitingToSend;             /**< List of tasks that are blocked waiting to post ont
 112:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     List_t xTasksWaitingToReceive;          /**< List of tasks that are blocked waiting to read fro
 113:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 114:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     volatile UBaseType_t uxMessagesWaiting; /**< The number of items currently in the queue. */
 115:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxLength;                   /**< The length of the queue defined as the number of i
 116:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxItemSize;                 /**< The size of each items that the queue will hold. *
 117:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 118:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     volatile int8_t cRxLock;                /**< Stores the number of items received from the queue
 119:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     volatile int8_t cTxLock;                /**< Stores the number of items transmitted to the queu
 120:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 121:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #if ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 122:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         uint8_t ucStaticallyAllocated; /**< Set to pdTRUE if the memory used by the queue was stati
 123:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #endif
 124:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 125:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 126:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         struct QueueDefinition * pxQueueSetContainer;
 127:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #endif
 128:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 129:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 130:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         UBaseType_t uxQueueNumber;
 131:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         uint8_t ucQueueType;
 132:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #endif
 133:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** } xQUEUE;
 134:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 135:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 136:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * name below to enable the use of older kernel aware debuggers. */
 137:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** typedef xQUEUE Queue_t;
 138:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 139:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 140:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 141:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*
 142:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 143:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 144:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  */
 145:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 4


 146:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 147:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /* The type stored within the queue registry array.  This allows a name
 148:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * to be assigned to each queue making kernel aware debugging a little
 149:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * more user friendly. */
 150:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     typedef struct QUEUE_REGISTRY_ITEM
 151:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 152:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         const char * pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and s
 153:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         QueueHandle_t xHandle;
 154:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     } xQueueRegistryItem;
 155:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 156:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /* The old xQueueRegistryItem name is maintained above then typedefed to the
 157:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * new xQueueRegistryItem name below to enable the use of older kernel aware
 158:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * debuggers. */
 159:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     typedef xQueueRegistryItem QueueRegistryItem_t;
 160:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 161:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /* The queue registry is simply an array of QueueRegistryItem_t structures.
 162:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * The pcQueueName member of a structure being NULL is indicative of the
 163:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * array position being vacant. */
 164:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 165:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 166:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 167:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 168:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*
 169:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 170:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 171:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 172:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 173:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 174:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 175:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  */
 176:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 177:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 178:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*
 179:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 180:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  *
 181:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 182:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  */
 183:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 184:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 185:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*
 186:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 187:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  *
 188:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 189:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  */
 190:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue ) PRIVILEGED_FUNCTION;
 191:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 192:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*
 193:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 194:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * back of the queue.
 195:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  */
 196:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
 197:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                       const void * pvItemToQueue,
 198:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                       const BaseType_t xPosition ) PRIVILEGED_FUNCTION;
 199:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 200:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*
 201:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Copies an item out of a queue.
 202:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 5


 203:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
 204:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                   void * const pvBuffer ) PRIVILEGED_FUNCTION;
 205:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 206:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 207:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 208:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*
 209:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Checks to see if a queue is a member of a queue set, and if so, notifies
 210:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * the queue set that the queue contains data.
 211:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  */
 212:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue ) PRIVILEGED_FUNCTI
 213:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif
 214:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 215:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*
 216:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 217:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * dynamically to fill in the structure's members.
 218:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  */
 219:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 220:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                    const UBaseType_t uxItemSize,
 221:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                    uint8_t * pucQueueStorage,
 222:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                    const uint8_t ucQueueType,
 223:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                    Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 224:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 225:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*
 226:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 227:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 228:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * as a mutex.
 229:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  */
 230:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_MUTEXES == 1 )
 231:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue ) PRIVILEGED_FUNCTION;
 232:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif
 233:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 234:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_MUTEXES == 1 )
 235:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 236:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*
 237:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * If a task waiting for a mutex causes the mutex holder to inherit a
 238:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * priority, but the waiting task times out, then the holder should
 239:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * disinherit the priority - but only down to the highest priority of any
 240:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * other tasks that are waiting for the same mutex.  This function returns
 241:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * that priority.
 242:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  */
 243:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVIL
 244:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif
 245:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 246:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 247:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*
 248:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 249:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * accessing the queue event lists.
 250:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  */
 251:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #define prvLockQueue( pxQueue )                            \
 252:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     taskENTER_CRITICAL();                                  \
 253:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {                                                      \
 254:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( ( pxQueue )->cRxLock == queueUNLOCKED )        \
 255:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {                                                  \
 256:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED; \
 257:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }                                                  \
 258:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( ( pxQueue )->cTxLock == queueUNLOCKED )        \
 259:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {                                                  \
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 6


 260:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED; \
 261:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }                                                  \
 262:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }                                                      \
 263:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL()
 264:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 265:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*
 266:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Macro to increment cTxLock member of the queue data structure. It is
 267:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * capped at the number of tasks in the system as we cannot unblock more
 268:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * tasks than the number of tasks in the system.
 269:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  */
 270:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #define prvIncrementQueueTxLock( pxQueue, cTxLock )                           \
 271:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     do {                                                                      \
 272:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         const UBaseType_t uxNumberOfTasks = uxTaskGetNumberOfTasks();         \
 273:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( ( UBaseType_t ) ( cTxLock ) < uxNumberOfTasks )                   \
 274:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {                                                                     \
 275:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             configASSERT( ( cTxLock ) != queueINT8_MAX );                     \
 276:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( pxQueue )->cTxLock = ( int8_t ) ( ( cTxLock ) + ( int8_t ) 1 ); \
 277:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }                                                                     \
 278:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     } while( 0 )
 279:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 280:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*
 281:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * Macro to increment cRxLock member of the queue data structure. It is
 282:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * capped at the number of tasks in the system as we cannot unblock more
 283:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  * tasks than the number of tasks in the system.
 284:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****  */
 285:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #define prvIncrementQueueRxLock( pxQueue, cRxLock )                           \
 286:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     do {                                                                      \
 287:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         const UBaseType_t uxNumberOfTasks = uxTaskGetNumberOfTasks();         \
 288:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( ( UBaseType_t ) ( cRxLock ) < uxNumberOfTasks )                   \
 289:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {                                                                     \
 290:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             configASSERT( ( cRxLock ) != queueINT8_MAX );                     \
 291:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( pxQueue )->cRxLock = ( int8_t ) ( ( cRxLock ) + ( int8_t ) 1 ); \
 292:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }                                                                     \
 293:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     } while( 0 )
 294:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 295:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 296:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
 297:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                BaseType_t xNewQueue )
 298:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
 299:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn = pdPASS;
 300:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 301:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 302:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
 303:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 304:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     if( ( pxQueue != NULL ) &&
 305:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 306:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Check for multiplication overflow. */
 307:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 308:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 309:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         taskENTER_CRITICAL();
 310:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 311:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize 
 312:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 313:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 314:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 315:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 316:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 7


 317:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 318:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( xNewQueue == pdFALSE )
 319:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 320:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* If there are tasks blocked waiting to read from the queue, then
 321:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * the tasks will remain blocked as after this function exits the queue
 322:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * will still be empty.  If there are tasks blocked waiting to write to
 323:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * the queue, then one should be unblocked as after this function exits
 324:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * it will be possible to write to it. */
 325:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 326:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 327:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 328:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 329:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
 330:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
 331:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
 332:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 333:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
 334:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
 335:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 336:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
 337:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 338:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
 339:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 340:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 341:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
 342:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 343:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Ensure the event queues start in the correct state. */
 344:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 345:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 346:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 347:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 348:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         taskEXIT_CRITICAL();
 349:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 350:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     else
 351:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 352:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         xReturn = pdFAIL;
 353:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 354:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 355:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( xReturn != pdFAIL );
 356:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 357:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* A value is returned for calling semantic consistency with previous
 358:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * versions. */
 359:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     return xReturn;
 360:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
 361:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 362:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 363:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 364:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 365:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
 366:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                              const UBaseType_t uxItemSize,
 367:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                              uint8_t * pucQueueStorage,
 368:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                              StaticQueue_t * pxStaticQueue,
 369:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                              const uint8_t ucQueueType )
 370:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 371:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         Queue_t * pxNewQueue = NULL;
 372:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 373:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* The StaticQueue_t structure and the queue storage area must be
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 8


 374:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * supplied. */
 375:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         configASSERT( pxStaticQueue );
 376:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 377:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 378:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( pxStaticQueue != NULL ) &&
 379:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 380:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* A queue storage area should be provided if the item size is not 0, and
 381:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * should not be provided if the item size is 0. */
 382:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 383:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 384:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 385:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             #if ( configASSERT_DEFINED == 1 )
 386:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 387:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Sanity check that the size of the structure used to declare a
 388:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 389:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * the real queue and semaphore structures. */
 390:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 volatile size_t xSize = sizeof( StaticQueue_t );
 391:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 392:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* This assertion cannot be branch covered in unit tests */
 393:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 394:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 ( void ) xSize;                             /* Keeps lint quiet when configASSERT()
 395:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 396:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             #endif /* configASSERT_DEFINED */
 397:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 398:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* The address of a statically allocated queue was passed in, use it.
 399:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * The address of a statically allocated storage area was also passed in
 400:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * but is already set. */
 401:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the
 402:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 403:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 404:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 405:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Queues can be allocated wither statically or dynamically, so
 406:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * note this queue was allocated statically in case the queue is
 407:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * later deleted. */
 408:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 pxNewQueue->ucStaticallyAllocated = pdTRUE;
 409:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 410:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 411:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 412:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQu
 413:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 414:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
 415:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 416:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             configASSERT( pxNewQueue );
 417:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 418:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 419:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 420:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return pxNewQueue;
 421:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 422:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 423:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 424:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 425:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 426:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 427:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 428:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xQueueGenericGetStaticBuffers( QueueHandle_t xQueue,
 429:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                               uint8_t ** ppucQueueStorage,
 430:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                               StaticQueue_t ** ppxStaticQueue )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 9


 431:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 432:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
 433:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         Queue_t * const pxQueue = xQueue;
 434:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 435:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         configASSERT( pxQueue );
 436:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         configASSERT( ppxStaticQueue );
 437:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 438:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 439:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 440:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Check if the queue was statically allocated. */
 441:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdTRUE )
 442:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 443:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( ppucQueueStorage != NULL )
 444:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 445:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     *ppucQueueStorage = ( uint8_t * ) pxQueue->pcHead;
 446:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 447:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 448:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 *ppxStaticQueue = ( StaticQueue_t * ) pxQueue;
 449:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 xReturn = pdTRUE;
 450:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 451:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
 452:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 453:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 xReturn = pdFALSE;
 454:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 455:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 456:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         #else /* configSUPPORT_DYNAMIC_ALLOCATION */
 457:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 458:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Queue must have been statically allocated. */
 459:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( ppucQueueStorage != NULL )
 460:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 461:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 *ppucQueueStorage = ( uint8_t * ) pxQueue->pcHead;
 462:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 463:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 464:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             *ppxStaticQueue = ( StaticQueue_t * ) pxQueue;
 465:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdTRUE;
 466:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 467:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 468:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 469:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return xReturn;
 470:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 471:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 472:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 473:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 474:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 475:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 476:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 477:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
 478:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                        const UBaseType_t uxItemSize,
 479:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                        const uint8_t ucQueueType )
 480:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 481:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         Queue_t * pxNewQueue = NULL;
 482:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         size_t xQueueSizeInBytes;
 483:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         uint8_t * pucQueueStorage;
 484:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 485:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 486:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Check for multiplication overflow. */
 487:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 10


 488:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Check for addition overflow. */
 489:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 490:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 491:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Allocate enough space to hold the maximum number of items that
 492:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * can be in the queue at any time.  It is valid for uxItemSize to be
 493:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * zero in the case the queue is used as a semaphore. */
 494:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA excep
 495:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 496:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Allocate the queue and storage area.  Justification for MISRA
 497:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * deviation as follows:  pvPortMalloc() always ensures returned memory
 498:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * blocks are aligned per the requirements of the MCU stack.  In this case
 499:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * pvPortMalloc() must return a pointer that is guaranteed to meet the
 500:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * alignment requirements of the Queue_t structure - which in this case
 501:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * is an int8_t *.  Therefore, whenever the stack alignment requirements
 502:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * are greater than or equal to the pointer to char requirements the cast
 503:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * is safe.  In other cases alignment requirements are not strict (one or
 504:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * two bytes). */
 505:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lin
 506:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 507:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( pxNewQueue != NULL )
 508:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 509:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Jump past the queue structure to find the location of the queue
 510:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * storage area. */
 511:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 pucQueueStorage = ( uint8_t * ) pxNewQueue;
 512:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on c
 513:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 514:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 515:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 516:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* Queues can be created either statically or dynamically, so
 517:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * note this task was created dynamically in case it is later
 518:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * deleted. */
 519:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     pxNewQueue->ucStaticallyAllocated = pdFALSE;
 520:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 521:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #endif /* configSUPPORT_STATIC_ALLOCATION */
 522:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 523:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxN
 524:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 525:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
 526:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 527:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceQUEUE_CREATE_FAILED( ucQueueType );
 528:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 529:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 530:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 531:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
 532:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 533:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             configASSERT( pxNewQueue );
 534:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 535:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 536:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 537:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return pxNewQueue;
 538:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 539:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 540:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 541:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 542:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 543:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
 544:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                    const UBaseType_t uxItemSize,
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 11


 545:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                    uint8_t * pucQueueStorage,
 546:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                    const uint8_t ucQueueType,
 547:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                    Queue_t * pxNewQueue )
 548:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
 549:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* Remove compiler warnings about unused parameters should
 550:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * configUSE_TRACE_FACILITY not be set to 1. */
 551:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     ( void ) ucQueueType;
 552:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 553:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     if( uxItemSize == ( UBaseType_t ) 0 )
 554:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 555:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* No RAM was allocated for the queue storage area, but PC head cannot
 556:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * be set to NULL because NULL is used as a key to say the queue is used as
 557:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * a mutex.  Therefore just set pcHead to point to the queue as a benign
 558:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * value that is known to be within the memory map. */
 559:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 560:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 561:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     else
 562:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 563:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Set the head to the start of the queue storage area. */
 564:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 565:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 566:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 567:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* Initialise the queue members as described where the queue type is
 568:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * defined. */
 569:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     pxNewQueue->uxLength = uxQueueLength;
 570:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 571:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 572:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 573:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #if ( configUSE_TRACE_FACILITY == 1 )
 574:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 575:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         pxNewQueue->ucQueueType = ucQueueType;
 576:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 577:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #endif /* configUSE_TRACE_FACILITY */
 578:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 579:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #if ( configUSE_QUEUE_SETS == 1 )
 580:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 581:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         pxNewQueue->pxQueueSetContainer = NULL;
 582:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 583:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #endif /* configUSE_QUEUE_SETS */
 584:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 585:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     traceQUEUE_CREATE( pxNewQueue );
 586:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
 587:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 588:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 589:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_MUTEXES == 1 )
 590:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 591:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     static void prvInitialiseMutex( Queue_t * pxNewQueue )
 592:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 593:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pxNewQueue != NULL )
 594:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 595:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* The queue create function will set all the queue structure members
 596:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             * correctly for a generic queue, but this function is creating a
 597:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             * mutex.  Overwrite those members that need to be set differently -
 598:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             * in particular the information required for priority inheritance. */
 599:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 600:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 601:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 12


 602:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* In case this is a recursive mutex. */
 603:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 604:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 605:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceCREATE_MUTEX( pxNewQueue );
 606:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 607:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Start with the semaphore in the expected state. */
 608:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 609:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 610:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
 611:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 612:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceCREATE_MUTEX_FAILED();
 613:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 614:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 615:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 616:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configUSE_MUTEXES */
 617:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 618:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 619:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 620:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 621:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 622:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 623:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         QueueHandle_t xNewQueue;
 624:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 625:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 626:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 627:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 628:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 629:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return xNewQueue;
 630:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 631:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 632:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configUSE_MUTEXES */
 633:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 634:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 635:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 636:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 637:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
 638:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                            StaticQueue_t * pxStaticQueue )
 639:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 640:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         QueueHandle_t xNewQueue;
 641:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 642:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 643:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Prevent compiler warnings about unused parameters if
 644:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * configUSE_TRACE_FACILITY does not equal 1. */
 645:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         ( void ) ucQueueType;
 646:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 647:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQ
 648:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 649:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 650:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return xNewQueue;
 651:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 652:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 653:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configUSE_MUTEXES */
 654:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 655:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 656:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 657:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 658:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 13


 659:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 660:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         TaskHandle_t pxReturn;
 661:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 662:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 663:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         configASSERT( xSemaphore );
 664:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 665:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* This function is called by xSemaphoreGetMutexHolder(), and should not
 666:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * be called directly.  Note:  This is a good way of determining if the
 667:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * calling task is the mutex holder, but not a good way of determining the
 668:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * identity of the mutex holder, as the holder may change between the
 669:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * following critical section exiting and the function returning. */
 670:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         taskENTER_CRITICAL();
 671:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 672:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 673:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 674:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 675:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 676:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
 677:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 678:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 pxReturn = NULL;
 679:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 680:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 681:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         taskEXIT_CRITICAL();
 682:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 683:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return pxReturn;
 684:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 685:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 686:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 687:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 688:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 689:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 690:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 691:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 692:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 693:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         TaskHandle_t pxReturn;
 694:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 695:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         configASSERT( xSemaphore );
 696:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 697:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Mutexes cannot be used in interrupt service routines, so the mutex
 698:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * holder should not change in an ISR, and therefore a critical section is
 699:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * not required here. */
 700:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 701:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 702:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 703:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 704:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
 705:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 706:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxReturn = NULL;
 707:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 708:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 709:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return pxReturn;
 710:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 711:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 712:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) ) */
 713:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 714:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 715:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 14


 716:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 717:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 718:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 719:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
 720:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 721:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 722:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         configASSERT( pxMutex );
 723:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 724:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* If this is the task that holds the mutex then xMutexHolder will not
 725:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * change outside of this task.  If this task does not hold the mutex then
 726:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * pxMutexHolder can never coincidentally equal the tasks handle, and as
 727:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * this is the only condition we are interested in it does not matter if
 728:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * pxMutexHolder is accessed simultaneously by another task.  Therefore no
 729:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * mutual exclusion is required to test the pxMutexHolder variable. */
 730:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 731:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 732:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceGIVE_MUTEX_RECURSIVE( pxMutex );
 733:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 734:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 735:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * the task handle, therefore no underflow check is required.  Also,
 736:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * uxRecursiveCallCount is only modified by the mutex holder, and as
 737:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * there can only be one, no mutual exclusion is required to modify the
 738:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * uxRecursiveCallCount member. */
 739:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 740:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 741:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Has the recursive call count unwound to 0? */
 742:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 743:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 744:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Return the mutex.  This will automatically unblock any other
 745:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * task that might be waiting to access the mutex. */
 746:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO
 747:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 748:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
 749:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 750:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
 751:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 752:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 753:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
 754:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 755:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
 756:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 757:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* The mutex cannot be given because the calling task is not the
 758:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * holder. */
 759:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdFAIL;
 760:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 761:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 762:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 763:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 764:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return xReturn;
 765:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 766:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 767:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 768:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 769:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 770:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 771:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 772:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex,
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 15


 773:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                          TickType_t xTicksToWait )
 774:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 775:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
 776:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 777:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 778:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         configASSERT( pxMutex );
 779:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 780:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Comments regarding mutual exclusion as per those within
 781:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * xQueueGiveMutexRecursive(). */
 782:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 783:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         traceTAKE_MUTEX_RECURSIVE( pxMutex );
 784:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 785:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 786:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 787:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 788:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
 789:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 790:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
 791:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 792:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 793:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 794:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* pdPASS will only be returned if the mutex was successfully
 795:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * obtained.  The calling task may have entered the Blocked state
 796:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * before reaching here. */
 797:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( xReturn != pdFAIL )
 798:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 799:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 801:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
 802:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 803:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 804:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 805:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 806:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 807:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return xReturn;
 808:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 809:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 810:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 811:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 812:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 813:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 814:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 815:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
 816:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                                        const UBaseType_t uxInitialCount,
 817:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                                        StaticQueue_t * pxStaticQueue )
 818:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 819:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         QueueHandle_t xHandle = NULL;
 820:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 821:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( ( uxMaxCount != 0 ) &&
 822:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 823:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 824:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL
 825:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 826:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( xHandle != NULL )
 827:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 828:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 829:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 16


 830:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 831:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 832:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
 833:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 834:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 835:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 836:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 837:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
 838:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 839:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             configASSERT( xHandle );
 840:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 841:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 842:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 843:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return xHandle;
 844:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 845:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 846:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 847:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 848:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 849:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 850:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 851:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
 852:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                                  const UBaseType_t uxInitialCount )
 853:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 854:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         QueueHandle_t xHandle = NULL;
 855:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 856:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( ( uxMaxCount != 0 ) &&
 857:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 858:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 859:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE
 860:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 861:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( xHandle != NULL )
 862:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 863:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 864:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 865:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE();
 866:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 867:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
 868:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 869:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceCREATE_COUNTING_SEMAPHORE_FAILED();
 870:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 871:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 872:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
 873:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 874:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             configASSERT( xHandle );
 875:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
 876:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 877:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 878:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return xHandle;
 879:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 880:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 881:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 882:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 883:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 884:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
 885:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                               const void * const pvItemToQueue,
 886:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                               TickType_t xTicksToWait,
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 17


 887:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                               const BaseType_t xCopyPosition )
 888:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
 889:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 890:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
 891:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 892:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 893:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
 894:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
 895:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 896:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 897:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 898:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
 899:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 900:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #endif
 901:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 902:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to
 903:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * allow return statements within the function itself.  This is done in the
 904:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * interest of execution time efficiency. */
 905:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     for( ; ; )
 906:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 907:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         taskENTER_CRITICAL();
 908:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 909:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Is there room on the queue now?  The running task must be the
 910:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * highest priority task wanting to access the queue.  If the head item
 911:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * in the queue is to be overwritten then it does not matter if the
 912:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * queue is full. */
 913:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERW
 914:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 915:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceQUEUE_SEND( pxQueue );
 916:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 917:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
 918:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 919:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 920:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 921:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 922:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 923:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
 924:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 925:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != (
 926:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
 927:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             /* Do not notify the queue set as an existing item
 928:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * was overwritten in the queue so the number of items
 929:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * in the queue has not changed. */
 930:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 931:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
 932:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 933:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
 934:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             /* The queue is a member of a queue set, and posting
 935:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * to the queue set caused a higher priority task to
 936:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * unblock. A context switch is required. */
 937:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 938:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
 939:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         else
 940:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
 941:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 942:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
 943:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 18


 944:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
 945:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 946:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         /* If there was a task waiting for data to arrive on the
 947:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                          * queue then unblock it now. */
 948:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 949:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
 950:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
 951:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
 952:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 /* The unblocked task has a priority higher than
 953:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                  * our own so yield immediately.  Yes it is ok to
 954:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                  * do this from within the critical section - the
 955:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                  * kernel takes care of that. */
 956:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 queueYIELD_IF_USING_PREEMPTION();
 957:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
 958:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             else
 959:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
 960:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
 961:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
 962:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
 963:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         else if( xYieldRequired != pdFALSE )
 964:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
 965:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             /* This path is a special case that will only get
 966:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * executed if the task was holding multiple mutexes
 967:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * and the mutexes were given back in an order that is
 968:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * different to that in which they were taken. */
 969:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 970:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
 971:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         else
 972:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
 973:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 974:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
 975:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
 976:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 977:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #else /* configUSE_QUEUE_SETS */
 978:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 979:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 980:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 981:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* If there was a task waiting for data to arrive on the
 982:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * queue then unblock it now. */
 983:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 984:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 985:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
 986:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
 987:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             /* The unblocked task has a priority higher than
 988:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * our own so yield immediately.  Yes it is ok to do
 989:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * this from within the critical section - the kernel
 990:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * takes care of that. */
 991:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             queueYIELD_IF_USING_PREEMPTION();
 992:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
 993:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         else
 994:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
 995:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
 996:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
 997:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
 998:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else if( xYieldRequired != pdFALSE )
 999:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1000:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         /* This path is a special case that will only get
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 19


1001:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                          * executed if the task was holding multiple mutexes and
1002:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                          * the mutexes were given back in an order that is
1003:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                          * different to that in which they were taken. */
1004:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1005:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1006:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
1007:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1008:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1009:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1010:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1011:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1012:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1013:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 taskEXIT_CRITICAL();
1014:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 return pdPASS;
1015:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1016:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
1017:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1018:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1019:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1020:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* The queue was full and no block time is specified (or
1021:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * the block time has expired) so leave now. */
1022:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     taskEXIT_CRITICAL();
1023:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1024:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* Return to the original privilege level before exiting
1025:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * the function. */
1026:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     traceQUEUE_SEND_FAILED( pxQueue );
1027:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     return errQUEUE_FULL;
1028:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1029:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1030:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1031:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* The queue was full and a block time was specified so
1032:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * configure the timeout structure. */
1033:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1034:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
1035:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1036:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
1037:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1038:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* Entry time was already set. */
1039:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1040:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1041:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1042:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1043:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         taskEXIT_CRITICAL();
1044:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1045:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1046:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * now the critical section has been exited. */
1047:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1048:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         vTaskSuspendAll();
1049:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
1050:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1051:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1052:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1053:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1054:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
1055:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1056:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceBLOCKING_ON_QUEUE_SEND( pxQueue );
1057:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 20


1058:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1059:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Unlocking the queue means queue events can effect the
1060:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * event list. It is possible that interrupts occurring now
1061:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * remove this task from the event list again - but as the
1062:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * scheduler is suspended the task will go onto the pending
1063:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * ready list instead of the actual ready list. */
1064:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
1065:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1066:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Resuming the scheduler will move tasks from the pending
1067:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * ready list into the ready list - so it is feasible that this
1068:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * task is already in the ready list before it yields - in which
1069:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * case the yield will not cause a context switch unless there
1070:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * is also a higher priority task in the pending ready list. */
1071:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1072:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1073:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     portYIELD_WITHIN_API();
1074:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1075:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1076:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
1077:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1078:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Try again. */
1079:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
1080:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
1081:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1082:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1083:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
1084:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1085:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* The timeout has expired. */
1086:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             prvUnlockQueue( pxQueue );
1087:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
1088:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1089:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceQUEUE_SEND_FAILED( pxQueue );
1090:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             return errQUEUE_FULL;
1091:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1092:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     } /*lint -restore */
1093:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
1094:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
1095:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1096:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
1097:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                      const void * const pvItemToQueue,
1098:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                      BaseType_t * const pxHigherPriorityTaskWoken,
1099:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                      const BaseType_t xCopyPosition )
1100:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
1101:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
1102:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1103:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
1104:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1105:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
1106:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) )
1107:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1108:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1109:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1110:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1111:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1112:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1113:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1114:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 21


1115:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1116:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * assigned a priority above the configured maximum system call priority.
1117:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1118:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1119:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1120:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1121:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1122:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1123:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1124:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1125:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* Similar to xQueueGenericSend, except without blocking if there is no room
1126:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * in the queue.  Also don't directly wake a task that was blocked on a queue
1127:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1128:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1129:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * post). */
1130:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1131:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
1132:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE
1133:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1134:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1135:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
1136:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1137:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1138:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1139:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
1140:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
1141:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              *  in a task disinheriting a priority and prvCopyDataToQueue() can be
1142:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              *  called here even though the disinherit function does not check if
1143:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              *  the scheduler is suspended before accessing the ready lists. */
1144:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1145:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1146:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1147:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * be done when the queue is unlocked later. */
1148:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( cTxLock == queueUNLOCKED )
1149:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1150:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1151:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1152:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
1153:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1154:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != (
1155:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1156:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             /* Do not notify the queue set as an existing item
1157:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * was overwritten in the queue so the number of items
1158:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * in the queue has not changed. */
1159:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1160:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1161:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1162:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1163:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             /* The queue is a member of a queue set, and posting
1164:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * to the queue set caused a higher priority task to
1165:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * unblock.  A context switch is required. */
1166:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1167:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
1168:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1169:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
1170:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             else
1171:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 22


1172:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1173:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
1174:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1175:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         else
1176:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1177:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1178:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1179:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1180:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
1181:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1182:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1183:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1184:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1185:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
1186:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 /* The task waiting has a higher priority so
1187:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                  *  record that a context switch is required. */
1188:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1189:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 {
1190:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1191:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 }
1192:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 else
1193:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 {
1194:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1195:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 }
1196:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
1197:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             else
1198:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
1199:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1200:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
1201:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1202:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         else
1203:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1204:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1205:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1206:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1207:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1208:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1209:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1210:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1211:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1212:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
1213:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1214:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             /* The task waiting has a higher priority so record that a
1215:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * context switch is required. */
1216:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1217:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
1218:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1219:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
1220:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             else
1221:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
1222:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1223:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
1224:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1225:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         else
1226:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1227:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1228:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 23


1229:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1230:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
1231:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1232:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1233:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1234:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1235:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* Not used in this path. */
1236:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     ( void ) uxPreviousMessagesWaiting;
1237:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1238:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1239:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1240:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
1241:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1242:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1243:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * knows that data was posted while it was locked. */
1244:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvIncrementQueueTxLock( pxQueue, cTxLock );
1245:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1246:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1247:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
1248:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1249:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
1250:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1251:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1252:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = errQUEUE_FULL;
1253:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1254:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
1255:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1256:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1257:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     return xReturn;
1258:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
1259:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
1260:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1261:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
1262:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                               BaseType_t * const pxHigherPriorityTaskWoken )
1263:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
1264:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
1265:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1266:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
1267:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1268:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1269:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * item size is 0.  Don't directly wake a task that was blocked on a queue
1270:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * read, instead return a flag to say whether a context switch is required or
1271:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * not (i.e. has a task with a higher priority than us been woken by this
1272:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * post). */
1273:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1274:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
1275:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1276:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1277:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * if the item size is not 0. */
1278:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1279:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1280:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* Normally a mutex would not be given from an interrupt, especially if
1281:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * there is a mutex holder, as priority inheritance makes no sense for an
1282:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * interrupts, only tasks. */
1283:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMu
1284:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1285:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 24


1286:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1287:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1288:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1289:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1290:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1291:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1292:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * assigned a priority above the configured maximum system call priority.
1293:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1294:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1295:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1296:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1297:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1298:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1299:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1300:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1301:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1302:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
1303:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1304:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1305:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* When the queue is used to implement a semaphore no data is ever
1306:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * moved through the queue but it is still valid to see if the queue 'has
1307:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * space'. */
1308:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( uxMessagesWaiting < pxQueue->uxLength )
1309:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1310:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             const int8_t cTxLock = pxQueue->cTxLock;
1311:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1312:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceQUEUE_SEND_FROM_ISR( pxQueue );
1313:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1314:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* A task can only have an inherited priority if it is a mutex
1315:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * holder - and if there is a mutex holder then the mutex cannot be
1316:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * given from an ISR.  As this is the ISR version of the function it
1317:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * can be assumed there is no mutex holder and no need to determine if
1318:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * priority disinheritance is needed.  Simply increase the count of
1319:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * messages (semaphores) available. */
1320:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1321:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1322:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* The event list is not altered if the queue is locked.  This will
1323:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * be done when the queue is unlocked later. */
1324:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( cTxLock == queueUNLOCKED )
1325:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1326:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #if ( configUSE_QUEUE_SETS == 1 )
1327:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1328:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( pxQueue->pxQueueSetContainer != NULL )
1329:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1330:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
1331:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1332:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             /* The semaphore is a member of a queue set, and
1333:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * posting to the queue set caused a higher priority
1334:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * task to unblock.  A context switch is required. */
1335:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1336:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
1337:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1338:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
1339:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             else
1340:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
1341:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1342:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 25


1343:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1344:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         else
1345:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1346:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1347:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1348:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1349:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
1350:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1351:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1352:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1353:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) !=
1354:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
1355:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 /* The task waiting has a higher priority so
1356:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                  *  record that a context switch is required. */
1357:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 if( pxHigherPriorityTaskWoken != NULL )
1358:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 {
1359:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                     *pxHigherPriorityTaskWoken = pdTRUE;
1360:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 }
1361:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 else
1362:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 {
1363:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                     mtCOVERAGE_TEST_MARKER();
1364:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 }
1365:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
1366:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             else
1367:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
1368:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1369:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
1370:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1371:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         else
1372:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1373:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1374:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1375:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1376:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1377:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #else /* configUSE_QUEUE_SETS */
1378:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1379:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1380:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1381:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
1382:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1383:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             /* The task waiting has a higher priority so record that a
1384:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * context switch is required. */
1385:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             if( pxHigherPriorityTaskWoken != NULL )
1386:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
1387:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 *pxHigherPriorityTaskWoken = pdTRUE;
1388:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
1389:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             else
1390:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
1391:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 mtCOVERAGE_TEST_MARKER();
1392:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
1393:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1394:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         else
1395:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1396:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1397:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1398:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1399:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 26


1400:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1401:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1402:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1403:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1404:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #endif /* configUSE_QUEUE_SETS */
1405:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1406:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
1407:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1408:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
1409:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * knows that data was posted while it was locked. */
1410:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvIncrementQueueTxLock( pxQueue, cTxLock );
1411:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1412:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1413:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
1414:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1415:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
1416:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1417:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1418:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = errQUEUE_FULL;
1419:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1420:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
1421:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1422:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1423:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     return xReturn;
1424:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
1425:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
1426:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1427:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue,
1428:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                           void * const pvBuffer,
1429:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                           TickType_t xTicksToWait )
1430:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
1431:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1432:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
1433:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
1434:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1435:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* Check the pointer is not NULL. */
1436:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( ( pxQueue ) );
1437:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1438:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1439:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * is zero (so no data is copied into the buffer). */
1440:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1441:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1442:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* Cannot block if the scheduler is suspended. */
1443:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1444:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
1445:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
1446:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
1447:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #endif
1448:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1449:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1450:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * allow return statements within the function itself.  This is done in the
1451:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * interest of execution time efficiency. */
1452:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     for( ; ; )
1453:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
1454:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         taskENTER_CRITICAL();
1455:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1456:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 27


1457:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1458:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1459:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * must be the highest priority task wanting to access the queue. */
1460:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1461:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1462:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Data available, remove one item. */
1463:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1464:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1465:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1466:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1467:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* There is now space in the queue, were any tasks waiting to
1468:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * post to the queue?  If so, unblock the highest priority waiting
1469:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * task. */
1470:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1471:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1472:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1473:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1474:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1475:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1476:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
1477:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1478:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1479:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1480:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1481:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
1482:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1483:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1484:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1485:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1486:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 taskEXIT_CRITICAL();
1487:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 return pdPASS;
1488:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1489:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
1490:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1491:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1492:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1493:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* The queue was empty and no block time is specified (or
1494:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * the block time has expired) so leave now. */
1495:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     taskEXIT_CRITICAL();
1496:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1497:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     return errQUEUE_EMPTY;
1498:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1499:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1500:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1501:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* The queue was empty and a block time was specified so
1502:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * configure the timeout structure. */
1503:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1504:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
1505:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1506:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
1507:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1508:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* Entry time was already set. */
1509:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1510:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1511:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1512:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1513:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         taskEXIT_CRITICAL();
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 28


1514:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1515:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1516:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * now the critical section has been exited. */
1517:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1518:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         vTaskSuspendAll();
1519:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
1520:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1521:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1522:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1523:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1524:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* The timeout has not expired.  If the queue is still empty place
1525:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * the task on the list of tasks waiting to receive from the queue. */
1526:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1527:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1528:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1529:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1530:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
1531:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1532:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1533:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1534:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     portYIELD_WITHIN_API();
1535:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1536:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
1537:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1538:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1539:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1540:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1541:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
1542:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1543:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* The queue contains data again.  Loop back to try and read the
1544:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * data. */
1545:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
1546:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
1547:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1548:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1549:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
1550:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1551:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Timed out.  If there is no data in the queue exit, otherwise loop
1552:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * back and attempt to read the data. */
1553:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             prvUnlockQueue( pxQueue );
1554:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
1555:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1556:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1557:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1558:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1559:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 return errQUEUE_EMPTY;
1560:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1561:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
1562:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1563:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1564:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1565:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1566:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     } /*lint -restore */
1567:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
1568:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
1569:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1570:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 29


1571:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 TickType_t xTicksToWait )
1572:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
1573:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1574:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
1575:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
1576:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1577:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #if ( configUSE_MUTEXES == 1 )
1578:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         BaseType_t xInheritanceOccurred = pdFALSE;
1579:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #endif
1580:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1581:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* Check the queue pointer is not NULL. */
1582:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( ( pxQueue ) );
1583:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1584:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* Check this really is a semaphore, in which case the item size will be
1585:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * 0. */
1586:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue->uxItemSize == 0 );
1587:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1588:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* Cannot block if the scheduler is suspended. */
1589:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1590:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
1591:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
1592:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
1593:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #endif
1594:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1595:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1596:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * statements within the function itself.  This is done in the interest
1597:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * of execution time efficiency. */
1598:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     for( ; ; )
1599:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
1600:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         taskENTER_CRITICAL();
1601:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1602:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Semaphores are queues with an item size of 0, and where the
1603:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * number of messages in the queue is the semaphore's count value. */
1604:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1605:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1606:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1607:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * must be the highest priority task wanting to access the queue. */
1608:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1609:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1610:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
1611:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1612:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Semaphores are queues with a data size of zero and where the
1613:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * messages waiting is the semaphore's count.  Reduce the count. */
1614:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1615:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1616:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1617:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1618:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1619:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1620:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         /* Record the information required to implement
1621:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                          * priority inheritance should it become necessary. */
1622:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1623:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1624:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
1625:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1626:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1627:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 30


1628:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1629:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #endif /* configUSE_MUTEXES */
1630:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1631:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Check to see if other tasks are blocked waiting to give the
1632:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * semaphore, and if so, unblock the highest priority such task. */
1633:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1634:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1635:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1636:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1637:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1638:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1639:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
1640:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1641:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1642:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1643:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1644:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
1645:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1646:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1647:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1648:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1649:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 taskEXIT_CRITICAL();
1650:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 return pdPASS;
1651:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1652:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
1653:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1654:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1655:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1656:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* The semaphore count was 0 and no block time is specified
1657:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * (or the block time has expired) so exit now. */
1658:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     taskEXIT_CRITICAL();
1659:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
1660:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     return errQUEUE_EMPTY;
1661:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1662:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1663:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1664:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* The semaphore count was 0 and a block time was specified
1665:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * so configure the timeout structure ready to block. */
1666:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1667:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
1668:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1669:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
1670:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1671:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* Entry time was already set. */
1672:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1673:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1674:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1675:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1676:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         taskEXIT_CRITICAL();
1677:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1678:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Interrupts and other tasks can give to and take from the semaphore
1679:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * now the critical section has been exited. */
1680:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1681:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         vTaskSuspendAll();
1682:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
1683:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1684:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Update the timeout state to see if it has expired yet. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 31


1685:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1686:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1687:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* A block time is specified and not expired.  If the semaphore
1688:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * count is 0 then enter the Blocked state to wait for a semaphore to
1689:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * become available.  As semaphores are implemented with queues the
1690:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
1691:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1692:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1693:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1694:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1695:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1696:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1697:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1698:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1699:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         taskENTER_CRITICAL();
1700:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1701:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMut
1702:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1703:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         taskEXIT_CRITICAL();
1704:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1705:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
1706:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1707:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1708:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1709:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1710:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1711:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1712:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1713:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
1714:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1715:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1716:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1717:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     portYIELD_WITHIN_API();
1718:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1719:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
1720:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1721:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1722:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1723:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1724:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
1725:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1726:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* There was no timeout and the semaphore count was not 0, so
1727:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * attempt to take the semaphore again. */
1728:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
1729:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
1730:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1731:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1732:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
1733:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1734:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Timed out. */
1735:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             prvUnlockQueue( pxQueue );
1736:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
1737:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1738:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* If the semaphore count is 0 exit now as the timeout has
1739:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * expired.  Otherwise return to attempt to take the semaphore that is
1740:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * known to be available.  As semaphores are implemented by queues the
1741:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * queue being empty is equivalent to the semaphore count being 0. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 32


1742:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1743:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1744:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #if ( configUSE_MUTEXES == 1 )
1745:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1746:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* xInheritanceOccurred could only have be set if
1747:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1748:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * test the mutex type again to check it is actually a mutex. */
1749:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( xInheritanceOccurred != pdFALSE )
1750:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1751:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         taskENTER_CRITICAL();
1752:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1753:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             UBaseType_t uxHighestWaitingPriority;
1754:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1755:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             /* This task blocking on the mutex caused another
1756:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * task to inherit this task's priority.  Now this task
1757:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * has timed out the priority should be disinherited
1758:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * again, but only as low as the next highest priority
1759:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * task that is waiting for the same mutex. */
1760:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueu
1761:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder
1762:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1763:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         taskEXIT_CRITICAL();
1764:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1765:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1766:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 #endif /* configUSE_MUTEXES */
1767:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1768:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceQUEUE_RECEIVE_FAILED( pxQueue );
1769:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 return errQUEUE_EMPTY;
1770:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1771:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
1772:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1773:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1774:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1775:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1776:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     } /*lint -restore */
1777:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
1778:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
1779:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1780:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue,
1781:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                        void * const pvBuffer,
1782:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                        TickType_t xTicksToWait )
1783:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
1784:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
1785:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
1786:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     int8_t * pcOriginalReadPosition;
1787:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
1788:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1789:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* Check the pointer is not NULL. */
1790:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( ( pxQueue ) );
1791:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1792:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* The buffer into which data is received can only be NULL if the data size
1793:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * is zero (so no data is copied into the buffer. */
1794:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) 
1795:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1796:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* Cannot block if the scheduler is suspended. */
1797:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1798:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 33


1799:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait 
1800:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
1801:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #endif
1802:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1803:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /*lint -save -e904  This function relaxes the coding standard somewhat to
1804:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * allow return statements within the function itself.  This is done in the
1805:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * interest of execution time efficiency. */
1806:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     for( ; ; )
1807:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
1808:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         taskENTER_CRITICAL();
1809:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1810:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1811:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1812:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Is there data in the queue now?  To be running the calling task
1813:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * must be the highest priority task wanting to access the queue. */
1814:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1815:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1816:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Remember the read position so it can be reset after the data
1817:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * is read from the queue as this function is only peeking the
1818:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * data, not removing it. */
1819:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1820:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1821:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvCopyDataFromQueue( pxQueue, pvBuffer );
1822:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceQUEUE_PEEK( pxQueue );
1823:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1824:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* The data is not being removed, so reset the read pointer. */
1825:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1826:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1827:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* The data is being left in the queue, so see if there are
1828:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * any other tasks waiting for the data. */
1829:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1830:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1831:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
1832:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1833:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         /* The task waiting has a higher priority than this task. */
1834:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         queueYIELD_IF_USING_PREEMPTION();
1835:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1836:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
1837:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1838:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1839:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1840:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1841:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
1842:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1843:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1844:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1845:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1846:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 taskEXIT_CRITICAL();
1847:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 return pdPASS;
1848:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1849:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
1850:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1851:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( xTicksToWait == ( TickType_t ) 0 )
1852:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1853:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* The queue was empty and no block time is specified (or
1854:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * the block time has expired) so leave now. */
1855:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     taskEXIT_CRITICAL();
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 34


1856:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
1857:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     return errQUEUE_EMPTY;
1858:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1859:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else if( xEntryTimeSet == pdFALSE )
1860:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1861:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* The queue was empty and a block time was specified so
1862:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * configure the timeout structure ready to enter the blocked
1863:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * state. */
1864:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     vTaskInternalSetTimeOutState( &xTimeOut );
1865:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
1866:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1867:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
1868:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1869:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* Entry time was already set. */
1870:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1871:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1872:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1873:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1874:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         taskEXIT_CRITICAL();
1875:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1876:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Interrupts and other tasks can send to and receive from the queue
1877:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * now that the critical section has been exited. */
1878:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1879:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         vTaskSuspendAll();
1880:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
1881:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1882:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Update the timeout state to see if it has expired yet. */
1883:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1884:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1885:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Timeout has not expired yet, check to see if there is data in the
1886:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             * queue now, and if not enter the Blocked state to wait for data. */
1887:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1888:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1889:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1890:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1891:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
1892:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1893:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( xTaskResumeAll() == pdFALSE )
1894:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1895:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     portYIELD_WITHIN_API();
1896:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1897:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
1898:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1899:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
1900:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1901:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1902:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
1903:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1904:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* There is data in the queue now, so don't enter the blocked
1905:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * state, instead return to try and obtain the data. */
1906:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
1907:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
1908:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1909:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1910:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
1911:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1912:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* The timeout has expired.  If there is still no data in the queue
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 35


1913:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * exit, otherwise go back and try to read the data again. */
1914:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             prvUnlockQueue( pxQueue );
1915:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
1916:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1917:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1918:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1919:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceQUEUE_PEEK_FAILED( pxQueue );
1920:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 return errQUEUE_EMPTY;
1921:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1922:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
1923:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1924:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
1925:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
1926:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
1927:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     } /*lint -restore */
1928:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
1929:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
1930:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1931:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
1932:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                  void * const pvBuffer,
1933:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                  BaseType_t * const pxHigherPriorityTaskWoken )
1934:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
1935:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
1936:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxSavedInterruptStatus;
1937:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
1938:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1939:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
1940:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1941:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1942:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
1943:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
1944:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
1945:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
1946:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1947:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1948:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
1949:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * assigned a priority above the configured maximum system call priority.
1950:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
1951:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
1952:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
1953:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
1954:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
1955:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1956:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1957:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1958:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1959:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
1960:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1961:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1962:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
1963:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1964:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
1965:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             const int8_t cRxLock = pxQueue->cRxLock;
1966:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1967:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1968:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1969:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 36


1970:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1971:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
1972:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* If the queue is locked the event list will not be modified.
1973:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * Instead update the lock count so the task that unlocks the queue
1974:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * will know that an ISR has removed data while the queue was
1975:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * locked. */
1976:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( cRxLock == queueUNLOCKED )
1977:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
1978:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1979:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
1980:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1981:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1982:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         /* The task waiting has a higher priority than us so
1983:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                          * force a context switch. */
1984:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         if( pxHigherPriorityTaskWoken != NULL )
1985:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1986:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             *pxHigherPriorityTaskWoken = pdTRUE;
1987:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1988:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         else
1989:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
1990:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
1991:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
1992:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1993:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
1994:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
1995:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
1996:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
1997:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
1998:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
1999:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2000:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2001:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2002:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2003:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
2004:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2005:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Increment the lock count so the task that unlocks the queue
2006:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * knows that data was removed while it was locked. */
2007:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvIncrementQueueRxLock( pxQueue, cRxLock );
2008:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2009:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2010:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
2011:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2012:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
2013:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2014:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdFAIL;
2015:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
2016:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2017:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2018:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2019:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2020:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     return xReturn;
2021:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
2022:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2023:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2024:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
2025:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                               void * const pvBuffer )
2026:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 37


2027:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
2028:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxSavedInterruptStatus;
2029:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     int8_t * pcOriginalReadPosition;
2030:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
2031:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2032:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
2033:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
2034:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
2035:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2036:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2037:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2038:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * above the maximum system call priority are kept permanently enabled, even
2039:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2040:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2041:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2042:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2043:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * assigned a priority above the configured maximum system call priority.
2044:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2045:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * that have been assigned a priority at or (logically) below the maximum
2046:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * system call interrupt priority.  FreeRTOS maintains a separate interrupt
2047:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2048:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * More information (albeit Cortex-M specific) is provided on the following
2049:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2050:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2051:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2052:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2053:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2054:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Cannot block in an ISR, so check there is data available. */
2055:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2056:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2057:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceQUEUE_PEEK_FROM_ISR( pxQueue );
2058:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2059:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Remember the read position so it can be reset as nothing is
2060:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * actually being removed from the queue. */
2061:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
2062:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
2063:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
2064:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2065:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
2066:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2067:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
2068:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2069:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdFAIL;
2070:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
2071:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2072:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2073:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2074:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2075:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     return xReturn;
2076:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
2077:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2078:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2079:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
2080:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
2081:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxReturn;
2082:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2083:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( xQueue );
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 38


2084:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2085:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     taskENTER_CRITICAL();
2086:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2087:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
2088:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2089:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL();
2090:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2091:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     return uxReturn;
2092:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2093:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2094:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2095:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
2096:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
2097:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxReturn;
2098:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
2099:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2100:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
2101:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2102:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     taskENTER_CRITICAL();
2103:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2104:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
2105:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2106:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL();
2107:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2108:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     return uxReturn;
2109:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2110:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2111:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2112:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
2113:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
2114:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxReturn;
2115:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
2116:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2117:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
2118:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     uxReturn = pxQueue->uxMessagesWaiting;
2119:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2120:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     return uxReturn;
2121:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
2122:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2123:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2124:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
2125:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
2126:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
2127:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2128:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
2129:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     traceQUEUE_DELETE( pxQueue );
2130:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2131:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #if ( configQUEUE_REGISTRY_SIZE > 0 )
2132:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2133:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         vQueueUnregisterQueue( pxQueue );
2134:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2135:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #endif
2136:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2137:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
2138:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2139:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* The queue can only have been allocated dynamically - free it
2140:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * again. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 39


2141:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         vPortFree( pxQueue );
2142:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2143:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
2144:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2145:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* The queue could have been allocated statically or dynamically, so
2146:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * check before attempting to free the memory. */
2147:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2148:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2149:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             vPortFree( pxQueue );
2150:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2151:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
2152:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2153:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
2154:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2155:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2156:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #else /* if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION ==
2157:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2158:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* The queue must have been statically allocated, so is not going to be
2159:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * deleted.  Avoid compiler warnings about the unused parameter. */
2160:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         ( void ) pxQueue;
2161:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2162:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2163:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
2164:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2165:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2166:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2167:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2168:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2169:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2170:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2171:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2172:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2173:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2174:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2175:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2176:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2177:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2178:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     void vQueueSetQueueNumber( QueueHandle_t xQueue,
2179:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                UBaseType_t uxQueueNumber )
2180:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2181:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2182:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2183:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2184:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2185:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2186:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2187:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2188:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2189:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2190:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2191:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return ( ( Queue_t * ) xQueue )->ucQueueType;
2192:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2193:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2194:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2195:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2196:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2197:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_MUTEXES == 1 )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 40


2198:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2199:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2200:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
  27              		.loc 1 2200 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
2201:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         UBaseType_t uxHighestPriorityOfWaitingTasks;
2202:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2203:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* If a task waiting for a mutex causes the mutex holder to inherit a
2204:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * priority, but the waiting task times out, then the holder should
2205:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * disinherit the priority - but only down to the highest priority of any
2206:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * other tasks that are waiting for the same mutex.  For this purpose,
2207:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * return the priority of the highest priority task that is waiting for the
2208:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * mutex. */
2209:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
  33              		.loc 1 2209 0
  34 0000 436A     		ldr	r3, [r0, #36]
  35 0002 23B1     		cbz	r3, .L3
2210:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2211:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t 
  36              		.loc 1 2211 0
  37 0004 036B     		ldr	r3, [r0, #48]
  38 0006 1868     		ldr	r0, [r3]
  39              	.LVL1:
  40 0008 C0F10500 		rsb	r0, r0, #5
  41              	.LVL2:
  42 000c 7047     		bx	lr
  43              	.LVL3:
  44              	.L3:
2212:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2213:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
2214:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2215:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  45              		.loc 1 2215 0
  46 000e 0020     		movs	r0, #0
  47              	.LVL4:
2216:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2217:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2218:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return uxHighestPriorityOfWaitingTasks;
2219:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
  48              		.loc 1 2219 0
  49 0010 7047     		bx	lr
  50              		.cfi_endproc
  51              	.LFE88:
  52              		.size	prvGetDisinheritPriorityAfterTimeout, .-prvGetDisinheritPriorityAfterTimeout
  53 0012 00BF     		.section	.text.prvIsQueueFull,"ax",%progbits
  54              		.align	2
  55              		.thumb
  56              		.thumb_func
  57              		.type	prvIsQueueFull, %function
  58              	prvIsQueueFull:
  59              	.LFB94:
2220:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2221:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configUSE_MUTEXES */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 41


2222:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2223:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2224:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
2225:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                       const void * pvItemToQueue,
2226:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                       const BaseType_t xPosition )
2227:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
2228:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn = pdFALSE;
2229:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxMessagesWaiting;
2230:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2231:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* This function is called from a critical section. */
2232:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2233:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2234:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2235:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2236:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2237:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         #if ( configUSE_MUTEXES == 1 )
2238:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2239:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2240:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2241:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* The mutex is no longer being held. */
2242:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2243:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
2244:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2245:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
2246:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2247:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2248:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2249:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2250:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         #endif /* configUSE_MUTEXES */
2251:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2252:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     else if( xPosition == queueSEND_TO_BACK )
2253:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2254:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSi
2255:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
2256:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2257:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                       
2258:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2259:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
2260:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2261:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
2262:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2263:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
2264:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2265:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2266:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     else
2267:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2268:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue
2269:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2270:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2271:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified
2272:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2273:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2274:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2275:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
2276:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2277:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
2278:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 42


2279:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2280:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( xPosition == queueOVERWRITE )
2281:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2282:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2283:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2284:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* An item is not being added but overwritten, so subtract
2285:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * one from the recorded number of items in the queue so when
2286:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * one is added again below the number of recorded items remains
2287:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * correct. */
2288:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 --uxMessagesWaiting;
2289:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2290:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
2291:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2292:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2293:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2294:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2295:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
2296:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2297:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
2298:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2299:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2300:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2301:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2302:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2303:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     return xReturn;
2304:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
2305:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2306:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2307:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue,
2308:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                   void * const pvBuffer )
2309:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
2310:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2311:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2312:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithm
2313:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2314:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception
2315:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2316:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2317:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2318:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
2319:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2320:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
2321:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2322:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2323:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) p
2324:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2325:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
2326:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2327:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2328:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2329:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
2330:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2331:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2332:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* The lock counts contains the number of extra data items placed or
2333:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * removed from the queue while the queue was locked.  When a queue is
2334:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * locked items can be added or removed, but the event lists cannot be
2335:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****      * updated. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 43


2336:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     taskENTER_CRITICAL();
2337:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2338:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         int8_t cTxLock = pxQueue->cTxLock;
2339:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2340:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* See if data was added to the queue while it was locked. */
2341:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         while( cTxLock > queueLOCKED_UNMODIFIED )
2342:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2343:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Data was posted while the queue was locked.  Are any tasks
2344:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * blocked waiting for data to become available? */
2345:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             #if ( configUSE_QUEUE_SETS == 1 )
2346:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2347:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( pxQueue->pxQueueSetContainer != NULL )
2348:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2349:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
2350:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
2351:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         /* The queue is a member of a queue set, and posting to
2352:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                          * the queue set caused a higher priority task to unblock.
2353:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                          * A context switch is required. */
2354:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         vTaskMissedYield();
2355:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
2356:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
2357:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
2358:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2359:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
2360:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2361:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
2362:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2363:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* Tasks that are removed from the event list will get
2364:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * added to the pending ready list as the scheduler is still
2365:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * suspended. */
2366:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2367:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
2368:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdF
2369:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
2370:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             /* The task waiting has a higher priority so record that a
2371:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              * context switch is required. */
2372:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             vTaskMissedYield();
2373:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
2374:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         else
2375:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
2376:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             mtCOVERAGE_TEST_MARKER();
2377:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
2378:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
2379:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
2380:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
2381:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         break;
2382:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
2383:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2384:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2385:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             #else /* configUSE_QUEUE_SETS */
2386:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2387:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Tasks that are removed from the event list will get added to
2388:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * the pending ready list as the scheduler is still suspended. */
2389:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2390:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2391:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE
2392:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 44


2393:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         /* The task waiting has a higher priority so record that
2394:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                          * a context switch is required. */
2395:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         vTaskMissedYield();
2396:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
2397:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
2398:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
2399:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2400:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
2401:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2402:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
2403:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2404:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     break;
2405:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2406:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2407:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             #endif /* configUSE_QUEUE_SETS */
2408:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2409:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             --cTxLock;
2410:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2411:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2412:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         pxQueue->cTxLock = queueUNLOCKED;
2413:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2414:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL();
2415:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2416:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* Do the same for the Rx lock. */
2417:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     taskENTER_CRITICAL();
2418:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2419:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         int8_t cRxLock = pxQueue->cRxLock;
2420:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2421:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         while( cRxLock > queueLOCKED_UNMODIFIED )
2422:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2423:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2424:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2425:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2426:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2427:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     vTaskMissedYield();
2428:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2429:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
2430:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2431:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2432:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2433:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2434:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 --cRxLock;
2435:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2436:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
2437:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2438:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 break;
2439:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2440:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2441:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2442:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         pxQueue->cRxLock = queueUNLOCKED;
2443:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2444:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL();
2445:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
2446:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2447:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2448:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
2449:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 45


2450:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
2451:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2452:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     taskENTER_CRITICAL();
2453:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2454:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2455:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2456:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdTRUE;
2457:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2458:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
2459:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2460:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdFALSE;
2461:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2462:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2463:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL();
2464:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2465:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     return xReturn;
2466:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
2467:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2468:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2469:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2470:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
2471:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
2472:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
2473:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2474:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
2475:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2476:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2477:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2478:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         xReturn = pdTRUE;
2479:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2480:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     else
2481:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2482:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         xReturn = pdFALSE;
2483:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2484:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2485:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     return xReturn;
2486:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2487:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2488:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2489:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
2490:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
  60              		.loc 1 2490 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64              	.LVL5:
  65 0000 10B5     		push	{r4, lr}
  66              		.cfi_def_cfa_offset 8
  67              		.cfi_offset 4, -8
  68              		.cfi_offset 14, -4
  69 0002 0446     		mov	r4, r0
2491:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
2492:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2493:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     taskENTER_CRITICAL();
  70              		.loc 1 2493 0
  71 0004 FFF7FEFF 		bl	vPortEnterCritical
  72              	.LVL6:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 46


2494:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2495:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  73              		.loc 1 2495 0
  74 0008 A26B     		ldr	r2, [r4, #56]
  75 000a E36B     		ldr	r3, [r4, #60]
  76 000c 9A42     		cmp	r2, r3
  77 000e 01D1     		bne	.L6
2496:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2497:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdTRUE;
  78              		.loc 1 2497 0
  79 0010 0124     		movs	r4, #1
  80              	.LVL7:
  81 0012 00E0     		b	.L5
  82              	.LVL8:
  83              	.L6:
2498:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2499:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
2500:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2501:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdFALSE;
  84              		.loc 1 2501 0
  85 0014 0024     		movs	r4, #0
  86              	.LVL9:
  87              	.L5:
2502:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2503:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2504:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     taskEXIT_CRITICAL();
  88              		.loc 1 2504 0
  89 0016 FFF7FEFF 		bl	vPortExitCritical
  90              	.LVL10:
2505:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2506:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     return xReturn;
2507:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
  91              		.loc 1 2507 0
  92 001a 2046     		mov	r0, r4
  93 001c 10BD     		pop	{r4, pc}
  94              		.cfi_endproc
  95              	.LFE94:
  96              		.size	prvIsQueueFull, .-prvIsQueueFull
  97 001e 00BF     		.section	.text.prvIsQueueEmpty,"ax",%progbits
  98              		.align	2
  99              		.thumb
 100              		.thumb_func
 101              		.type	prvIsQueueEmpty, %function
 102              	prvIsQueueEmpty:
 103              	.LFB92:
2449:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 104              		.loc 1 2449 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              	.LVL11:
 109 0000 10B5     		push	{r4, lr}
 110              		.cfi_def_cfa_offset 8
 111              		.cfi_offset 4, -8
 112              		.cfi_offset 14, -4
 113 0002 0446     		mov	r4, r0
2452:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 47


 114              		.loc 1 2452 0
 115 0004 FFF7FEFF 		bl	vPortEnterCritical
 116              	.LVL12:
2454:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 117              		.loc 1 2454 0
 118 0008 A36B     		ldr	r3, [r4, #56]
 119 000a 0BB9     		cbnz	r3, .L10
2456:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 120              		.loc 1 2456 0
 121 000c 0124     		movs	r4, #1
 122              	.LVL13:
 123 000e 00E0     		b	.L9
 124              	.LVL14:
 125              	.L10:
2460:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 126              		.loc 1 2460 0
 127 0010 0024     		movs	r4, #0
 128              	.LVL15:
 129              	.L9:
2463:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 130              		.loc 1 2463 0
 131 0012 FFF7FEFF 		bl	vPortExitCritical
 132              	.LVL16:
2466:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 133              		.loc 1 2466 0
 134 0016 2046     		mov	r0, r4
 135 0018 10BD     		pop	{r4, pc}
 136              		.cfi_endproc
 137              	.LFE92:
 138              		.size	prvIsQueueEmpty, .-prvIsQueueEmpty
 139 001a 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 140              		.align	2
 141              		.thumb
 142              		.thumb_func
 143              		.type	prvCopyDataToQueue, %function
 144              	prvCopyDataToQueue:
 145              	.LFB89:
2227:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn = pdFALSE;
 146              		.loc 1 2227 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              	.LVL17:
 151 0000 70B5     		push	{r4, r5, r6, lr}
 152              		.cfi_def_cfa_offset 16
 153              		.cfi_offset 4, -16
 154              		.cfi_offset 5, -12
 155              		.cfi_offset 6, -8
 156              		.cfi_offset 14, -4
 157 0002 0446     		mov	r4, r0
 158 0004 1646     		mov	r6, r2
 159              	.LVL18:
2233:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 160              		.loc 1 2233 0
 161 0006 856B     		ldr	r5, [r0, #56]
 162              	.LVL19:
2235:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 48


 163              		.loc 1 2235 0
 164 0008 026C     		ldr	r2, [r0, #64]
 165              	.LVL20:
 166 000a 3AB9     		cbnz	r2, .L13
2239:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 167              		.loc 1 2239 0
 168 000c 0368     		ldr	r3, [r0]
 169 000e 43BB     		cbnz	r3, .L17
2242:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
 170              		.loc 1 2242 0
 171 0010 8068     		ldr	r0, [r0, #8]
 172              	.LVL21:
 173 0012 FFF7FEFF 		bl	xTaskPriorityDisinherit
 174              	.LVL22:
2243:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 175              		.loc 1 2243 0
 176 0016 0023     		movs	r3, #0
 177 0018 A360     		str	r3, [r4, #8]
 178 001a 29E0     		b	.L14
 179              	.LVL23:
 180              	.L13:
2252:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 181              		.loc 1 2252 0
 182 001c 6EB9     		cbnz	r6, .L15
2254:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                 
 183              		.loc 1 2254 0
 184 001e 4068     		ldr	r0, [r0, #4]
 185              	.LVL24:
 186 0020 FFF7FEFF 		bl	memcpy
 187              	.LVL25:
2255:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 188              		.loc 1 2255 0
 189 0024 6268     		ldr	r2, [r4, #4]
 190 0026 236C     		ldr	r3, [r4, #64]
 191 0028 1344     		add	r3, r3, r2
 192 002a 6360     		str	r3, [r4, #4]
2257:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 193              		.loc 1 2257 0
 194 002c A268     		ldr	r2, [r4, #8]
 195 002e 9342     		cmp	r3, r2
 196 0030 19D3     		bcc	.L18
2259:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 197              		.loc 1 2259 0
 198 0032 2368     		ldr	r3, [r4]
 199 0034 6360     		str	r3, [r4, #4]
2228:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxMessagesWaiting;
 200              		.loc 1 2228 0
 201 0036 0020     		movs	r0, #0
 202 0038 1AE0     		b	.L14
 203              	.LVL26:
 204              	.L15:
2268:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 205              		.loc 1 2268 0
 206 003a C068     		ldr	r0, [r0, #12]
 207              	.LVL27:
 208 003c FFF7FEFF 		bl	memcpy
 209              	.LVL28:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 49


2269:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 210              		.loc 1 2269 0
 211 0040 236C     		ldr	r3, [r4, #64]
 212 0042 5B42     		negs	r3, r3
 213 0044 E268     		ldr	r2, [r4, #12]
 214 0046 1A44     		add	r2, r2, r3
 215 0048 E260     		str	r2, [r4, #12]
2271:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 216              		.loc 1 2271 0
 217 004a 2168     		ldr	r1, [r4]
 218 004c 8A42     		cmp	r2, r1
 219 004e 02D2     		bcs	.L16
2273:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 220              		.loc 1 2273 0
 221 0050 A268     		ldr	r2, [r4, #8]
 222 0052 1344     		add	r3, r3, r2
 223 0054 E360     		str	r3, [r4, #12]
 224              	.L16:
2280:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 225              		.loc 1 2280 0
 226 0056 022E     		cmp	r6, #2
 227 0058 07D1     		bne	.L19
2282:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 228              		.loc 1 2282 0
 229 005a 45B1     		cbz	r5, .L20
2288:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 230              		.loc 1 2288 0
 231 005c 013D     		subs	r5, r5, #1
 232              	.LVL29:
2228:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxMessagesWaiting;
 233              		.loc 1 2228 0
 234 005e 0020     		movs	r0, #0
 235 0060 06E0     		b	.L14
 236              	.LVL30:
 237              	.L17:
 238 0062 0020     		movs	r0, #0
 239              	.LVL31:
 240 0064 04E0     		b	.L14
 241              	.LVL32:
 242              	.L18:
 243 0066 0020     		movs	r0, #0
 244 0068 02E0     		b	.L14
 245              	.L19:
 246 006a 0020     		movs	r0, #0
 247 006c 00E0     		b	.L14
 248              	.L20:
 249 006e 0020     		movs	r0, #0
 250              	.LVL33:
 251              	.L14:
2301:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 252              		.loc 1 2301 0
 253 0070 0135     		adds	r5, r5, #1
 254              	.LVL34:
 255 0072 A563     		str	r5, [r4, #56]
2304:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 256              		.loc 1 2304 0
 257 0074 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 50


 258              		.cfi_endproc
 259              	.LFE89:
 260              		.size	prvCopyDataToQueue, .-prvCopyDataToQueue
 261 0076 00BF     		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 262              		.align	2
 263              		.thumb
 264              		.thumb_func
 265              		.type	prvCopyDataFromQueue, %function
 266              	prvCopyDataFromQueue:
 267              	.LFB90:
2309:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 268              		.loc 1 2309 0
 269              		.cfi_startproc
 270              		@ args = 0, pretend = 0, frame = 0
 271              		@ frame_needed = 0, uses_anonymous_args = 0
 272              	.LVL35:
2310:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 273              		.loc 1 2310 0
 274 0000 026C     		ldr	r2, [r0, #64]
 275 0002 72B1     		cbz	r2, .L26
2309:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 276              		.loc 1 2309 0
 277 0004 10B5     		push	{r4, lr}
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 4, -8
 280              		.cfi_offset 14, -4
2312:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 281              		.loc 1 2312 0
 282 0006 C368     		ldr	r3, [r0, #12]
 283 0008 1344     		add	r3, r3, r2
 284 000a C360     		str	r3, [r0, #12]
2314:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 285              		.loc 1 2314 0
 286 000c 8468     		ldr	r4, [r0, #8]
 287 000e A342     		cmp	r3, r4
 288 0010 01D3     		bcc	.L24
2316:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 289              		.loc 1 2316 0
 290 0012 0368     		ldr	r3, [r0]
 291 0014 C360     		str	r3, [r0, #12]
 292              	.L24:
 293 0016 0C46     		mov	r4, r1
2323:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 294              		.loc 1 2323 0
 295 0018 C168     		ldr	r1, [r0, #12]
 296              	.LVL36:
 297 001a 2046     		mov	r0, r4
 298              	.LVL37:
 299 001c FFF7FEFF 		bl	memcpy
 300              	.LVL38:
 301 0020 10BD     		pop	{r4, pc}
 302              	.LVL39:
 303              	.L26:
 304              		.cfi_def_cfa_offset 0
 305              		.cfi_restore 4
 306              		.cfi_restore 14
 307 0022 7047     		bx	lr
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 51


 308              		.cfi_endproc
 309              	.LFE90:
 310              		.size	prvCopyDataFromQueue, .-prvCopyDataFromQueue
 311              		.section	.text.prvUnlockQueue,"ax",%progbits
 312              		.align	2
 313              		.thumb
 314              		.thumb_func
 315              		.type	prvUnlockQueue, %function
 316              	prvUnlockQueue:
 317              	.LFB91:
2329:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 318              		.loc 1 2329 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              	.LVL40:
 323 0000 38B5     		push	{r3, r4, r5, lr}
 324              		.cfi_def_cfa_offset 16
 325              		.cfi_offset 3, -16
 326              		.cfi_offset 4, -12
 327              		.cfi_offset 5, -8
 328              		.cfi_offset 14, -4
 329 0002 0546     		mov	r5, r0
2336:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 330              		.loc 1 2336 0
 331 0004 FFF7FEFF 		bl	vPortEnterCritical
 332              	.LVL41:
 333              	.LBB26:
2338:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 334              		.loc 1 2338 0
 335 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 336 000c 64B2     		sxtb	r4, r4
 337              	.LVL42:
2341:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 338              		.loc 1 2341 0
 339 000e 0AE0     		b	.L28
 340              	.L31:
2389:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 341              		.loc 1 2389 0
 342 0010 6B6A     		ldr	r3, [r5, #36]
 343 0012 53B1     		cbz	r3, .L29
2391:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 344              		.loc 1 2391 0
 345 0014 05F12400 		add	r0, r5, #36
 346 0018 FFF7FEFF 		bl	xTaskRemoveFromEventList
 347              	.LVL43:
 348 001c 08B1     		cbz	r0, .L30
2395:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
 349              		.loc 1 2395 0
 350 001e FFF7FEFF 		bl	vTaskMissedYield
 351              	.LVL44:
 352              	.L30:
2409:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 353              		.loc 1 2409 0
 354 0022 013C     		subs	r4, r4, #1
 355              	.LVL45:
 356 0024 64B2     		sxtb	r4, r4
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 52


 357              	.LVL46:
 358              	.L28:
2341:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 359              		.loc 1 2341 0
 360 0026 002C     		cmp	r4, #0
 361 0028 F2DC     		bgt	.L31
 362              	.L29:
2412:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 363              		.loc 1 2412 0
 364 002a FF23     		movs	r3, #255
 365 002c 85F84530 		strb	r3, [r5, #69]
 366              	.LBE26:
2414:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 367              		.loc 1 2414 0
 368 0030 FFF7FEFF 		bl	vPortExitCritical
 369              	.LVL47:
2417:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 370              		.loc 1 2417 0
 371 0034 FFF7FEFF 		bl	vPortEnterCritical
 372              	.LVL48:
 373              	.LBB27:
2419:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 374              		.loc 1 2419 0
 375 0038 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 376              	.LVL49:
 377 003c 64B2     		sxtb	r4, r4
 378              	.LVL50:
2421:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 379              		.loc 1 2421 0
 380 003e 0AE0     		b	.L32
 381              	.L35:
2423:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 382              		.loc 1 2423 0
 383 0040 2B69     		ldr	r3, [r5, #16]
 384 0042 53B1     		cbz	r3, .L33
2425:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 385              		.loc 1 2425 0
 386 0044 05F11000 		add	r0, r5, #16
 387 0048 FFF7FEFF 		bl	xTaskRemoveFromEventList
 388              	.LVL51:
 389 004c 08B1     		cbz	r0, .L34
2427:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 390              		.loc 1 2427 0
 391 004e FFF7FEFF 		bl	vTaskMissedYield
 392              	.LVL52:
 393              	.L34:
2434:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 394              		.loc 1 2434 0
 395 0052 013C     		subs	r4, r4, #1
 396              	.LVL53:
 397 0054 64B2     		sxtb	r4, r4
 398              	.LVL54:
 399              	.L32:
2421:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 400              		.loc 1 2421 0
 401 0056 002C     		cmp	r4, #0
 402 0058 F2DC     		bgt	.L35
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 53


 403              	.L33:
2442:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 404              		.loc 1 2442 0
 405 005a FF23     		movs	r3, #255
 406 005c 85F84430 		strb	r3, [r5, #68]
 407              	.LBE27:
2444:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** }
 408              		.loc 1 2444 0
 409 0060 FFF7FEFF 		bl	vPortExitCritical
 410              	.LVL55:
 411 0064 38BD     		pop	{r3, r4, r5, pc}
 412              		.cfi_endproc
 413              	.LFE91:
 414              		.size	prvUnlockQueue, .-prvUnlockQueue
 415 0066 00BF     		.section	.text.xQueueGenericReset,"ax",%progbits
 416              		.align	2
 417              		.global	xQueueGenericReset
 418              		.thumb
 419              		.thumb_func
 420              		.type	xQueueGenericReset, %function
 421              	xQueueGenericReset:
 422              	.LFB68:
 298:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn = pdPASS;
 423              		.loc 1 298 0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427              	.LVL56:
 304:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 428              		.loc 1 304 0
 429 0000 0028     		cmp	r0, #0
 430 0002 3ED0     		beq	.L41
 298:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn = pdPASS;
 431              		.loc 1 298 0 discriminator 1
 432 0004 38B5     		push	{r3, r4, r5, lr}
 433              		.cfi_def_cfa_offset 16
 434              		.cfi_offset 3, -16
 435              		.cfi_offset 4, -12
 436              		.cfi_offset 5, -8
 437              		.cfi_offset 14, -4
 438 0006 0346     		mov	r3, r0
 305:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Check for multiplication overflow. */
 439              		.loc 1 305 0 discriminator 1
 440 0008 C26B     		ldr	r2, [r0, #60]
 304:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         ( pxQueue->uxLength >= 1U ) &&
 441              		.loc 1 304 0 discriminator 1
 442 000a 002A     		cmp	r2, #0
 443 000c 3BD0     		beq	.L42
 307:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 444              		.loc 1 307 0
 445 000e 4FF0FF30 		mov	r0, #-1
 446              	.LVL57:
 447 0012 B0FBF2F2 		udiv	r2, r0, r2
 448 0016 186C     		ldr	r0, [r3, #64]
 305:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Check for multiplication overflow. */
 449              		.loc 1 305 0
 450 0018 8242     		cmp	r2, r0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 54


 451 001a 36D3     		bcc	.L43
 452 001c 1C46     		mov	r4, r3
 453 001e 0D46     		mov	r5, r1
 309:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 454              		.loc 1 309 0
 455 0020 FFF7FEFF 		bl	vPortEnterCritical
 456              	.LVL58:
 311:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 457              		.loc 1 311 0
 458 0024 2168     		ldr	r1, [r4]
 459 0026 E26B     		ldr	r2, [r4, #60]
 460 0028 236C     		ldr	r3, [r4, #64]
 461 002a 03FB0210 		mla	r0, r3, r2, r1
 462 002e A060     		str	r0, [r4, #8]
 312:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->pcWriteTo = pxQueue->pcHead;
 463              		.loc 1 312 0
 464 0030 0020     		movs	r0, #0
 465 0032 A063     		str	r0, [r4, #56]
 313:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue
 466              		.loc 1 313 0
 467 0034 6160     		str	r1, [r4, #4]
 314:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->cRxLock = queueUNLOCKED;
 468              		.loc 1 314 0
 469 0036 013A     		subs	r2, r2, #1
 470 0038 02FB0313 		mla	r3, r2, r3, r1
 471 003c E360     		str	r3, [r4, #12]
 315:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->cTxLock = queueUNLOCKED;
 472              		.loc 1 315 0
 473 003e FF23     		movs	r3, #255
 474 0040 84F84430 		strb	r3, [r4, #68]
 316:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 475              		.loc 1 316 0
 476 0044 84F84530 		strb	r3, [r4, #69]
 318:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 477              		.loc 1 318 0
 478 0048 7DB9     		cbnz	r5, .L39
 325:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 479              		.loc 1 325 0
 480 004a 2369     		ldr	r3, [r4, #16]
 481 004c ABB1     		cbz	r3, .L40
 327:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 482              		.loc 1 327 0
 483 004e 04F11000 		add	r0, r4, #16
 484 0052 FFF7FEFF 		bl	xTaskRemoveFromEventList
 485              	.LVL59:
 486 0056 80B1     		cbz	r0, .L40
 329:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
 487              		.loc 1 329 0
 488 0058 4FF08052 		mov	r2, #268435456
 489 005c 0C4B     		ldr	r3, .L45
 490 005e 1A60     		str	r2, [r3]
 491              		.syntax unified
 492              	@ 329 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 493 0060 BFF34F8F 		dsb
 494              	@ 0 "" 2
 495              	@ 329 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 496 0064 BFF36F8F 		isb
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 55


 497              	@ 0 "" 2
 498              		.thumb
 499              		.syntax unified
 500 0068 07E0     		b	.L40
 501              	.L39:
 344:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 502              		.loc 1 344 0
 503 006a 04F11000 		add	r0, r4, #16
 504 006e FFF7FEFF 		bl	vListInitialise
 505              	.LVL60:
 345:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 506              		.loc 1 345 0
 507 0072 04F12400 		add	r0, r4, #36
 508 0076 FFF7FEFF 		bl	vListInitialise
 509              	.LVL61:
 510              	.L40:
 348:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 511              		.loc 1 348 0
 512 007a FFF7FEFF 		bl	vPortExitCritical
 513              	.LVL62:
 299:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 514              		.loc 1 299 0
 515 007e 0120     		movs	r0, #1
 348:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 516              		.loc 1 348 0
 517 0080 38BD     		pop	{r3, r4, r5, pc}
 518              	.LVL63:
 519              	.L41:
 520              		.cfi_def_cfa_offset 0
 521              		.cfi_restore 3
 522              		.cfi_restore 4
 523              		.cfi_restore 5
 524              		.cfi_restore 14
 352:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 525              		.loc 1 352 0
 526 0082 0020     		movs	r0, #0
 527              	.LVL64:
 360:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 528              		.loc 1 360 0
 529 0084 7047     		bx	lr
 530              	.LVL65:
 531              	.L42:
 532              		.cfi_def_cfa_offset 16
 533              		.cfi_offset 3, -16
 534              		.cfi_offset 4, -12
 535              		.cfi_offset 5, -8
 536              		.cfi_offset 14, -4
 352:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 537              		.loc 1 352 0
 538 0086 0020     		movs	r0, #0
 539              	.LVL66:
 540 0088 38BD     		pop	{r3, r4, r5, pc}
 541              	.LVL67:
 542              	.L43:
 543 008a 0020     		movs	r0, #0
 544              	.LVL68:
 360:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 56


 545              		.loc 1 360 0
 546 008c 38BD     		pop	{r3, r4, r5, pc}
 547              	.LVL69:
 548              	.L46:
 549 008e 00BF     		.align	2
 550              	.L45:
 551 0090 04ED00E0 		.word	-536810236
 552              		.cfi_endproc
 553              	.LFE68:
 554              		.size	xQueueGenericReset, .-xQueueGenericReset
 555              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 556              		.align	2
 557              		.thumb
 558              		.thumb_func
 559              		.type	prvInitialiseNewQueue, %function
 560              	prvInitialiseNewQueue:
 561              	.LFB70:
 548:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     /* Remove compiler warnings about unused parameters should
 562              		.loc 1 548 0
 563              		.cfi_startproc
 564              		@ args = 4, pretend = 0, frame = 0
 565              		@ frame_needed = 0, uses_anonymous_args = 0
 566              	.LVL70:
 567 0000 10B5     		push	{r4, lr}
 568              		.cfi_def_cfa_offset 8
 569              		.cfi_offset 4, -8
 570              		.cfi_offset 14, -4
 571 0002 029B     		ldr	r3, [sp, #8]
 572              	.LVL71:
 553:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 573              		.loc 1 553 0
 574 0004 0C46     		mov	r4, r1
 575 0006 09B9     		cbnz	r1, .L48
 559:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 576              		.loc 1 559 0
 577 0008 1B60     		str	r3, [r3]
 578 000a 00E0     		b	.L49
 579              	.L48:
 564:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 580              		.loc 1 564 0
 581 000c 1A60     		str	r2, [r3]
 582              	.L49:
 569:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     pxNewQueue->uxItemSize = uxItemSize;
 583              		.loc 1 569 0
 584 000e D863     		str	r0, [r3, #60]
 570:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 585              		.loc 1 570 0
 586 0010 1C64     		str	r4, [r3, #64]
 571:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 587              		.loc 1 571 0
 588 0012 0121     		movs	r1, #1
 589              	.LVL72:
 590 0014 1846     		mov	r0, r3
 591              	.LVL73:
 592 0016 FFF7FEFF 		bl	xQueueGenericReset
 593              	.LVL74:
 594 001a 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 57


 595              		.cfi_endproc
 596              	.LFE70:
 597              		.size	prvInitialiseNewQueue, .-prvInitialiseNewQueue
 598              		.section	.text.xQueueGenericCreate,"ax",%progbits
 599              		.align	2
 600              		.global	xQueueGenericCreate
 601              		.thumb
 602              		.thumb_func
 603              		.type	xQueueGenericCreate, %function
 604              	xQueueGenericCreate:
 605              	.LFB69:
 480:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         Queue_t * pxNewQueue = NULL;
 606              		.loc 1 480 0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 0
 609              		@ frame_needed = 0, uses_anonymous_args = 0
 610              	.LVL75:
 611 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 612              		.cfi_def_cfa_offset 20
 613              		.cfi_offset 4, -20
 614              		.cfi_offset 5, -16
 615              		.cfi_offset 6, -12
 616              		.cfi_offset 7, -8
 617              		.cfi_offset 14, -4
 618 0002 83B0     		sub	sp, sp, #12
 619              		.cfi_def_cfa_offset 32
 620              	.LVL76:
 485:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Check for multiplication overflow. */
 621              		.loc 1 485 0
 622 0004 D8B1     		cbz	r0, .L53
 623 0006 0446     		mov	r4, r0
 487:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Check for addition overflow. */
 624              		.loc 1 487 0 discriminator 1
 625 0008 4FF0FF30 		mov	r0, #-1
 626              	.LVL77:
 627 000c B0FBF4F0 		udiv	r0, r0, r4
 485:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Check for multiplication overflow. */
 628              		.loc 1 485 0 discriminator 1
 629 0010 8842     		cmp	r0, r1
 630 0012 16D3     		bcc	.L54
 489:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 631              		.loc 1 489 0
 632 0014 01FB04F0 		mul	r0, r1, r4
 487:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Check for addition overflow. */
 633              		.loc 1 487 0
 634 0018 10F1490F 		cmn	r0, #73
 635 001c 13D8     		bhi	.L55
 636 001e 1746     		mov	r7, r2
 637 0020 0D46     		mov	r5, r1
 638              	.LVL78:
 505:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 639              		.loc 1 505 0
 640 0022 4830     		adds	r0, r0, #72
 641              	.LVL79:
 642 0024 FFF7FEFF 		bl	pvPortMalloc
 643              	.LVL80:
 507:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 58


 644              		.loc 1 507 0
 645 0028 0646     		mov	r6, r0
 646 002a 68B1     		cbz	r0, .L52
 647              	.LVL81:
 523:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 648              		.loc 1 523 0
 649 002c 0090     		str	r0, [sp]
 650 002e 3B46     		mov	r3, r7
 651 0030 00F14802 		add	r2, r0, #72
 652              	.LVL82:
 653 0034 2946     		mov	r1, r5
 654 0036 2046     		mov	r0, r4
 655              	.LVL83:
 656 0038 FFF7FEFF 		bl	prvInitialiseNewQueue
 657              	.LVL84:
 658 003c 04E0     		b	.L52
 659              	.LVL85:
 660              	.L53:
 481:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         size_t xQueueSizeInBytes;
 661              		.loc 1 481 0
 662 003e 0026     		movs	r6, #0
 663 0040 02E0     		b	.L52
 664              	.LVL86:
 665              	.L54:
 666 0042 0026     		movs	r6, #0
 667 0044 00E0     		b	.L52
 668              	.L55:
 669 0046 0026     		movs	r6, #0
 670              	.LVL87:
 671              	.L52:
 538:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 672              		.loc 1 538 0
 673 0048 3046     		mov	r0, r6
 674 004a 03B0     		add	sp, sp, #12
 675              		.cfi_def_cfa_offset 20
 676              		@ sp needed
 677 004c F0BD     		pop	{r4, r5, r6, r7, pc}
 678              		.cfi_endproc
 679              	.LFE69:
 680              		.size	xQueueGenericCreate, .-xQueueGenericCreate
 681 004e 00BF     		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 682              		.align	2
 683              		.global	xQueueCreateCountingSemaphore
 684              		.thumb
 685              		.thumb_func
 686              		.type	xQueueCreateCountingSemaphore, %function
 687              	xQueueCreateCountingSemaphore:
 688              	.LFB75:
 853:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         QueueHandle_t xHandle = NULL;
 689              		.loc 1 853 0
 690              		.cfi_startproc
 691              		@ args = 0, pretend = 0, frame = 0
 692              		@ frame_needed = 0, uses_anonymous_args = 0
 693              	.LVL88:
 856:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 694              		.loc 1 856 0
 695 0000 58B1     		cbz	r0, .L59
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 59


 856:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( uxInitialCount <= uxMaxCount ) )
 696              		.loc 1 856 0 is_stmt 0 discriminator 1
 697 0002 8842     		cmp	r0, r1
 698 0004 0BD3     		bcc	.L60
 853:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         QueueHandle_t xHandle = NULL;
 699              		.loc 1 853 0 is_stmt 1
 700 0006 10B5     		push	{r4, lr}
 701              		.cfi_def_cfa_offset 8
 702              		.cfi_offset 4, -8
 703              		.cfi_offset 14, -4
 704 0008 0C46     		mov	r4, r1
 859:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 705              		.loc 1 859 0
 706 000a 0222     		movs	r2, #2
 707 000c 0021     		movs	r1, #0
 708              	.LVL89:
 709 000e FFF7FEFF 		bl	xQueueGenericCreate
 710              	.LVL90:
 861:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 711              		.loc 1 861 0
 712 0012 0346     		mov	r3, r0
 713 0014 30B1     		cbz	r0, .L58
 863:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 714              		.loc 1 863 0
 715 0016 8463     		str	r4, [r0, #56]
 716 0018 04E0     		b	.L58
 717              	.LVL91:
 718              	.L59:
 719              		.cfi_def_cfa_offset 0
 720              		.cfi_restore 4
 721              		.cfi_restore 14
 854:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 722              		.loc 1 854 0
 723 001a 0023     		movs	r3, #0
 724 001c 00E0     		b	.L62
 725              	.L60:
 726 001e 0023     		movs	r3, #0
 727              	.L62:
 728              	.LVL92:
 879:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 729              		.loc 1 879 0
 730 0020 1846     		mov	r0, r3
 731              	.LVL93:
 732 0022 7047     		bx	lr
 733              	.LVL94:
 734              	.L58:
 735              		.cfi_def_cfa_offset 8
 736              		.cfi_offset 4, -8
 737              		.cfi_offset 14, -4
 738 0024 1846     		mov	r0, r3
 739 0026 10BD     		pop	{r4, pc}
 740              		.cfi_endproc
 741              	.LFE75:
 742              		.size	xQueueCreateCountingSemaphore, .-xQueueCreateCountingSemaphore
 743              		.section	.text.xQueueGenericSend,"ax",%progbits
 744              		.align	2
 745              		.global	xQueueGenericSend
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 60


 746              		.thumb
 747              		.thumb_func
 748              		.type	xQueueGenericSend, %function
 749              	xQueueGenericSend:
 750              	.LFB76:
 888:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 751              		.loc 1 888 0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 16
 754              		@ frame_needed = 0, uses_anonymous_args = 0
 755              	.LVL95:
 756 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 757              		.cfi_def_cfa_offset 20
 758              		.cfi_offset 4, -20
 759              		.cfi_offset 5, -16
 760              		.cfi_offset 6, -12
 761              		.cfi_offset 7, -8
 762              		.cfi_offset 14, -4
 763 0002 85B0     		sub	sp, sp, #20
 764              		.cfi_def_cfa_offset 40
 765 0004 0446     		mov	r4, r0
 766 0006 0F46     		mov	r7, r1
 767 0008 0192     		str	r2, [sp, #4]
 768 000a 1E46     		mov	r6, r3
 769              	.LVL96:
 889:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
 770              		.loc 1 889 0
 771 000c 0025     		movs	r5, #0
 772              	.LVL97:
 773              	.L64:
 907:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 774              		.loc 1 907 0
 775 000e FFF7FEFF 		bl	vPortEnterCritical
 776              	.LVL98:
 913:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 777              		.loc 1 913 0
 778 0012 A26B     		ldr	r2, [r4, #56]
 779 0014 E36B     		ldr	r3, [r4, #60]
 780 0016 9A42     		cmp	r2, r3
 781 0018 01D3     		bcc	.L65
 913:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 782              		.loc 1 913 0 is_stmt 0 discriminator 1
 783 001a 022E     		cmp	r6, #2
 784 001c 21D1     		bne	.L66
 785              	.L65:
 979:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 786              		.loc 1 979 0 is_stmt 1
 787 001e 3246     		mov	r2, r6
 788 0020 3946     		mov	r1, r7
 789 0022 2046     		mov	r0, r4
 790 0024 FFF7FEFF 		bl	prvCopyDataToQueue
 791              	.LVL99:
 983:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 792              		.loc 1 983 0
 793 0028 636A     		ldr	r3, [r4, #36]
 794 002a 6BB1     		cbz	r3, .L67
 985:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 61


 795              		.loc 1 985 0
 796 002c 04F12400 		add	r0, r4, #36
 797              	.LVL100:
 798 0030 FFF7FEFF 		bl	xTaskRemoveFromEventList
 799              	.LVL101:
 800 0034 88B1     		cbz	r0, .L68
 991:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
 801              		.loc 1 991 0
 802 0036 4FF08052 		mov	r2, #268435456
 803 003a 324B     		ldr	r3, .L78
 804 003c 1A60     		str	r2, [r3]
 805              		.syntax unified
 806              	@ 991 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 807 003e BFF34F8F 		dsb
 808              	@ 0 "" 2
 809              	@ 991 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 810 0042 BFF36F8F 		isb
 811              	@ 0 "" 2
 812              		.thumb
 813              		.syntax unified
 814 0046 08E0     		b	.L68
 815              	.LVL102:
 816              	.L67:
 998:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 817              		.loc 1 998 0
 818 0048 38B1     		cbz	r0, .L68
1004:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
 819              		.loc 1 1004 0
 820 004a 4FF08052 		mov	r2, #268435456
 821 004e 2D4B     		ldr	r3, .L78
 822 0050 1A60     		str	r2, [r3]
 823              		.syntax unified
 824              	@ 1004 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 825 0052 BFF34F8F 		dsb
 826              	@ 0 "" 2
 827              	@ 1004 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 828 0056 BFF36F8F 		isb
 829              	@ 0 "" 2
 830              	.LVL103:
 831              		.thumb
 832              		.syntax unified
 833              	.L68:
1013:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 return pdPASS;
 834              		.loc 1 1013 0
 835 005a FFF7FEFF 		bl	vPortExitCritical
 836              	.LVL104:
1014:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 837              		.loc 1 1014 0
 838 005e 0120     		movs	r0, #1
 839 0060 4EE0     		b	.L69
 840              	.L66:
1018:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 841              		.loc 1 1018 0
 842 0062 019B     		ldr	r3, [sp, #4]
 843 0064 1BB9     		cbnz	r3, .L70
1022:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 844              		.loc 1 1022 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 62


 845 0066 FFF7FEFF 		bl	vPortExitCritical
 846              	.LVL105:
1027:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 847              		.loc 1 1027 0
 848 006a 0020     		movs	r0, #0
 849 006c 48E0     		b	.L69
 850              	.L70:
1029:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 851              		.loc 1 1029 0
 852 006e 1DB9     		cbnz	r5, .L71
1033:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
 853              		.loc 1 1033 0
 854 0070 02A8     		add	r0, sp, #8
 855 0072 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 856              	.LVL106:
1034:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 857              		.loc 1 1034 0
 858 0076 0125     		movs	r5, #1
 859              	.LVL107:
 860              	.L71:
1043:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 861              		.loc 1 1043 0
 862 0078 FFF7FEFF 		bl	vPortExitCritical
 863              	.LVL108:
1048:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
 864              		.loc 1 1048 0
 865 007c FFF7FEFF 		bl	vTaskSuspendAll
 866              	.LVL109:
1049:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 867              		.loc 1 1049 0
 868 0080 FFF7FEFF 		bl	vPortEnterCritical
 869              	.LVL110:
 870 0084 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 871 0088 5BB2     		sxtb	r3, r3
 872 008a B3F1FF3F 		cmp	r3, #-1
 873 008e 02D1     		bne	.L72
1049:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 874              		.loc 1 1049 0 is_stmt 0 discriminator 1
 875 0090 0023     		movs	r3, #0
 876 0092 84F84430 		strb	r3, [r4, #68]
 877              	.L72:
1049:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 878              		.loc 1 1049 0 discriminator 3
 879 0096 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 880 009a 5BB2     		sxtb	r3, r3
 881 009c B3F1FF3F 		cmp	r3, #-1
 882 00a0 02D1     		bne	.L73
1049:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 883              		.loc 1 1049 0 discriminator 4
 884 00a2 0023     		movs	r3, #0
 885 00a4 84F84530 		strb	r3, [r4, #69]
 886              	.L73:
1049:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 887              		.loc 1 1049 0 discriminator 6
 888 00a8 FFF7FEFF 		bl	vPortExitCritical
 889              	.LVL111:
1052:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 63


 890              		.loc 1 1052 0 is_stmt 1 discriminator 6
 891 00ac 01A9     		add	r1, sp, #4
 892              	.LVL112:
 893 00ae 02A8     		add	r0, sp, #8
 894 00b0 FFF7FEFF 		bl	xTaskCheckForTimeOut
 895              	.LVL113:
 896 00b4 F0B9     		cbnz	r0, .L74
1054:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 897              		.loc 1 1054 0
 898 00b6 2046     		mov	r0, r4
 899 00b8 FFF7FEFF 		bl	prvIsQueueFull
 900              	.LVL114:
 901 00bc A0B1     		cbz	r0, .L75
1057:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 902              		.loc 1 1057 0
 903 00be 0199     		ldr	r1, [sp, #4]
 904 00c0 04F11000 		add	r0, r4, #16
 905 00c4 FFF7FEFF 		bl	vTaskPlaceOnEventList
 906              	.LVL115:
1064:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 907              		.loc 1 1064 0
 908 00c8 2046     		mov	r0, r4
 909 00ca FFF7FEFF 		bl	prvUnlockQueue
 910              	.LVL116:
1071:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 911              		.loc 1 1071 0
 912 00ce FFF7FEFF 		bl	xTaskResumeAll
 913              	.LVL117:
 914 00d2 0028     		cmp	r0, #0
 915 00d4 9BD1     		bne	.L64
1073:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 916              		.loc 1 1073 0
 917 00d6 4FF08052 		mov	r2, #268435456
 918 00da 0A4B     		ldr	r3, .L78
 919 00dc 1A60     		str	r2, [r3]
 920              		.syntax unified
 921              	@ 1073 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 922 00de BFF34F8F 		dsb
 923              	@ 0 "" 2
 924              	@ 1073 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 925 00e2 BFF36F8F 		isb
 926              	@ 0 "" 2
 927              		.thumb
 928              		.syntax unified
 929 00e6 92E7     		b	.L64
 930              	.L75:
1079:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
 931              		.loc 1 1079 0
 932 00e8 2046     		mov	r0, r4
 933 00ea FFF7FEFF 		bl	prvUnlockQueue
 934              	.LVL118:
1080:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 935              		.loc 1 1080 0
 936 00ee FFF7FEFF 		bl	xTaskResumeAll
 937              	.LVL119:
 938 00f2 8CE7     		b	.L64
 939              	.L74:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 64


1086:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
 940              		.loc 1 1086 0
 941 00f4 2046     		mov	r0, r4
 942 00f6 FFF7FEFF 		bl	prvUnlockQueue
 943              	.LVL120:
1087:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 944              		.loc 1 1087 0
 945 00fa FFF7FEFF 		bl	xTaskResumeAll
 946              	.LVL121:
1090:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 947              		.loc 1 1090 0
 948 00fe 0020     		movs	r0, #0
 949              	.L69:
1093:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 950              		.loc 1 1093 0
 951 0100 05B0     		add	sp, sp, #20
 952              		.cfi_def_cfa_offset 20
 953              		@ sp needed
 954 0102 F0BD     		pop	{r4, r5, r6, r7, pc}
 955              	.LVL122:
 956              	.L79:
 957              		.align	2
 958              	.L78:
 959 0104 04ED00E0 		.word	-536810236
 960              		.cfi_endproc
 961              	.LFE76:
 962              		.size	xQueueGenericSend, .-xQueueGenericSend
 963              		.section	.text.prvInitialiseMutex,"ax",%progbits
 964              		.align	2
 965              		.thumb
 966              		.thumb_func
 967              		.type	prvInitialiseMutex, %function
 968              	prvInitialiseMutex:
 969              	.LFB71:
 592:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pxNewQueue != NULL )
 970              		.loc 1 592 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 974              	.LVL123:
 593:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 975              		.loc 1 593 0
 976 0000 48B1     		cbz	r0, .L83
 592:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pxNewQueue != NULL )
 977              		.loc 1 592 0
 978 0002 08B5     		push	{r3, lr}
 979              		.cfi_def_cfa_offset 8
 980              		.cfi_offset 3, -8
 981              		.cfi_offset 14, -4
 599:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 982              		.loc 1 599 0
 983 0004 0021     		movs	r1, #0
 984 0006 8160     		str	r1, [r0, #8]
 600:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 985              		.loc 1 600 0
 986 0008 0160     		str	r1, [r0]
 603:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 65


 987              		.loc 1 603 0
 988 000a C160     		str	r1, [r0, #12]
 608:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 989              		.loc 1 608 0
 990 000c 0B46     		mov	r3, r1
 991 000e 0A46     		mov	r2, r1
 992 0010 FFF7FEFF 		bl	xQueueGenericSend
 993              	.LVL124:
 994 0014 08BD     		pop	{r3, pc}
 995              	.LVL125:
 996              	.L83:
 997              		.cfi_def_cfa_offset 0
 998              		.cfi_restore 3
 999              		.cfi_restore 14
 1000 0016 7047     		bx	lr
 1001              		.cfi_endproc
 1002              	.LFE71:
 1003              		.size	prvInitialiseMutex, .-prvInitialiseMutex
 1004              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1005              		.align	2
 1006              		.global	xQueueCreateMutex
 1007              		.thumb
 1008              		.thumb_func
 1009              		.type	xQueueCreateMutex, %function
 1010              	xQueueCreateMutex:
 1011              	.LFB72:
 622:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         QueueHandle_t xNewQueue;
 1012              		.loc 1 622 0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 0
 1015              		@ frame_needed = 0, uses_anonymous_args = 0
 1016              	.LVL126:
 1017 0000 10B5     		push	{r4, lr}
 1018              		.cfi_def_cfa_offset 8
 1019              		.cfi_offset 4, -8
 1020              		.cfi_offset 14, -4
 1021              	.LVL127:
 626:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1022              		.loc 1 626 0
 1023 0002 0246     		mov	r2, r0
 1024 0004 0021     		movs	r1, #0
 1025 0006 0120     		movs	r0, #1
 1026              	.LVL128:
 1027 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1028              	.LVL129:
 1029 000c 0446     		mov	r4, r0
 1030              	.LVL130:
 627:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1031              		.loc 1 627 0
 1032 000e FFF7FEFF 		bl	prvInitialiseMutex
 1033              	.LVL131:
 630:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1034              		.loc 1 630 0
 1035 0012 2046     		mov	r0, r4
 1036 0014 10BD     		pop	{r4, pc}
 1037              		.cfi_endproc
 1038              	.LFE72:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 66


 1039              		.size	xQueueCreateMutex, .-xQueueCreateMutex
 1040 0016 00BF     		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 1041              		.align	2
 1042              		.global	xQueueGiveMutexRecursive
 1043              		.thumb
 1044              		.thumb_func
 1045              		.type	xQueueGiveMutexRecursive, %function
 1046              	xQueueGiveMutexRecursive:
 1047              	.LFB73:
 718:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
 1048              		.loc 1 718 0
 1049              		.cfi_startproc
 1050              		@ args = 0, pretend = 0, frame = 0
 1051              		@ frame_needed = 0, uses_anonymous_args = 0
 1052              	.LVL132:
 1053 0000 38B5     		push	{r3, r4, r5, lr}
 1054              		.cfi_def_cfa_offset 16
 1055              		.cfi_offset 3, -16
 1056              		.cfi_offset 4, -12
 1057              		.cfi_offset 5, -8
 1058              		.cfi_offset 14, -4
 1059 0002 0446     		mov	r4, r0
 1060              	.LVL133:
 730:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 1061              		.loc 1 730 0
 1062 0004 8568     		ldr	r5, [r0, #8]
 1063 0006 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1064              	.LVL134:
 1065 000a 8542     		cmp	r5, r0
 1066 000c 0AD1     		bne	.L88
 739:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1067              		.loc 1 739 0
 1068 000e E368     		ldr	r3, [r4, #12]
 1069 0010 013B     		subs	r3, r3, #1
 1070 0012 E360     		str	r3, [r4, #12]
 742:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 1071              		.loc 1 742 0
 1072 0014 43B9     		cbnz	r3, .L89
 746:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 1073              		.loc 1 746 0
 1074 0016 1A46     		mov	r2, r3
 1075 0018 1946     		mov	r1, r3
 1076 001a 2046     		mov	r0, r4
 1077 001c FFF7FEFF 		bl	xQueueGenericSend
 1078              	.LVL135:
 753:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 1079              		.loc 1 753 0
 1080 0020 0120     		movs	r0, #1
 1081 0022 38BD     		pop	{r3, r4, r5, pc}
 1082              	.LVL136:
 1083              	.L88:
 759:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1084              		.loc 1 759 0
 1085 0024 0020     		movs	r0, #0
 1086 0026 38BD     		pop	{r3, r4, r5, pc}
 1087              	.LVL137:
 1088              	.L89:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 67


 753:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 1089              		.loc 1 753 0
 1090 0028 0120     		movs	r0, #1
 1091              	.LVL138:
 765:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1092              		.loc 1 765 0
 1093 002a 38BD     		pop	{r3, r4, r5, pc}
 1094              		.cfi_endproc
 1095              	.LFE73:
 1096              		.size	xQueueGiveMutexRecursive, .-xQueueGiveMutexRecursive
 1097              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1098              		.align	2
 1099              		.global	xQueueGenericSendFromISR
 1100              		.thumb
 1101              		.thumb_func
 1102              		.type	xQueueGenericSendFromISR, %function
 1103              	xQueueGenericSendFromISR:
 1104              	.LFB77:
1100:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 1105              		.loc 1 1100 0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 0
 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              	.LVL139:
 1110 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1111              		.cfi_def_cfa_offset 24
 1112              		.cfi_offset 3, -24
 1113              		.cfi_offset 4, -20
 1114              		.cfi_offset 5, -16
 1115              		.cfi_offset 6, -12
 1116              		.cfi_offset 7, -8
 1117              		.cfi_offset 14, -4
 1118              	.LVL140:
 1119              	.LBB28:
 1120              	.LBB29:
 1121              		.file 2 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel <DEVELOPMENT BRANCH>
   3:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
   7:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  13:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  14:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  16:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  17:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 68


  22:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  24:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * https://www.FreeRTOS.org
  25:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * https://github.com/FreeRTOS
  26:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  27:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  */
  28:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  29:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  30:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  31:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define PORTMACRO_H
  32:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  33:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* *INDENT-OFF* */
  34:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  35:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     extern "C" {
  36:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** #endif
  37:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* *INDENT-ON* */
  38:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  39:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  40:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  41:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  43:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  44:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  45:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  46:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  47:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  */
  48:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  49:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  50:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portCHAR          char
  51:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portFLOAT         float
  52:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portDOUBLE        double
  53:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portLONG          long
  54:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portSHORT         short
  55:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  56:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portBASE_TYPE     long
  57:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  58:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  59:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     typedef long             BaseType_t;
  60:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     typedef unsigned long    UBaseType_t;
  61:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  62:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS )
  63:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         typedef uint16_t     TickType_t;
  64:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  65:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_32_BITS )
  66:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         typedef uint32_t     TickType_t;
  67:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  68:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  69:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  70:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * not need to be guarded with a critical section. */
  71:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  72:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #else
  73:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #error configTICK_TYPE_WIDTH_IN_BITS set to unsupported tick type width.
  74:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif
  75:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  76:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  77:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  78:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 69


  79:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  80:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  81:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  82:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  83:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  84:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  85:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portYIELD()                                 \
  86:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     {                                                   \
  87:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  88:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  89:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****                                                         \
  90:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  91:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  92:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  93:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile ( "isb" );                                  \
  94:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     }
  95:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  96:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  97:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  98:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  99:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
 100:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 101:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 102:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
 103:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     extern void vPortEnterCritical( void );
 104:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     extern void vPortExitCritical( void );
 105:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 106:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 107:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 108:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 109:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 110:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 111:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 112:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 114:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 115:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 116:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * (which build with all the ports) will build. */
 117:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 118:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 119:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 120:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 121:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 122:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 123:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 124:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 125:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif
 126:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 127:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 128:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 129:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 130:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 131:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif
 132:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 133:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 134:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 135:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Generic helper function. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 70


 136:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 137:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         {
 138:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             uint8_t ucReturn;
 139:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 140:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 141:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 142:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             return ucReturn;
 143:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         }
 144:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 145:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Check the configuration. */
 146:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 147:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 148:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #endif
 149:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 150:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 151:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 152:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 153:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 154:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 155:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 156:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 157:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 158:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 161:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 162:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #ifdef configASSERT
 163:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         void vPortValidateInterruptPriority( void );
 164:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 165:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif
 166:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 167:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 168:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portNOP()
 169:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 170:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portINLINE              __inline
 171:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 172:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #ifndef portFORCE_INLINE
 173:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 174:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif
 175:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 176:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 177:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 178:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 179:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     {
 180:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         uint32_t ulCurrentInterrupt;
 181:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         BaseType_t xReturn;
 182:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 183:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 184:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 185:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 186:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 187:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         {
 188:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             xReturn = pdFALSE;
 189:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         }
 190:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         else
 191:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         {
 192:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             xReturn = pdTRUE;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 71


 193:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         }
 194:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 195:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         return xReturn;
 196:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     }
 197:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 198:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 199:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 200:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 201:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     {
 202:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         uint32_t ulNewBASEPRI;
 203:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 204:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile
 205:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         (
 206:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   mov %0, %1                                              \n"\
 207:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   msr basepri, %0                                         \n"\
 208:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   isb                                                     \n"\
 209:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   dsb                                                     \n"\
 210:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 211:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         );
 212:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     }
 213:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 214:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 215:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 216:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 217:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     {
 218:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 219:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 220:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile
 1122              		.loc 2 220 0
 1123              		.syntax unified
 1124              	@ 220 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 1125 0002 EFF31186 		   mrs r6, basepri                                         
 1126 0006 4FF0A004 	   mov r4, #160                                              
 1127 000a 84F31188 	   msr basepri, r4                                         
 1128 000e BFF36F8F 	   isb                                                     
 1129 0012 BFF34F8F 	   dsb                                                     
 1130              	
 1131              	@ 0 "" 2
 1132              		.thumb
 1133              		.syntax unified
 1134              	.LBE29:
 1135              	.LBE28:
1132:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 1136              		.loc 1 1132 0
 1137 0016 856B     		ldr	r5, [r0, #56]
 1138 0018 C46B     		ldr	r4, [r0, #60]
 1139 001a A542     		cmp	r5, r4
 1140 001c 01D3     		bcc	.L92
1132:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 1141              		.loc 1 1132 0 is_stmt 0 discriminator 1
 1142 001e 022B     		cmp	r3, #2
 1143 0020 20D1     		bne	.L95
 1144              	.L92:
 1145 0022 1746     		mov	r7, r2
 1146 0024 0446     		mov	r4, r0
 1147              	.LBB30:
1134:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 72


 1148              		.loc 1 1134 0 is_stmt 1
 1149 0026 90F84550 		ldrb	r5, [r0, #69]	@ zero_extendqisi2
 1150 002a 6DB2     		sxtb	r5, r5
 1151              	.LVL141:
1135:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1152              		.loc 1 1135 0
 1153 002c 826B     		ldr	r2, [r0, #56]
 1154              	.LVL142:
1144:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1155              		.loc 1 1144 0
 1156 002e 1A46     		mov	r2, r3
 1157 0030 FFF7FEFF 		bl	prvCopyDataToQueue
 1158              	.LVL143:
1148:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 1159              		.loc 1 1148 0
 1160 0034 B5F1FF3F 		cmp	r5, #-1
 1161 0038 0AD1     		bne	.L94
1210:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 1162              		.loc 1 1210 0
 1163 003a 636A     		ldr	r3, [r4, #36]
 1164 003c A3B1     		cbz	r3, .L96
1212:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
 1165              		.loc 1 1212 0
 1166 003e 04F12400 		add	r0, r4, #36
 1167 0042 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1168              	.LVL144:
 1169 0046 88B1     		cbz	r0, .L97
1216:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
 1170              		.loc 1 1216 0
 1171 0048 97B1     		cbz	r7, .L98
1218:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
 1172              		.loc 1 1218 0
 1173 004a 0120     		movs	r0, #1
 1174 004c 3860     		str	r0, [r7]
 1175 004e 12E0     		b	.L93
 1176              	.L94:
 1177              	.LBB31:
1244:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 1178              		.loc 1 1244 0
 1179 0050 FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 1180              	.LVL145:
 1181 0054 A842     		cmp	r0, r5
 1182 0056 0DD9     		bls	.L99
1244:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 1183              		.loc 1 1244 0 is_stmt 0 discriminator 1
 1184 0058 0135     		adds	r5, r5, #1
 1185              	.LVL146:
 1186 005a 6DB2     		sxtb	r5, r5
 1187              	.LVL147:
 1188 005c 84F84550 		strb	r5, [r4, #69]
 1189              	.LBE31:
1247:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 1190              		.loc 1 1247 0 is_stmt 1 discriminator 1
 1191 0060 0120     		movs	r0, #1
 1192              	.LVL148:
 1193 0062 08E0     		b	.L93
 1194              	.LVL149:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 73


 1195              	.L95:
 1196              	.LBE30:
1252:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 1197              		.loc 1 1252 0
 1198 0064 0020     		movs	r0, #0
 1199              	.LVL150:
 1200 0066 06E0     		b	.L93
 1201              	.LVL151:
 1202              	.L96:
 1203              	.LBB32:
1247:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 1204              		.loc 1 1247 0
 1205 0068 0120     		movs	r0, #1
 1206 006a 04E0     		b	.L93
 1207              	.L97:
 1208 006c 0120     		movs	r0, #1
 1209 006e 02E0     		b	.L93
 1210              	.L98:
 1211 0070 0120     		movs	r0, #1
 1212 0072 00E0     		b	.L93
 1213              	.LVL152:
 1214              	.L99:
 1215 0074 0120     		movs	r0, #1
 1216              	.LVL153:
 1217              	.L93:
 1218              	.LBE32:
 1219              	.LBB33:
 1220              	.LBB34:
 221:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         (
 222:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   mrs %0, basepri                                         \n"\
 223:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   mov %1, %2                                              \n"\
 224:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   msr basepri, %1                                         \n"\
 225:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   isb                                                     \n"\
 226:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   dsb                                                     \n"\
 227:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 228:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         );
 229:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 230:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 231:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****          * warnings. */
 232:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         return ulOriginalBASEPRI;
 233:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     }
 234:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 235:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 236:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 237:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     {
 238:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile
 1221              		.loc 2 238 0
 1222              		.syntax unified
 1223              	@ 238 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 1224 0076 86F31188 		   msr basepri, r6 
 1225              	@ 0 "" 2
 1226              	.LVL154:
 1227              		.thumb
 1228              		.syntax unified
 1229              	.LBE34:
 1230              	.LBE33:
1258:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 74


 1231              		.loc 1 1258 0
 1232 007a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1233              		.cfi_endproc
 1234              	.LFE77:
 1235              		.size	xQueueGenericSendFromISR, .-xQueueGenericSendFromISR
 1236              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1237              		.align	2
 1238              		.global	xQueueGiveFromISR
 1239              		.thumb
 1240              		.thumb_func
 1241              		.type	xQueueGiveFromISR, %function
 1242              	xQueueGiveFromISR:
 1243              	.LFB78:
1263:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 1244              		.loc 1 1263 0
 1245              		.cfi_startproc
 1246              		@ args = 0, pretend = 0, frame = 0
 1247              		@ frame_needed = 0, uses_anonymous_args = 0
 1248              	.LVL155:
 1249 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1250              		.cfi_def_cfa_offset 24
 1251              		.cfi_offset 3, -24
 1252              		.cfi_offset 4, -20
 1253              		.cfi_offset 5, -16
 1254              		.cfi_offset 6, -12
 1255              		.cfi_offset 7, -8
 1256              		.cfi_offset 14, -4
 1257              	.LVL156:
 1258              	.LBB35:
 1259              	.LBB36:
 220:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         (
 1260              		.loc 2 220 0
 1261              		.syntax unified
 1262              	@ 220 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 1263 0002 EFF31185 		   mrs r5, basepri                                         
 1264 0006 4FF0A003 	   mov r3, #160                                              
 1265 000a 83F31188 	   msr basepri, r3                                         
 1266 000e BFF36F8F 	   isb                                                     
 1267 0012 BFF34F8F 	   dsb                                                     
 1268              	
 1269              	@ 0 "" 2
 1270              		.thumb
 1271              		.syntax unified
 1272              	.LBE36:
 1273              	.LBE35:
 1274              	.LBB37:
1303:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1275              		.loc 1 1303 0
 1276 0016 836B     		ldr	r3, [r0, #56]
 1277              	.LVL157:
1308:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 1278              		.loc 1 1308 0
 1279 0018 C26B     		ldr	r2, [r0, #60]
 1280 001a 9342     		cmp	r3, r2
 1281 001c 1DD2     		bcs	.L104
 1282 001e 0F46     		mov	r7, r1
 1283 0020 0646     		mov	r6, r0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 75


 1284              	.LBB38:
1310:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1285              		.loc 1 1310 0
 1286 0022 90F84540 		ldrb	r4, [r0, #69]	@ zero_extendqisi2
 1287 0026 64B2     		sxtb	r4, r4
 1288              	.LVL158:
1320:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1289              		.loc 1 1320 0
 1290 0028 0133     		adds	r3, r3, #1
 1291              	.LVL159:
 1292 002a 8363     		str	r3, [r0, #56]
1324:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 1293              		.loc 1 1324 0
 1294 002c B4F1FF3F 		cmp	r4, #-1
 1295 0030 09D1     		bne	.L103
1379:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 1296              		.loc 1 1379 0
 1297 0032 436A     		ldr	r3, [r0, #36]
 1298              	.LVL160:
 1299 0034 9BB1     		cbz	r3, .L105
1381:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
 1300              		.loc 1 1381 0
 1301 0036 2430     		adds	r0, r0, #36
 1302              	.LVL161:
 1303 0038 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1304              	.LVL162:
 1305 003c 88B1     		cbz	r0, .L106
1385:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             {
 1306              		.loc 1 1385 0
 1307 003e 97B1     		cbz	r7, .L107
1387:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             }
 1308              		.loc 1 1387 0
 1309 0040 0120     		movs	r0, #1
 1310 0042 3860     		str	r0, [r7]
 1311 0044 12E0     		b	.L102
 1312              	.LVL163:
 1313              	.L103:
 1314              	.LBB39:
1410:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 1315              		.loc 1 1410 0
 1316 0046 FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 1317              	.LVL164:
 1318 004a A042     		cmp	r0, r4
 1319 004c 0DD9     		bls	.L108
1410:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 1320              		.loc 1 1410 0 is_stmt 0 discriminator 1
 1321 004e 0134     		adds	r4, r4, #1
 1322              	.LVL165:
 1323 0050 64B2     		sxtb	r4, r4
 1324              	.LVL166:
 1325 0052 86F84540 		strb	r4, [r6, #69]
 1326              	.LBE39:
1413:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 1327              		.loc 1 1413 0 is_stmt 1 discriminator 1
 1328 0056 0120     		movs	r0, #1
 1329              	.LVL167:
 1330 0058 08E0     		b	.L102
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 76


 1331              	.LVL168:
 1332              	.L104:
 1333              	.LBE38:
1418:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 1334              		.loc 1 1418 0
 1335 005a 0020     		movs	r0, #0
 1336              	.LVL169:
 1337 005c 06E0     		b	.L102
 1338              	.LVL170:
 1339              	.L105:
 1340              	.LBB40:
1413:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 1341              		.loc 1 1413 0
 1342 005e 0120     		movs	r0, #1
 1343              	.LVL171:
 1344 0060 04E0     		b	.L102
 1345              	.LVL172:
 1346              	.L106:
 1347 0062 0120     		movs	r0, #1
 1348 0064 02E0     		b	.L102
 1349              	.L107:
 1350 0066 0120     		movs	r0, #1
 1351 0068 00E0     		b	.L102
 1352              	.LVL173:
 1353              	.L108:
 1354 006a 0120     		movs	r0, #1
 1355              	.LVL174:
 1356              	.L102:
 1357              	.LBE40:
 1358              	.LBE37:
 1359              	.LBB41:
 1360              	.LBB42:
 1361              		.loc 2 238 0
 1362              		.syntax unified
 1363              	@ 238 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 1364 006c 85F31188 		   msr basepri, r5 
 1365              	@ 0 "" 2
 1366              	.LVL175:
 1367              		.thumb
 1368              		.syntax unified
 1369              	.LBE42:
 1370              	.LBE41:
1424:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 1371              		.loc 1 1424 0
 1372 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1373              		.cfi_endproc
 1374              	.LFE78:
 1375              		.size	xQueueGiveFromISR, .-xQueueGiveFromISR
 1376 0072 00BF     		.section	.text.xQueueReceive,"ax",%progbits
 1377              		.align	2
 1378              		.global	xQueueReceive
 1379              		.thumb
 1380              		.thumb_func
 1381              		.type	xQueueReceive, %function
 1382              	xQueueReceive:
 1383              	.LFB79:
1430:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 77


 1384              		.loc 1 1430 0
 1385              		.cfi_startproc
 1386              		@ args = 0, pretend = 0, frame = 16
 1387              		@ frame_needed = 0, uses_anonymous_args = 0
 1388              	.LVL176:
 1389 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1390              		.cfi_def_cfa_offset 20
 1391              		.cfi_offset 4, -20
 1392              		.cfi_offset 5, -16
 1393              		.cfi_offset 6, -12
 1394              		.cfi_offset 7, -8
 1395              		.cfi_offset 14, -4
 1396 0002 85B0     		sub	sp, sp, #20
 1397              		.cfi_def_cfa_offset 40
 1398 0004 0446     		mov	r4, r0
 1399 0006 0F46     		mov	r7, r1
 1400 0008 0192     		str	r2, [sp, #4]
 1401              	.LVL177:
1431:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
 1402              		.loc 1 1431 0
 1403 000a 0026     		movs	r6, #0
 1404              	.LVL178:
 1405              	.L111:
1454:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 1406              		.loc 1 1454 0
 1407 000c FFF7FEFF 		bl	vPortEnterCritical
 1408              	.LVL179:
 1409              	.LBB43:
1456:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1410              		.loc 1 1456 0
 1411 0010 A56B     		ldr	r5, [r4, #56]
 1412              	.LVL180:
1460:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 1413              		.loc 1 1460 0
 1414 0012 C5B1     		cbz	r5, .L112
1463:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceQUEUE_RECEIVE( pxQueue );
 1415              		.loc 1 1463 0
 1416 0014 3946     		mov	r1, r7
 1417 0016 2046     		mov	r0, r4
 1418 0018 FFF7FEFF 		bl	prvCopyDataFromQueue
 1419              	.LVL181:
1465:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1420              		.loc 1 1465 0
 1421 001c 013D     		subs	r5, r5, #1
 1422              	.LVL182:
 1423 001e A563     		str	r5, [r4, #56]
1470:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 1424              		.loc 1 1470 0
 1425 0020 2369     		ldr	r3, [r4, #16]
 1426 0022 63B1     		cbz	r3, .L113
1472:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 1427              		.loc 1 1472 0
 1428 0024 04F11000 		add	r0, r4, #16
 1429 0028 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1430              	.LVL183:
 1431 002c 38B1     		cbz	r0, .L113
1474:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 78


 1432              		.loc 1 1474 0
 1433 002e 4FF08052 		mov	r2, #268435456
 1434 0032 304B     		ldr	r3, .L123
 1435 0034 1A60     		str	r2, [r3]
 1436              		.syntax unified
 1437              	@ 1474 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 1438 0036 BFF34F8F 		dsb
 1439              	@ 0 "" 2
 1440              	@ 1474 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 1441 003a BFF36F8F 		isb
 1442              	@ 0 "" 2
 1443              		.thumb
 1444              		.syntax unified
 1445              	.L113:
1486:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 return pdPASS;
 1446              		.loc 1 1486 0
 1447 003e FFF7FEFF 		bl	vPortExitCritical
 1448              	.LVL184:
1487:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 1449              		.loc 1 1487 0
 1450 0042 0120     		movs	r0, #1
 1451 0044 53E0     		b	.L114
 1452              	.LVL185:
 1453              	.L112:
1491:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 1454              		.loc 1 1491 0
 1455 0046 019B     		ldr	r3, [sp, #4]
 1456 0048 1BB9     		cbnz	r3, .L115
1495:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
 1457              		.loc 1 1495 0
 1458 004a FFF7FEFF 		bl	vPortExitCritical
 1459              	.LVL186:
1497:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 1460              		.loc 1 1497 0
 1461 004e 0020     		movs	r0, #0
 1462 0050 4DE0     		b	.L114
 1463              	.L115:
1499:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 1464              		.loc 1 1499 0
 1465 0052 1EB9     		cbnz	r6, .L116
1503:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
 1466              		.loc 1 1503 0
 1467 0054 02A8     		add	r0, sp, #8
 1468 0056 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1469              	.LVL187:
1504:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 1470              		.loc 1 1504 0
 1471 005a 0126     		movs	r6, #1
 1472              	.LVL188:
 1473              	.L116:
 1474              	.LBE43:
1513:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1475              		.loc 1 1513 0
 1476 005c FFF7FEFF 		bl	vPortExitCritical
 1477              	.LVL189:
1518:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
 1478              		.loc 1 1518 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 79


 1479 0060 FFF7FEFF 		bl	vTaskSuspendAll
 1480              	.LVL190:
1519:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1481              		.loc 1 1519 0
 1482 0064 FFF7FEFF 		bl	vPortEnterCritical
 1483              	.LVL191:
 1484 0068 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1485 006c 5BB2     		sxtb	r3, r3
 1486 006e B3F1FF3F 		cmp	r3, #-1
 1487 0072 02D1     		bne	.L117
1519:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1488              		.loc 1 1519 0 is_stmt 0 discriminator 1
 1489 0074 0023     		movs	r3, #0
 1490 0076 84F84430 		strb	r3, [r4, #68]
 1491              	.L117:
1519:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1492              		.loc 1 1519 0 discriminator 3
 1493 007a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1494 007e 5BB2     		sxtb	r3, r3
 1495 0080 B3F1FF3F 		cmp	r3, #-1
 1496 0084 02D1     		bne	.L118
1519:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1497              		.loc 1 1519 0 discriminator 4
 1498 0086 0023     		movs	r3, #0
 1499 0088 84F84530 		strb	r3, [r4, #69]
 1500              	.L118:
1519:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1501              		.loc 1 1519 0 discriminator 6
 1502 008c FFF7FEFF 		bl	vPortExitCritical
 1503              	.LVL192:
1522:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 1504              		.loc 1 1522 0 is_stmt 1 discriminator 6
 1505 0090 01A9     		add	r1, sp, #4
 1506              	.LVL193:
 1507 0092 02A8     		add	r0, sp, #8
 1508 0094 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1509              	.LVL194:
 1510 0098 F0B9     		cbnz	r0, .L119
1526:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 1511              		.loc 1 1526 0
 1512 009a 2046     		mov	r0, r4
 1513 009c FFF7FEFF 		bl	prvIsQueueEmpty
 1514              	.LVL195:
 1515 00a0 A0B1     		cbz	r0, .L120
1529:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
 1516              		.loc 1 1529 0
 1517 00a2 0199     		ldr	r1, [sp, #4]
 1518 00a4 04F12400 		add	r0, r4, #36
 1519 00a8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1520              	.LVL196:
1530:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1521              		.loc 1 1530 0
 1522 00ac 2046     		mov	r0, r4
 1523 00ae FFF7FEFF 		bl	prvUnlockQueue
 1524              	.LVL197:
1532:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 1525              		.loc 1 1532 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 80


 1526 00b2 FFF7FEFF 		bl	xTaskResumeAll
 1527              	.LVL198:
 1528 00b6 0028     		cmp	r0, #0
 1529 00b8 A8D1     		bne	.L111
1534:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 1530              		.loc 1 1534 0
 1531 00ba 4FF08052 		mov	r2, #268435456
 1532 00be 0D4B     		ldr	r3, .L123
 1533 00c0 1A60     		str	r2, [r3]
 1534              		.syntax unified
 1535              	@ 1534 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 1536 00c2 BFF34F8F 		dsb
 1537              	@ 0 "" 2
 1538              	@ 1534 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 1539 00c6 BFF36F8F 		isb
 1540              	@ 0 "" 2
 1541              		.thumb
 1542              		.syntax unified
 1543 00ca 9FE7     		b	.L111
 1544              	.L120:
1545:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
 1545              		.loc 1 1545 0
 1546 00cc 2046     		mov	r0, r4
 1547 00ce FFF7FEFF 		bl	prvUnlockQueue
 1548              	.LVL199:
1546:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 1549              		.loc 1 1546 0
 1550 00d2 FFF7FEFF 		bl	xTaskResumeAll
 1551              	.LVL200:
 1552 00d6 99E7     		b	.L111
 1553              	.L119:
1553:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
 1554              		.loc 1 1553 0
 1555 00d8 2046     		mov	r0, r4
 1556 00da FFF7FEFF 		bl	prvUnlockQueue
 1557              	.LVL201:
1554:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1558              		.loc 1 1554 0
 1559 00de FFF7FEFF 		bl	xTaskResumeAll
 1560              	.LVL202:
1556:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 1561              		.loc 1 1556 0
 1562 00e2 2046     		mov	r0, r4
 1563 00e4 FFF7FEFF 		bl	prvIsQueueEmpty
 1564              	.LVL203:
 1565 00e8 0028     		cmp	r0, #0
 1566 00ea 8FD0     		beq	.L111
1559:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 1567              		.loc 1 1559 0
 1568 00ec 0020     		movs	r0, #0
 1569              	.LVL204:
 1570              	.L114:
1567:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 1571              		.loc 1 1567 0
 1572 00ee 05B0     		add	sp, sp, #20
 1573              		.cfi_def_cfa_offset 20
 1574              		@ sp needed
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 81


 1575 00f0 F0BD     		pop	{r4, r5, r6, r7, pc}
 1576              	.LVL205:
 1577              	.L124:
 1578 00f2 00BF     		.align	2
 1579              	.L123:
 1580 00f4 04ED00E0 		.word	-536810236
 1581              		.cfi_endproc
 1582              	.LFE79:
 1583              		.size	xQueueReceive, .-xQueueReceive
 1584              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1585              		.align	2
 1586              		.global	xQueueSemaphoreTake
 1587              		.thumb
 1588              		.thumb_func
 1589              		.type	xQueueSemaphoreTake, %function
 1590              	xQueueSemaphoreTake:
 1591              	.LFB80:
1572:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1592              		.loc 1 1572 0
 1593              		.cfi_startproc
 1594              		@ args = 0, pretend = 0, frame = 16
 1595              		@ frame_needed = 0, uses_anonymous_args = 0
 1596              	.LVL206:
 1597 0000 70B5     		push	{r4, r5, r6, lr}
 1598              		.cfi_def_cfa_offset 16
 1599              		.cfi_offset 4, -16
 1600              		.cfi_offset 5, -12
 1601              		.cfi_offset 6, -8
 1602              		.cfi_offset 14, -4
 1603 0002 84B0     		sub	sp, sp, #16
 1604              		.cfi_def_cfa_offset 32
 1605 0004 0446     		mov	r4, r0
 1606 0006 0191     		str	r1, [sp, #4]
 1607              	.LVL207:
1578:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     #endif
 1608              		.loc 1 1578 0
 1609 0008 0026     		movs	r6, #0
1573:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
 1610              		.loc 1 1573 0
 1611 000a 3546     		mov	r5, r6
 1612              	.LVL208:
 1613              	.L126:
1600:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 1614              		.loc 1 1600 0
 1615 000c FFF7FEFF 		bl	vPortEnterCritical
 1616              	.LVL209:
 1617              	.LBB44:
1604:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1618              		.loc 1 1604 0
 1619 0010 A36B     		ldr	r3, [r4, #56]
 1620              	.LVL210:
1608:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 1621              		.loc 1 1608 0
 1622 0012 CBB1     		cbz	r3, .L127
1614:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1623              		.loc 1 1614 0
 1624 0014 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 82


 1625              	.LVL211:
 1626 0016 A363     		str	r3, [r4, #56]
1618:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 1627              		.loc 1 1618 0
 1628 0018 2368     		ldr	r3, [r4]
 1629              	.LVL212:
 1630 001a 13B9     		cbnz	r3, .L128
1622:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
 1631              		.loc 1 1622 0
 1632 001c FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1633              	.LVL213:
 1634 0020 A060     		str	r0, [r4, #8]
 1635              	.L128:
1633:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 1636              		.loc 1 1633 0
 1637 0022 2369     		ldr	r3, [r4, #16]
 1638 0024 63B1     		cbz	r3, .L129
1635:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 1639              		.loc 1 1635 0
 1640 0026 04F11000 		add	r0, r4, #16
 1641 002a FFF7FEFF 		bl	xTaskRemoveFromEventList
 1642              	.LVL214:
 1643 002e 38B1     		cbz	r0, .L129
1637:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
 1644              		.loc 1 1637 0
 1645 0030 4FF08052 		mov	r2, #268435456
 1646 0034 3B4B     		ldr	r3, .L141
 1647 0036 1A60     		str	r2, [r3]
 1648              		.syntax unified
 1649              	@ 1637 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 1650 0038 BFF34F8F 		dsb
 1651              	@ 0 "" 2
 1652              	@ 1637 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 1653 003c BFF36F8F 		isb
 1654              	@ 0 "" 2
 1655              		.thumb
 1656              		.syntax unified
 1657              	.L129:
1649:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 return pdPASS;
 1658              		.loc 1 1649 0
 1659 0040 FFF7FEFF 		bl	vPortExitCritical
 1660              	.LVL215:
1650:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 1661              		.loc 1 1650 0
 1662 0044 0120     		movs	r0, #1
 1663 0046 6BE0     		b	.L130
 1664              	.LVL216:
 1665              	.L127:
1654:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 1666              		.loc 1 1654 0
 1667 0048 019B     		ldr	r3, [sp, #4]
 1668              	.LVL217:
 1669 004a 1BB9     		cbnz	r3, .L131
1658:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     traceQUEUE_RECEIVE_FAILED( pxQueue );
 1670              		.loc 1 1658 0
 1671 004c FFF7FEFF 		bl	vPortExitCritical
 1672              	.LVL218:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 83


1660:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 1673              		.loc 1 1660 0
 1674 0050 0020     		movs	r0, #0
 1675 0052 65E0     		b	.L130
 1676              	.L131:
1662:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 1677              		.loc 1 1662 0
 1678 0054 1DB9     		cbnz	r5, .L132
1666:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
 1679              		.loc 1 1666 0
 1680 0056 02A8     		add	r0, sp, #8
 1681 0058 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1682              	.LVL219:
1667:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 1683              		.loc 1 1667 0
 1684 005c 0125     		movs	r5, #1
 1685              	.LVL220:
 1686              	.L132:
 1687              	.LBE44:
1676:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1688              		.loc 1 1676 0
 1689 005e FFF7FEFF 		bl	vPortExitCritical
 1690              	.LVL221:
1681:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
 1691              		.loc 1 1681 0
 1692 0062 FFF7FEFF 		bl	vTaskSuspendAll
 1693              	.LVL222:
1682:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1694              		.loc 1 1682 0
 1695 0066 FFF7FEFF 		bl	vPortEnterCritical
 1696              	.LVL223:
 1697 006a 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1698 006e 5BB2     		sxtb	r3, r3
 1699 0070 B3F1FF3F 		cmp	r3, #-1
 1700 0074 02D1     		bne	.L133
1682:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1701              		.loc 1 1682 0 is_stmt 0 discriminator 1
 1702 0076 0023     		movs	r3, #0
 1703 0078 84F84430 		strb	r3, [r4, #68]
 1704              	.L133:
1682:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1705              		.loc 1 1682 0 discriminator 3
 1706 007c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1707 0080 5BB2     		sxtb	r3, r3
 1708 0082 B3F1FF3F 		cmp	r3, #-1
 1709 0086 02D1     		bne	.L134
1682:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1710              		.loc 1 1682 0 discriminator 4
 1711 0088 0023     		movs	r3, #0
 1712 008a 84F84530 		strb	r3, [r4, #69]
 1713              	.L134:
1682:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1714              		.loc 1 1682 0 discriminator 6
 1715 008e FFF7FEFF 		bl	vPortExitCritical
 1716              	.LVL224:
1685:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 1717              		.loc 1 1685 0 is_stmt 1 discriminator 6
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 84


 1718 0092 01A9     		add	r1, sp, #4
 1719              	.LVL225:
 1720 0094 02A8     		add	r0, sp, #8
 1721 0096 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1722              	.LVL226:
 1723 009a 40BB     		cbnz	r0, .L135
1691:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 1724              		.loc 1 1691 0
 1725 009c 2046     		mov	r0, r4
 1726 009e FFF7FEFF 		bl	prvIsQueueEmpty
 1727              	.LVL227:
 1728 00a2 F0B1     		cbz	r0, .L136
1697:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 1729              		.loc 1 1697 0
 1730 00a4 2368     		ldr	r3, [r4]
 1731 00a6 3BB9     		cbnz	r3, .L137
1699:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
 1732              		.loc 1 1699 0
 1733 00a8 FFF7FEFF 		bl	vPortEnterCritical
 1734              	.LVL228:
1701:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
 1735              		.loc 1 1701 0
 1736 00ac A068     		ldr	r0, [r4, #8]
 1737 00ae FFF7FEFF 		bl	xTaskPriorityInherit
 1738              	.LVL229:
 1739 00b2 0646     		mov	r6, r0
 1740              	.LVL230:
1703:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
 1741              		.loc 1 1703 0
 1742 00b4 FFF7FEFF 		bl	vPortExitCritical
 1743              	.LVL231:
 1744              	.L137:
1712:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
 1745              		.loc 1 1712 0
 1746 00b8 0199     		ldr	r1, [sp, #4]
 1747 00ba 04F12400 		add	r0, r4, #36
 1748 00be FFF7FEFF 		bl	vTaskPlaceOnEventList
 1749              	.LVL232:
1713:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1750              		.loc 1 1713 0
 1751 00c2 2046     		mov	r0, r4
 1752 00c4 FFF7FEFF 		bl	prvUnlockQueue
 1753              	.LVL233:
1715:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 1754              		.loc 1 1715 0
 1755 00c8 FFF7FEFF 		bl	xTaskResumeAll
 1756              	.LVL234:
 1757 00cc 0028     		cmp	r0, #0
 1758 00ce 9DD1     		bne	.L126
1717:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 1759              		.loc 1 1717 0
 1760 00d0 4FF08052 		mov	r2, #268435456
 1761 00d4 134B     		ldr	r3, .L141
 1762 00d6 1A60     		str	r2, [r3]
 1763              		.syntax unified
 1764              	@ 1717 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 1765 00d8 BFF34F8F 		dsb
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 85


 1766              	@ 0 "" 2
 1767              	@ 1717 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 1768 00dc BFF36F8F 		isb
 1769              	@ 0 "" 2
 1770              		.thumb
 1771              		.syntax unified
 1772 00e0 94E7     		b	.L126
 1773              	.L136:
1728:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
 1774              		.loc 1 1728 0
 1775 00e2 2046     		mov	r0, r4
 1776 00e4 FFF7FEFF 		bl	prvUnlockQueue
 1777              	.LVL235:
1729:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 1778              		.loc 1 1729 0
 1779 00e8 FFF7FEFF 		bl	xTaskResumeAll
 1780              	.LVL236:
 1781 00ec 8EE7     		b	.L126
 1782              	.L135:
1735:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
 1783              		.loc 1 1735 0
 1784 00ee 2046     		mov	r0, r4
 1785 00f0 FFF7FEFF 		bl	prvUnlockQueue
 1786              	.LVL237:
1736:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1787              		.loc 1 1736 0
 1788 00f4 FFF7FEFF 		bl	xTaskResumeAll
 1789              	.LVL238:
1742:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 1790              		.loc 1 1742 0
 1791 00f8 2046     		mov	r0, r4
 1792 00fa FFF7FEFF 		bl	prvIsQueueEmpty
 1793              	.LVL239:
 1794 00fe 0028     		cmp	r0, #0
 1795 0100 84D0     		beq	.L126
1749:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 1796              		.loc 1 1749 0
 1797 0102 66B1     		cbz	r6, .L139
1751:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
 1798              		.loc 1 1751 0
 1799 0104 FFF7FEFF 		bl	vPortEnterCritical
 1800              	.LVL240:
 1801              	.LBB45:
1760:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                             vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder
 1802              		.loc 1 1760 0
 1803 0108 2046     		mov	r0, r4
 1804 010a FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 1805              	.LVL241:
1761:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
 1806              		.loc 1 1761 0
 1807 010e 0146     		mov	r1, r0
 1808 0110 A068     		ldr	r0, [r4, #8]
 1809              	.LVL242:
 1810 0112 FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 1811              	.LVL243:
 1812              	.LBE45:
1763:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 86


 1813              		.loc 1 1763 0
 1814 0116 FFF7FEFF 		bl	vPortExitCritical
 1815              	.LVL244:
1769:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 1816              		.loc 1 1769 0
 1817 011a 0020     		movs	r0, #0
 1818 011c 00E0     		b	.L130
 1819              	.L139:
 1820 011e 0020     		movs	r0, #0
 1821              	.L130:
1777:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 1822              		.loc 1 1777 0
 1823 0120 04B0     		add	sp, sp, #16
 1824              		.cfi_def_cfa_offset 16
 1825              		@ sp needed
 1826 0122 70BD     		pop	{r4, r5, r6, pc}
 1827              	.LVL245:
 1828              	.L142:
 1829              		.align	2
 1830              	.L141:
 1831 0124 04ED00E0 		.word	-536810236
 1832              		.cfi_endproc
 1833              	.LFE80:
 1834              		.size	xQueueSemaphoreTake, .-xQueueSemaphoreTake
 1835              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 1836              		.align	2
 1837              		.global	xQueueTakeMutexRecursive
 1838              		.thumb
 1839              		.thumb_func
 1840              		.type	xQueueTakeMutexRecursive, %function
 1841              	xQueueTakeMutexRecursive:
 1842              	.LFB74:
 774:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
 1843              		.loc 1 774 0
 1844              		.cfi_startproc
 1845              		@ args = 0, pretend = 0, frame = 0
 1846              		@ frame_needed = 0, uses_anonymous_args = 0
 1847              	.LVL246:
 1848 0000 70B5     		push	{r4, r5, r6, lr}
 1849              		.cfi_def_cfa_offset 16
 1850              		.cfi_offset 4, -16
 1851              		.cfi_offset 5, -12
 1852              		.cfi_offset 6, -8
 1853              		.cfi_offset 14, -4
 1854 0002 0446     		mov	r4, r0
 1855 0004 0E46     		mov	r6, r1
 1856              	.LVL247:
 785:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 1857              		.loc 1 785 0
 1858 0006 8568     		ldr	r5, [r0, #8]
 1859 0008 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1860              	.LVL248:
 1861 000c 8542     		cmp	r5, r0
 1862 000e 04D1     		bne	.L144
 787:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
 1863              		.loc 1 787 0
 1864 0010 E368     		ldr	r3, [r4, #12]
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 87


 1865 0012 0133     		adds	r3, r3, #1
 1866 0014 E360     		str	r3, [r4, #12]
 1867              	.LVL249:
 788:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 1868              		.loc 1 788 0
 1869 0016 0123     		movs	r3, #1
 1870 0018 08E0     		b	.L145
 1871              	.LVL250:
 1872              	.L144:
 792:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1873              		.loc 1 792 0
 1874 001a 3146     		mov	r1, r6
 1875 001c 2046     		mov	r0, r4
 1876 001e FFF7FEFF 		bl	xQueueSemaphoreTake
 1877              	.LVL251:
 797:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 1878              		.loc 1 797 0
 1879 0022 0346     		mov	r3, r0
 1880 0024 10B1     		cbz	r0, .L145
 799:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 1881              		.loc 1 799 0
 1882 0026 E268     		ldr	r2, [r4, #12]
 1883 0028 0132     		adds	r2, r2, #1
 1884 002a E260     		str	r2, [r4, #12]
 1885              	.LVL252:
 1886              	.L145:
 808:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1887              		.loc 1 808 0
 1888 002c 1846     		mov	r0, r3
 1889 002e 70BD     		pop	{r4, r5, r6, pc}
 1890              		.cfi_endproc
 1891              	.LFE74:
 1892              		.size	xQueueTakeMutexRecursive, .-xQueueTakeMutexRecursive
 1893              		.section	.text.xQueuePeek,"ax",%progbits
 1894              		.align	2
 1895              		.global	xQueuePeek
 1896              		.thumb
 1897              		.thumb_func
 1898              		.type	xQueuePeek, %function
 1899              	xQueuePeek:
 1900              	.LFB81:
1783:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xEntryTimeSet = pdFALSE;
 1901              		.loc 1 1783 0
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 16
 1904              		@ frame_needed = 0, uses_anonymous_args = 0
 1905              	.LVL253:
 1906 0000 70B5     		push	{r4, r5, r6, lr}
 1907              		.cfi_def_cfa_offset 16
 1908              		.cfi_offset 4, -16
 1909              		.cfi_offset 5, -12
 1910              		.cfi_offset 6, -8
 1911              		.cfi_offset 14, -4
 1912 0002 84B0     		sub	sp, sp, #16
 1913              		.cfi_def_cfa_offset 32
 1914 0004 0446     		mov	r4, r0
 1915 0006 0E46     		mov	r6, r1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 88


 1916 0008 0192     		str	r2, [sp, #4]
 1917              	.LVL254:
1784:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     TimeOut_t xTimeOut;
 1918              		.loc 1 1784 0
 1919 000a 0025     		movs	r5, #0
 1920              	.LVL255:
 1921              	.L148:
1808:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 1922              		.loc 1 1808 0
 1923 000c FFF7FEFF 		bl	vPortEnterCritical
 1924              	.LVL256:
 1925              	.LBB46:
1810:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1926              		.loc 1 1810 0
 1927 0010 A36B     		ldr	r3, [r4, #56]
 1928              	.LVL257:
1814:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 1929              		.loc 1 1814 0
 1930 0012 C3B1     		cbz	r3, .L149
1819:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1931              		.loc 1 1819 0
 1932 0014 E568     		ldr	r5, [r4, #12]
 1933              	.LVL258:
1821:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 traceQUEUE_PEEK( pxQueue );
 1934              		.loc 1 1821 0
 1935 0016 3146     		mov	r1, r6
 1936 0018 2046     		mov	r0, r4
 1937 001a FFF7FEFF 		bl	prvCopyDataFromQueue
 1938              	.LVL259:
1825:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1939              		.loc 1 1825 0
 1940 001e E560     		str	r5, [r4, #12]
1829:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 1941              		.loc 1 1829 0
 1942 0020 636A     		ldr	r3, [r4, #36]
 1943 0022 63B1     		cbz	r3, .L150
1831:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 1944              		.loc 1 1831 0
 1945 0024 04F12400 		add	r0, r4, #36
 1946 0028 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1947              	.LVL260:
 1948 002c 38B1     		cbz	r0, .L150
1834:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
 1949              		.loc 1 1834 0
 1950 002e 4FF08052 		mov	r2, #268435456
 1951 0032 304B     		ldr	r3, .L160
 1952 0034 1A60     		str	r2, [r3]
 1953              		.syntax unified
 1954              	@ 1834 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 1955 0036 BFF34F8F 		dsb
 1956              	@ 0 "" 2
 1957              	@ 1834 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 1958 003a BFF36F8F 		isb
 1959              	@ 0 "" 2
 1960              		.thumb
 1961              		.syntax unified
 1962              	.L150:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 89


1846:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 return pdPASS;
 1963              		.loc 1 1846 0
 1964 003e FFF7FEFF 		bl	vPortExitCritical
 1965              	.LVL261:
1847:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 1966              		.loc 1 1847 0
 1967 0042 0120     		movs	r0, #1
 1968 0044 53E0     		b	.L151
 1969              	.LVL262:
 1970              	.L149:
1851:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 1971              		.loc 1 1851 0
 1972 0046 019B     		ldr	r3, [sp, #4]
 1973              	.LVL263:
 1974 0048 1BB9     		cbnz	r3, .L152
1855:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     traceQUEUE_PEEK_FAILED( pxQueue );
 1975              		.loc 1 1855 0
 1976 004a FFF7FEFF 		bl	vPortExitCritical
 1977              	.LVL264:
1857:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 1978              		.loc 1 1857 0
 1979 004e 0020     		movs	r0, #0
 1980 0050 4DE0     		b	.L151
 1981              	.L152:
1859:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 1982              		.loc 1 1859 0
 1983 0052 1DB9     		cbnz	r5, .L153
1864:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     xEntryTimeSet = pdTRUE;
 1984              		.loc 1 1864 0
 1985 0054 02A8     		add	r0, sp, #8
 1986 0056 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1987              	.LVL265:
1865:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 1988              		.loc 1 1865 0
 1989 005a 0125     		movs	r5, #1
 1990              	.LVL266:
 1991              	.L153:
 1992              	.LBE46:
1874:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1993              		.loc 1 1874 0
 1994 005c FFF7FEFF 		bl	vPortExitCritical
 1995              	.LVL267:
1879:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         prvLockQueue( pxQueue );
 1996              		.loc 1 1879 0
 1997 0060 FFF7FEFF 		bl	vTaskSuspendAll
 1998              	.LVL268:
1880:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 1999              		.loc 1 1880 0
 2000 0064 FFF7FEFF 		bl	vPortEnterCritical
 2001              	.LVL269:
 2002 0068 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2003 006c 5BB2     		sxtb	r3, r3
 2004 006e B3F1FF3F 		cmp	r3, #-1
 2005 0072 02D1     		bne	.L154
1880:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 2006              		.loc 1 1880 0 is_stmt 0 discriminator 1
 2007 0074 0023     		movs	r3, #0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 90


 2008 0076 84F84430 		strb	r3, [r4, #68]
 2009              	.L154:
1880:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 2010              		.loc 1 1880 0 discriminator 3
 2011 007a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2012 007e 5BB2     		sxtb	r3, r3
 2013 0080 B3F1FF3F 		cmp	r3, #-1
 2014 0084 02D1     		bne	.L155
1880:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 2015              		.loc 1 1880 0 discriminator 4
 2016 0086 0023     		movs	r3, #0
 2017 0088 84F84530 		strb	r3, [r4, #69]
 2018              	.L155:
1880:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 2019              		.loc 1 1880 0 discriminator 6
 2020 008c FFF7FEFF 		bl	vPortExitCritical
 2021              	.LVL270:
1883:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 2022              		.loc 1 1883 0 is_stmt 1 discriminator 6
 2023 0090 01A9     		add	r1, sp, #4
 2024              	.LVL271:
 2025 0092 02A8     		add	r0, sp, #8
 2026 0094 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2027              	.LVL272:
 2028 0098 F0B9     		cbnz	r0, .L156
1887:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 2029              		.loc 1 1887 0
 2030 009a 2046     		mov	r0, r4
 2031 009c FFF7FEFF 		bl	prvIsQueueEmpty
 2032              	.LVL273:
 2033 00a0 A0B1     		cbz	r0, .L157
1890:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvUnlockQueue( pxQueue );
 2034              		.loc 1 1890 0
 2035 00a2 0199     		ldr	r1, [sp, #4]
 2036 00a4 04F12400 		add	r0, r4, #36
 2037 00a8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2038              	.LVL274:
1891:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 2039              		.loc 1 1891 0
 2040 00ac 2046     		mov	r0, r4
 2041 00ae FFF7FEFF 		bl	prvUnlockQueue
 2042              	.LVL275:
1893:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 2043              		.loc 1 1893 0
 2044 00b2 FFF7FEFF 		bl	xTaskResumeAll
 2045              	.LVL276:
 2046 00b6 0028     		cmp	r0, #0
 2047 00b8 A8D1     		bne	.L148
1895:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
 2048              		.loc 1 1895 0
 2049 00ba 4FF08052 		mov	r2, #268435456
 2050 00be 0D4B     		ldr	r3, .L160
 2051 00c0 1A60     		str	r2, [r3]
 2052              		.syntax unified
 2053              	@ 1895 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 2054 00c2 BFF34F8F 		dsb
 2055              	@ 0 "" 2
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 91


 2056              	@ 1895 "..\..\..\FreeRTOS\FreeRTOS-Kernel\queue.c" 1
 2057 00c6 BFF36F8F 		isb
 2058              	@ 0 "" 2
 2059              		.thumb
 2060              		.syntax unified
 2061 00ca 9FE7     		b	.L148
 2062              	.L157:
1906:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 ( void ) xTaskResumeAll();
 2063              		.loc 1 1906 0
 2064 00cc 2046     		mov	r0, r4
 2065 00ce FFF7FEFF 		bl	prvUnlockQueue
 2066              	.LVL277:
1907:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 2067              		.loc 1 1907 0
 2068 00d2 FFF7FEFF 		bl	xTaskResumeAll
 2069              	.LVL278:
 2070 00d6 99E7     		b	.L148
 2071              	.L156:
1914:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( void ) xTaskResumeAll();
 2072              		.loc 1 1914 0
 2073 00d8 2046     		mov	r0, r4
 2074 00da FFF7FEFF 		bl	prvUnlockQueue
 2075              	.LVL279:
1915:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 2076              		.loc 1 1915 0
 2077 00de FFF7FEFF 		bl	xTaskResumeAll
 2078              	.LVL280:
1917:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 2079              		.loc 1 1917 0
 2080 00e2 2046     		mov	r0, r4
 2081 00e4 FFF7FEFF 		bl	prvIsQueueEmpty
 2082              	.LVL281:
 2083 00e8 0028     		cmp	r0, #0
 2084 00ea 8FD0     		beq	.L148
1920:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 2085              		.loc 1 1920 0
 2086 00ec 0020     		movs	r0, #0
 2087              	.LVL282:
 2088              	.L151:
1928:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 2089              		.loc 1 1928 0
 2090 00ee 04B0     		add	sp, sp, #16
 2091              		.cfi_def_cfa_offset 16
 2092              		@ sp needed
 2093 00f0 70BD     		pop	{r4, r5, r6, pc}
 2094              	.LVL283:
 2095              	.L161:
 2096 00f2 00BF     		.align	2
 2097              	.L160:
 2098 00f4 04ED00E0 		.word	-536810236
 2099              		.cfi_endproc
 2100              	.LFE81:
 2101              		.size	xQueuePeek, .-xQueuePeek
 2102              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2103              		.align	2
 2104              		.global	xQueueReceiveFromISR
 2105              		.thumb
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 92


 2106              		.thumb_func
 2107              		.type	xQueueReceiveFromISR, %function
 2108              	xQueueReceiveFromISR:
 2109              	.LFB82:
1934:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 2110              		.loc 1 1934 0
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 0
 2113              		@ frame_needed = 0, uses_anonymous_args = 0
 2114              	.LVL284:
 2115 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2116              		.cfi_def_cfa_offset 24
 2117              		.cfi_offset 4, -24
 2118              		.cfi_offset 5, -20
 2119              		.cfi_offset 6, -16
 2120              		.cfi_offset 7, -12
 2121              		.cfi_offset 8, -8
 2122              		.cfi_offset 14, -4
 2123              	.LVL285:
 2124              	.LBB47:
 2125              	.LBB48:
 220:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         (
 2126              		.loc 2 220 0
 2127              		.syntax unified
 2128              	@ 220 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 2129 0004 EFF31187 		   mrs r7, basepri                                         
 2130 0008 4FF0A003 	   mov r3, #160                                              
 2131 000c 83F31188 	   msr basepri, r3                                         
 2132 0010 BFF36F8F 	   isb                                                     
 2133 0014 BFF34F8F 	   dsb                                                     
 2134              	
 2135              	@ 0 "" 2
 2136              		.thumb
 2137              		.syntax unified
 2138              	.LBE48:
 2139              	.LBE47:
 2140              	.LBB49:
1960:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 2141              		.loc 1 1960 0
 2142 0018 846B     		ldr	r4, [r0, #56]
 2143              	.LVL286:
1963:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 2144              		.loc 1 1963 0
 2145 001a 1CB3     		cbz	r4, .L165
 2146 001c 9046     		mov	r8, r2
 2147 001e 0546     		mov	r5, r0
 2148              	.LBB50:
1965:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 2149              		.loc 1 1965 0
 2150 0020 90F84460 		ldrb	r6, [r0, #68]	@ zero_extendqisi2
 2151 0024 76B2     		sxtb	r6, r6
 2152              	.LVL287:
1969:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2153              		.loc 1 1969 0
 2154 0026 FFF7FEFF 		bl	prvCopyDataFromQueue
 2155              	.LVL288:
1970:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 93


 2156              		.loc 1 1970 0
 2157 002a 013C     		subs	r4, r4, #1
 2158              	.LVL289:
 2159 002c AC63     		str	r4, [r5, #56]
1976:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 2160              		.loc 1 1976 0
 2161 002e B6F1FF3F 		cmp	r6, #-1
 2162 0032 0DD1     		bne	.L164
1978:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
 2163              		.loc 1 1978 0
 2164 0034 2B69     		ldr	r3, [r5, #16]
 2165 0036 BBB1     		cbz	r3, .L166
1980:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
 2166              		.loc 1 1980 0
 2167 0038 05F11000 		add	r0, r5, #16
 2168 003c FFF7FEFF 		bl	xTaskRemoveFromEventList
 2169              	.LVL290:
 2170 0040 A0B1     		cbz	r0, .L167
1984:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         {
 2171              		.loc 1 1984 0
 2172 0042 B8F1000F 		cmp	r8, #0
 2173 0046 13D0     		beq	.L168
1986:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         }
 2174              		.loc 1 1986 0
 2175 0048 0120     		movs	r0, #1
 2176 004a C8F80000 		str	r0, [r8]
 2177 004e 12E0     		b	.L163
 2178              	.L164:
 2179              	.LBB51:
2007:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 2180              		.loc 1 2007 0
 2181 0050 FFF7FEFF 		bl	uxTaskGetNumberOfTasks
 2182              	.LVL291:
 2183 0054 B042     		cmp	r0, r6
 2184 0056 0DD9     		bls	.L169
2007:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
 2185              		.loc 1 2007 0 is_stmt 0 discriminator 1
 2186 0058 0136     		adds	r6, r6, #1
 2187              	.LVL292:
 2188 005a 76B2     		sxtb	r6, r6
 2189              	.LVL293:
 2190 005c 85F84460 		strb	r6, [r5, #68]
 2191              	.LBE51:
2010:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 2192              		.loc 1 2010 0 is_stmt 1 discriminator 1
 2193 0060 0120     		movs	r0, #1
 2194              	.LVL294:
 2195 0062 08E0     		b	.L163
 2196              	.LVL295:
 2197              	.L165:
 2198              	.LBE50:
2014:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2199              		.loc 1 2014 0
 2200 0064 0020     		movs	r0, #0
 2201              	.LVL296:
 2202 0066 06E0     		b	.L163
 2203              	.LVL297:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 94


 2204              	.L166:
 2205              	.LBB52:
2010:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 2206              		.loc 1 2010 0
 2207 0068 0120     		movs	r0, #1
 2208 006a 04E0     		b	.L163
 2209              	.L167:
 2210 006c 0120     		movs	r0, #1
 2211 006e 02E0     		b	.L163
 2212              	.L168:
 2213 0070 0120     		movs	r0, #1
 2214 0072 00E0     		b	.L163
 2215              	.LVL298:
 2216              	.L169:
 2217 0074 0120     		movs	r0, #1
 2218              	.LVL299:
 2219              	.L163:
 2220              	.LBE52:
 2221              	.LBE49:
 2222              	.LBB53:
 2223              	.LBB54:
 2224              		.loc 2 238 0
 2225              		.syntax unified
 2226              	@ 238 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 2227 0076 87F31188 		   msr basepri, r7 
 2228              	@ 0 "" 2
 2229              	.LVL300:
 2230              		.thumb
 2231              		.syntax unified
 2232              	.LBE54:
 2233              	.LBE53:
2021:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 2234              		.loc 1 2021 0
 2235 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2236              		.cfi_endproc
 2237              	.LFE82:
 2238              		.size	xQueueReceiveFromISR, .-xQueueReceiveFromISR
 2239 007e 00BF     		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2240              		.align	2
 2241              		.global	xQueuePeekFromISR
 2242              		.thumb
 2243              		.thumb_func
 2244              		.type	xQueuePeekFromISR, %function
 2245              	xQueuePeekFromISR:
 2246              	.LFB83:
2026:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 2247              		.loc 1 2026 0
 2248              		.cfi_startproc
 2249              		@ args = 0, pretend = 0, frame = 0
 2250              		@ frame_needed = 0, uses_anonymous_args = 0
 2251              	.LVL301:
 2252 0000 70B5     		push	{r4, r5, r6, lr}
 2253              		.cfi_def_cfa_offset 16
 2254              		.cfi_offset 4, -16
 2255              		.cfi_offset 5, -12
 2256              		.cfi_offset 6, -8
 2257              		.cfi_offset 14, -4
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 95


 2258              	.LVL302:
 2259              	.LBB55:
 2260              	.LBB56:
 220:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         (
 2261              		.loc 2 220 0
 2262              		.syntax unified
 2263              	@ 220 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 2264 0002 EFF31185 		   mrs r5, basepri                                         
 2265 0006 4FF0A003 	   mov r3, #160                                              
 2266 000a 83F31188 	   msr basepri, r3                                         
 2267 000e BFF36F8F 	   isb                                                     
 2268 0012 BFF34F8F 	   dsb                                                     
 2269              	
 2270              	@ 0 "" 2
 2271              		.thumb
 2272              		.syntax unified
 2273              	.LBE56:
 2274              	.LBE55:
2055:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 2275              		.loc 1 2055 0
 2276 0016 836B     		ldr	r3, [r0, #56]
 2277 0018 33B1     		cbz	r3, .L173
 2278 001a 0446     		mov	r4, r0
2061:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             prvCopyDataFromQueue( pxQueue, pvBuffer );
 2279              		.loc 1 2061 0
 2280 001c C668     		ldr	r6, [r0, #12]
 2281              	.LVL303:
2062:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2282              		.loc 1 2062 0
 2283 001e FFF7FEFF 		bl	prvCopyDataFromQueue
 2284              	.LVL304:
2063:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 2285              		.loc 1 2063 0
 2286 0022 E660     		str	r6, [r4, #12]
 2287              	.LVL305:
2065:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
 2288              		.loc 1 2065 0
 2289 0024 0120     		movs	r0, #1
 2290 0026 00E0     		b	.L172
 2291              	.LVL306:
 2292              	.L173:
2069:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2293              		.loc 1 2069 0
 2294 0028 0020     		movs	r0, #0
 2295              	.LVL307:
 2296              	.L172:
 2297              	.LBB57:
 2298              	.LBB58:
 2299              		.loc 2 238 0
 2300              		.syntax unified
 2301              	@ 238 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 2302 002a 85F31188 		   msr basepri, r5 
 2303              	@ 0 "" 2
 2304              	.LVL308:
 2305              		.thumb
 2306              		.syntax unified
 2307              	.LBE58:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 96


 2308              	.LBE57:
2076:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 2309              		.loc 1 2076 0
 2310 002e 70BD     		pop	{r4, r5, r6, pc}
 2311              		.cfi_endproc
 2312              	.LFE83:
 2313              		.size	xQueuePeekFromISR, .-xQueuePeekFromISR
 2314              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2315              		.align	2
 2316              		.global	uxQueueMessagesWaiting
 2317              		.thumb
 2318              		.thumb_func
 2319              		.type	uxQueueMessagesWaiting, %function
 2320              	uxQueueMessagesWaiting:
 2321              	.LFB84:
2080:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxReturn;
 2322              		.loc 1 2080 0
 2323              		.cfi_startproc
 2324              		@ args = 0, pretend = 0, frame = 0
 2325              		@ frame_needed = 0, uses_anonymous_args = 0
 2326              	.LVL309:
 2327 0000 10B5     		push	{r4, lr}
 2328              		.cfi_def_cfa_offset 8
 2329              		.cfi_offset 4, -8
 2330              		.cfi_offset 14, -4
 2331 0002 0446     		mov	r4, r0
2085:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 2332              		.loc 1 2085 0
 2333 0004 FFF7FEFF 		bl	vPortEnterCritical
 2334              	.LVL310:
2087:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 2335              		.loc 1 2087 0
 2336 0008 A46B     		ldr	r4, [r4, #56]
 2337              	.LVL311:
2089:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 2338              		.loc 1 2089 0
 2339 000a FFF7FEFF 		bl	vPortExitCritical
 2340              	.LVL312:
2092:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 2341              		.loc 1 2092 0
 2342 000e 2046     		mov	r0, r4
 2343 0010 10BD     		pop	{r4, pc}
 2344              		.cfi_endproc
 2345              	.LFE84:
 2346              		.size	uxQueueMessagesWaiting, .-uxQueueMessagesWaiting
 2347 0012 00BF     		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2348              		.align	2
 2349              		.global	uxQueueSpacesAvailable
 2350              		.thumb
 2351              		.thumb_func
 2352              		.type	uxQueueSpacesAvailable, %function
 2353              	uxQueueSpacesAvailable:
 2354              	.LFB85:
2096:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxReturn;
 2355              		.loc 1 2096 0
 2356              		.cfi_startproc
 2357              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 97


 2358              		@ frame_needed = 0, uses_anonymous_args = 0
 2359              	.LVL313:
 2360 0000 10B5     		push	{r4, lr}
 2361              		.cfi_def_cfa_offset 8
 2362              		.cfi_offset 4, -8
 2363              		.cfi_offset 14, -4
 2364 0002 0446     		mov	r4, r0
 2365              	.LVL314:
2102:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 2366              		.loc 1 2102 0
 2367 0004 FFF7FEFF 		bl	vPortEnterCritical
 2368              	.LVL315:
2104:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 2369              		.loc 1 2104 0
 2370 0008 E36B     		ldr	r3, [r4, #60]
 2371 000a A46B     		ldr	r4, [r4, #56]
 2372              	.LVL316:
 2373 000c 1C1B     		subs	r4, r3, r4
 2374              	.LVL317:
2106:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 2375              		.loc 1 2106 0
 2376 000e FFF7FEFF 		bl	vPortExitCritical
 2377              	.LVL318:
2109:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 2378              		.loc 1 2109 0
 2379 0012 2046     		mov	r0, r4
 2380 0014 10BD     		pop	{r4, pc}
 2381              		.cfi_endproc
 2382              	.LFE85:
 2383              		.size	uxQueueSpacesAvailable, .-uxQueueSpacesAvailable
 2384 0016 00BF     		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2385              		.align	2
 2386              		.global	uxQueueMessagesWaitingFromISR
 2387              		.thumb
 2388              		.thumb_func
 2389              		.type	uxQueueMessagesWaitingFromISR, %function
 2390              	uxQueueMessagesWaitingFromISR:
 2391              	.LFB86:
2113:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     UBaseType_t uxReturn;
 2392              		.loc 1 2113 0
 2393              		.cfi_startproc
 2394              		@ args = 0, pretend = 0, frame = 0
 2395              		@ frame_needed = 0, uses_anonymous_args = 0
 2396              		@ link register save eliminated.
 2397              	.LVL319:
2118:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 2398              		.loc 1 2118 0
 2399 0000 806B     		ldr	r0, [r0, #56]
 2400              	.LVL320:
2121:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 2401              		.loc 1 2121 0
 2402 0002 7047     		bx	lr
 2403              		.cfi_endproc
 2404              	.LFE86:
 2405              		.size	uxQueueMessagesWaitingFromISR, .-uxQueueMessagesWaitingFromISR
 2406              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2407              		.align	2
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 98


 2408              		.global	xQueueIsQueueEmptyFromISR
 2409              		.thumb
 2410              		.thumb_func
 2411              		.type	xQueueIsQueueEmptyFromISR, %function
 2412              	xQueueIsQueueEmptyFromISR:
 2413              	.LFB93:
2470:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
 2414              		.loc 1 2470 0
 2415              		.cfi_startproc
 2416              		@ args = 0, pretend = 0, frame = 0
 2417              		@ frame_needed = 0, uses_anonymous_args = 0
 2418              		@ link register save eliminated.
 2419              	.LVL321:
2476:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 2420              		.loc 1 2476 0
 2421 0000 836B     		ldr	r3, [r0, #56]
 2422 0002 0BB9     		cbnz	r3, .L182
2478:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 2423              		.loc 1 2478 0
 2424 0004 0120     		movs	r0, #1
 2425              	.LVL322:
 2426 0006 7047     		bx	lr
 2427              	.LVL323:
 2428              	.L182:
2482:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 2429              		.loc 1 2482 0
 2430 0008 0020     		movs	r0, #0
 2431              	.LVL324:
2486:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
 2432              		.loc 1 2486 0
 2433 000a 7047     		bx	lr
 2434              		.cfi_endproc
 2435              	.LFE93:
 2436              		.size	xQueueIsQueueEmptyFromISR, .-xQueueIsQueueEmptyFromISR
 2437              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2438              		.align	2
 2439              		.global	xQueueIsQueueFullFromISR
 2440              		.thumb
 2441              		.thumb_func
 2442              		.type	xQueueIsQueueFullFromISR, %function
 2443              	xQueueIsQueueFullFromISR:
 2444              	.LFB95:
2508:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2509:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2510:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2511:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** {
 2445              		.loc 1 2511 0
 2446              		.cfi_startproc
 2447              		@ args = 0, pretend = 0, frame = 0
 2448              		@ frame_needed = 0, uses_anonymous_args = 0
 2449              		@ link register save eliminated.
 2450              	.LVL325:
2512:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xReturn;
2513:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
2514:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2515:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     configASSERT( pxQueue );
2516:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 99


2517:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 2451              		.loc 1 2517 0
 2452 0000 826B     		ldr	r2, [r0, #56]
 2453 0002 C36B     		ldr	r3, [r0, #60]
 2454 0004 9A42     		cmp	r2, r3
 2455 0006 01D1     		bne	.L185
2518:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2519:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         xReturn = pdTRUE;
 2456              		.loc 1 2519 0
 2457 0008 0120     		movs	r0, #1
 2458              	.LVL326:
 2459 000a 7047     		bx	lr
 2460              	.LVL327:
 2461              	.L185:
2520:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2521:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     else
2522:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2523:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         xReturn = pdFALSE;
 2462              		.loc 1 2523 0
 2463 000c 0020     		movs	r0, #0
 2464              	.LVL328:
2524:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2525:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2526:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     return xReturn;
2527:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2465              		.loc 1 2527 0
 2466 000e 7047     		bx	lr
 2467              		.cfi_endproc
 2468              	.LFE95:
 2469              		.size	xQueueIsQueueFullFromISR, .-xQueueIsQueueFullFromISR
 2470              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2471              		.align	2
 2472              		.global	vQueueAddToRegistry
 2473              		.thumb
 2474              		.thumb_func
 2475              		.type	vQueueAddToRegistry, %function
 2476              	vQueueAddToRegistry:
 2477              	.LFB96:
2528:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2529:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2530:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2531:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2532:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xQueueCRSend( QueueHandle_t xQueue,
2533:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              const void * pvItemToQueue,
2534:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                              TickType_t xTicksToWait )
2535:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2536:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
2537:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         Queue_t * const pxQueue = xQueue;
2538:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2539:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* If the queue is already full we may have to block.  A critical section
2540:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * is required to prevent an interrupt removing something from the queue
2541:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * between the check to see if the queue is full and blocking on the queue. */
2542:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         portDISABLE_INTERRUPTS();
2543:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2544:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( prvIsQueueFull( pxQueue ) != pdFALSE )
2545:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2546:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* The queue is full - do we want to block or just leave without
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 100


2547:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * posting? */
2548:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2549:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2550:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* As this is called from a coroutine we cannot block directly, but
2551:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * return indicating that we need to block. */
2552:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2553:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     portENABLE_INTERRUPTS();
2554:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     return errQUEUE_BLOCKED;
2555:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2556:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
2557:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2558:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     portENABLE_INTERRUPTS();
2559:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     return errQUEUE_FULL;
2560:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2561:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2562:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2563:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         portENABLE_INTERRUPTS();
2564:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2565:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         portDISABLE_INTERRUPTS();
2566:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2567:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2568:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2569:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* There is room in the queue, copy the data into the queue. */
2570:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2571:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 xReturn = pdPASS;
2572:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2573:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Were any co-routines waiting for data to become available? */
2574:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2575:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2576:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* In this instance the co-routine could be placed directly
2577:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * into the ready list as we are within a critical section.
2578:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2579:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * the event were caused from within an interrupt. */
2580:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2581:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
2582:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         /* The co-routine waiting has a higher priority so record
2583:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                          * that a yield might be appropriate. */
2584:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         xReturn = errQUEUE_YIELD;
2585:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
2586:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
2587:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
2588:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2589:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
2590:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2591:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
2592:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2593:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2594:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2595:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2596:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
2597:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2598:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 xReturn = errQUEUE_FULL;
2599:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2600:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2601:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         portENABLE_INTERRUPTS();
2602:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2603:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return xReturn;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 101


2604:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2605:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2606:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configUSE_CO_ROUTINES */
2607:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2608:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2609:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2610:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2611:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xQueueCRReceive( QueueHandle_t xQueue,
2612:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 void * pvBuffer,
2613:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                 TickType_t xTicksToWait )
2614:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2615:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
2616:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         Queue_t * const pxQueue = xQueue;
2617:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2618:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* If the queue is already empty we may have to block.  A critical section
2619:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * is required to prevent an interrupt adding something to the queue
2620:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * between the check to see if the queue is empty and blocking on the queue. */
2621:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         portDISABLE_INTERRUPTS();
2622:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2623:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2624:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2625:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* There are no messages in the queue, do we want to block or just
2626:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * leave with nothing? */
2627:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( xTicksToWait > ( TickType_t ) 0 )
2628:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2629:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* As this is a co-routine we cannot block directly, but return
2630:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * indicating that we need to block. */
2631:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) 
2632:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     portENABLE_INTERRUPTS();
2633:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     return errQUEUE_BLOCKED;
2634:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2635:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
2636:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2637:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     portENABLE_INTERRUPTS();
2638:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     return errQUEUE_FULL;
2639:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2640:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2641:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
2642:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2643:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2644:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2645:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2646:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         portENABLE_INTERRUPTS();
2647:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2648:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         portDISABLE_INTERRUPTS();
2649:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2650:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2651:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2652:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Data is available from the queue. */
2653:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2654:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2655:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2656:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2657:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2658:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2659:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
2660:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 102


2661:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2662:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2663:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2664:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 --( pxQueue->uxMessagesWaiting );
2665:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( un
2666:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2667:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 xReturn = pdPASS;
2668:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2669:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Were any co-routines waiting for space to become available? */
2670:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2671:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2672:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     /* In this instance the co-routine could be placed directly
2673:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * into the ready list as we are within a critical section.
2674:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * Instead the same pending ready list mechanism is used as if
2675:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                      * the event were caused from within an interrupt. */
2676:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2677:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
2678:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         xReturn = errQUEUE_YIELD;
2679:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
2680:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
2681:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
2682:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2683:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
2684:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2685:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
2686:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2687:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2688:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2689:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2690:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
2691:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2692:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 xReturn = pdFAIL;
2693:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2694:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2695:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         portENABLE_INTERRUPTS();
2696:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2697:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return xReturn;
2698:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2699:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2700:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configUSE_CO_ROUTINES */
2701:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2702:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2703:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2704:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2705:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue,
2706:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                     const void * pvItemToQueue,
2707:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                     BaseType_t xCoRoutinePreviouslyWoken )
2708:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2709:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         Queue_t * const pxQueue = xQueue;
2710:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2711:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Cannot block within an ISR so if there is no space on the queue then
2712:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * exit without doing anything. */
2713:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2714:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2715:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2716:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2717:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* We only want to wake one co-routine per ISR, so check that a
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 103


2718:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * co-routine has not already been woken. */
2719:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( xCoRoutinePreviouslyWoken == pdFALSE )
2720:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2721:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2722:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2723:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pd
2724:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
2725:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         return pdTRUE;
2726:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
2727:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
2728:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
2729:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2730:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
2731:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2732:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
2733:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2734:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2735:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2736:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2737:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
2738:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2739:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2740:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2741:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2742:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
2743:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2744:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             mtCOVERAGE_TEST_MARKER();
2745:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2746:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2747:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return xCoRoutinePreviouslyWoken;
2748:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2749:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2750:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configUSE_CO_ROUTINES */
2751:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2752:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2753:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2754:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2755:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue,
2756:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                        void * pvBuffer,
2757:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                                        BaseType_t * pxCoRoutineWoken )
2758:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
2759:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         BaseType_t xReturn;
2760:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         Queue_t * const pxQueue = xQueue;
2761:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2762:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* We cannot block from an ISR, so check there is data available. If
2763:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * not then just leave without doing anything. */
2764:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2765:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2766:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Copy the data from the queue. */
2767:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2768:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2769:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2770:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2771:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2772:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2773:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
2774:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 104


2775:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2776:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2777:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2778:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             --( pxQueue->uxMessagesWaiting );
2779:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsign
2780:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2781:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( ( *pxCoRoutineWoken ) == pdFALSE )
2782:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2783:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2784:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2785:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFAL
2786:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
2787:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         *pxCoRoutineWoken = pdTRUE;
2788:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
2789:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     else
2790:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     {
2791:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                         mtCOVERAGE_TEST_MARKER();
2792:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     }
2793:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2794:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
2795:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2796:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2797:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2798:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2799:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
2800:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2801:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2802:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2803:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2804:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdPASS;
2805:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2806:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         else
2807:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2808:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             xReturn = pdFAIL;
2809:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2810:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2811:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return xReturn;
2812:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
2813:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2814:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configUSE_CO_ROUTINES */
2815:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2816:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2817:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2818:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2819:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     void vQueueAddToRegistry( QueueHandle_t xQueue,
2820:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                               const char * pcQueueName ) /*lint !e971 Unqualified char types are al
2821:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 2478              		.loc 1 2821 0
 2479              		.cfi_startproc
 2480              		@ args = 0, pretend = 0, frame = 0
 2481              		@ frame_needed = 0, uses_anonymous_args = 0
 2482              		@ link register save eliminated.
 2483              	.LVL329:
 2484 0000 10B4     		push	{r4}
 2485              		.cfi_def_cfa_offset 4
 2486              		.cfi_offset 4, -4
 2487              	.LVL330:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 105


2822:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         UBaseType_t ux;
2823:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         QueueRegistryItem_t * pxEntryToWrite = NULL;
2824:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2825:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         configASSERT( xQueue );
2826:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2827:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pcQueueName != NULL )
 2488              		.loc 1 2827 0
 2489 0002 0C46     		mov	r4, r1
 2490 0004 A1B9     		cbnz	r1, .L193
 2491 0006 17E0     		b	.L188
 2492              	.LVL331:
 2493              	.L191:
2828:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2829:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* See if there is an empty space in the registry.  A NULL name denotes
2830:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****              * a free slot. */
2831:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2832:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2833:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Replace an existing entry if the queue is already in the registry. */
2834:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 if( xQueue == xQueueRegistry[ ux ].xHandle )
 2494              		.loc 1 2834 0
 2495 0008 0E4A     		ldr	r2, .L195
 2496 000a 02EBC302 		add	r2, r2, r3, lsl #3
 2497 000e 5268     		ldr	r2, [r2, #4]
 2498 0010 8242     		cmp	r2, r0
 2499 0012 03D1     		bne	.L189
2835:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2836:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 2500              		.loc 1 2836 0
 2501 0014 0B49     		ldr	r1, .L195
 2502              	.LVL332:
 2503 0016 01EBC301 		add	r1, r1, r3, lsl #3
 2504              	.LVL333:
2837:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     break;
 2505              		.loc 1 2837 0
 2506 001a 0DE0     		b	.L188
 2507              	.L189:
2838:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2839:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Otherwise, store in the next empty location */
2840:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL )
 2508              		.loc 1 2840 0
 2509 001c 31B9     		cbnz	r1, .L190
 2510              		.loc 1 2840 0 is_stmt 0 discriminator 1
 2511 001e 094A     		ldr	r2, .L195
 2512 0020 52F83320 		ldr	r2, [r2, r3, lsl #3]
 2513 0024 12B9     		cbnz	r2, .L190
2841:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2842:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 2514              		.loc 1 2842 0 is_stmt 1
 2515 0026 0749     		ldr	r1, .L195
 2516              	.LVL334:
 2517 0028 01EBC301 		add	r1, r1, r3, lsl #3
 2518              	.LVL335:
 2519              	.L190:
2831:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 2520              		.loc 1 2831 0 discriminator 2
 2521 002c 0133     		adds	r3, r3, #1
 2522              	.LVL336:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 106


 2523 002e 01E0     		b	.L187
 2524              	.LVL337:
 2525              	.L193:
 2526 0030 0021     		movs	r1, #0
 2527              	.LVL338:
 2528 0032 0B46     		mov	r3, r1
 2529              	.LVL339:
 2530              	.L187:
2831:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
 2531              		.loc 1 2831 0 is_stmt 0 discriminator 1
 2532 0034 092B     		cmp	r3, #9
 2533 0036 E7D9     		bls	.L191
 2534              	.LVL340:
 2535              	.L188:
2843:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2844:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 else
2845:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 {
2846:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                     mtCOVERAGE_TEST_MARKER();
2847:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 }
2848:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2849:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2850:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2851:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         if( pxEntryToWrite != NULL )
 2536              		.loc 1 2851 0 is_stmt 1
 2537 0038 09B1     		cbz	r1, .L186
2852:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2853:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             /* Store the information on this queue. */
2854:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxEntryToWrite->pcQueueName = pcQueueName;
 2538              		.loc 1 2854 0
 2539 003a 0C60     		str	r4, [r1]
2855:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             pxEntryToWrite->xHandle = xQueue;
 2540              		.loc 1 2855 0
 2541 003c 4860     		str	r0, [r1, #4]
 2542              	.L186:
2856:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2857:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2858:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2859:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 2543              		.loc 1 2859 0
 2544 003e 10BC     		pop	{r4}
 2545              		.cfi_restore 4
 2546              		.cfi_def_cfa_offset 0
 2547              	.LVL341:
 2548 0040 7047     		bx	lr
 2549              	.L196:
 2550 0042 00BF     		.align	2
 2551              	.L195:
 2552 0044 00000000 		.word	xQueueRegistry
 2553              		.cfi_endproc
 2554              	.LFE96:
 2555              		.size	vQueueAddToRegistry, .-vQueueAddToRegistry
 2556              		.section	.text.pcQueueGetName,"ax",%progbits
 2557              		.align	2
 2558              		.global	pcQueueGetName
 2559              		.thumb
 2560              		.thumb_func
 2561              		.type	pcQueueGetName, %function
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 107


 2562              	pcQueueGetName:
 2563              	.LFB97:
2860:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2861:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2862:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2863:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2864:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2865:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2866:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     const char * pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are all
2867:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 2564              		.loc 1 2867 0
 2565              		.cfi_startproc
 2566              		@ args = 0, pretend = 0, frame = 0
 2567              		@ frame_needed = 0, uses_anonymous_args = 0
 2568              		@ link register save eliminated.
 2569              	.LVL342:
2868:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         UBaseType_t ux;
2869:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings a
2870:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2871:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         configASSERT( xQueue );
2872:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2873:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* Note there is nothing here to protect against another task adding or
2874:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * removing entries from the registry while it is being searched. */
2875:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2876:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2570              		.loc 1 2876 0
 2571 0000 0023     		movs	r3, #0
 2572 0002 0AE0     		b	.L198
 2573              	.LVL343:
 2574              	.L201:
2877:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2878:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 2575              		.loc 1 2878 0
 2576 0004 074A     		ldr	r2, .L202
 2577 0006 02EBC302 		add	r2, r2, r3, lsl #3
 2578 000a 5268     		ldr	r2, [r2, #4]
 2579 000c 8242     		cmp	r2, r0
 2580 000e 03D1     		bne	.L199
2879:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2880:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 pcReturn = xQueueRegistry[ ux ].pcQueueName;
 2581              		.loc 1 2880 0
 2582 0010 044A     		ldr	r2, .L202
 2583 0012 52F83300 		ldr	r0, [r2, r3, lsl #3]
 2584              	.LVL344:
2881:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 break;
 2585              		.loc 1 2881 0
 2586 0016 7047     		bx	lr
 2587              	.LVL345:
 2588              	.L199:
2876:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 2589              		.loc 1 2876 0 discriminator 2
 2590 0018 0133     		adds	r3, r3, #1
 2591              	.LVL346:
 2592              	.L198:
2876:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 2593              		.loc 1 2876 0 is_stmt 0 discriminator 1
 2594 001a 092B     		cmp	r3, #9
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 108


 2595 001c F2D9     		bls	.L201
2869:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
 2596              		.loc 1 2869 0 is_stmt 1
 2597 001e 0020     		movs	r0, #0
 2598              	.LVL347:
2882:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2883:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             else
2884:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2885:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 mtCOVERAGE_TEST_MARKER();
2886:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             }
2887:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         }
2888:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2889:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         return pcReturn;
2890:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 2599              		.loc 1 2890 0
 2600 0020 7047     		bx	lr
 2601              	.L203:
 2602 0022 00BF     		.align	2
 2603              	.L202:
 2604 0024 00000000 		.word	xQueueRegistry
 2605              		.cfi_endproc
 2606              	.LFE97:
 2607              		.size	pcQueueGetName, .-pcQueueGetName
 2608              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 2609              		.align	2
 2610              		.global	vQueueUnregisterQueue
 2611              		.thumb
 2612              		.thumb_func
 2613              		.type	vQueueUnregisterQueue, %function
 2614              	vQueueUnregisterQueue:
 2615              	.LFB98:
2891:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2892:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2893:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** /*-----------------------------------------------------------*/
2894:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2895:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2896:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2897:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     void vQueueUnregisterQueue( QueueHandle_t xQueue )
2898:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     {
 2616              		.loc 1 2898 0
 2617              		.cfi_startproc
 2618              		@ args = 0, pretend = 0, frame = 0
 2619              		@ frame_needed = 0, uses_anonymous_args = 0
 2620              		@ link register save eliminated.
 2621              	.LVL348:
2899:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         UBaseType_t ux;
2900:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2901:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         configASSERT( xQueue );
2902:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2903:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         /* See if the handle of the queue being unregistered in actually in the
2904:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****          * registry. */
2905:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2622              		.loc 1 2905 0
 2623 0000 0023     		movs	r3, #0
 2624 0002 0EE0     		b	.L205
 2625              	.LVL349:
 2626              	.L208:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 109


2906:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
2907:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             if( xQueueRegistry[ ux ].xHandle == xQueue )
 2627              		.loc 1 2907 0
 2628 0004 084A     		ldr	r2, .L209
 2629 0006 02EBC302 		add	r2, r2, r3, lsl #3
 2630 000a 5268     		ldr	r2, [r2, #4]
 2631 000c 8242     		cmp	r2, r0
 2632 000e 07D1     		bne	.L206
2908:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****             {
2909:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Set the name to NULL to show that this slot if free again. */
2910:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 xQueueRegistry[ ux ].pcQueueName = NULL;
 2633              		.loc 1 2910 0
 2634 0010 054A     		ldr	r2, .L209
 2635 0012 0021     		movs	r1, #0
 2636 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2911:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c **** 
2912:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 /* Set the handle to NULL to ensure the same queue handle cannot
2913:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * appear in the registry twice if it is added, removed, then
2914:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                  * added again. */
2915:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 2637              		.loc 1 2915 0
 2638 0018 02EBC303 		add	r3, r2, r3, lsl #3
 2639              	.LVL350:
 2640 001c 5960     		str	r1, [r3, #4]
2916:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****                 break;
 2641              		.loc 1 2916 0
 2642 001e 7047     		bx	lr
 2643              	.LVL351:
 2644              	.L206:
2905:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 2645              		.loc 1 2905 0 discriminator 2
 2646 0020 0133     		adds	r3, r3, #1
 2647              	.LVL352:
 2648              	.L205:
2905:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****         {
 2649              		.loc 1 2905 0 is_stmt 0 discriminator 1
 2650 0022 092B     		cmp	r3, #9
 2651 0024 EED9     		bls	.L208
 2652 0026 7047     		bx	lr
 2653              	.L210:
 2654              		.align	2
 2655              	.L209:
 2656 0028 00000000 		.word	xQueueRegistry
 2657              		.cfi_endproc
 2658              	.LFE98:
 2659              		.size	vQueueUnregisterQueue, .-vQueueUnregisterQueue
 2660              		.section	.text.vQueueDelete,"ax",%progbits
 2661              		.align	2
 2662              		.global	vQueueDelete
 2663              		.thumb
 2664              		.thumb_func
 2665              		.type	vQueueDelete, %function
 2666              	vQueueDelete:
 2667              	.LFB87:
2125:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     Queue_t * const pxQueue = xQueue;
 2668              		.loc 1 2125 0 is_stmt 1
 2669              		.cfi_startproc
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 110


 2670              		@ args = 0, pretend = 0, frame = 0
 2671              		@ frame_needed = 0, uses_anonymous_args = 0
 2672              	.LVL353:
 2673 0000 10B5     		push	{r4, lr}
 2674              		.cfi_def_cfa_offset 8
 2675              		.cfi_offset 4, -8
 2676              		.cfi_offset 14, -4
 2677 0002 0446     		mov	r4, r0
 2678              	.LVL354:
2133:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 2679              		.loc 1 2133 0
 2680 0004 FFF7FEFF 		bl	vQueueUnregisterQueue
 2681              	.LVL355:
2141:..\..\..\FreeRTOS\FreeRTOS-Kernel/queue.c ****     }
 2682              		.loc 1 2141 0
 2683 0008 2046     		mov	r0, r4
 2684 000a FFF7FEFF 		bl	vPortFree
 2685              	.LVL356:
 2686 000e 10BD     		pop	{r4, pc}
 2687              		.cfi_endproc
 2688              	.LFE87:
 2689              		.size	vQueueDelete, .-vQueueDelete
 2690              		.comm	xQueueRegistry,80,4
 2691              		.text
 2692              	.Letext0:
 2693              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2694              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2695              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 2696              		.file 6 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\include/list.h"
 2697              		.file 7 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\include/task.h"
 2698              		.file 8 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\include/queue.h"
 2699              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 2700              		.file 10 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\include/portable.h"
 2701              		.section	.debug_info,"",%progbits
 2702              	.Ldebug_info0:
 2703 0000 1B1A0000 		.4byte	0x1a1b
 2704 0004 0400     		.2byte	0x4
 2705 0006 00000000 		.4byte	.Ldebug_abbrev0
 2706 000a 04       		.byte	0x4
 2707 000b 01       		.uleb128 0x1
 2708 000c 6A070000 		.4byte	.LASF160
 2709 0010 0C       		.byte	0xc
 2710 0011 FE000000 		.4byte	.LASF161
 2711 0015 2B060000 		.4byte	.LASF162
 2712 0019 48000000 		.4byte	.Ldebug_ranges0+0x48
 2713 001d 00000000 		.4byte	0
 2714 0021 00000000 		.4byte	.Ldebug_line0
 2715 0025 02       		.uleb128 0x2
 2716 0026 89000000 		.4byte	.LASF3
 2717 002a 03       		.byte	0x3
 2718 002b D8       		.byte	0xd8
 2719 002c 30000000 		.4byte	0x30
 2720 0030 03       		.uleb128 0x3
 2721 0031 04       		.byte	0x4
 2722 0032 07       		.byte	0x7
 2723 0033 B6030000 		.4byte	.LASF0
 2724 0037 04       		.uleb128 0x4
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 111


 2725 0038 04       		.byte	0x4
 2726 0039 05       		.byte	0x5
 2727 003a 696E7400 		.ascii	"int\000"
 2728 003e 03       		.uleb128 0x3
 2729 003f 08       		.byte	0x8
 2730 0040 05       		.byte	0x5
 2731 0041 12020000 		.4byte	.LASF1
 2732 0045 03       		.uleb128 0x3
 2733 0046 08       		.byte	0x8
 2734 0047 04       		.byte	0x4
 2735 0048 0C050000 		.4byte	.LASF2
 2736 004c 02       		.uleb128 0x2
 2737 004d 80020000 		.4byte	.LASF4
 2738 0051 04       		.byte	0x4
 2739 0052 1B       		.byte	0x1b
 2740 0053 57000000 		.4byte	0x57
 2741 0057 03       		.uleb128 0x3
 2742 0058 01       		.byte	0x1
 2743 0059 06       		.byte	0x6
 2744 005a 20020000 		.4byte	.LASF5
 2745 005e 02       		.uleb128 0x2
 2746 005f 28010000 		.4byte	.LASF6
 2747 0063 04       		.byte	0x4
 2748 0064 1D       		.byte	0x1d
 2749 0065 69000000 		.4byte	0x69
 2750 0069 03       		.uleb128 0x3
 2751 006a 01       		.byte	0x1
 2752 006b 08       		.byte	0x8
 2753 006c CA060000 		.4byte	.LASF7
 2754 0070 03       		.uleb128 0x3
 2755 0071 02       		.byte	0x2
 2756 0072 05       		.byte	0x5
 2757 0073 ED060000 		.4byte	.LASF8
 2758 0077 03       		.uleb128 0x3
 2759 0078 02       		.byte	0x2
 2760 0079 07       		.byte	0x7
 2761 007a 60040000 		.4byte	.LASF9
 2762 007e 02       		.uleb128 0x2
 2763 007f FF080000 		.4byte	.LASF10
 2764 0083 04       		.byte	0x4
 2765 0084 3F       		.byte	0x3f
 2766 0085 89000000 		.4byte	0x89
 2767 0089 03       		.uleb128 0x3
 2768 008a 04       		.byte	0x4
 2769 008b 05       		.byte	0x5
 2770 008c A0020000 		.4byte	.LASF11
 2771 0090 02       		.uleb128 0x2
 2772 0091 5F030000 		.4byte	.LASF12
 2773 0095 04       		.byte	0x4
 2774 0096 41       		.byte	0x41
 2775 0097 9B000000 		.4byte	0x9b
 2776 009b 03       		.uleb128 0x3
 2777 009c 04       		.byte	0x4
 2778 009d 07       		.byte	0x7
 2779 009e 04040000 		.4byte	.LASF13
 2780 00a2 03       		.uleb128 0x3
 2781 00a3 08       		.byte	0x8
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 112


 2782 00a4 07       		.byte	0x7
 2783 00a5 7C010000 		.4byte	.LASF14
 2784 00a9 03       		.uleb128 0x3
 2785 00aa 04       		.byte	0x4
 2786 00ab 07       		.byte	0x7
 2787 00ac 03050000 		.4byte	.LASF15
 2788 00b0 05       		.uleb128 0x5
 2789 00b1 04       		.byte	0x4
 2790 00b2 03       		.uleb128 0x3
 2791 00b3 01       		.byte	0x1
 2792 00b4 08       		.byte	0x8
 2793 00b5 80080000 		.4byte	.LASF16
 2794 00b9 06       		.uleb128 0x6
 2795 00ba 04       		.byte	0x4
 2796 00bb BF000000 		.4byte	0xbf
 2797 00bf 07       		.uleb128 0x7
 2798 00c0 B2000000 		.4byte	0xb2
 2799 00c4 06       		.uleb128 0x6
 2800 00c5 04       		.byte	0x4
 2801 00c6 CA000000 		.4byte	0xca
 2802 00ca 08       		.uleb128 0x8
 2803 00cb 02       		.uleb128 0x2
 2804 00cc 8A090000 		.4byte	.LASF17
 2805 00d0 05       		.byte	0x5
 2806 00d1 14       		.byte	0x14
 2807 00d2 4C000000 		.4byte	0x4c
 2808 00d6 02       		.uleb128 0x2
 2809 00d7 200A0000 		.4byte	.LASF18
 2810 00db 05       		.byte	0x5
 2811 00dc 18       		.byte	0x18
 2812 00dd 5E000000 		.4byte	0x5e
 2813 00e1 02       		.uleb128 0x2
 2814 00e2 C2060000 		.4byte	.LASF19
 2815 00e6 05       		.byte	0x5
 2816 00e7 2C       		.byte	0x2c
 2817 00e8 7E000000 		.4byte	0x7e
 2818 00ec 02       		.uleb128 0x2
 2819 00ed C30A0000 		.4byte	.LASF20
 2820 00f1 05       		.byte	0x5
 2821 00f2 30       		.byte	0x30
 2822 00f3 90000000 		.4byte	0x90
 2823 00f7 03       		.uleb128 0x3
 2824 00f8 04       		.byte	0x4
 2825 00f9 04       		.byte	0x4
 2826 00fa 5F060000 		.4byte	.LASF21
 2827 00fe 03       		.uleb128 0x3
 2828 00ff 08       		.byte	0x8
 2829 0100 04       		.byte	0x4
 2830 0101 ED020000 		.4byte	.LASF22
 2831 0105 02       		.uleb128 0x2
 2832 0106 FF020000 		.4byte	.LASF23
 2833 010a 02       		.byte	0x2
 2834 010b 3B       		.byte	0x3b
 2835 010c 89000000 		.4byte	0x89
 2836 0110 02       		.uleb128 0x2
 2837 0111 B70A0000 		.4byte	.LASF24
 2838 0115 02       		.byte	0x2
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 113


 2839 0116 3C       		.byte	0x3c
 2840 0117 9B000000 		.4byte	0x9b
 2841 011b 02       		.uleb128 0x2
 2842 011c E2020000 		.4byte	.LASF25
 2843 0120 02       		.byte	0x2
 2844 0121 42       		.byte	0x42
 2845 0122 EC000000 		.4byte	0xec
 2846 0126 06       		.uleb128 0x6
 2847 0127 04       		.byte	0x4
 2848 0128 D6000000 		.4byte	0xd6
 2849 012c 09       		.uleb128 0x9
 2850 012d 52090000 		.4byte	.LASF31
 2851 0131 14       		.byte	0x14
 2852 0132 06       		.byte	0x6
 2853 0133 90       		.byte	0x90
 2854 0134 75010000 		.4byte	0x175
 2855 0138 0A       		.uleb128 0xa
 2856 0139 F3090000 		.4byte	.LASF26
 2857 013d 06       		.byte	0x6
 2858 013e 93       		.byte	0x93
 2859 013f 1B010000 		.4byte	0x11b
 2860 0143 00       		.byte	0
 2861 0144 0A       		.uleb128 0xa
 2862 0145 620A0000 		.4byte	.LASF27
 2863 0149 06       		.byte	0x6
 2864 014a 94       		.byte	0x94
 2865 014b 75010000 		.4byte	0x175
 2866 014f 04       		.byte	0x4
 2867 0150 0A       		.uleb128 0xa
 2868 0151 C9050000 		.4byte	.LASF28
 2869 0155 06       		.byte	0x6
 2870 0156 95       		.byte	0x95
 2871 0157 75010000 		.4byte	0x175
 2872 015b 08       		.byte	0x8
 2873 015c 0A       		.uleb128 0xa
 2874 015d D7090000 		.4byte	.LASF29
 2875 0161 06       		.byte	0x6
 2876 0162 96       		.byte	0x96
 2877 0163 B0000000 		.4byte	0xb0
 2878 0167 0C       		.byte	0xc
 2879 0168 0A       		.uleb128 0xa
 2880 0169 74060000 		.4byte	.LASF30
 2881 016d 06       		.byte	0x6
 2882 016e 97       		.byte	0x97
 2883 016f AC010000 		.4byte	0x1ac
 2884 0173 10       		.byte	0x10
 2885 0174 00       		.byte	0
 2886 0175 06       		.uleb128 0x6
 2887 0176 04       		.byte	0x4
 2888 0177 2C010000 		.4byte	0x12c
 2889 017b 09       		.uleb128 0x9
 2890 017c 4B070000 		.4byte	.LASF32
 2891 0180 14       		.byte	0x14
 2892 0181 06       		.byte	0x6
 2893 0182 AC       		.byte	0xac
 2894 0183 AC010000 		.4byte	0x1ac
 2895 0187 0A       		.uleb128 0xa
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 114


 2896 0188 F4030000 		.4byte	.LASF33
 2897 018c 06       		.byte	0x6
 2898 018d AF       		.byte	0xaf
 2899 018e F9010000 		.4byte	0x1f9
 2900 0192 00       		.byte	0
 2901 0193 0A       		.uleb128 0xa
 2902 0194 6C060000 		.4byte	.LASF34
 2903 0198 06       		.byte	0x6
 2904 0199 B0       		.byte	0xb0
 2905 019a FE010000 		.4byte	0x1fe
 2906 019e 04       		.byte	0x4
 2907 019f 0A       		.uleb128 0xa
 2908 01a0 D9020000 		.4byte	.LASF35
 2909 01a4 06       		.byte	0x6
 2910 01a5 B1       		.byte	0xb1
 2911 01a6 EE010000 		.4byte	0x1ee
 2912 01aa 08       		.byte	0x8
 2913 01ab 00       		.byte	0
 2914 01ac 06       		.uleb128 0x6
 2915 01ad 04       		.byte	0x4
 2916 01ae 7B010000 		.4byte	0x17b
 2917 01b2 02       		.uleb128 0x2
 2918 01b3 ED080000 		.4byte	.LASF36
 2919 01b7 06       		.byte	0x6
 2920 01b8 9A       		.byte	0x9a
 2921 01b9 2C010000 		.4byte	0x12c
 2922 01bd 09       		.uleb128 0x9
 2923 01be E9010000 		.4byte	.LASF37
 2924 01c2 0C       		.byte	0xc
 2925 01c3 06       		.byte	0x6
 2926 01c4 9D       		.byte	0x9d
 2927 01c5 EE010000 		.4byte	0x1ee
 2928 01c9 0A       		.uleb128 0xa
 2929 01ca F3090000 		.4byte	.LASF26
 2930 01ce 06       		.byte	0x6
 2931 01cf A0       		.byte	0xa0
 2932 01d0 1B010000 		.4byte	0x11b
 2933 01d4 00       		.byte	0
 2934 01d5 0A       		.uleb128 0xa
 2935 01d6 620A0000 		.4byte	.LASF27
 2936 01da 06       		.byte	0x6
 2937 01db A1       		.byte	0xa1
 2938 01dc 75010000 		.4byte	0x175
 2939 01e0 04       		.byte	0x4
 2940 01e1 0A       		.uleb128 0xa
 2941 01e2 C9050000 		.4byte	.LASF28
 2942 01e6 06       		.byte	0x6
 2943 01e7 A2       		.byte	0xa2
 2944 01e8 75010000 		.4byte	0x175
 2945 01ec 08       		.byte	0x8
 2946 01ed 00       		.byte	0
 2947 01ee 02       		.uleb128 0x2
 2948 01ef 8C050000 		.4byte	.LASF38
 2949 01f3 06       		.byte	0x6
 2950 01f4 A4       		.byte	0xa4
 2951 01f5 BD010000 		.4byte	0x1bd
 2952 01f9 0B       		.uleb128 0xb
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 115


 2953 01fa 10010000 		.4byte	0x110
 2954 01fe 06       		.uleb128 0x6
 2955 01ff 04       		.byte	0x4
 2956 0200 B2010000 		.4byte	0x1b2
 2957 0204 02       		.uleb128 0x2
 2958 0205 F8070000 		.4byte	.LASF39
 2959 0209 06       		.byte	0x6
 2960 020a B3       		.byte	0xb3
 2961 020b 7B010000 		.4byte	0x17b
 2962 020f 02       		.uleb128 0x2
 2963 0210 C5020000 		.4byte	.LASF40
 2964 0214 07       		.byte	0x7
 2965 0215 57       		.byte	0x57
 2966 0216 1A020000 		.4byte	0x21a
 2967 021a 06       		.uleb128 0x6
 2968 021b 04       		.byte	0x4
 2969 021c 20020000 		.4byte	0x220
 2970 0220 0C       		.uleb128 0xc
 2971 0221 A9020000 		.4byte	.LASF163
 2972 0225 09       		.uleb128 0x9
 2973 0226 DF010000 		.4byte	.LASF41
 2974 022a 08       		.byte	0x8
 2975 022b 07       		.byte	0x7
 2976 022c 77       		.byte	0x77
 2977 022d 4A020000 		.4byte	0x24a
 2978 0231 0A       		.uleb128 0xa
 2979 0232 6A030000 		.4byte	.LASF42
 2980 0236 07       		.byte	0x7
 2981 0237 79       		.byte	0x79
 2982 0238 05010000 		.4byte	0x105
 2983 023c 00       		.byte	0
 2984 023d 0A       		.uleb128 0xa
 2985 023e E4030000 		.4byte	.LASF43
 2986 0242 07       		.byte	0x7
 2987 0243 7A       		.byte	0x7a
 2988 0244 1B010000 		.4byte	0x11b
 2989 0248 04       		.byte	0x4
 2990 0249 00       		.byte	0
 2991 024a 02       		.uleb128 0x2
 2992 024b 9D000000 		.4byte	.LASF44
 2993 024f 07       		.byte	0x7
 2994 0250 7B       		.byte	0x7b
 2995 0251 25020000 		.4byte	0x225
 2996 0255 02       		.uleb128 0x2
 2997 0256 C4010000 		.4byte	.LASF45
 2998 025a 08       		.byte	0x8
 2999 025b 33       		.byte	0x33
 3000 025c 60020000 		.4byte	0x260
 3001 0260 06       		.uleb128 0x6
 3002 0261 04       		.byte	0x4
 3003 0262 66020000 		.4byte	0x266
 3004 0266 09       		.uleb128 0x9
 3005 0267 100A0000 		.4byte	.LASF46
 3006 026b 48       		.byte	0x48
 3007 026c 01       		.byte	0x1
 3008 026d 64       		.byte	0x64
 3009 026e E9020000 		.4byte	0x2e9
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 116


 3010 0272 0A       		.uleb128 0xa
 3011 0273 AF030000 		.4byte	.LASF47
 3012 0277 01       		.byte	0x1
 3013 0278 66       		.byte	0x66
 3014 0279 0E030000 		.4byte	0x30e
 3015 027d 00       		.byte	0
 3016 027e 0A       		.uleb128 0xa
 3017 027f 280A0000 		.4byte	.LASF48
 3018 0283 01       		.byte	0x1
 3019 0284 67       		.byte	0x67
 3020 0285 0E030000 		.4byte	0x30e
 3021 0289 04       		.byte	0x4
 3022 028a 0D       		.uleb128 0xd
 3023 028b 7500     		.ascii	"u\000"
 3024 028d 01       		.byte	0x1
 3025 028e 6D       		.byte	0x6d
 3026 028f 4F030000 		.4byte	0x34f
 3027 0293 08       		.byte	0x8
 3028 0294 0A       		.uleb128 0xa
 3029 0295 DF090000 		.4byte	.LASF49
 3030 0299 01       		.byte	0x1
 3031 029a 6F       		.byte	0x6f
 3032 029b 04020000 		.4byte	0x204
 3033 029f 10       		.byte	0x10
 3034 02a0 0A       		.uleb128 0xa
 3035 02a1 AB050000 		.4byte	.LASF50
 3036 02a5 01       		.byte	0x1
 3037 02a6 70       		.byte	0x70
 3038 02a7 04020000 		.4byte	0x204
 3039 02ab 24       		.byte	0x24
 3040 02ac 0A       		.uleb128 0xa
 3041 02ad 4A080000 		.4byte	.LASF51
 3042 02b1 01       		.byte	0x1
 3043 02b2 72       		.byte	0x72
 3044 02b3 F9010000 		.4byte	0x1f9
 3045 02b7 38       		.byte	0x38
 3046 02b8 0A       		.uleb128 0xa
 3047 02b9 96060000 		.4byte	.LASF52
 3048 02bd 01       		.byte	0x1
 3049 02be 73       		.byte	0x73
 3050 02bf 10010000 		.4byte	0x110
 3051 02c3 3C       		.byte	0x3c
 3052 02c4 0A       		.uleb128 0xa
 3053 02c5 570A0000 		.4byte	.LASF53
 3054 02c9 01       		.byte	0x1
 3055 02ca 74       		.byte	0x74
 3056 02cb 10010000 		.4byte	0x110
 3057 02cf 40       		.byte	0x40
 3058 02d0 0A       		.uleb128 0xa
 3059 02d1 F7060000 		.4byte	.LASF54
 3060 02d5 01       		.byte	0x1
 3061 02d6 76       		.byte	0x76
 3062 02d7 6E030000 		.4byte	0x36e
 3063 02db 44       		.byte	0x44
 3064 02dc 0A       		.uleb128 0xa
 3065 02dd BD020000 		.4byte	.LASF55
 3066 02e1 01       		.byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 117


 3067 02e2 77       		.byte	0x77
 3068 02e3 6E030000 		.4byte	0x36e
 3069 02e7 45       		.byte	0x45
 3070 02e8 00       		.byte	0
 3071 02e9 09       		.uleb128 0x9
 3072 02ea F5040000 		.4byte	.LASF56
 3073 02ee 08       		.byte	0x8
 3074 02ef 01       		.byte	0x1
 3075 02f0 45       		.byte	0x45
 3076 02f1 0E030000 		.4byte	0x30e
 3077 02f5 0A       		.uleb128 0xa
 3078 02f6 F8080000 		.4byte	.LASF57
 3079 02fa 01       		.byte	0x1
 3080 02fb 47       		.byte	0x47
 3081 02fc 0E030000 		.4byte	0x30e
 3082 0300 00       		.byte	0
 3083 0301 0A       		.uleb128 0xa
 3084 0302 F4020000 		.4byte	.LASF58
 3085 0306 01       		.byte	0x1
 3086 0307 48       		.byte	0x48
 3087 0308 0E030000 		.4byte	0x30e
 3088 030c 04       		.byte	0x4
 3089 030d 00       		.byte	0
 3090 030e 06       		.uleb128 0x6
 3091 030f 04       		.byte	0x4
 3092 0310 CB000000 		.4byte	0xcb
 3093 0314 02       		.uleb128 0x2
 3094 0315 FF060000 		.4byte	.LASF59
 3095 0319 01       		.byte	0x1
 3096 031a 49       		.byte	0x49
 3097 031b E9020000 		.4byte	0x2e9
 3098 031f 09       		.uleb128 0x9
 3099 0320 B4060000 		.4byte	.LASF60
 3100 0324 08       		.byte	0x8
 3101 0325 01       		.byte	0x1
 3102 0326 4B       		.byte	0x4b
 3103 0327 44030000 		.4byte	0x344
 3104 032b 0A       		.uleb128 0xa
 3105 032c 90000000 		.4byte	.LASF61
 3106 0330 01       		.byte	0x1
 3107 0331 4D       		.byte	0x4d
 3108 0332 0F020000 		.4byte	0x20f
 3109 0336 00       		.byte	0
 3110 0337 0A       		.uleb128 0xa
 3111 0338 D8060000 		.4byte	.LASF62
 3112 033c 01       		.byte	0x1
 3113 033d 4E       		.byte	0x4e
 3114 033e 10010000 		.4byte	0x110
 3115 0342 04       		.byte	0x4
 3116 0343 00       		.byte	0
 3117 0344 02       		.uleb128 0x2
 3118 0345 82040000 		.4byte	.LASF63
 3119 0349 01       		.byte	0x1
 3120 034a 4F       		.byte	0x4f
 3121 034b 1F030000 		.4byte	0x31f
 3122 034f 0E       		.uleb128 0xe
 3123 0350 08       		.byte	0x8
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 118


 3124 0351 01       		.byte	0x1
 3125 0352 69       		.byte	0x69
 3126 0353 6E030000 		.4byte	0x36e
 3127 0357 0F       		.uleb128 0xf
 3128 0358 C2050000 		.4byte	.LASF64
 3129 035c 01       		.byte	0x1
 3130 035d 6B       		.byte	0x6b
 3131 035e 14030000 		.4byte	0x314
 3132 0362 0F       		.uleb128 0xf
 3133 0363 F2050000 		.4byte	.LASF65
 3134 0367 01       		.byte	0x1
 3135 0368 6C       		.byte	0x6c
 3136 0369 44030000 		.4byte	0x344
 3137 036d 00       		.byte	0
 3138 036e 0B       		.uleb128 0xb
 3139 036f CB000000 		.4byte	0xcb
 3140 0373 02       		.uleb128 0x2
 3141 0374 65060000 		.4byte	.LASF66
 3142 0378 01       		.byte	0x1
 3143 0379 85       		.byte	0x85
 3144 037a 66020000 		.4byte	0x266
 3145 037e 02       		.uleb128 0x2
 3146 037f 5B050000 		.4byte	.LASF67
 3147 0383 01       		.byte	0x1
 3148 0384 89       		.byte	0x89
 3149 0385 73030000 		.4byte	0x373
 3150 0389 09       		.uleb128 0x9
 3151 038a B0010000 		.4byte	.LASF68
 3152 038e 08       		.byte	0x8
 3153 038f 01       		.byte	0x1
 3154 0390 96       		.byte	0x96
 3155 0391 AE030000 		.4byte	0x3ae
 3156 0395 0A       		.uleb128 0xa
 3157 0396 C3080000 		.4byte	.LASF69
 3158 039a 01       		.byte	0x1
 3159 039b 98       		.byte	0x98
 3160 039c B9000000 		.4byte	0xb9
 3161 03a0 00       		.byte	0
 3162 03a1 0A       		.uleb128 0xa
 3163 03a2 80060000 		.4byte	.LASF70
 3164 03a6 01       		.byte	0x1
 3165 03a7 99       		.byte	0x99
 3166 03a8 55020000 		.4byte	0x255
 3167 03ac 04       		.byte	0x4
 3168 03ad 00       		.byte	0
 3169 03ae 02       		.uleb128 0x2
 3170 03af B2040000 		.4byte	.LASF71
 3171 03b3 01       		.byte	0x1
 3172 03b4 9A       		.byte	0x9a
 3173 03b5 89030000 		.4byte	0x389
 3174 03b9 02       		.uleb128 0x2
 3175 03ba B6000000 		.4byte	.LASF72
 3176 03be 01       		.byte	0x1
 3177 03bf 9F       		.byte	0x9f
 3178 03c0 AE030000 		.4byte	0x3ae
 3179 03c4 10       		.uleb128 0x10
 3180 03c5 48050000 		.4byte	.LASF164
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 119


 3181 03c9 02       		.byte	0x2
 3182 03ca D8       		.byte	0xd8
 3183 03cb EC000000 		.4byte	0xec
 3184 03cf 03       		.byte	0x3
 3185 03d0 EB030000 		.4byte	0x3eb
 3186 03d4 11       		.uleb128 0x11
 3187 03d5 1A000000 		.4byte	.LASF73
 3188 03d9 02       		.byte	0x2
 3189 03da DA       		.byte	0xda
 3190 03db EC000000 		.4byte	0xec
 3191 03df 11       		.uleb128 0x11
 3192 03e0 4F010000 		.4byte	.LASF74
 3193 03e4 02       		.byte	0x2
 3194 03e5 DA       		.byte	0xda
 3195 03e6 EC000000 		.4byte	0xec
 3196 03ea 00       		.byte	0
 3197 03eb 12       		.uleb128 0x12
 3198 03ec 9B050000 		.4byte	.LASF165
 3199 03f0 02       		.byte	0x2
 3200 03f1 EC       		.byte	0xec
 3201 03f2 03       		.byte	0x3
 3202 03f3 03040000 		.4byte	0x403
 3203 03f7 13       		.uleb128 0x13
 3204 03f8 A7000000 		.4byte	.LASF166
 3205 03fc 02       		.byte	0x2
 3206 03fd EC       		.byte	0xec
 3207 03fe EC000000 		.4byte	0xec
 3208 0402 00       		.byte	0
 3209 0403 14       		.uleb128 0x14
 3210 0404 320A0000 		.4byte	.LASF75
 3211 0408 01       		.byte	0x1
 3212 0409 9708     		.2byte	0x897
 3213 040b 10010000 		.4byte	0x110
 3214 040f 00000000 		.4byte	.LFB88
 3215 0413 12000000 		.4byte	.LFE88-.LFB88
 3216 0417 01       		.uleb128 0x1
 3217 0418 9C       		.byte	0x9c
 3218 0419 3E040000 		.4byte	0x43e
 3219 041d 15       		.uleb128 0x15
 3220 041e 65080000 		.4byte	.LASF77
 3221 0422 01       		.byte	0x1
 3222 0423 9708     		.2byte	0x897
 3223 0425 49040000 		.4byte	0x449
 3224 0429 00000000 		.4byte	.LLST0
 3225 042d 16       		.uleb128 0x16
 3226 042e FD050000 		.4byte	.LASF78
 3227 0432 01       		.byte	0x1
 3228 0433 9908     		.2byte	0x899
 3229 0435 10010000 		.4byte	0x110
 3230 0439 3A000000 		.4byte	.LLST1
 3231 043d 00       		.byte	0
 3232 043e 06       		.uleb128 0x6
 3233 043f 04       		.byte	0x4
 3234 0440 44040000 		.4byte	0x444
 3235 0444 07       		.uleb128 0x7
 3236 0445 7E030000 		.4byte	0x37e
 3237 0449 07       		.uleb128 0x7
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 120


 3238 044a 3E040000 		.4byte	0x43e
 3239 044e 14       		.uleb128 0x14
 3240 044f 22080000 		.4byte	.LASF76
 3241 0453 01       		.byte	0x1
 3242 0454 B909     		.2byte	0x9b9
 3243 0456 05010000 		.4byte	0x105
 3244 045a 00000000 		.4byte	.LFB94
 3245 045e 1E000000 		.4byte	.LFE94-.LFB94
 3246 0462 01       		.uleb128 0x1
 3247 0463 9C       		.byte	0x9c
 3248 0464 99040000 		.4byte	0x499
 3249 0468 15       		.uleb128 0x15
 3250 0469 65080000 		.4byte	.LASF77
 3251 046d 01       		.byte	0x1
 3252 046e B909     		.2byte	0x9b9
 3253 0470 3E040000 		.4byte	0x43e
 3254 0474 58000000 		.4byte	.LLST2
 3255 0478 17       		.uleb128 0x17
 3256 0479 DC030000 		.4byte	.LASF79
 3257 047d 01       		.byte	0x1
 3258 047e BB09     		.2byte	0x9bb
 3259 0480 05010000 		.4byte	0x105
 3260 0484 01       		.uleb128 0x1
 3261 0485 54       		.byte	0x54
 3262 0486 18       		.uleb128 0x18
 3263 0487 08000000 		.4byte	.LVL6
 3264 048b 41190000 		.4byte	0x1941
 3265 048f 18       		.uleb128 0x18
 3266 0490 1A000000 		.4byte	.LVL10
 3267 0494 4C190000 		.4byte	0x194c
 3268 0498 00       		.byte	0
 3269 0499 14       		.uleb128 0x14
 3270 049a 16040000 		.4byte	.LASF80
 3271 049e 01       		.byte	0x1
 3272 049f 9009     		.2byte	0x990
 3273 04a1 05010000 		.4byte	0x105
 3274 04a5 00000000 		.4byte	.LFB92
 3275 04a9 1A000000 		.4byte	.LFE92-.LFB92
 3276 04ad 01       		.uleb128 0x1
 3277 04ae 9C       		.byte	0x9c
 3278 04af E4040000 		.4byte	0x4e4
 3279 04b3 15       		.uleb128 0x15
 3280 04b4 65080000 		.4byte	.LASF77
 3281 04b8 01       		.byte	0x1
 3282 04b9 9009     		.2byte	0x990
 3283 04bb 3E040000 		.4byte	0x43e
 3284 04bf 9D000000 		.4byte	.LLST3
 3285 04c3 17       		.uleb128 0x17
 3286 04c4 DC030000 		.4byte	.LASF79
 3287 04c8 01       		.byte	0x1
 3288 04c9 9209     		.2byte	0x992
 3289 04cb 05010000 		.4byte	0x105
 3290 04cf 01       		.uleb128 0x1
 3291 04d0 54       		.byte	0x54
 3292 04d1 18       		.uleb128 0x18
 3293 04d2 08000000 		.4byte	.LVL12
 3294 04d6 41190000 		.4byte	0x1941
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 121


 3295 04da 18       		.uleb128 0x18
 3296 04db 16000000 		.4byte	.LVL16
 3297 04df 4C190000 		.4byte	0x194c
 3298 04e3 00       		.byte	0
 3299 04e4 14       		.uleb128 0x14
 3300 04e5 9D010000 		.4byte	.LASF81
 3301 04e9 01       		.byte	0x1
 3302 04ea B008     		.2byte	0x8b0
 3303 04ec 05010000 		.4byte	0x105
 3304 04f0 00000000 		.4byte	.LFB89
 3305 04f4 76000000 		.4byte	.LFE89-.LFB89
 3306 04f8 01       		.uleb128 0x1
 3307 04f9 9C       		.byte	0x9c
 3308 04fa 6A050000 		.4byte	0x56a
 3309 04fe 15       		.uleb128 0x15
 3310 04ff 65080000 		.4byte	.LASF77
 3311 0503 01       		.byte	0x1
 3312 0504 B008     		.2byte	0x8b0
 3313 0506 70050000 		.4byte	0x570
 3314 050a E2000000 		.4byte	.LLST4
 3315 050e 15       		.uleb128 0x15
 3316 050f 1D060000 		.4byte	.LASF82
 3317 0513 01       		.byte	0x1
 3318 0514 B108     		.2byte	0x8b1
 3319 0516 C4000000 		.4byte	0xc4
 3320 051a 42010000 		.4byte	.LLST5
 3321 051e 15       		.uleb128 0x15
 3322 051f 91090000 		.4byte	.LASF83
 3323 0523 01       		.byte	0x1
 3324 0524 B208     		.2byte	0x8b2
 3325 0526 75050000 		.4byte	0x575
 3326 052a AE010000 		.4byte	.LLST6
 3327 052e 16       		.uleb128 0x16
 3328 052f DC030000 		.4byte	.LASF79
 3329 0533 01       		.byte	0x1
 3330 0534 B408     		.2byte	0x8b4
 3331 0536 05010000 		.4byte	0x105
 3332 053a CC010000 		.4byte	.LLST7
 3333 053e 16       		.uleb128 0x16
 3334 053f 4A080000 		.4byte	.LASF51
 3335 0543 01       		.byte	0x1
 3336 0544 B508     		.2byte	0x8b5
 3337 0546 10010000 		.4byte	0x110
 3338 054a 02020000 		.4byte	.LLST8
 3339 054e 18       		.uleb128 0x18
 3340 054f 16000000 		.4byte	.LVL22
 3341 0553 57190000 		.4byte	0x1957
 3342 0557 18       		.uleb128 0x18
 3343 0558 24000000 		.4byte	.LVL25
 3344 055c 63190000 		.4byte	0x1963
 3345 0560 18       		.uleb128 0x18
 3346 0561 40000000 		.4byte	.LVL28
 3347 0565 63190000 		.4byte	0x1963
 3348 0569 00       		.byte	0
 3349 056a 06       		.uleb128 0x6
 3350 056b 04       		.byte	0x4
 3351 056c 7E030000 		.4byte	0x37e
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 122


 3352 0570 07       		.uleb128 0x7
 3353 0571 6A050000 		.4byte	0x56a
 3354 0575 07       		.uleb128 0x7
 3355 0576 05010000 		.4byte	0x105
 3356 057a 19       		.uleb128 0x19
 3357 057b 5C010000 		.4byte	.LASF85
 3358 057f 01       		.byte	0x1
 3359 0580 0309     		.2byte	0x903
 3360 0582 00000000 		.4byte	.LFB90
 3361 0586 24000000 		.4byte	.LFE90-.LFB90
 3362 058a 01       		.uleb128 0x1
 3363 058b 9C       		.byte	0x9c
 3364 058c C1050000 		.4byte	0x5c1
 3365 0590 15       		.uleb128 0x15
 3366 0591 65080000 		.4byte	.LASF77
 3367 0595 01       		.byte	0x1
 3368 0596 0309     		.2byte	0x903
 3369 0598 70050000 		.4byte	0x570
 3370 059c 22020000 		.4byte	.LLST9
 3371 05a0 15       		.uleb128 0x15
 3372 05a1 5C080000 		.4byte	.LASF84
 3373 05a5 01       		.byte	0x1
 3374 05a6 0409     		.2byte	0x904
 3375 05a8 C1050000 		.4byte	0x5c1
 3376 05ac 4E020000 		.4byte	.LLST10
 3377 05b0 1A       		.uleb128 0x1a
 3378 05b1 20000000 		.4byte	.LVL38
 3379 05b5 63190000 		.4byte	0x1963
 3380 05b9 1B       		.uleb128 0x1b
 3381 05ba 01       		.uleb128 0x1
 3382 05bb 50       		.byte	0x50
 3383 05bc 02       		.uleb128 0x2
 3384 05bd 74       		.byte	0x74
 3385 05be 00       		.sleb128 0
 3386 05bf 00       		.byte	0
 3387 05c0 00       		.byte	0
 3388 05c1 07       		.uleb128 0x7
 3389 05c2 B0000000 		.4byte	0xb0
 3390 05c6 19       		.uleb128 0x19
 3391 05c7 CF080000 		.4byte	.LASF86
 3392 05cb 01       		.byte	0x1
 3393 05cc 1809     		.2byte	0x918
 3394 05ce 00000000 		.4byte	.LFB91
 3395 05d2 66000000 		.4byte	.LFE91-.LFB91
 3396 05d6 01       		.uleb128 0x1
 3397 05d7 9C       		.byte	0x9c
 3398 05d8 87060000 		.4byte	0x687
 3399 05dc 15       		.uleb128 0x15
 3400 05dd 65080000 		.4byte	.LASF77
 3401 05e1 01       		.byte	0x1
 3402 05e2 1809     		.2byte	0x918
 3403 05e4 70050000 		.4byte	0x570
 3404 05e8 77020000 		.4byte	.LLST11
 3405 05ec 1C       		.uleb128 0x1c
 3406 05ed 08000000 		.4byte	.LBB26
 3407 05f1 28000000 		.4byte	.LBE26-.LBB26
 3408 05f5 27060000 		.4byte	0x627
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 123


 3409 05f9 16       		.uleb128 0x16
 3410 05fa BD020000 		.4byte	.LASF55
 3411 05fe 01       		.byte	0x1
 3412 05ff 2209     		.2byte	0x922
 3413 0601 CB000000 		.4byte	0xcb
 3414 0605 95020000 		.4byte	.LLST12
 3415 0609 1D       		.uleb128 0x1d
 3416 060a 1C000000 		.4byte	.LVL43
 3417 060e 6C190000 		.4byte	0x196c
 3418 0612 1D060000 		.4byte	0x61d
 3419 0616 1B       		.uleb128 0x1b
 3420 0617 01       		.uleb128 0x1
 3421 0618 50       		.byte	0x50
 3422 0619 02       		.uleb128 0x2
 3423 061a 75       		.byte	0x75
 3424 061b 24       		.sleb128 36
 3425 061c 00       		.byte	0
 3426 061d 18       		.uleb128 0x18
 3427 061e 22000000 		.4byte	.LVL44
 3428 0622 78190000 		.4byte	0x1978
 3429 0626 00       		.byte	0
 3430 0627 1C       		.uleb128 0x1c
 3431 0628 38000000 		.4byte	.LBB27
 3432 062c 28000000 		.4byte	.LBE27-.LBB27
 3433 0630 62060000 		.4byte	0x662
 3434 0634 16       		.uleb128 0x16
 3435 0635 F7060000 		.4byte	.LASF54
 3436 0639 01       		.byte	0x1
 3437 063a 7309     		.2byte	0x973
 3438 063c CB000000 		.4byte	0xcb
 3439 0640 B3020000 		.4byte	.LLST13
 3440 0644 1D       		.uleb128 0x1d
 3441 0645 4C000000 		.4byte	.LVL51
 3442 0649 6C190000 		.4byte	0x196c
 3443 064d 58060000 		.4byte	0x658
 3444 0651 1B       		.uleb128 0x1b
 3445 0652 01       		.uleb128 0x1
 3446 0653 50       		.byte	0x50
 3447 0654 02       		.uleb128 0x2
 3448 0655 75       		.byte	0x75
 3449 0656 10       		.sleb128 16
 3450 0657 00       		.byte	0
 3451 0658 18       		.uleb128 0x18
 3452 0659 52000000 		.4byte	.LVL52
 3453 065d 78190000 		.4byte	0x1978
 3454 0661 00       		.byte	0
 3455 0662 18       		.uleb128 0x18
 3456 0663 08000000 		.4byte	.LVL41
 3457 0667 41190000 		.4byte	0x1941
 3458 066b 18       		.uleb128 0x18
 3459 066c 34000000 		.4byte	.LVL47
 3460 0670 4C190000 		.4byte	0x194c
 3461 0674 18       		.uleb128 0x18
 3462 0675 38000000 		.4byte	.LVL48
 3463 0679 41190000 		.4byte	0x1941
 3464 067d 18       		.uleb128 0x18
 3465 067e 64000000 		.4byte	.LVL55
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 124


 3466 0682 4C190000 		.4byte	0x194c
 3467 0686 00       		.byte	0
 3468 0687 1E       		.uleb128 0x1e
 3469 0688 6D080000 		.4byte	.LASF93
 3470 068c 01       		.byte	0x1
 3471 068d 2801     		.2byte	0x128
 3472 068f 05010000 		.4byte	0x105
 3473 0693 00000000 		.4byte	.LFB68
 3474 0697 94000000 		.4byte	.LFE68-.LFB68
 3475 069b 01       		.uleb128 0x1
 3476 069c 9C       		.byte	0x9c
 3477 069d 30070000 		.4byte	0x730
 3478 06a1 15       		.uleb128 0x15
 3479 06a2 C2050000 		.4byte	.LASF64
 3480 06a6 01       		.byte	0x1
 3481 06a7 2801     		.2byte	0x128
 3482 06a9 55020000 		.4byte	0x255
 3483 06ad D1020000 		.4byte	.LLST14
 3484 06b1 15       		.uleb128 0x15
 3485 06b2 93010000 		.4byte	.LASF87
 3486 06b6 01       		.byte	0x1
 3487 06b7 2901     		.2byte	0x129
 3488 06b9 05010000 		.4byte	0x105
 3489 06bd 37030000 		.4byte	.LLST15
 3490 06c1 16       		.uleb128 0x16
 3491 06c2 DC030000 		.4byte	.LASF79
 3492 06c6 01       		.byte	0x1
 3493 06c7 2B01     		.2byte	0x12b
 3494 06c9 05010000 		.4byte	0x105
 3495 06cd 60030000 		.4byte	.LLST16
 3496 06d1 16       		.uleb128 0x16
 3497 06d2 65080000 		.4byte	.LASF77
 3498 06d6 01       		.byte	0x1
 3499 06d7 2C01     		.2byte	0x12c
 3500 06d9 70050000 		.4byte	0x570
 3501 06dd 96030000 		.4byte	.LLST17
 3502 06e1 18       		.uleb128 0x18
 3503 06e2 24000000 		.4byte	.LVL58
 3504 06e6 41190000 		.4byte	0x1941
 3505 06ea 1D       		.uleb128 0x1d
 3506 06eb 56000000 		.4byte	.LVL59
 3507 06ef 6C190000 		.4byte	0x196c
 3508 06f3 FE060000 		.4byte	0x6fe
 3509 06f7 1B       		.uleb128 0x1b
 3510 06f8 01       		.uleb128 0x1
 3511 06f9 50       		.byte	0x50
 3512 06fa 02       		.uleb128 0x2
 3513 06fb 74       		.byte	0x74
 3514 06fc 10       		.sleb128 16
 3515 06fd 00       		.byte	0
 3516 06fe 1D       		.uleb128 0x1d
 3517 06ff 72000000 		.4byte	.LVL60
 3518 0703 84190000 		.4byte	0x1984
 3519 0707 12070000 		.4byte	0x712
 3520 070b 1B       		.uleb128 0x1b
 3521 070c 01       		.uleb128 0x1
 3522 070d 50       		.byte	0x50
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 125


 3523 070e 02       		.uleb128 0x2
 3524 070f 74       		.byte	0x74
 3525 0710 10       		.sleb128 16
 3526 0711 00       		.byte	0
 3527 0712 1D       		.uleb128 0x1d
 3528 0713 7A000000 		.4byte	.LVL61
 3529 0717 84190000 		.4byte	0x1984
 3530 071b 26070000 		.4byte	0x726
 3531 071f 1B       		.uleb128 0x1b
 3532 0720 01       		.uleb128 0x1
 3533 0721 50       		.byte	0x50
 3534 0722 02       		.uleb128 0x2
 3535 0723 74       		.byte	0x74
 3536 0724 24       		.sleb128 36
 3537 0725 00       		.byte	0
 3538 0726 18       		.uleb128 0x18
 3539 0727 7E000000 		.4byte	.LVL62
 3540 072b 4C190000 		.4byte	0x194c
 3541 072f 00       		.byte	0
 3542 0730 19       		.uleb128 0x19
 3543 0731 42030000 		.4byte	.LASF88
 3544 0735 01       		.byte	0x1
 3545 0736 1F02     		.2byte	0x21f
 3546 0738 00000000 		.4byte	.LFB70
 3547 073c 1C000000 		.4byte	.LFE70-.LFB70
 3548 0740 01       		.uleb128 0x1
 3549 0741 9C       		.byte	0x9c
 3550 0742 AC070000 		.4byte	0x7ac
 3551 0746 15       		.uleb128 0x15
 3552 0747 6E050000 		.4byte	.LASF89
 3553 074b 01       		.byte	0x1
 3554 074c 1F02     		.2byte	0x21f
 3555 074e AC070000 		.4byte	0x7ac
 3556 0752 FC030000 		.4byte	.LLST18
 3557 0756 15       		.uleb128 0x15
 3558 0757 570A0000 		.4byte	.LASF53
 3559 075b 01       		.byte	0x1
 3560 075c 2002     		.2byte	0x220
 3561 075e AC070000 		.4byte	0x7ac
 3562 0762 29040000 		.4byte	.LLST19
 3563 0766 15       		.uleb128 0x15
 3564 0767 33090000 		.4byte	.LASF90
 3565 076b 01       		.byte	0x1
 3566 076c 2102     		.2byte	0x221
 3567 076e 26010000 		.4byte	0x126
 3568 0772 47040000 		.4byte	.LLST20
 3569 0776 15       		.uleb128 0x15
 3570 0777 2C000000 		.4byte	.LASF91
 3571 077b 01       		.byte	0x1
 3572 077c 2202     		.2byte	0x222
 3573 077e B1070000 		.4byte	0x7b1
 3574 0782 68040000 		.4byte	.LLST21
 3575 0786 1F       		.uleb128 0x1f
 3576 0787 71010000 		.4byte	.LASF92
 3577 078b 01       		.byte	0x1
 3578 078c 2302     		.2byte	0x223
 3579 078e 6A050000 		.4byte	0x56a
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 126


 3580 0792 02       		.uleb128 0x2
 3581 0793 91       		.byte	0x91
 3582 0794 00       		.sleb128 0
 3583 0795 1A       		.uleb128 0x1a
 3584 0796 1A000000 		.4byte	.LVL74
 3585 079a 87060000 		.4byte	0x687
 3586 079e 1B       		.uleb128 0x1b
 3587 079f 01       		.uleb128 0x1
 3588 07a0 50       		.byte	0x50
 3589 07a1 03       		.uleb128 0x3
 3590 07a2 91       		.byte	0x91
 3591 07a3 00       		.sleb128 0
 3592 07a4 06       		.byte	0x6
 3593 07a5 1B       		.uleb128 0x1b
 3594 07a6 01       		.uleb128 0x1
 3595 07a7 51       		.byte	0x51
 3596 07a8 01       		.uleb128 0x1
 3597 07a9 31       		.byte	0x31
 3598 07aa 00       		.byte	0
 3599 07ab 00       		.byte	0
 3600 07ac 07       		.uleb128 0x7
 3601 07ad 10010000 		.4byte	0x110
 3602 07b1 07       		.uleb128 0x7
 3603 07b2 D6000000 		.4byte	0xd6
 3604 07b6 1E       		.uleb128 0x1e
 3605 07b7 37070000 		.4byte	.LASF94
 3606 07bb 01       		.byte	0x1
 3607 07bc DD01     		.2byte	0x1dd
 3608 07be 55020000 		.4byte	0x255
 3609 07c2 00000000 		.4byte	.LFB69
 3610 07c6 4E000000 		.4byte	.LFE69-.LFB69
 3611 07ca 01       		.uleb128 0x1
 3612 07cb 9C       		.byte	0x9c
 3613 07cc 74080000 		.4byte	0x874
 3614 07d0 15       		.uleb128 0x15
 3615 07d1 6E050000 		.4byte	.LASF89
 3616 07d5 01       		.byte	0x1
 3617 07d6 DD01     		.2byte	0x1dd
 3618 07d8 AC070000 		.4byte	0x7ac
 3619 07dc 89040000 		.4byte	.LLST22
 3620 07e0 15       		.uleb128 0x15
 3621 07e1 570A0000 		.4byte	.LASF53
 3622 07e5 01       		.byte	0x1
 3623 07e6 DE01     		.2byte	0x1de
 3624 07e8 AC070000 		.4byte	0x7ac
 3625 07ec CB040000 		.4byte	.LLST23
 3626 07f0 15       		.uleb128 0x15
 3627 07f1 2C000000 		.4byte	.LASF91
 3628 07f5 01       		.byte	0x1
 3629 07f6 DF01     		.2byte	0x1df
 3630 07f8 B1070000 		.4byte	0x7b1
 3631 07fc 02050000 		.4byte	.LLST24
 3632 0800 16       		.uleb128 0x16
 3633 0801 71010000 		.4byte	.LASF92
 3634 0805 01       		.byte	0x1
 3635 0806 E101     		.2byte	0x1e1
 3636 0808 6A050000 		.4byte	0x56a
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 127


 3637 080c 3C050000 		.4byte	.LLST25
 3638 0810 16       		.uleb128 0x16
 3639 0811 FE090000 		.4byte	.LASF95
 3640 0815 01       		.byte	0x1
 3641 0816 E201     		.2byte	0x1e2
 3642 0818 25000000 		.4byte	0x25
 3643 081c 7D050000 		.4byte	.LLST26
 3644 0820 16       		.uleb128 0x16
 3645 0821 33090000 		.4byte	.LASF90
 3646 0825 01       		.byte	0x1
 3647 0826 E301     		.2byte	0x1e3
 3648 0828 26010000 		.4byte	0x126
 3649 082c AE050000 		.4byte	.LLST27
 3650 0830 1D       		.uleb128 0x1d
 3651 0831 28000000 		.4byte	.LVL80
 3652 0835 90190000 		.4byte	0x1990
 3653 0839 49080000 		.4byte	0x849
 3654 083d 1B       		.uleb128 0x1b
 3655 083e 01       		.uleb128 0x1
 3656 083f 50       		.byte	0x50
 3657 0840 07       		.uleb128 0x7
 3658 0841 75       		.byte	0x75
 3659 0842 00       		.sleb128 0
 3660 0843 74       		.byte	0x74
 3661 0844 00       		.sleb128 0
 3662 0845 1E       		.byte	0x1e
 3663 0846 23       		.byte	0x23
 3664 0847 48       		.uleb128 0x48
 3665 0848 00       		.byte	0
 3666 0849 1A       		.uleb128 0x1a
 3667 084a 3C000000 		.4byte	.LVL84
 3668 084e 30070000 		.4byte	0x730
 3669 0852 1B       		.uleb128 0x1b
 3670 0853 01       		.uleb128 0x1
 3671 0854 50       		.byte	0x50
 3672 0855 02       		.uleb128 0x2
 3673 0856 74       		.byte	0x74
 3674 0857 00       		.sleb128 0
 3675 0858 1B       		.uleb128 0x1b
 3676 0859 01       		.uleb128 0x1
 3677 085a 51       		.byte	0x51
 3678 085b 02       		.uleb128 0x2
 3679 085c 75       		.byte	0x75
 3680 085d 00       		.sleb128 0
 3681 085e 1B       		.uleb128 0x1b
 3682 085f 01       		.uleb128 0x1
 3683 0860 52       		.byte	0x52
 3684 0861 03       		.uleb128 0x3
 3685 0862 76       		.byte	0x76
 3686 0863 C800     		.sleb128 72
 3687 0865 1B       		.uleb128 0x1b
 3688 0866 01       		.uleb128 0x1
 3689 0867 53       		.byte	0x53
 3690 0868 02       		.uleb128 0x2
 3691 0869 77       		.byte	0x77
 3692 086a 00       		.sleb128 0
 3693 086b 1B       		.uleb128 0x1b
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 128


 3694 086c 02       		.uleb128 0x2
 3695 086d 7D       		.byte	0x7d
 3696 086e 00       		.sleb128 0
 3697 086f 02       		.uleb128 0x2
 3698 0870 76       		.byte	0x76
 3699 0871 00       		.sleb128 0
 3700 0872 00       		.byte	0
 3701 0873 00       		.byte	0
 3702 0874 1E       		.uleb128 0x1e
 3703 0875 0A030000 		.4byte	.LASF96
 3704 0879 01       		.byte	0x1
 3705 087a 5303     		.2byte	0x353
 3706 087c 55020000 		.4byte	0x255
 3707 0880 00000000 		.4byte	.LFB75
 3708 0884 28000000 		.4byte	.LFE75-.LFB75
 3709 0888 01       		.uleb128 0x1
 3710 0889 9C       		.byte	0x9c
 3711 088a DA080000 		.4byte	0x8da
 3712 088e 15       		.uleb128 0x15
 3713 088f 63050000 		.4byte	.LASF97
 3714 0893 01       		.byte	0x1
 3715 0894 5303     		.2byte	0x353
 3716 0896 AC070000 		.4byte	0x7ac
 3717 089a DD050000 		.4byte	.LLST28
 3718 089e 15       		.uleb128 0x15
 3719 089f 9B090000 		.4byte	.LASF98
 3720 08a3 01       		.byte	0x1
 3721 08a4 5403     		.2byte	0x354
 3722 08a6 AC070000 		.4byte	0x7ac
 3723 08aa 17060000 		.4byte	.LLST29
 3724 08ae 16       		.uleb128 0x16
 3725 08af 80060000 		.4byte	.LASF70
 3726 08b3 01       		.byte	0x1
 3727 08b4 5603     		.2byte	0x356
 3728 08b6 55020000 		.4byte	0x255
 3729 08ba 4B060000 		.4byte	.LLST30
 3730 08be 1A       		.uleb128 0x1a
 3731 08bf 12000000 		.4byte	.LVL90
 3732 08c3 B6070000 		.4byte	0x7b6
 3733 08c7 1B       		.uleb128 0x1b
 3734 08c8 01       		.uleb128 0x1
 3735 08c9 50       		.byte	0x50
 3736 08ca 03       		.uleb128 0x3
 3737 08cb F3       		.byte	0xf3
 3738 08cc 01       		.uleb128 0x1
 3739 08cd 50       		.byte	0x50
 3740 08ce 1B       		.uleb128 0x1b
 3741 08cf 01       		.uleb128 0x1
 3742 08d0 51       		.byte	0x51
 3743 08d1 01       		.uleb128 0x1
 3744 08d2 30       		.byte	0x30
 3745 08d3 1B       		.uleb128 0x1b
 3746 08d4 01       		.uleb128 0x1
 3747 08d5 52       		.byte	0x52
 3748 08d6 01       		.uleb128 0x1
 3749 08d7 32       		.byte	0x32
 3750 08d8 00       		.byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 129


 3751 08d9 00       		.byte	0
 3752 08da 1E       		.uleb128 0x1e
 3753 08db 4E040000 		.4byte	.LASF99
 3754 08df 01       		.byte	0x1
 3755 08e0 7403     		.2byte	0x374
 3756 08e2 05010000 		.4byte	0x105
 3757 08e6 00000000 		.4byte	.LFB76
 3758 08ea 08010000 		.4byte	.LFE76-.LFB76
 3759 08ee 01       		.uleb128 0x1
 3760 08ef 9C       		.byte	0x9c
 3761 08f0 940A0000 		.4byte	0xa94
 3762 08f4 15       		.uleb128 0x15
 3763 08f5 C2050000 		.4byte	.LASF64
 3764 08f9 01       		.byte	0x1
 3765 08fa 7403     		.2byte	0x374
 3766 08fc 55020000 		.4byte	0x255
 3767 0900 8C060000 		.4byte	.LLST31
 3768 0904 15       		.uleb128 0x15
 3769 0905 1D060000 		.4byte	.LASF82
 3770 0909 01       		.byte	0x1
 3771 090a 7503     		.2byte	0x375
 3772 090c 940A0000 		.4byte	0xa94
 3773 0910 B8060000 		.4byte	.LLST32
 3774 0914 15       		.uleb128 0x15
 3775 0915 61020000 		.4byte	.LASF100
 3776 0919 01       		.byte	0x1
 3777 091a 7603     		.2byte	0x376
 3778 091c 1B010000 		.4byte	0x11b
 3779 0920 E4060000 		.4byte	.LLST33
 3780 0924 15       		.uleb128 0x15
 3781 0925 97080000 		.4byte	.LASF101
 3782 0929 01       		.byte	0x1
 3783 092a 7703     		.2byte	0x377
 3784 092c 75050000 		.4byte	0x575
 3785 0930 27070000 		.4byte	.LLST34
 3786 0934 16       		.uleb128 0x16
 3787 0935 88060000 		.4byte	.LASF102
 3788 0939 01       		.byte	0x1
 3789 093a 7903     		.2byte	0x379
 3790 093c 05010000 		.4byte	0x105
 3791 0940 53070000 		.4byte	.LLST35
 3792 0944 16       		.uleb128 0x16
 3793 0945 73040000 		.4byte	.LASF103
 3794 0949 01       		.byte	0x1
 3795 094a 7903     		.2byte	0x379
 3796 094c 05010000 		.4byte	0x105
 3797 0950 89070000 		.4byte	.LLST36
 3798 0954 17       		.uleb128 0x17
 3799 0955 28030000 		.4byte	.LASF104
 3800 0959 01       		.byte	0x1
 3801 095a 7A03     		.2byte	0x37a
 3802 095c 4A020000 		.4byte	0x24a
 3803 0960 02       		.uleb128 0x2
 3804 0961 91       		.byte	0x91
 3805 0962 60       		.sleb128 -32
 3806 0963 16       		.uleb128 0x16
 3807 0964 65080000 		.4byte	.LASF77
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 130


 3808 0968 01       		.byte	0x1
 3809 0969 7B03     		.2byte	0x37b
 3810 096b 70050000 		.4byte	0x570
 3811 096f A7070000 		.4byte	.LLST37
 3812 0973 18       		.uleb128 0x18
 3813 0974 12000000 		.4byte	.LVL98
 3814 0978 41190000 		.4byte	0x1941
 3815 097c 1D       		.uleb128 0x1d
 3816 097d 28000000 		.4byte	.LVL99
 3817 0981 E4040000 		.4byte	0x4e4
 3818 0985 9C090000 		.4byte	0x99c
 3819 0989 1B       		.uleb128 0x1b
 3820 098a 01       		.uleb128 0x1
 3821 098b 50       		.byte	0x50
 3822 098c 02       		.uleb128 0x2
 3823 098d 74       		.byte	0x74
 3824 098e 00       		.sleb128 0
 3825 098f 1B       		.uleb128 0x1b
 3826 0990 01       		.uleb128 0x1
 3827 0991 51       		.byte	0x51
 3828 0992 02       		.uleb128 0x2
 3829 0993 77       		.byte	0x77
 3830 0994 00       		.sleb128 0
 3831 0995 1B       		.uleb128 0x1b
 3832 0996 01       		.uleb128 0x1
 3833 0997 52       		.byte	0x52
 3834 0998 02       		.uleb128 0x2
 3835 0999 76       		.byte	0x76
 3836 099a 00       		.sleb128 0
 3837 099b 00       		.byte	0
 3838 099c 1D       		.uleb128 0x1d
 3839 099d 34000000 		.4byte	.LVL101
 3840 09a1 6C190000 		.4byte	0x196c
 3841 09a5 B0090000 		.4byte	0x9b0
 3842 09a9 1B       		.uleb128 0x1b
 3843 09aa 01       		.uleb128 0x1
 3844 09ab 50       		.byte	0x50
 3845 09ac 02       		.uleb128 0x2
 3846 09ad 74       		.byte	0x74
 3847 09ae 24       		.sleb128 36
 3848 09af 00       		.byte	0
 3849 09b0 18       		.uleb128 0x18
 3850 09b1 5E000000 		.4byte	.LVL104
 3851 09b5 4C190000 		.4byte	0x194c
 3852 09b9 18       		.uleb128 0x18
 3853 09ba 6A000000 		.4byte	.LVL105
 3854 09be 4C190000 		.4byte	0x194c
 3855 09c2 1D       		.uleb128 0x1d
 3856 09c3 76000000 		.4byte	.LVL106
 3857 09c7 9B190000 		.4byte	0x199b
 3858 09cb D6090000 		.4byte	0x9d6
 3859 09cf 1B       		.uleb128 0x1b
 3860 09d0 01       		.uleb128 0x1
 3861 09d1 50       		.byte	0x50
 3862 09d2 02       		.uleb128 0x2
 3863 09d3 91       		.byte	0x91
 3864 09d4 60       		.sleb128 -32
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 131


 3865 09d5 00       		.byte	0
 3866 09d6 18       		.uleb128 0x18
 3867 09d7 7C000000 		.4byte	.LVL108
 3868 09db 4C190000 		.4byte	0x194c
 3869 09df 18       		.uleb128 0x18
 3870 09e0 80000000 		.4byte	.LVL109
 3871 09e4 A7190000 		.4byte	0x19a7
 3872 09e8 18       		.uleb128 0x18
 3873 09e9 84000000 		.4byte	.LVL110
 3874 09ed 41190000 		.4byte	0x1941
 3875 09f1 18       		.uleb128 0x18
 3876 09f2 AC000000 		.4byte	.LVL111
 3877 09f6 4C190000 		.4byte	0x194c
 3878 09fa 1D       		.uleb128 0x1d
 3879 09fb B4000000 		.4byte	.LVL113
 3880 09ff B3190000 		.4byte	0x19b3
 3881 0a03 140A0000 		.4byte	0xa14
 3882 0a07 1B       		.uleb128 0x1b
 3883 0a08 01       		.uleb128 0x1
 3884 0a09 50       		.byte	0x50
 3885 0a0a 02       		.uleb128 0x2
 3886 0a0b 91       		.byte	0x91
 3887 0a0c 60       		.sleb128 -32
 3888 0a0d 1B       		.uleb128 0x1b
 3889 0a0e 01       		.uleb128 0x1
 3890 0a0f 51       		.byte	0x51
 3891 0a10 02       		.uleb128 0x2
 3892 0a11 91       		.byte	0x91
 3893 0a12 5C       		.sleb128 -36
 3894 0a13 00       		.byte	0
 3895 0a14 1D       		.uleb128 0x1d
 3896 0a15 BC000000 		.4byte	.LVL114
 3897 0a19 4E040000 		.4byte	0x44e
 3898 0a1d 280A0000 		.4byte	0xa28
 3899 0a21 1B       		.uleb128 0x1b
 3900 0a22 01       		.uleb128 0x1
 3901 0a23 50       		.byte	0x50
 3902 0a24 02       		.uleb128 0x2
 3903 0a25 74       		.byte	0x74
 3904 0a26 00       		.sleb128 0
 3905 0a27 00       		.byte	0
 3906 0a28 1D       		.uleb128 0x1d
 3907 0a29 C8000000 		.4byte	.LVL115
 3908 0a2d BF190000 		.4byte	0x19bf
 3909 0a31 3C0A0000 		.4byte	0xa3c
 3910 0a35 1B       		.uleb128 0x1b
 3911 0a36 01       		.uleb128 0x1
 3912 0a37 50       		.byte	0x50
 3913 0a38 02       		.uleb128 0x2
 3914 0a39 74       		.byte	0x74
 3915 0a3a 10       		.sleb128 16
 3916 0a3b 00       		.byte	0
 3917 0a3c 1D       		.uleb128 0x1d
 3918 0a3d CE000000 		.4byte	.LVL116
 3919 0a41 C6050000 		.4byte	0x5c6
 3920 0a45 500A0000 		.4byte	0xa50
 3921 0a49 1B       		.uleb128 0x1b
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 132


 3922 0a4a 01       		.uleb128 0x1
 3923 0a4b 50       		.byte	0x50
 3924 0a4c 02       		.uleb128 0x2
 3925 0a4d 74       		.byte	0x74
 3926 0a4e 00       		.sleb128 0
 3927 0a4f 00       		.byte	0
 3928 0a50 18       		.uleb128 0x18
 3929 0a51 D2000000 		.4byte	.LVL117
 3930 0a55 CB190000 		.4byte	0x19cb
 3931 0a59 1D       		.uleb128 0x1d
 3932 0a5a EE000000 		.4byte	.LVL118
 3933 0a5e C6050000 		.4byte	0x5c6
 3934 0a62 6D0A0000 		.4byte	0xa6d
 3935 0a66 1B       		.uleb128 0x1b
 3936 0a67 01       		.uleb128 0x1
 3937 0a68 50       		.byte	0x50
 3938 0a69 02       		.uleb128 0x2
 3939 0a6a 74       		.byte	0x74
 3940 0a6b 00       		.sleb128 0
 3941 0a6c 00       		.byte	0
 3942 0a6d 18       		.uleb128 0x18
 3943 0a6e F2000000 		.4byte	.LVL119
 3944 0a72 CB190000 		.4byte	0x19cb
 3945 0a76 1D       		.uleb128 0x1d
 3946 0a77 FA000000 		.4byte	.LVL120
 3947 0a7b C6050000 		.4byte	0x5c6
 3948 0a7f 8A0A0000 		.4byte	0xa8a
 3949 0a83 1B       		.uleb128 0x1b
 3950 0a84 01       		.uleb128 0x1
 3951 0a85 50       		.byte	0x50
 3952 0a86 02       		.uleb128 0x2
 3953 0a87 74       		.byte	0x74
 3954 0a88 00       		.sleb128 0
 3955 0a89 00       		.byte	0
 3956 0a8a 18       		.uleb128 0x18
 3957 0a8b FE000000 		.4byte	.LVL121
 3958 0a8f CB190000 		.4byte	0x19cb
 3959 0a93 00       		.byte	0
 3960 0a94 07       		.uleb128 0x7
 3961 0a95 C4000000 		.4byte	0xc4
 3962 0a99 19       		.uleb128 0x19
 3963 0a9a 51000000 		.4byte	.LASF105
 3964 0a9e 01       		.byte	0x1
 3965 0a9f 4F02     		.2byte	0x24f
 3966 0aa1 00000000 		.4byte	.LFB71
 3967 0aa5 18000000 		.4byte	.LFE71-.LFB71
 3968 0aa9 01       		.uleb128 0x1
 3969 0aaa 9C       		.byte	0x9c
 3970 0aab E00A0000 		.4byte	0xae0
 3971 0aaf 15       		.uleb128 0x15
 3972 0ab0 71010000 		.4byte	.LASF92
 3973 0ab4 01       		.byte	0x1
 3974 0ab5 4F02     		.2byte	0x24f
 3975 0ab7 6A050000 		.4byte	0x56a
 3976 0abb D3070000 		.4byte	.LLST38
 3977 0abf 1A       		.uleb128 0x1a
 3978 0ac0 14000000 		.4byte	.LVL124
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 133


 3979 0ac4 DA080000 		.4byte	0x8da
 3980 0ac8 1B       		.uleb128 0x1b
 3981 0ac9 01       		.uleb128 0x1
 3982 0aca 50       		.byte	0x50
 3983 0acb 03       		.uleb128 0x3
 3984 0acc F3       		.byte	0xf3
 3985 0acd 01       		.uleb128 0x1
 3986 0ace 50       		.byte	0x50
 3987 0acf 1B       		.uleb128 0x1b
 3988 0ad0 01       		.uleb128 0x1
 3989 0ad1 51       		.byte	0x51
 3990 0ad2 01       		.uleb128 0x1
 3991 0ad3 30       		.byte	0x30
 3992 0ad4 1B       		.uleb128 0x1b
 3993 0ad5 01       		.uleb128 0x1
 3994 0ad6 52       		.byte	0x52
 3995 0ad7 01       		.uleb128 0x1
 3996 0ad8 30       		.byte	0x30
 3997 0ad9 1B       		.uleb128 0x1b
 3998 0ada 01       		.uleb128 0x1
 3999 0adb 53       		.byte	0x53
 4000 0adc 01       		.uleb128 0x1
 4001 0add 30       		.byte	0x30
 4002 0ade 00       		.byte	0
 4003 0adf 00       		.byte	0
 4004 0ae0 1E       		.uleb128 0x1e
 4005 0ae1 A0040000 		.4byte	.LASF106
 4006 0ae5 01       		.byte	0x1
 4007 0ae6 6D02     		.2byte	0x26d
 4008 0ae8 55020000 		.4byte	0x255
 4009 0aec 00000000 		.4byte	.LFB72
 4010 0af0 16000000 		.4byte	.LFE72-.LFB72
 4011 0af4 01       		.uleb128 0x1
 4012 0af5 9C       		.byte	0x9c
 4013 0af6 5D0B0000 		.4byte	0xb5d
 4014 0afa 15       		.uleb128 0x15
 4015 0afb 2C000000 		.4byte	.LASF91
 4016 0aff 01       		.byte	0x1
 4017 0b00 6D02     		.2byte	0x26d
 4018 0b02 B1070000 		.4byte	0x7b1
 4019 0b06 FF070000 		.4byte	.LLST39
 4020 0b0a 16       		.uleb128 0x16
 4021 0b0b 93010000 		.4byte	.LASF87
 4022 0b0f 01       		.byte	0x1
 4023 0b10 6F02     		.2byte	0x26f
 4024 0b12 55020000 		.4byte	0x255
 4025 0b16 20080000 		.4byte	.LLST40
 4026 0b1a 20       		.uleb128 0x20
 4027 0b1b 64000000 		.4byte	.LASF107
 4028 0b1f 01       		.byte	0x1
 4029 0b20 7002     		.2byte	0x270
 4030 0b22 AC070000 		.4byte	0x7ac
 4031 0b26 01       		.byte	0x1
 4032 0b27 20       		.uleb128 0x20
 4033 0b28 FF070000 		.4byte	.LASF108
 4034 0b2c 01       		.byte	0x1
 4035 0b2d 7002     		.2byte	0x270
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 134


 4036 0b2f AC070000 		.4byte	0x7ac
 4037 0b33 00       		.byte	0
 4038 0b34 1D       		.uleb128 0x1d
 4039 0b35 0C000000 		.4byte	.LVL129
 4040 0b39 B6070000 		.4byte	0x7b6
 4041 0b3d 4C0B0000 		.4byte	0xb4c
 4042 0b41 1B       		.uleb128 0x1b
 4043 0b42 01       		.uleb128 0x1
 4044 0b43 50       		.byte	0x50
 4045 0b44 01       		.uleb128 0x1
 4046 0b45 31       		.byte	0x31
 4047 0b46 1B       		.uleb128 0x1b
 4048 0b47 01       		.uleb128 0x1
 4049 0b48 51       		.byte	0x51
 4050 0b49 01       		.uleb128 0x1
 4051 0b4a 30       		.byte	0x30
 4052 0b4b 00       		.byte	0
 4053 0b4c 1A       		.uleb128 0x1a
 4054 0b4d 12000000 		.4byte	.LVL131
 4055 0b51 990A0000 		.4byte	0xa99
 4056 0b55 1B       		.uleb128 0x1b
 4057 0b56 01       		.uleb128 0x1
 4058 0b57 50       		.byte	0x50
 4059 0b58 02       		.uleb128 0x2
 4060 0b59 74       		.byte	0x74
 4061 0b5a 00       		.sleb128 0
 4062 0b5b 00       		.byte	0
 4063 0b5c 00       		.byte	0
 4064 0b5d 1E       		.uleb128 0x1e
 4065 0b5e 51070000 		.4byte	.LASF109
 4066 0b62 01       		.byte	0x1
 4067 0b63 CD02     		.2byte	0x2cd
 4068 0b65 05010000 		.4byte	0x105
 4069 0b69 00000000 		.4byte	.LFB73
 4070 0b6d 2C000000 		.4byte	.LFE73-.LFB73
 4071 0b71 01       		.uleb128 0x1
 4072 0b72 9C       		.byte	0x9c
 4073 0b73 BF0B0000 		.4byte	0xbbf
 4074 0b77 15       		.uleb128 0x15
 4075 0b78 58030000 		.4byte	.LASF110
 4076 0b7c 01       		.byte	0x1
 4077 0b7d CD02     		.2byte	0x2cd
 4078 0b7f 55020000 		.4byte	0x255
 4079 0b83 3E080000 		.4byte	.LLST41
 4080 0b87 17       		.uleb128 0x17
 4081 0b88 DC030000 		.4byte	.LASF79
 4082 0b8c 01       		.byte	0x1
 4083 0b8d CF02     		.2byte	0x2cf
 4084 0b8f 05010000 		.4byte	0x105
 4085 0b93 01       		.uleb128 0x1
 4086 0b94 50       		.byte	0x50
 4087 0b95 16       		.uleb128 0x16
 4088 0b96 ED040000 		.4byte	.LASF111
 4089 0b9a 01       		.byte	0x1
 4090 0b9b D002     		.2byte	0x2d0
 4091 0b9d 70050000 		.4byte	0x570
 4092 0ba1 5C080000 		.4byte	.LLST42
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 135


 4093 0ba5 18       		.uleb128 0x18
 4094 0ba6 0A000000 		.4byte	.LVL134
 4095 0baa D7190000 		.4byte	0x19d7
 4096 0bae 1A       		.uleb128 0x1a
 4097 0baf 20000000 		.4byte	.LVL135
 4098 0bb3 DA080000 		.4byte	0x8da
 4099 0bb7 1B       		.uleb128 0x1b
 4100 0bb8 01       		.uleb128 0x1
 4101 0bb9 50       		.byte	0x50
 4102 0bba 02       		.uleb128 0x2
 4103 0bbb 74       		.byte	0x74
 4104 0bbc 00       		.sleb128 0
 4105 0bbd 00       		.byte	0
 4106 0bbe 00       		.byte	0
 4107 0bbf 1E       		.uleb128 0x1e
 4108 0bc0 38000000 		.4byte	.LASF112
 4109 0bc4 01       		.byte	0x1
 4110 0bc5 4804     		.2byte	0x448
 4111 0bc7 05010000 		.4byte	0x105
 4112 0bcb 00000000 		.4byte	.LFB77
 4113 0bcf 7C000000 		.4byte	.LFE77-.LFB77
 4114 0bd3 01       		.uleb128 0x1
 4115 0bd4 9C       		.byte	0x9c
 4116 0bd5 010D0000 		.4byte	0xd01
 4117 0bd9 15       		.uleb128 0x15
 4118 0bda C2050000 		.4byte	.LASF64
 4119 0bde 01       		.byte	0x1
 4120 0bdf 4804     		.2byte	0x448
 4121 0be1 55020000 		.4byte	0x255
 4122 0be5 7A080000 		.4byte	.LLST43
 4123 0be9 15       		.uleb128 0x15
 4124 0bea 1D060000 		.4byte	.LASF82
 4125 0bee 01       		.byte	0x1
 4126 0bef 4904     		.2byte	0x449
 4127 0bf1 940A0000 		.4byte	0xa94
 4128 0bf5 CA080000 		.4byte	.LLST44
 4129 0bf9 15       		.uleb128 0x15
 4130 0bfa CA000000 		.4byte	.LASF113
 4131 0bfe 01       		.byte	0x1
 4132 0bff 4A04     		.2byte	0x44a
 4133 0c01 070D0000 		.4byte	0xd07
 4134 0c05 04090000 		.4byte	.LLST45
 4135 0c09 15       		.uleb128 0x15
 4136 0c0a 97080000 		.4byte	.LASF101
 4137 0c0e 01       		.byte	0x1
 4138 0c0f 4B04     		.2byte	0x44b
 4139 0c11 75050000 		.4byte	0x575
 4140 0c15 46090000 		.4byte	.LLST46
 4141 0c19 17       		.uleb128 0x17
 4142 0c1a DC030000 		.4byte	.LASF79
 4143 0c1e 01       		.byte	0x1
 4144 0c1f 4D04     		.2byte	0x44d
 4145 0c21 05010000 		.4byte	0x105
 4146 0c25 01       		.uleb128 0x1
 4147 0c26 50       		.byte	0x50
 4148 0c27 21       		.uleb128 0x21
 4149 0c28 0B080000 		.4byte	.LASF114
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 136


 4150 0c2c 01       		.byte	0x1
 4151 0c2d 4E04     		.2byte	0x44e
 4152 0c2f 10010000 		.4byte	0x110
 4153 0c33 16       		.uleb128 0x16
 4154 0c34 65080000 		.4byte	.LASF77
 4155 0c38 01       		.byte	0x1
 4156 0c39 4F04     		.2byte	0x44f
 4157 0c3b 70050000 		.4byte	0x570
 4158 0c3f 80090000 		.4byte	.LLST47
 4159 0c43 22       		.uleb128 0x22
 4160 0c44 C4030000 		.4byte	0x3c4
 4161 0c48 02000000 		.4byte	.LBB28
 4162 0c4c 14000000 		.4byte	.LBE28-.LBB28
 4163 0c50 01       		.byte	0x1
 4164 0c51 6A04     		.2byte	0x46a
 4165 0c53 6C0C0000 		.4byte	0xc6c
 4166 0c57 23       		.uleb128 0x23
 4167 0c58 02000000 		.4byte	.LBB29
 4168 0c5c 14000000 		.4byte	.LBE29-.LBB29
 4169 0c60 24       		.uleb128 0x24
 4170 0c61 D4030000 		.4byte	0x3d4
 4171 0c65 24       		.uleb128 0x24
 4172 0c66 DF030000 		.4byte	0x3df
 4173 0c6a 00       		.byte	0
 4174 0c6b 00       		.byte	0
 4175 0c6c 25       		.uleb128 0x25
 4176 0c6d 00000000 		.4byte	.Ldebug_ranges0+0
 4177 0c71 E60C0000 		.4byte	0xce6
 4178 0c75 16       		.uleb128 0x16
 4179 0c76 BD020000 		.4byte	.LASF55
 4180 0c7a 01       		.byte	0x1
 4181 0c7b 6E04     		.2byte	0x46e
 4182 0c7d 0C0D0000 		.4byte	0xd0c
 4183 0c81 D0090000 		.4byte	.LLST48
 4184 0c85 17       		.uleb128 0x17
 4185 0c86 00000000 		.4byte	.LASF115
 4186 0c8a 01       		.byte	0x1
 4187 0c8b 6F04     		.2byte	0x46f
 4188 0c8d AC070000 		.4byte	0x7ac
 4189 0c91 01       		.uleb128 0x1
 4190 0c92 52       		.byte	0x52
 4191 0c93 1C       		.uleb128 0x1c
 4192 0c94 50000000 		.4byte	.LBB31
 4193 0c98 10000000 		.4byte	.LBE31-.LBB31
 4194 0c9c BA0C0000 		.4byte	0xcba
 4195 0ca0 16       		.uleb128 0x16
 4196 0ca1 7C050000 		.4byte	.LASF116
 4197 0ca5 01       		.byte	0x1
 4198 0ca6 DC04     		.2byte	0x4dc
 4199 0ca8 AC070000 		.4byte	0x7ac
 4200 0cac FB090000 		.4byte	.LLST49
 4201 0cb0 18       		.uleb128 0x18
 4202 0cb1 54000000 		.4byte	.LVL145
 4203 0cb5 E3190000 		.4byte	0x19e3
 4204 0cb9 00       		.byte	0
 4205 0cba 1D       		.uleb128 0x1d
 4206 0cbb 34000000 		.4byte	.LVL143
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 137


 4207 0cbf E4040000 		.4byte	0x4e4
 4208 0cc3 D50C0000 		.4byte	0xcd5
 4209 0cc7 1B       		.uleb128 0x1b
 4210 0cc8 01       		.uleb128 0x1
 4211 0cc9 50       		.byte	0x50
 4212 0cca 02       		.uleb128 0x2
 4213 0ccb 74       		.byte	0x74
 4214 0ccc 00       		.sleb128 0
 4215 0ccd 1B       		.uleb128 0x1b
 4216 0cce 01       		.uleb128 0x1
 4217 0ccf 52       		.byte	0x52
 4218 0cd0 03       		.uleb128 0x3
 4219 0cd1 F3       		.byte	0xf3
 4220 0cd2 01       		.uleb128 0x1
 4221 0cd3 53       		.byte	0x53
 4222 0cd4 00       		.byte	0
 4223 0cd5 1A       		.uleb128 0x1a
 4224 0cd6 46000000 		.4byte	.LVL144
 4225 0cda 6C190000 		.4byte	0x196c
 4226 0cde 1B       		.uleb128 0x1b
 4227 0cdf 01       		.uleb128 0x1
 4228 0ce0 50       		.byte	0x50
 4229 0ce1 02       		.uleb128 0x2
 4230 0ce2 74       		.byte	0x74
 4231 0ce3 24       		.sleb128 36
 4232 0ce4 00       		.byte	0
 4233 0ce5 00       		.byte	0
 4234 0ce6 26       		.uleb128 0x26
 4235 0ce7 EB030000 		.4byte	0x3eb
 4236 0ceb 76000000 		.4byte	.LBB33
 4237 0cef 04000000 		.4byte	.LBE33-.LBB33
 4238 0cf3 01       		.byte	0x1
 4239 0cf4 E704     		.2byte	0x4e7
 4240 0cf6 27       		.uleb128 0x27
 4241 0cf7 F7030000 		.4byte	0x3f7
 4242 0cfb 190A0000 		.4byte	.LLST50
 4243 0cff 00       		.byte	0
 4244 0d00 00       		.byte	0
 4245 0d01 06       		.uleb128 0x6
 4246 0d02 04       		.byte	0x4
 4247 0d03 05010000 		.4byte	0x105
 4248 0d07 07       		.uleb128 0x7
 4249 0d08 010D0000 		.4byte	0xd01
 4250 0d0c 07       		.uleb128 0x7
 4251 0d0d CB000000 		.4byte	0xcb
 4252 0d11 1E       		.uleb128 0x1e
 4253 0d12 6E020000 		.4byte	.LASF117
 4254 0d16 01       		.byte	0x1
 4255 0d17 ED04     		.2byte	0x4ed
 4256 0d19 05010000 		.4byte	0x105
 4257 0d1d 00000000 		.4byte	.LFB78
 4258 0d21 72000000 		.4byte	.LFE78-.LFB78
 4259 0d25 01       		.uleb128 0x1
 4260 0d26 9C       		.byte	0x9c
 4261 0d27 240E0000 		.4byte	0xe24
 4262 0d2b 15       		.uleb128 0x15
 4263 0d2c C2050000 		.4byte	.LASF64
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 138


 4264 0d30 01       		.byte	0x1
 4265 0d31 ED04     		.2byte	0x4ed
 4266 0d33 55020000 		.4byte	0x255
 4267 0d37 2C0A0000 		.4byte	.LLST51
 4268 0d3b 15       		.uleb128 0x15
 4269 0d3c CA000000 		.4byte	.LASF113
 4270 0d40 01       		.byte	0x1
 4271 0d41 EE04     		.2byte	0x4ee
 4272 0d43 070D0000 		.4byte	0xd07
 4273 0d47 9D0A0000 		.4byte	.LLST52
 4274 0d4b 17       		.uleb128 0x17
 4275 0d4c DC030000 		.4byte	.LASF79
 4276 0d50 01       		.byte	0x1
 4277 0d51 F004     		.2byte	0x4f0
 4278 0d53 05010000 		.4byte	0x105
 4279 0d57 01       		.uleb128 0x1
 4280 0d58 50       		.byte	0x50
 4281 0d59 21       		.uleb128 0x21
 4282 0d5a 0B080000 		.4byte	.LASF114
 4283 0d5e 01       		.byte	0x1
 4284 0d5f F104     		.2byte	0x4f1
 4285 0d61 10010000 		.4byte	0x110
 4286 0d65 16       		.uleb128 0x16
 4287 0d66 65080000 		.4byte	.LASF77
 4288 0d6a 01       		.byte	0x1
 4289 0d6b F204     		.2byte	0x4f2
 4290 0d6d 70050000 		.4byte	0x570
 4291 0d71 F50A0000 		.4byte	.LLST53
 4292 0d75 22       		.uleb128 0x22
 4293 0d76 C4030000 		.4byte	0x3c4
 4294 0d7a 02000000 		.4byte	.LBB35
 4295 0d7e 14000000 		.4byte	.LBE35-.LBB35
 4296 0d82 01       		.byte	0x1
 4297 0d83 1505     		.2byte	0x515
 4298 0d85 9E0D0000 		.4byte	0xd9e
 4299 0d89 23       		.uleb128 0x23
 4300 0d8a 02000000 		.4byte	.LBB36
 4301 0d8e 14000000 		.4byte	.LBE36-.LBB36
 4302 0d92 24       		.uleb128 0x24
 4303 0d93 D4030000 		.4byte	0x3d4
 4304 0d97 24       		.uleb128 0x24
 4305 0d98 DF030000 		.4byte	0x3df
 4306 0d9c 00       		.byte	0
 4307 0d9d 00       		.byte	0
 4308 0d9e 1C       		.uleb128 0x1c
 4309 0d9f 16000000 		.4byte	.LBB37
 4310 0da3 56000000 		.4byte	.LBE37-.LBB37
 4311 0da7 090E0000 		.4byte	0xe09
 4312 0dab 16       		.uleb128 0x16
 4313 0dac 4A080000 		.4byte	.LASF51
 4314 0db0 01       		.byte	0x1
 4315 0db1 1705     		.2byte	0x517
 4316 0db3 AC070000 		.4byte	0x7ac
 4317 0db7 660B0000 		.4byte	.LLST54
 4318 0dbb 28       		.uleb128 0x28
 4319 0dbc 18000000 		.4byte	.Ldebug_ranges0+0x18
 4320 0dc0 16       		.uleb128 0x16
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 139


 4321 0dc1 BD020000 		.4byte	.LASF55
 4322 0dc5 01       		.byte	0x1
 4323 0dc6 1E05     		.2byte	0x51e
 4324 0dc8 0C0D0000 		.4byte	0xd0c
 4325 0dcc DE0B0000 		.4byte	.LLST55
 4326 0dd0 1C       		.uleb128 0x1c
 4327 0dd1 46000000 		.4byte	.LBB39
 4328 0dd5 10000000 		.4byte	.LBE39-.LBB39
 4329 0dd9 F70D0000 		.4byte	0xdf7
 4330 0ddd 16       		.uleb128 0x16
 4331 0dde 7C050000 		.4byte	.LASF116
 4332 0de2 01       		.byte	0x1
 4333 0de3 8205     		.2byte	0x582
 4334 0de5 AC070000 		.4byte	0x7ac
 4335 0de9 090C0000 		.4byte	.LLST56
 4336 0ded 18       		.uleb128 0x18
 4337 0dee 4A000000 		.4byte	.LVL164
 4338 0df2 E3190000 		.4byte	0x19e3
 4339 0df6 00       		.byte	0
 4340 0df7 1A       		.uleb128 0x1a
 4341 0df8 3C000000 		.4byte	.LVL162
 4342 0dfc 6C190000 		.4byte	0x196c
 4343 0e00 1B       		.uleb128 0x1b
 4344 0e01 01       		.uleb128 0x1
 4345 0e02 50       		.byte	0x50
 4346 0e03 02       		.uleb128 0x2
 4347 0e04 76       		.byte	0x76
 4348 0e05 24       		.sleb128 36
 4349 0e06 00       		.byte	0
 4350 0e07 00       		.byte	0
 4351 0e08 00       		.byte	0
 4352 0e09 26       		.uleb128 0x26
 4353 0e0a EB030000 		.4byte	0x3eb
 4354 0e0e 6C000000 		.4byte	.LBB41
 4355 0e12 04000000 		.4byte	.LBE41-.LBB41
 4356 0e16 01       		.byte	0x1
 4357 0e17 8D05     		.2byte	0x58d
 4358 0e19 27       		.uleb128 0x27
 4359 0e1a F7030000 		.4byte	0x3f7
 4360 0e1e 270C0000 		.4byte	.LLST57
 4361 0e22 00       		.byte	0
 4362 0e23 00       		.byte	0
 4363 0e24 1E       		.uleb128 0x1e
 4364 0e25 92040000 		.4byte	.LASF118
 4365 0e29 01       		.byte	0x1
 4366 0e2a 9305     		.2byte	0x593
 4367 0e2c 05010000 		.4byte	0x105
 4368 0e30 00000000 		.4byte	.LFB79
 4369 0e34 F8000000 		.4byte	.LFE79-.LFB79
 4370 0e38 01       		.uleb128 0x1
 4371 0e39 9C       		.byte	0x9c
 4372 0e3a E20F0000 		.4byte	0xfe2
 4373 0e3e 15       		.uleb128 0x15
 4374 0e3f C2050000 		.4byte	.LASF64
 4375 0e43 01       		.byte	0x1
 4376 0e44 9305     		.2byte	0x593
 4377 0e46 55020000 		.4byte	0x255
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 140


 4378 0e4a 3A0C0000 		.4byte	.LLST58
 4379 0e4e 15       		.uleb128 0x15
 4380 0e4f 5C080000 		.4byte	.LASF84
 4381 0e53 01       		.byte	0x1
 4382 0e54 9405     		.2byte	0x594
 4383 0e56 C1050000 		.4byte	0x5c1
 4384 0e5a 660C0000 		.4byte	.LLST59
 4385 0e5e 15       		.uleb128 0x15
 4386 0e5f 61020000 		.4byte	.LASF100
 4387 0e63 01       		.byte	0x1
 4388 0e64 9505     		.2byte	0x595
 4389 0e66 1B010000 		.4byte	0x11b
 4390 0e6a 920C0000 		.4byte	.LLST60
 4391 0e6e 16       		.uleb128 0x16
 4392 0e6f 88060000 		.4byte	.LASF102
 4393 0e73 01       		.byte	0x1
 4394 0e74 9705     		.2byte	0x597
 4395 0e76 05010000 		.4byte	0x105
 4396 0e7a D50C0000 		.4byte	.LLST61
 4397 0e7e 17       		.uleb128 0x17
 4398 0e7f 28030000 		.4byte	.LASF104
 4399 0e83 01       		.byte	0x1
 4400 0e84 9805     		.2byte	0x598
 4401 0e86 4A020000 		.4byte	0x24a
 4402 0e8a 02       		.uleb128 0x2
 4403 0e8b 91       		.byte	0x91
 4404 0e8c 60       		.sleb128 -32
 4405 0e8d 16       		.uleb128 0x16
 4406 0e8e 65080000 		.4byte	.LASF77
 4407 0e92 01       		.byte	0x1
 4408 0e93 9905     		.2byte	0x599
 4409 0e95 70050000 		.4byte	0x570
 4410 0e99 0B0D0000 		.4byte	.LLST62
 4411 0e9d 1C       		.uleb128 0x1c
 4412 0e9e 10000000 		.4byte	.LBB43
 4413 0ea2 4C000000 		.4byte	.LBE43-.LBB43
 4414 0ea6 0B0F0000 		.4byte	0xf0b
 4415 0eaa 16       		.uleb128 0x16
 4416 0eab 4A080000 		.4byte	.LASF51
 4417 0eaf 01       		.byte	0x1
 4418 0eb0 B005     		.2byte	0x5b0
 4419 0eb2 AC070000 		.4byte	0x7ac
 4420 0eb6 370D0000 		.4byte	.LLST63
 4421 0eba 1D       		.uleb128 0x1d
 4422 0ebb 1C000000 		.4byte	.LVL181
 4423 0ebf 7A050000 		.4byte	0x57a
 4424 0ec3 D40E0000 		.4byte	0xed4
 4425 0ec7 1B       		.uleb128 0x1b
 4426 0ec8 01       		.uleb128 0x1
 4427 0ec9 50       		.byte	0x50
 4428 0eca 02       		.uleb128 0x2
 4429 0ecb 74       		.byte	0x74
 4430 0ecc 00       		.sleb128 0
 4431 0ecd 1B       		.uleb128 0x1b
 4432 0ece 01       		.uleb128 0x1
 4433 0ecf 51       		.byte	0x51
 4434 0ed0 02       		.uleb128 0x2
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 141


 4435 0ed1 77       		.byte	0x77
 4436 0ed2 00       		.sleb128 0
 4437 0ed3 00       		.byte	0
 4438 0ed4 1D       		.uleb128 0x1d
 4439 0ed5 2C000000 		.4byte	.LVL183
 4440 0ed9 6C190000 		.4byte	0x196c
 4441 0edd E80E0000 		.4byte	0xee8
 4442 0ee1 1B       		.uleb128 0x1b
 4443 0ee2 01       		.uleb128 0x1
 4444 0ee3 50       		.byte	0x50
 4445 0ee4 02       		.uleb128 0x2
 4446 0ee5 74       		.byte	0x74
 4447 0ee6 10       		.sleb128 16
 4448 0ee7 00       		.byte	0
 4449 0ee8 18       		.uleb128 0x18
 4450 0ee9 42000000 		.4byte	.LVL184
 4451 0eed 4C190000 		.4byte	0x194c
 4452 0ef1 18       		.uleb128 0x18
 4453 0ef2 4E000000 		.4byte	.LVL186
 4454 0ef6 4C190000 		.4byte	0x194c
 4455 0efa 1A       		.uleb128 0x1a
 4456 0efb 5A000000 		.4byte	.LVL187
 4457 0eff 9B190000 		.4byte	0x199b
 4458 0f03 1B       		.uleb128 0x1b
 4459 0f04 01       		.uleb128 0x1
 4460 0f05 50       		.byte	0x50
 4461 0f06 02       		.uleb128 0x2
 4462 0f07 91       		.byte	0x91
 4463 0f08 60       		.sleb128 -32
 4464 0f09 00       		.byte	0
 4465 0f0a 00       		.byte	0
 4466 0f0b 18       		.uleb128 0x18
 4467 0f0c 10000000 		.4byte	.LVL179
 4468 0f10 41190000 		.4byte	0x1941
 4469 0f14 18       		.uleb128 0x18
 4470 0f15 60000000 		.4byte	.LVL189
 4471 0f19 4C190000 		.4byte	0x194c
 4472 0f1d 18       		.uleb128 0x18
 4473 0f1e 64000000 		.4byte	.LVL190
 4474 0f22 A7190000 		.4byte	0x19a7
 4475 0f26 18       		.uleb128 0x18
 4476 0f27 68000000 		.4byte	.LVL191
 4477 0f2b 41190000 		.4byte	0x1941
 4478 0f2f 18       		.uleb128 0x18
 4479 0f30 90000000 		.4byte	.LVL192
 4480 0f34 4C190000 		.4byte	0x194c
 4481 0f38 1D       		.uleb128 0x1d
 4482 0f39 98000000 		.4byte	.LVL194
 4483 0f3d B3190000 		.4byte	0x19b3
 4484 0f41 520F0000 		.4byte	0xf52
 4485 0f45 1B       		.uleb128 0x1b
 4486 0f46 01       		.uleb128 0x1
 4487 0f47 50       		.byte	0x50
 4488 0f48 02       		.uleb128 0x2
 4489 0f49 91       		.byte	0x91
 4490 0f4a 60       		.sleb128 -32
 4491 0f4b 1B       		.uleb128 0x1b
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 142


 4492 0f4c 01       		.uleb128 0x1
 4493 0f4d 51       		.byte	0x51
 4494 0f4e 02       		.uleb128 0x2
 4495 0f4f 91       		.byte	0x91
 4496 0f50 5C       		.sleb128 -36
 4497 0f51 00       		.byte	0
 4498 0f52 1D       		.uleb128 0x1d
 4499 0f53 A0000000 		.4byte	.LVL195
 4500 0f57 99040000 		.4byte	0x499
 4501 0f5b 660F0000 		.4byte	0xf66
 4502 0f5f 1B       		.uleb128 0x1b
 4503 0f60 01       		.uleb128 0x1
 4504 0f61 50       		.byte	0x50
 4505 0f62 02       		.uleb128 0x2
 4506 0f63 74       		.byte	0x74
 4507 0f64 00       		.sleb128 0
 4508 0f65 00       		.byte	0
 4509 0f66 1D       		.uleb128 0x1d
 4510 0f67 AC000000 		.4byte	.LVL196
 4511 0f6b BF190000 		.4byte	0x19bf
 4512 0f6f 7A0F0000 		.4byte	0xf7a
 4513 0f73 1B       		.uleb128 0x1b
 4514 0f74 01       		.uleb128 0x1
 4515 0f75 50       		.byte	0x50
 4516 0f76 02       		.uleb128 0x2
 4517 0f77 74       		.byte	0x74
 4518 0f78 24       		.sleb128 36
 4519 0f79 00       		.byte	0
 4520 0f7a 1D       		.uleb128 0x1d
 4521 0f7b B2000000 		.4byte	.LVL197
 4522 0f7f C6050000 		.4byte	0x5c6
 4523 0f83 8E0F0000 		.4byte	0xf8e
 4524 0f87 1B       		.uleb128 0x1b
 4525 0f88 01       		.uleb128 0x1
 4526 0f89 50       		.byte	0x50
 4527 0f8a 02       		.uleb128 0x2
 4528 0f8b 74       		.byte	0x74
 4529 0f8c 00       		.sleb128 0
 4530 0f8d 00       		.byte	0
 4531 0f8e 18       		.uleb128 0x18
 4532 0f8f B6000000 		.4byte	.LVL198
 4533 0f93 CB190000 		.4byte	0x19cb
 4534 0f97 1D       		.uleb128 0x1d
 4535 0f98 D2000000 		.4byte	.LVL199
 4536 0f9c C6050000 		.4byte	0x5c6
 4537 0fa0 AB0F0000 		.4byte	0xfab
 4538 0fa4 1B       		.uleb128 0x1b
 4539 0fa5 01       		.uleb128 0x1
 4540 0fa6 50       		.byte	0x50
 4541 0fa7 02       		.uleb128 0x2
 4542 0fa8 74       		.byte	0x74
 4543 0fa9 00       		.sleb128 0
 4544 0faa 00       		.byte	0
 4545 0fab 18       		.uleb128 0x18
 4546 0fac D6000000 		.4byte	.LVL200
 4547 0fb0 CB190000 		.4byte	0x19cb
 4548 0fb4 1D       		.uleb128 0x1d
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 143


 4549 0fb5 DE000000 		.4byte	.LVL201
 4550 0fb9 C6050000 		.4byte	0x5c6
 4551 0fbd C80F0000 		.4byte	0xfc8
 4552 0fc1 1B       		.uleb128 0x1b
 4553 0fc2 01       		.uleb128 0x1
 4554 0fc3 50       		.byte	0x50
 4555 0fc4 02       		.uleb128 0x2
 4556 0fc5 74       		.byte	0x74
 4557 0fc6 00       		.sleb128 0
 4558 0fc7 00       		.byte	0
 4559 0fc8 18       		.uleb128 0x18
 4560 0fc9 E2000000 		.4byte	.LVL202
 4561 0fcd CB190000 		.4byte	0x19cb
 4562 0fd1 1A       		.uleb128 0x1a
 4563 0fd2 E8000000 		.4byte	.LVL203
 4564 0fd6 99040000 		.4byte	0x499
 4565 0fda 1B       		.uleb128 0x1b
 4566 0fdb 01       		.uleb128 0x1
 4567 0fdc 50       		.byte	0x50
 4568 0fdd 02       		.uleb128 0x2
 4569 0fde 74       		.byte	0x74
 4570 0fdf 00       		.sleb128 0
 4571 0fe0 00       		.byte	0
 4572 0fe1 00       		.byte	0
 4573 0fe2 1E       		.uleb128 0x1e
 4574 0fe3 26040000 		.4byte	.LASF119
 4575 0fe7 01       		.byte	0x1
 4576 0fe8 2206     		.2byte	0x622
 4577 0fea 05010000 		.4byte	0x105
 4578 0fee 00000000 		.4byte	.LFB80
 4579 0ff2 28010000 		.4byte	.LFE80-.LFB80
 4580 0ff6 01       		.uleb128 0x1
 4581 0ff7 9C       		.byte	0x9c
 4582 0ff8 FB110000 		.4byte	0x11fb
 4583 0ffc 15       		.uleb128 0x15
 4584 0ffd C2050000 		.4byte	.LASF64
 4585 1001 01       		.byte	0x1
 4586 1002 2206     		.2byte	0x622
 4587 1004 55020000 		.4byte	0x255
 4588 1008 620D0000 		.4byte	.LLST64
 4589 100c 15       		.uleb128 0x15
 4590 100d 61020000 		.4byte	.LASF100
 4591 1011 01       		.byte	0x1
 4592 1012 2306     		.2byte	0x623
 4593 1014 1B010000 		.4byte	0x11b
 4594 1018 8E0D0000 		.4byte	.LLST65
 4595 101c 16       		.uleb128 0x16
 4596 101d 88060000 		.4byte	.LASF102
 4597 1021 01       		.byte	0x1
 4598 1022 2506     		.2byte	0x625
 4599 1024 05010000 		.4byte	0x105
 4600 1028 D10D0000 		.4byte	.LLST66
 4601 102c 17       		.uleb128 0x17
 4602 102d 28030000 		.4byte	.LASF104
 4603 1031 01       		.byte	0x1
 4604 1032 2606     		.2byte	0x626
 4605 1034 4A020000 		.4byte	0x24a
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 144


 4606 1038 02       		.uleb128 0x2
 4607 1039 91       		.byte	0x91
 4608 103a 68       		.sleb128 -24
 4609 103b 16       		.uleb128 0x16
 4610 103c 65080000 		.4byte	.LASF77
 4611 1040 01       		.byte	0x1
 4612 1041 2706     		.2byte	0x627
 4613 1043 70050000 		.4byte	0x570
 4614 1047 070E0000 		.4byte	.LLST67
 4615 104b 16       		.uleb128 0x16
 4616 104c 9F060000 		.4byte	.LASF120
 4617 1050 01       		.byte	0x1
 4618 1051 2A06     		.2byte	0x62a
 4619 1053 05010000 		.4byte	0x105
 4620 1057 330E0000 		.4byte	.LLST68
 4621 105b 1C       		.uleb128 0x1c
 4622 105c 10000000 		.4byte	.LBB44
 4623 1060 4E000000 		.4byte	.LBE44-.LBB44
 4624 1064 B8100000 		.4byte	0x10b8
 4625 1068 16       		.uleb128 0x16
 4626 1069 31030000 		.4byte	.LASF121
 4627 106d 01       		.byte	0x1
 4628 106e 4406     		.2byte	0x644
 4629 1070 AC070000 		.4byte	0x7ac
 4630 1074 680E0000 		.4byte	.LLST69
 4631 1078 18       		.uleb128 0x18
 4632 1079 20000000 		.4byte	.LVL213
 4633 107d EF190000 		.4byte	0x19ef
 4634 1081 1D       		.uleb128 0x1d
 4635 1082 2E000000 		.4byte	.LVL214
 4636 1086 6C190000 		.4byte	0x196c
 4637 108a 95100000 		.4byte	0x1095
 4638 108e 1B       		.uleb128 0x1b
 4639 108f 01       		.uleb128 0x1
 4640 1090 50       		.byte	0x50
 4641 1091 02       		.uleb128 0x2
 4642 1092 74       		.byte	0x74
 4643 1093 10       		.sleb128 16
 4644 1094 00       		.byte	0
 4645 1095 18       		.uleb128 0x18
 4646 1096 44000000 		.4byte	.LVL215
 4647 109a 4C190000 		.4byte	0x194c
 4648 109e 18       		.uleb128 0x18
 4649 109f 50000000 		.4byte	.LVL218
 4650 10a3 4C190000 		.4byte	0x194c
 4651 10a7 1A       		.uleb128 0x1a
 4652 10a8 5C000000 		.4byte	.LVL219
 4653 10ac 9B190000 		.4byte	0x199b
 4654 10b0 1B       		.uleb128 0x1b
 4655 10b1 01       		.uleb128 0x1
 4656 10b2 50       		.byte	0x50
 4657 10b3 02       		.uleb128 0x2
 4658 10b4 91       		.byte	0x91
 4659 10b5 68       		.sleb128 -24
 4660 10b6 00       		.byte	0
 4661 10b7 00       		.byte	0
 4662 10b8 1C       		.uleb128 0x1c
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 145


 4663 10b9 08010000 		.4byte	.LBB45
 4664 10bd 0E000000 		.4byte	.LBE45-.LBB45
 4665 10c1 F3100000 		.4byte	0x10f3
 4666 10c5 16       		.uleb128 0x16
 4667 10c6 F9010000 		.4byte	.LASF122
 4668 10ca 01       		.byte	0x1
 4669 10cb D906     		.2byte	0x6d9
 4670 10cd 10010000 		.4byte	0x110
 4671 10d1 A30E0000 		.4byte	.LLST70
 4672 10d5 1D       		.uleb128 0x1d
 4673 10d6 0E010000 		.4byte	.LVL241
 4674 10da 03040000 		.4byte	0x403
 4675 10de E9100000 		.4byte	0x10e9
 4676 10e2 1B       		.uleb128 0x1b
 4677 10e3 01       		.uleb128 0x1
 4678 10e4 50       		.byte	0x50
 4679 10e5 02       		.uleb128 0x2
 4680 10e6 74       		.byte	0x74
 4681 10e7 00       		.sleb128 0
 4682 10e8 00       		.byte	0
 4683 10e9 18       		.uleb128 0x18
 4684 10ea 16010000 		.4byte	.LVL243
 4685 10ee FB190000 		.4byte	0x19fb
 4686 10f2 00       		.byte	0
 4687 10f3 18       		.uleb128 0x18
 4688 10f4 10000000 		.4byte	.LVL209
 4689 10f8 41190000 		.4byte	0x1941
 4690 10fc 18       		.uleb128 0x18
 4691 10fd 62000000 		.4byte	.LVL221
 4692 1101 4C190000 		.4byte	0x194c
 4693 1105 18       		.uleb128 0x18
 4694 1106 66000000 		.4byte	.LVL222
 4695 110a A7190000 		.4byte	0x19a7
 4696 110e 18       		.uleb128 0x18
 4697 110f 6A000000 		.4byte	.LVL223
 4698 1113 41190000 		.4byte	0x1941
 4699 1117 18       		.uleb128 0x18
 4700 1118 92000000 		.4byte	.LVL224
 4701 111c 4C190000 		.4byte	0x194c
 4702 1120 1D       		.uleb128 0x1d
 4703 1121 9A000000 		.4byte	.LVL226
 4704 1125 B3190000 		.4byte	0x19b3
 4705 1129 3A110000 		.4byte	0x113a
 4706 112d 1B       		.uleb128 0x1b
 4707 112e 01       		.uleb128 0x1
 4708 112f 50       		.byte	0x50
 4709 1130 02       		.uleb128 0x2
 4710 1131 91       		.byte	0x91
 4711 1132 68       		.sleb128 -24
 4712 1133 1B       		.uleb128 0x1b
 4713 1134 01       		.uleb128 0x1
 4714 1135 51       		.byte	0x51
 4715 1136 02       		.uleb128 0x2
 4716 1137 91       		.byte	0x91
 4717 1138 64       		.sleb128 -28
 4718 1139 00       		.byte	0
 4719 113a 1D       		.uleb128 0x1d
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 146


 4720 113b A2000000 		.4byte	.LVL227
 4721 113f 99040000 		.4byte	0x499
 4722 1143 4E110000 		.4byte	0x114e
 4723 1147 1B       		.uleb128 0x1b
 4724 1148 01       		.uleb128 0x1
 4725 1149 50       		.byte	0x50
 4726 114a 02       		.uleb128 0x2
 4727 114b 74       		.byte	0x74
 4728 114c 00       		.sleb128 0
 4729 114d 00       		.byte	0
 4730 114e 18       		.uleb128 0x18
 4731 114f AC000000 		.4byte	.LVL228
 4732 1153 41190000 		.4byte	0x1941
 4733 1157 18       		.uleb128 0x18
 4734 1158 B2000000 		.4byte	.LVL229
 4735 115c 071A0000 		.4byte	0x1a07
 4736 1160 18       		.uleb128 0x18
 4737 1161 B8000000 		.4byte	.LVL231
 4738 1165 4C190000 		.4byte	0x194c
 4739 1169 1D       		.uleb128 0x1d
 4740 116a C2000000 		.4byte	.LVL232
 4741 116e BF190000 		.4byte	0x19bf
 4742 1172 7D110000 		.4byte	0x117d
 4743 1176 1B       		.uleb128 0x1b
 4744 1177 01       		.uleb128 0x1
 4745 1178 50       		.byte	0x50
 4746 1179 02       		.uleb128 0x2
 4747 117a 74       		.byte	0x74
 4748 117b 24       		.sleb128 36
 4749 117c 00       		.byte	0
 4750 117d 1D       		.uleb128 0x1d
 4751 117e C8000000 		.4byte	.LVL233
 4752 1182 C6050000 		.4byte	0x5c6
 4753 1186 91110000 		.4byte	0x1191
 4754 118a 1B       		.uleb128 0x1b
 4755 118b 01       		.uleb128 0x1
 4756 118c 50       		.byte	0x50
 4757 118d 02       		.uleb128 0x2
 4758 118e 74       		.byte	0x74
 4759 118f 00       		.sleb128 0
 4760 1190 00       		.byte	0
 4761 1191 18       		.uleb128 0x18
 4762 1192 CC000000 		.4byte	.LVL234
 4763 1196 CB190000 		.4byte	0x19cb
 4764 119a 1D       		.uleb128 0x1d
 4765 119b E8000000 		.4byte	.LVL235
 4766 119f C6050000 		.4byte	0x5c6
 4767 11a3 AE110000 		.4byte	0x11ae
 4768 11a7 1B       		.uleb128 0x1b
 4769 11a8 01       		.uleb128 0x1
 4770 11a9 50       		.byte	0x50
 4771 11aa 02       		.uleb128 0x2
 4772 11ab 74       		.byte	0x74
 4773 11ac 00       		.sleb128 0
 4774 11ad 00       		.byte	0
 4775 11ae 18       		.uleb128 0x18
 4776 11af EC000000 		.4byte	.LVL236
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 147


 4777 11b3 CB190000 		.4byte	0x19cb
 4778 11b7 1D       		.uleb128 0x1d
 4779 11b8 F4000000 		.4byte	.LVL237
 4780 11bc C6050000 		.4byte	0x5c6
 4781 11c0 CB110000 		.4byte	0x11cb
 4782 11c4 1B       		.uleb128 0x1b
 4783 11c5 01       		.uleb128 0x1
 4784 11c6 50       		.byte	0x50
 4785 11c7 02       		.uleb128 0x2
 4786 11c8 74       		.byte	0x74
 4787 11c9 00       		.sleb128 0
 4788 11ca 00       		.byte	0
 4789 11cb 18       		.uleb128 0x18
 4790 11cc F8000000 		.4byte	.LVL238
 4791 11d0 CB190000 		.4byte	0x19cb
 4792 11d4 1D       		.uleb128 0x1d
 4793 11d5 FE000000 		.4byte	.LVL239
 4794 11d9 99040000 		.4byte	0x499
 4795 11dd E8110000 		.4byte	0x11e8
 4796 11e1 1B       		.uleb128 0x1b
 4797 11e2 01       		.uleb128 0x1
 4798 11e3 50       		.byte	0x50
 4799 11e4 02       		.uleb128 0x2
 4800 11e5 74       		.byte	0x74
 4801 11e6 00       		.sleb128 0
 4802 11e7 00       		.byte	0
 4803 11e8 18       		.uleb128 0x18
 4804 11e9 08010000 		.4byte	.LVL240
 4805 11ed 41190000 		.4byte	0x1941
 4806 11f1 18       		.uleb128 0x18
 4807 11f2 1A010000 		.4byte	.LVL244
 4808 11f6 4C190000 		.4byte	0x194c
 4809 11fa 00       		.byte	0
 4810 11fb 1E       		.uleb128 0x1e
 4811 11fc C3030000 		.4byte	.LASF123
 4812 1200 01       		.byte	0x1
 4813 1201 0403     		.2byte	0x304
 4814 1203 05010000 		.4byte	0x105
 4815 1207 00000000 		.4byte	.LFB74
 4816 120b 30000000 		.4byte	.LFE74-.LFB74
 4817 120f 01       		.uleb128 0x1
 4818 1210 9C       		.byte	0x9c
 4819 1211 75120000 		.4byte	0x1275
 4820 1215 15       		.uleb128 0x15
 4821 1216 58030000 		.4byte	.LASF110
 4822 121a 01       		.byte	0x1
 4823 121b 0403     		.2byte	0x304
 4824 121d 55020000 		.4byte	0x255
 4825 1221 C10E0000 		.4byte	.LLST71
 4826 1225 15       		.uleb128 0x15
 4827 1226 61020000 		.4byte	.LASF100
 4828 122a 01       		.byte	0x1
 4829 122b 0503     		.2byte	0x305
 4830 122d 1B010000 		.4byte	0x11b
 4831 1231 DF0E0000 		.4byte	.LLST72
 4832 1235 16       		.uleb128 0x16
 4833 1236 DC030000 		.4byte	.LASF79
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 148


 4834 123a 01       		.byte	0x1
 4835 123b 0703     		.2byte	0x307
 4836 123d 05010000 		.4byte	0x105
 4837 1241 FD0E0000 		.4byte	.LLST73
 4838 1245 16       		.uleb128 0x16
 4839 1246 ED040000 		.4byte	.LASF111
 4840 124a 01       		.byte	0x1
 4841 124b 0803     		.2byte	0x308
 4842 124d 70050000 		.4byte	0x570
 4843 1251 270F0000 		.4byte	.LLST74
 4844 1255 18       		.uleb128 0x18
 4845 1256 0C000000 		.4byte	.LVL248
 4846 125a D7190000 		.4byte	0x19d7
 4847 125e 1A       		.uleb128 0x1a
 4848 125f 22000000 		.4byte	.LVL251
 4849 1263 E20F0000 		.4byte	0xfe2
 4850 1267 1B       		.uleb128 0x1b
 4851 1268 01       		.uleb128 0x1
 4852 1269 50       		.byte	0x50
 4853 126a 02       		.uleb128 0x2
 4854 126b 74       		.byte	0x74
 4855 126c 00       		.sleb128 0
 4856 126d 1B       		.uleb128 0x1b
 4857 126e 01       		.uleb128 0x1
 4858 126f 51       		.byte	0x51
 4859 1270 02       		.uleb128 0x2
 4860 1271 76       		.byte	0x76
 4861 1272 00       		.sleb128 0
 4862 1273 00       		.byte	0
 4863 1274 00       		.byte	0
 4864 1275 1E       		.uleb128 0x1e
 4865 1276 32010000 		.4byte	.LASF124
 4866 127a 01       		.byte	0x1
 4867 127b F406     		.2byte	0x6f4
 4868 127d 05010000 		.4byte	0x105
 4869 1281 00000000 		.4byte	.LFB81
 4870 1285 F8000000 		.4byte	.LFE81-.LFB81
 4871 1289 01       		.uleb128 0x1
 4872 128a 9C       		.byte	0x9c
 4873 128b 43140000 		.4byte	0x1443
 4874 128f 15       		.uleb128 0x15
 4875 1290 C2050000 		.4byte	.LASF64
 4876 1294 01       		.byte	0x1
 4877 1295 F406     		.2byte	0x6f4
 4878 1297 55020000 		.4byte	0x255
 4879 129b 450F0000 		.4byte	.LLST75
 4880 129f 15       		.uleb128 0x15
 4881 12a0 5C080000 		.4byte	.LASF84
 4882 12a4 01       		.byte	0x1
 4883 12a5 F506     		.2byte	0x6f5
 4884 12a7 C1050000 		.4byte	0x5c1
 4885 12ab 710F0000 		.4byte	.LLST76
 4886 12af 15       		.uleb128 0x15
 4887 12b0 61020000 		.4byte	.LASF100
 4888 12b4 01       		.byte	0x1
 4889 12b5 F606     		.2byte	0x6f6
 4890 12b7 1B010000 		.4byte	0x11b
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 149


 4891 12bb 9D0F0000 		.4byte	.LLST77
 4892 12bf 16       		.uleb128 0x16
 4893 12c0 88060000 		.4byte	.LASF102
 4894 12c4 01       		.byte	0x1
 4895 12c5 F806     		.2byte	0x6f8
 4896 12c7 05010000 		.4byte	0x105
 4897 12cb E00F0000 		.4byte	.LLST78
 4898 12cf 17       		.uleb128 0x17
 4899 12d0 28030000 		.4byte	.LASF104
 4900 12d4 01       		.byte	0x1
 4901 12d5 F906     		.2byte	0x6f9
 4902 12d7 4A020000 		.4byte	0x24a
 4903 12db 02       		.uleb128 0x2
 4904 12dc 91       		.byte	0x91
 4905 12dd 68       		.sleb128 -24
 4906 12de 16       		.uleb128 0x16
 4907 12df 89020000 		.4byte	.LASF125
 4908 12e3 01       		.byte	0x1
 4909 12e4 FA06     		.2byte	0x6fa
 4910 12e6 0E030000 		.4byte	0x30e
 4911 12ea 21100000 		.4byte	.LLST79
 4912 12ee 16       		.uleb128 0x16
 4913 12ef 65080000 		.4byte	.LASF77
 4914 12f3 01       		.byte	0x1
 4915 12f4 FB06     		.2byte	0x6fb
 4916 12f6 70050000 		.4byte	0x570
 4917 12fa 34100000 		.4byte	.LLST80
 4918 12fe 1C       		.uleb128 0x1c
 4919 12ff 10000000 		.4byte	.LBB46
 4920 1303 4C000000 		.4byte	.LBE46-.LBB46
 4921 1307 6C130000 		.4byte	0x136c
 4922 130b 16       		.uleb128 0x16
 4923 130c 4A080000 		.4byte	.LASF51
 4924 1310 01       		.byte	0x1
 4925 1311 1207     		.2byte	0x712
 4926 1313 AC070000 		.4byte	0x7ac
 4927 1317 60100000 		.4byte	.LLST81
 4928 131b 1D       		.uleb128 0x1d
 4929 131c 1E000000 		.4byte	.LVL259
 4930 1320 7A050000 		.4byte	0x57a
 4931 1324 35130000 		.4byte	0x1335
 4932 1328 1B       		.uleb128 0x1b
 4933 1329 01       		.uleb128 0x1
 4934 132a 50       		.byte	0x50
 4935 132b 02       		.uleb128 0x2
 4936 132c 74       		.byte	0x74
 4937 132d 00       		.sleb128 0
 4938 132e 1B       		.uleb128 0x1b
 4939 132f 01       		.uleb128 0x1
 4940 1330 51       		.byte	0x51
 4941 1331 02       		.uleb128 0x2
 4942 1332 76       		.byte	0x76
 4943 1333 00       		.sleb128 0
 4944 1334 00       		.byte	0
 4945 1335 1D       		.uleb128 0x1d
 4946 1336 2C000000 		.4byte	.LVL260
 4947 133a 6C190000 		.4byte	0x196c
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 150


 4948 133e 49130000 		.4byte	0x1349
 4949 1342 1B       		.uleb128 0x1b
 4950 1343 01       		.uleb128 0x1
 4951 1344 50       		.byte	0x50
 4952 1345 02       		.uleb128 0x2
 4953 1346 74       		.byte	0x74
 4954 1347 24       		.sleb128 36
 4955 1348 00       		.byte	0
 4956 1349 18       		.uleb128 0x18
 4957 134a 42000000 		.4byte	.LVL261
 4958 134e 4C190000 		.4byte	0x194c
 4959 1352 18       		.uleb128 0x18
 4960 1353 4E000000 		.4byte	.LVL264
 4961 1357 4C190000 		.4byte	0x194c
 4962 135b 1A       		.uleb128 0x1a
 4963 135c 5A000000 		.4byte	.LVL265
 4964 1360 9B190000 		.4byte	0x199b
 4965 1364 1B       		.uleb128 0x1b
 4966 1365 01       		.uleb128 0x1
 4967 1366 50       		.byte	0x50
 4968 1367 02       		.uleb128 0x2
 4969 1368 91       		.byte	0x91
 4970 1369 68       		.sleb128 -24
 4971 136a 00       		.byte	0
 4972 136b 00       		.byte	0
 4973 136c 18       		.uleb128 0x18
 4974 136d 10000000 		.4byte	.LVL256
 4975 1371 41190000 		.4byte	0x1941
 4976 1375 18       		.uleb128 0x18
 4977 1376 60000000 		.4byte	.LVL267
 4978 137a 4C190000 		.4byte	0x194c
 4979 137e 18       		.uleb128 0x18
 4980 137f 64000000 		.4byte	.LVL268
 4981 1383 A7190000 		.4byte	0x19a7
 4982 1387 18       		.uleb128 0x18
 4983 1388 68000000 		.4byte	.LVL269
 4984 138c 41190000 		.4byte	0x1941
 4985 1390 18       		.uleb128 0x18
 4986 1391 90000000 		.4byte	.LVL270
 4987 1395 4C190000 		.4byte	0x194c
 4988 1399 1D       		.uleb128 0x1d
 4989 139a 98000000 		.4byte	.LVL272
 4990 139e B3190000 		.4byte	0x19b3
 4991 13a2 B3130000 		.4byte	0x13b3
 4992 13a6 1B       		.uleb128 0x1b
 4993 13a7 01       		.uleb128 0x1
 4994 13a8 50       		.byte	0x50
 4995 13a9 02       		.uleb128 0x2
 4996 13aa 91       		.byte	0x91
 4997 13ab 68       		.sleb128 -24
 4998 13ac 1B       		.uleb128 0x1b
 4999 13ad 01       		.uleb128 0x1
 5000 13ae 51       		.byte	0x51
 5001 13af 02       		.uleb128 0x2
 5002 13b0 91       		.byte	0x91
 5003 13b1 64       		.sleb128 -28
 5004 13b2 00       		.byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 151


 5005 13b3 1D       		.uleb128 0x1d
 5006 13b4 A0000000 		.4byte	.LVL273
 5007 13b8 99040000 		.4byte	0x499
 5008 13bc C7130000 		.4byte	0x13c7
 5009 13c0 1B       		.uleb128 0x1b
 5010 13c1 01       		.uleb128 0x1
 5011 13c2 50       		.byte	0x50
 5012 13c3 02       		.uleb128 0x2
 5013 13c4 74       		.byte	0x74
 5014 13c5 00       		.sleb128 0
 5015 13c6 00       		.byte	0
 5016 13c7 1D       		.uleb128 0x1d
 5017 13c8 AC000000 		.4byte	.LVL274
 5018 13cc BF190000 		.4byte	0x19bf
 5019 13d0 DB130000 		.4byte	0x13db
 5020 13d4 1B       		.uleb128 0x1b
 5021 13d5 01       		.uleb128 0x1
 5022 13d6 50       		.byte	0x50
 5023 13d7 02       		.uleb128 0x2
 5024 13d8 74       		.byte	0x74
 5025 13d9 24       		.sleb128 36
 5026 13da 00       		.byte	0
 5027 13db 1D       		.uleb128 0x1d
 5028 13dc B2000000 		.4byte	.LVL275
 5029 13e0 C6050000 		.4byte	0x5c6
 5030 13e4 EF130000 		.4byte	0x13ef
 5031 13e8 1B       		.uleb128 0x1b
 5032 13e9 01       		.uleb128 0x1
 5033 13ea 50       		.byte	0x50
 5034 13eb 02       		.uleb128 0x2
 5035 13ec 74       		.byte	0x74
 5036 13ed 00       		.sleb128 0
 5037 13ee 00       		.byte	0
 5038 13ef 18       		.uleb128 0x18
 5039 13f0 B6000000 		.4byte	.LVL276
 5040 13f4 CB190000 		.4byte	0x19cb
 5041 13f8 1D       		.uleb128 0x1d
 5042 13f9 D2000000 		.4byte	.LVL277
 5043 13fd C6050000 		.4byte	0x5c6
 5044 1401 0C140000 		.4byte	0x140c
 5045 1405 1B       		.uleb128 0x1b
 5046 1406 01       		.uleb128 0x1
 5047 1407 50       		.byte	0x50
 5048 1408 02       		.uleb128 0x2
 5049 1409 74       		.byte	0x74
 5050 140a 00       		.sleb128 0
 5051 140b 00       		.byte	0
 5052 140c 18       		.uleb128 0x18
 5053 140d D6000000 		.4byte	.LVL278
 5054 1411 CB190000 		.4byte	0x19cb
 5055 1415 1D       		.uleb128 0x1d
 5056 1416 DE000000 		.4byte	.LVL279
 5057 141a C6050000 		.4byte	0x5c6
 5058 141e 29140000 		.4byte	0x1429
 5059 1422 1B       		.uleb128 0x1b
 5060 1423 01       		.uleb128 0x1
 5061 1424 50       		.byte	0x50
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 152


 5062 1425 02       		.uleb128 0x2
 5063 1426 74       		.byte	0x74
 5064 1427 00       		.sleb128 0
 5065 1428 00       		.byte	0
 5066 1429 18       		.uleb128 0x18
 5067 142a E2000000 		.4byte	.LVL280
 5068 142e CB190000 		.4byte	0x19cb
 5069 1432 1A       		.uleb128 0x1a
 5070 1433 E8000000 		.4byte	.LVL281
 5071 1437 99040000 		.4byte	0x499
 5072 143b 1B       		.uleb128 0x1b
 5073 143c 01       		.uleb128 0x1
 5074 143d 50       		.byte	0x50
 5075 143e 02       		.uleb128 0x2
 5076 143f 74       		.byte	0x74
 5077 1440 00       		.sleb128 0
 5078 1441 00       		.byte	0
 5079 1442 00       		.byte	0
 5080 1443 1E       		.uleb128 0x1e
 5081 1444 D8040000 		.4byte	.LASF126
 5082 1448 01       		.byte	0x1
 5083 1449 8B07     		.2byte	0x78b
 5084 144b 05010000 		.4byte	0x105
 5085 144f 00000000 		.4byte	.LFB82
 5086 1453 7E000000 		.4byte	.LFE82-.LFB82
 5087 1457 01       		.uleb128 0x1
 5088 1458 9C       		.byte	0x9c
 5089 1459 81150000 		.4byte	0x1581
 5090 145d 15       		.uleb128 0x15
 5091 145e C2050000 		.4byte	.LASF64
 5092 1462 01       		.byte	0x1
 5093 1463 8B07     		.2byte	0x78b
 5094 1465 55020000 		.4byte	0x255
 5095 1469 7E100000 		.4byte	.LLST82
 5096 146d 15       		.uleb128 0x15
 5097 146e 5C080000 		.4byte	.LASF84
 5098 1472 01       		.byte	0x1
 5099 1473 8C07     		.2byte	0x78c
 5100 1475 C1050000 		.4byte	0x5c1
 5101 1479 CE100000 		.4byte	.LLST83
 5102 147d 15       		.uleb128 0x15
 5103 147e CA000000 		.4byte	.LASF113
 5104 1482 01       		.byte	0x1
 5105 1483 8D07     		.2byte	0x78d
 5106 1485 070D0000 		.4byte	0xd07
 5107 1489 08110000 		.4byte	.LLST84
 5108 148d 17       		.uleb128 0x17
 5109 148e DC030000 		.4byte	.LASF79
 5110 1492 01       		.byte	0x1
 5111 1493 8F07     		.2byte	0x78f
 5112 1495 05010000 		.4byte	0x105
 5113 1499 01       		.uleb128 0x1
 5114 149a 50       		.byte	0x50
 5115 149b 21       		.uleb128 0x21
 5116 149c 0B080000 		.4byte	.LASF114
 5117 14a0 01       		.byte	0x1
 5118 14a1 9007     		.2byte	0x790
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 153


 5119 14a3 10010000 		.4byte	0x110
 5120 14a7 16       		.uleb128 0x16
 5121 14a8 65080000 		.4byte	.LASF77
 5122 14ac 01       		.byte	0x1
 5123 14ad 9107     		.2byte	0x791
 5124 14af 70050000 		.4byte	0x570
 5125 14b3 4A110000 		.4byte	.LLST85
 5126 14b7 22       		.uleb128 0x22
 5127 14b8 C4030000 		.4byte	0x3c4
 5128 14bc 04000000 		.4byte	.LBB47
 5129 14c0 14000000 		.4byte	.LBE47-.LBB47
 5130 14c4 01       		.byte	0x1
 5131 14c5 A607     		.2byte	0x7a6
 5132 14c7 E0140000 		.4byte	0x14e0
 5133 14cb 23       		.uleb128 0x23
 5134 14cc 04000000 		.4byte	.LBB48
 5135 14d0 14000000 		.4byte	.LBE48-.LBB48
 5136 14d4 24       		.uleb128 0x24
 5137 14d5 D4030000 		.4byte	0x3d4
 5138 14d9 24       		.uleb128 0x24
 5139 14da DF030000 		.4byte	0x3df
 5140 14de 00       		.byte	0
 5141 14df 00       		.byte	0
 5142 14e0 1C       		.uleb128 0x1c
 5143 14e1 18000000 		.4byte	.LBB49
 5144 14e5 5E000000 		.4byte	.LBE49-.LBB49
 5145 14e9 66150000 		.4byte	0x1566
 5146 14ed 16       		.uleb128 0x16
 5147 14ee 4A080000 		.4byte	.LASF51
 5148 14f2 01       		.byte	0x1
 5149 14f3 A807     		.2byte	0x7a8
 5150 14f5 AC070000 		.4byte	0x7ac
 5151 14f9 9A110000 		.4byte	.LLST86
 5152 14fd 28       		.uleb128 0x28
 5153 14fe 30000000 		.4byte	.Ldebug_ranges0+0x30
 5154 1502 16       		.uleb128 0x16
 5155 1503 F7060000 		.4byte	.LASF54
 5156 1507 01       		.byte	0x1
 5157 1508 AD07     		.2byte	0x7ad
 5158 150a 0C0D0000 		.4byte	0xd0c
 5159 150e D2110000 		.4byte	.LLST87
 5160 1512 1C       		.uleb128 0x1c
 5161 1513 50000000 		.4byte	.LBB51
 5162 1517 10000000 		.4byte	.LBE51-.LBB51
 5163 151b 39150000 		.4byte	0x1539
 5164 151f 16       		.uleb128 0x16
 5165 1520 7C050000 		.4byte	.LASF116
 5166 1524 01       		.byte	0x1
 5167 1525 D707     		.2byte	0x7d7
 5168 1527 AC070000 		.4byte	0x7ac
 5169 152b FD110000 		.4byte	.LLST88
 5170 152f 18       		.uleb128 0x18
 5171 1530 54000000 		.4byte	.LVL291
 5172 1534 E3190000 		.4byte	0x19e3
 5173 1538 00       		.byte	0
 5174 1539 1D       		.uleb128 0x1d
 5175 153a 2A000000 		.4byte	.LVL288
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 154


 5176 153e 7A050000 		.4byte	0x57a
 5177 1542 54150000 		.4byte	0x1554
 5178 1546 1B       		.uleb128 0x1b
 5179 1547 01       		.uleb128 0x1
 5180 1548 50       		.byte	0x50
 5181 1549 02       		.uleb128 0x2
 5182 154a 75       		.byte	0x75
 5183 154b 00       		.sleb128 0
 5184 154c 1B       		.uleb128 0x1b
 5185 154d 01       		.uleb128 0x1
 5186 154e 51       		.byte	0x51
 5187 154f 03       		.uleb128 0x3
 5188 1550 F3       		.byte	0xf3
 5189 1551 01       		.uleb128 0x1
 5190 1552 51       		.byte	0x51
 5191 1553 00       		.byte	0
 5192 1554 1A       		.uleb128 0x1a
 5193 1555 40000000 		.4byte	.LVL290
 5194 1559 6C190000 		.4byte	0x196c
 5195 155d 1B       		.uleb128 0x1b
 5196 155e 01       		.uleb128 0x1
 5197 155f 50       		.byte	0x50
 5198 1560 02       		.uleb128 0x2
 5199 1561 75       		.byte	0x75
 5200 1562 10       		.sleb128 16
 5201 1563 00       		.byte	0
 5202 1564 00       		.byte	0
 5203 1565 00       		.byte	0
 5204 1566 26       		.uleb128 0x26
 5205 1567 EB030000 		.4byte	0x3eb
 5206 156b 76000000 		.4byte	.LBB53
 5207 156f 04000000 		.4byte	.LBE53-.LBB53
 5208 1573 01       		.byte	0x1
 5209 1574 E207     		.2byte	0x7e2
 5210 1576 27       		.uleb128 0x27
 5211 1577 F7030000 		.4byte	0x3f7
 5212 157b 1B120000 		.4byte	.LLST89
 5213 157f 00       		.byte	0
 5214 1580 00       		.byte	0
 5215 1581 1E       		.uleb128 0x1e
 5216 1582 3D010000 		.4byte	.LASF127
 5217 1586 01       		.byte	0x1
 5218 1587 E807     		.2byte	0x7e8
 5219 1589 05010000 		.4byte	0x105
 5220 158d 00000000 		.4byte	.LFB83
 5221 1591 30000000 		.4byte	.LFE83-.LFB83
 5222 1595 01       		.uleb128 0x1
 5223 1596 9C       		.byte	0x9c
 5224 1597 56160000 		.4byte	0x1656
 5225 159b 15       		.uleb128 0x15
 5226 159c C2050000 		.4byte	.LASF64
 5227 15a0 01       		.byte	0x1
 5228 15a1 E807     		.2byte	0x7e8
 5229 15a3 55020000 		.4byte	0x255
 5230 15a7 2E120000 		.4byte	.LLST90
 5231 15ab 15       		.uleb128 0x15
 5232 15ac 5C080000 		.4byte	.LASF84
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 155


 5233 15b0 01       		.byte	0x1
 5234 15b1 E907     		.2byte	0x7e9
 5235 15b3 C1050000 		.4byte	0x5c1
 5236 15b7 65120000 		.4byte	.LLST91
 5237 15bb 16       		.uleb128 0x16
 5238 15bc DC030000 		.4byte	.LASF79
 5239 15c0 01       		.byte	0x1
 5240 15c1 EB07     		.2byte	0x7eb
 5241 15c3 05010000 		.4byte	0x105
 5242 15c7 9F120000 		.4byte	.LLST92
 5243 15cb 21       		.uleb128 0x21
 5244 15cc 0B080000 		.4byte	.LASF114
 5245 15d0 01       		.byte	0x1
 5246 15d1 EC07     		.2byte	0x7ec
 5247 15d3 10010000 		.4byte	0x110
 5248 15d7 16       		.uleb128 0x16
 5249 15d8 89020000 		.4byte	.LASF125
 5250 15dc 01       		.byte	0x1
 5251 15dd ED07     		.2byte	0x7ed
 5252 15df 0E030000 		.4byte	0x30e
 5253 15e3 BE120000 		.4byte	.LLST93
 5254 15e7 16       		.uleb128 0x16
 5255 15e8 65080000 		.4byte	.LASF77
 5256 15ec 01       		.byte	0x1
 5257 15ed EE07     		.2byte	0x7ee
 5258 15ef 70050000 		.4byte	0x570
 5259 15f3 D1120000 		.4byte	.LLST94
 5260 15f7 22       		.uleb128 0x22
 5261 15f8 C4030000 		.4byte	0x3c4
 5262 15fc 02000000 		.4byte	.LBB55
 5263 1600 14000000 		.4byte	.LBE55-.LBB55
 5264 1604 01       		.byte	0x1
 5265 1605 0408     		.2byte	0x804
 5266 1607 20160000 		.4byte	0x1620
 5267 160b 23       		.uleb128 0x23
 5268 160c 02000000 		.4byte	.LBB56
 5269 1610 14000000 		.4byte	.LBE56-.LBB56
 5270 1614 24       		.uleb128 0x24
 5271 1615 D4030000 		.4byte	0x3d4
 5272 1619 24       		.uleb128 0x24
 5273 161a DF030000 		.4byte	0x3df
 5274 161e 00       		.byte	0
 5275 161f 00       		.byte	0
 5276 1620 22       		.uleb128 0x22
 5277 1621 EB030000 		.4byte	0x3eb
 5278 1625 2A000000 		.4byte	.LBB57
 5279 1629 04000000 		.4byte	.LBE57-.LBB57
 5280 162d 01       		.byte	0x1
 5281 162e 1908     		.2byte	0x819
 5282 1630 3E160000 		.4byte	0x163e
 5283 1634 27       		.uleb128 0x27
 5284 1635 F7030000 		.4byte	0x3f7
 5285 1639 08130000 		.4byte	.LLST95
 5286 163d 00       		.byte	0
 5287 163e 1A       		.uleb128 0x1a
 5288 163f 22000000 		.4byte	.LVL304
 5289 1643 7A050000 		.4byte	0x57a
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 156


 5290 1647 1B       		.uleb128 0x1b
 5291 1648 01       		.uleb128 0x1
 5292 1649 50       		.byte	0x50
 5293 164a 02       		.uleb128 0x2
 5294 164b 74       		.byte	0x74
 5295 164c 00       		.sleb128 0
 5296 164d 1B       		.uleb128 0x1b
 5297 164e 01       		.uleb128 0x1
 5298 164f 51       		.byte	0x51
 5299 1650 03       		.uleb128 0x3
 5300 1651 F3       		.byte	0xf3
 5301 1652 01       		.uleb128 0x1
 5302 1653 51       		.byte	0x51
 5303 1654 00       		.byte	0
 5304 1655 00       		.byte	0
 5305 1656 1E       		.uleb128 0x1e
 5306 1657 72000000 		.4byte	.LASF128
 5307 165b 01       		.byte	0x1
 5308 165c 1F08     		.2byte	0x81f
 5309 165e 10010000 		.4byte	0x110
 5310 1662 00000000 		.4byte	.LFB84
 5311 1666 12000000 		.4byte	.LFE84-.LFB84
 5312 166a 01       		.uleb128 0x1
 5313 166b 9C       		.byte	0x9c
 5314 166c A1160000 		.4byte	0x16a1
 5315 1670 15       		.uleb128 0x15
 5316 1671 C2050000 		.4byte	.LASF64
 5317 1675 01       		.byte	0x1
 5318 1676 1F08     		.2byte	0x81f
 5319 1678 A1160000 		.4byte	0x16a1
 5320 167c 1B130000 		.4byte	.LLST96
 5321 1680 17       		.uleb128 0x17
 5322 1681 C5040000 		.4byte	.LASF129
 5323 1685 01       		.byte	0x1
 5324 1686 2108     		.2byte	0x821
 5325 1688 10010000 		.4byte	0x110
 5326 168c 01       		.uleb128 0x1
 5327 168d 54       		.byte	0x54
 5328 168e 18       		.uleb128 0x18
 5329 168f 08000000 		.4byte	.LVL310
 5330 1693 41190000 		.4byte	0x1941
 5331 1697 18       		.uleb128 0x18
 5332 1698 0E000000 		.4byte	.LVL312
 5333 169c 4C190000 		.4byte	0x194c
 5334 16a0 00       		.byte	0
 5335 16a1 07       		.uleb128 0x7
 5336 16a2 55020000 		.4byte	0x255
 5337 16a6 1E       		.uleb128 0x1e
 5338 16a7 910A0000 		.4byte	.LASF130
 5339 16ab 01       		.byte	0x1
 5340 16ac 2F08     		.2byte	0x82f
 5341 16ae 10010000 		.4byte	0x110
 5342 16b2 00000000 		.4byte	.LFB85
 5343 16b6 16000000 		.4byte	.LFE85-.LFB85
 5344 16ba 01       		.uleb128 0x1
 5345 16bb 9C       		.byte	0x9c
 5346 16bc 01170000 		.4byte	0x1701
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 157


 5347 16c0 15       		.uleb128 0x15
 5348 16c1 C2050000 		.4byte	.LASF64
 5349 16c5 01       		.byte	0x1
 5350 16c6 2F08     		.2byte	0x82f
 5351 16c8 A1160000 		.4byte	0x16a1
 5352 16cc 47130000 		.4byte	.LLST97
 5353 16d0 17       		.uleb128 0x17
 5354 16d1 C5040000 		.4byte	.LASF129
 5355 16d5 01       		.byte	0x1
 5356 16d6 3108     		.2byte	0x831
 5357 16d8 10010000 		.4byte	0x110
 5358 16dc 01       		.uleb128 0x1
 5359 16dd 54       		.byte	0x54
 5360 16de 16       		.uleb128 0x16
 5361 16df 65080000 		.4byte	.LASF77
 5362 16e3 01       		.byte	0x1
 5363 16e4 3208     		.2byte	0x832
 5364 16e6 70050000 		.4byte	0x570
 5365 16ea 73130000 		.4byte	.LLST98
 5366 16ee 18       		.uleb128 0x18
 5367 16ef 08000000 		.4byte	.LVL315
 5368 16f3 41190000 		.4byte	0x1941
 5369 16f7 18       		.uleb128 0x18
 5370 16f8 12000000 		.4byte	.LVL318
 5371 16fc 4C190000 		.4byte	0x194c
 5372 1700 00       		.byte	0
 5373 1701 1E       		.uleb128 0x1e
 5374 1702 D4050000 		.4byte	.LASF131
 5375 1706 01       		.byte	0x1
 5376 1707 4008     		.2byte	0x840
 5377 1709 10010000 		.4byte	0x110
 5378 170d 00000000 		.4byte	.LFB86
 5379 1711 04000000 		.4byte	.LFE86-.LFB86
 5380 1715 01       		.uleb128 0x1
 5381 1716 9C       		.byte	0x9c
 5382 1717 4A170000 		.4byte	0x174a
 5383 171b 15       		.uleb128 0x15
 5384 171c C2050000 		.4byte	.LASF64
 5385 1720 01       		.byte	0x1
 5386 1721 4008     		.2byte	0x840
 5387 1723 A1160000 		.4byte	0x16a1
 5388 1727 9F130000 		.4byte	.LLST99
 5389 172b 17       		.uleb128 0x17
 5390 172c C5040000 		.4byte	.LASF129
 5391 1730 01       		.byte	0x1
 5392 1731 4208     		.2byte	0x842
 5393 1733 10010000 		.4byte	0x110
 5394 1737 01       		.uleb128 0x1
 5395 1738 50       		.byte	0x50
 5396 1739 16       		.uleb128 0x16
 5397 173a 65080000 		.4byte	.LASF77
 5398 173e 01       		.byte	0x1
 5399 173f 4308     		.2byte	0x843
 5400 1741 70050000 		.4byte	0x570
 5401 1745 C0130000 		.4byte	.LLST100
 5402 1749 00       		.byte	0
 5403 174a 1E       		.uleb128 0x1e
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 158


 5404 174b E4000000 		.4byte	.LASF132
 5405 174f 01       		.byte	0x1
 5406 1750 A509     		.2byte	0x9a5
 5407 1752 05010000 		.4byte	0x105
 5408 1756 00000000 		.4byte	.LFB93
 5409 175a 0C000000 		.4byte	.LFE93-.LFB93
 5410 175e 01       		.uleb128 0x1
 5411 175f 9C       		.byte	0x9c
 5412 1760 93170000 		.4byte	0x1793
 5413 1764 15       		.uleb128 0x15
 5414 1765 C2050000 		.4byte	.LASF64
 5415 1769 01       		.byte	0x1
 5416 176a A509     		.2byte	0x9a5
 5417 176c A1160000 		.4byte	0x16a1
 5418 1770 E1130000 		.4byte	.LLST101
 5419 1774 17       		.uleb128 0x17
 5420 1775 DC030000 		.4byte	.LASF79
 5421 1779 01       		.byte	0x1
 5422 177a A709     		.2byte	0x9a7
 5423 177c 05010000 		.4byte	0x105
 5424 1780 01       		.uleb128 0x1
 5425 1781 50       		.byte	0x50
 5426 1782 16       		.uleb128 0x16
 5427 1783 65080000 		.4byte	.LASF77
 5428 1787 01       		.byte	0x1
 5429 1788 A809     		.2byte	0x9a8
 5430 178a 70050000 		.4byte	0x570
 5431 178e 1B140000 		.4byte	.LLST102
 5432 1792 00       		.byte	0
 5433 1793 1E       		.uleb128 0x1e
 5434 1794 1E070000 		.4byte	.LASF133
 5435 1798 01       		.byte	0x1
 5436 1799 CE09     		.2byte	0x9ce
 5437 179b 05010000 		.4byte	0x105
 5438 179f 00000000 		.4byte	.LFB95
 5439 17a3 10000000 		.4byte	.LFE95-.LFB95
 5440 17a7 01       		.uleb128 0x1
 5441 17a8 9C       		.byte	0x9c
 5442 17a9 DC170000 		.4byte	0x17dc
 5443 17ad 15       		.uleb128 0x15
 5444 17ae C2050000 		.4byte	.LASF64
 5445 17b2 01       		.byte	0x1
 5446 17b3 CE09     		.2byte	0x9ce
 5447 17b5 A1160000 		.4byte	0x16a1
 5448 17b9 55140000 		.4byte	.LLST103
 5449 17bd 17       		.uleb128 0x17
 5450 17be DC030000 		.4byte	.LASF79
 5451 17c2 01       		.byte	0x1
 5452 17c3 D009     		.2byte	0x9d0
 5453 17c5 05010000 		.4byte	0x105
 5454 17c9 01       		.uleb128 0x1
 5455 17ca 50       		.byte	0x50
 5456 17cb 16       		.uleb128 0x16
 5457 17cc 65080000 		.4byte	.LASF77
 5458 17d0 01       		.byte	0x1
 5459 17d1 D109     		.2byte	0x9d1
 5460 17d3 70050000 		.4byte	0x570
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 159


 5461 17d7 8F140000 		.4byte	.LLST104
 5462 17db 00       		.byte	0
 5463 17dc 29       		.uleb128 0x29
 5464 17dd 3A040000 		.4byte	.LASF137
 5465 17e1 01       		.byte	0x1
 5466 17e2 030B     		.2byte	0xb03
 5467 17e4 00000000 		.4byte	.LFB96
 5468 17e8 48000000 		.4byte	.LFE96-.LFB96
 5469 17ec 01       		.uleb128 0x1
 5470 17ed 9C       		.byte	0x9c
 5471 17ee 30180000 		.4byte	0x1830
 5472 17f2 1F       		.uleb128 0x1f
 5473 17f3 C2050000 		.4byte	.LASF64
 5474 17f7 01       		.byte	0x1
 5475 17f8 030B     		.2byte	0xb03
 5476 17fa 55020000 		.4byte	0x255
 5477 17fe 01       		.uleb128 0x1
 5478 17ff 50       		.byte	0x50
 5479 1800 15       		.uleb128 0x15
 5480 1801 C3080000 		.4byte	.LASF69
 5481 1805 01       		.byte	0x1
 5482 1806 040B     		.2byte	0xb04
 5483 1808 B9000000 		.4byte	0xb9
 5484 180c C9140000 		.4byte	.LLST105
 5485 1810 2A       		.uleb128 0x2a
 5486 1811 757800   		.ascii	"ux\000"
 5487 1814 01       		.byte	0x1
 5488 1815 060B     		.2byte	0xb06
 5489 1817 10010000 		.4byte	0x110
 5490 181b 0B150000 		.4byte	.LLST106
 5491 181f 16       		.uleb128 0x16
 5492 1820 43090000 		.4byte	.LASF134
 5493 1824 01       		.byte	0x1
 5494 1825 070B     		.2byte	0xb07
 5495 1827 30180000 		.4byte	0x1830
 5496 182b 29150000 		.4byte	.LLST107
 5497 182f 00       		.byte	0
 5498 1830 06       		.uleb128 0x6
 5499 1831 04       		.byte	0x4
 5500 1832 B9030000 		.4byte	0x3b9
 5501 1836 1E       		.uleb128 0x1e
 5502 1837 A80A0000 		.4byte	.LASF135
 5503 183b 01       		.byte	0x1
 5504 183c 320B     		.2byte	0xb32
 5505 183e B9000000 		.4byte	0xb9
 5506 1842 00000000 		.4byte	.LFB97
 5507 1846 28000000 		.4byte	.LFE97-.LFB97
 5508 184a 01       		.uleb128 0x1
 5509 184b 9C       		.byte	0x9c
 5510 184c 80180000 		.4byte	0x1880
 5511 1850 15       		.uleb128 0x15
 5512 1851 C2050000 		.4byte	.LASF64
 5513 1855 01       		.byte	0x1
 5514 1856 320B     		.2byte	0xb32
 5515 1858 55020000 		.4byte	0x255
 5516 185c 75150000 		.4byte	.LLST108
 5517 1860 2A       		.uleb128 0x2a
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 160


 5518 1861 757800   		.ascii	"ux\000"
 5519 1864 01       		.byte	0x1
 5520 1865 340B     		.2byte	0xb34
 5521 1867 10010000 		.4byte	0x110
 5522 186b AF150000 		.4byte	.LLST109
 5523 186f 16       		.uleb128 0x16
 5524 1870 18050000 		.4byte	.LASF136
 5525 1874 01       		.byte	0x1
 5526 1875 350B     		.2byte	0xb35
 5527 1877 B9000000 		.4byte	0xb9
 5528 187b CE150000 		.4byte	.LLST110
 5529 187f 00       		.byte	0
 5530 1880 29       		.uleb128 0x29
 5531 1881 5D090000 		.4byte	.LASF138
 5532 1885 01       		.byte	0x1
 5533 1886 510B     		.2byte	0xb51
 5534 1888 00000000 		.4byte	.LFB98
 5535 188c 2C000000 		.4byte	.LFE98-.LFB98
 5536 1890 01       		.uleb128 0x1
 5537 1891 9C       		.byte	0x9c
 5538 1892 B4180000 		.4byte	0x18b4
 5539 1896 1F       		.uleb128 0x1f
 5540 1897 C2050000 		.4byte	.LASF64
 5541 189b 01       		.byte	0x1
 5542 189c 510B     		.2byte	0xb51
 5543 189e 55020000 		.4byte	0x255
 5544 18a2 01       		.uleb128 0x1
 5545 18a3 50       		.byte	0x50
 5546 18a4 2A       		.uleb128 0x2a
 5547 18a5 757800   		.ascii	"ux\000"
 5548 18a8 01       		.byte	0x1
 5549 18a9 530B     		.2byte	0xb53
 5550 18ab 10010000 		.4byte	0x110
 5551 18af 04160000 		.4byte	.LLST111
 5552 18b3 00       		.byte	0
 5553 18b4 29       		.uleb128 0x29
 5554 18b5 3B050000 		.4byte	.LASF139
 5555 18b9 01       		.byte	0x1
 5556 18ba 4C08     		.2byte	0x84c
 5557 18bc 00000000 		.4byte	.LFB87
 5558 18c0 10000000 		.4byte	.LFE87-.LFB87
 5559 18c4 01       		.uleb128 0x1
 5560 18c5 9C       		.byte	0x9c
 5561 18c6 0F190000 		.4byte	0x190f
 5562 18ca 15       		.uleb128 0x15
 5563 18cb C2050000 		.4byte	.LASF64
 5564 18cf 01       		.byte	0x1
 5565 18d0 4C08     		.2byte	0x84c
 5566 18d2 55020000 		.4byte	0x255
 5567 18d6 2E160000 		.4byte	.LLST112
 5568 18da 16       		.uleb128 0x16
 5569 18db 65080000 		.4byte	.LASF77
 5570 18df 01       		.byte	0x1
 5571 18e0 4E08     		.2byte	0x84e
 5572 18e2 70050000 		.4byte	0x570
 5573 18e6 4C160000 		.4byte	.LLST113
 5574 18ea 1D       		.uleb128 0x1d
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 161


 5575 18eb 08000000 		.4byte	.LVL355
 5576 18ef 80180000 		.4byte	0x1880
 5577 18f3 FE180000 		.4byte	0x18fe
 5578 18f7 1B       		.uleb128 0x1b
 5579 18f8 01       		.uleb128 0x1
 5580 18f9 50       		.byte	0x50
 5581 18fa 02       		.uleb128 0x2
 5582 18fb 74       		.byte	0x74
 5583 18fc 00       		.sleb128 0
 5584 18fd 00       		.byte	0
 5585 18fe 1A       		.uleb128 0x1a
 5586 18ff 0E000000 		.4byte	.LVL356
 5587 1903 131A0000 		.4byte	0x1a13
 5588 1907 1B       		.uleb128 0x1b
 5589 1908 01       		.uleb128 0x1
 5590 1909 50       		.byte	0x50
 5591 190a 02       		.uleb128 0x2
 5592 190b 74       		.byte	0x74
 5593 190c 00       		.sleb128 0
 5594 190d 00       		.byte	0
 5595 190e 00       		.byte	0
 5596 190f 2B       		.uleb128 0x2b
 5597 1910 D2010000 		.4byte	.LASF140
 5598 1914 09       		.byte	0x9
 5599 1915 1207     		.2byte	0x712
 5600 1917 1B190000 		.4byte	0x191b
 5601 191b 0B       		.uleb128 0xb
 5602 191c E1000000 		.4byte	0xe1
 5603 1920 2C       		.uleb128 0x2c
 5604 1921 B9030000 		.4byte	0x3b9
 5605 1925 30190000 		.4byte	0x1930
 5606 1929 2D       		.uleb128 0x2d
 5607 192a A9000000 		.4byte	0xa9
 5608 192e 09       		.byte	0x9
 5609 192f 00       		.byte	0
 5610 1930 2E       		.uleb128 0x2e
 5611 1931 DE080000 		.4byte	.LASF141
 5612 1935 01       		.byte	0x1
 5613 1936 A4       		.byte	0xa4
 5614 1937 20190000 		.4byte	0x1920
 5615 193b 05       		.uleb128 0x5
 5616 193c 03       		.byte	0x3
 5617 193d 00000000 		.4byte	xQueueRegistry
 5618 1941 2F       		.uleb128 0x2f
 5619 1942 86030000 		.4byte	.LASF142
 5620 1946 86030000 		.4byte	.LASF142
 5621 194a 02       		.byte	0x2
 5622 194b 67       		.byte	0x67
 5623 194c 2F       		.uleb128 0x2f
 5624 194d 85080000 		.4byte	.LASF143
 5625 1951 85080000 		.4byte	.LASF143
 5626 1955 02       		.byte	0x2
 5627 1956 68       		.byte	0x68
 5628 1957 30       		.uleb128 0x30
 5629 1958 790A0000 		.4byte	.LASF144
 5630 195c 790A0000 		.4byte	.LASF144
 5631 1960 07       		.byte	0x7
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 162


 5632 1961 3C0C     		.2byte	0xc3c
 5633 1963 31       		.uleb128 0x31
 5634 1964 D2020000 		.4byte	.LASF167
 5635 1968 D2020000 		.4byte	.LASF167
 5636 196c 30       		.uleb128 0x30
 5637 196d 31080000 		.4byte	.LASF145
 5638 1971 31080000 		.4byte	.LASF145
 5639 1975 07       		.byte	0x7
 5640 1976 0D0C     		.2byte	0xc0d
 5641 1978 30       		.uleb128 0x30
 5642 1979 2C020000 		.4byte	.LASF146
 5643 197d 2C020000 		.4byte	.LASF146
 5644 1981 07       		.byte	0x7
 5645 1982 2A0C     		.2byte	0xc2a
 5646 1984 30       		.uleb128 0x30
 5647 1985 690A0000 		.4byte	.LASF147
 5648 1989 690A0000 		.4byte	.LASF147
 5649 198d 06       		.byte	0x6
 5650 198e B101     		.2byte	0x1b1
 5651 1990 2F       		.uleb128 0x2f
 5652 1991 79030000 		.4byte	.LASF148
 5653 1995 79030000 		.4byte	.LASF148
 5654 1999 0A       		.byte	0xa
 5655 199a AF       		.byte	0xaf
 5656 199b 30       		.uleb128 0x30
 5657 199c BA090000 		.4byte	.LASF149
 5658 19a0 BA090000 		.4byte	.LASF149
 5659 19a4 07       		.byte	0x7
 5660 19a5 790C     		.2byte	0xc79
 5661 19a7 30       		.uleb128 0x30
 5662 19a8 AA090000 		.4byte	.LASF150
 5663 19ac AA090000 		.4byte	.LASF150
 5664 19b0 07       		.byte	0x7
 5665 19b1 5A05     		.2byte	0x55a
 5666 19b3 30       		.uleb128 0x30
 5667 19b4 09090000 		.4byte	.LASF151
 5668 19b8 09090000 		.4byte	.LASF151
 5669 19bc 07       		.byte	0x7
 5670 19bd 8C0B     		.2byte	0xb8c
 5671 19bf 30       		.uleb128 0x30
 5672 19c0 99030000 		.4byte	.LASF152
 5673 19c4 99030000 		.4byte	.LASF152
 5674 19c8 07       		.byte	0x7
 5675 19c9 E00B     		.2byte	0xbe0
 5676 19cb 30       		.uleb128 0x30
 5677 19cc 0F070000 		.4byte	.LASF153
 5678 19d0 0F070000 		.4byte	.LASF153
 5679 19d4 07       		.byte	0x7
 5680 19d5 9205     		.2byte	0x592
 5681 19d7 30       		.uleb128 0x30
 5682 19d8 21050000 		.4byte	.LASF154
 5683 19dc 21050000 		.4byte	.LASF154
 5684 19e0 07       		.byte	0x7
 5685 19e1 240C     		.2byte	0xc24
 5686 19e3 30       		.uleb128 0x30
 5687 19e4 73090000 		.4byte	.LASF155
 5688 19e8 73090000 		.4byte	.LASF155
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 163


 5689 19ec 07       		.byte	0x7
 5690 19ed C505     		.2byte	0x5c5
 5691 19ef 30       		.uleb128 0x30
 5692 19f0 A5080000 		.4byte	.LASF156
 5693 19f4 A5080000 		.4byte	.LASF156
 5694 19f8 07       		.byte	0x7
 5695 19f9 730C     		.2byte	0xc73
 5696 19fb 30       		.uleb128 0x30
 5697 19fc 3D020000 		.4byte	.LASF157
 5698 1a00 3D020000 		.4byte	.LASF157
 5699 1a04 07       		.byte	0x7
 5700 1a05 460C     		.2byte	0xc46
 5701 1a07 30       		.uleb128 0x30
 5702 1a08 1E090000 		.4byte	.LASF158
 5703 1a0c 1E090000 		.4byte	.LASF158
 5704 1a10 07       		.byte	0x7
 5705 1a11 360C     		.2byte	0xc36
 5706 1a13 2F       		.uleb128 0x2f
 5707 1a14 CE040000 		.4byte	.LASF159
 5708 1a18 CE040000 		.4byte	.LASF159
 5709 1a1c 0A       		.byte	0xa
 5710 1a1d B2       		.byte	0xb2
 5711 1a1e 00       		.byte	0
 5712              		.section	.debug_abbrev,"",%progbits
 5713              	.Ldebug_abbrev0:
 5714 0000 01       		.uleb128 0x1
 5715 0001 11       		.uleb128 0x11
 5716 0002 01       		.byte	0x1
 5717 0003 25       		.uleb128 0x25
 5718 0004 0E       		.uleb128 0xe
 5719 0005 13       		.uleb128 0x13
 5720 0006 0B       		.uleb128 0xb
 5721 0007 03       		.uleb128 0x3
 5722 0008 0E       		.uleb128 0xe
 5723 0009 1B       		.uleb128 0x1b
 5724 000a 0E       		.uleb128 0xe
 5725 000b 55       		.uleb128 0x55
 5726 000c 17       		.uleb128 0x17
 5727 000d 11       		.uleb128 0x11
 5728 000e 01       		.uleb128 0x1
 5729 000f 10       		.uleb128 0x10
 5730 0010 17       		.uleb128 0x17
 5731 0011 00       		.byte	0
 5732 0012 00       		.byte	0
 5733 0013 02       		.uleb128 0x2
 5734 0014 16       		.uleb128 0x16
 5735 0015 00       		.byte	0
 5736 0016 03       		.uleb128 0x3
 5737 0017 0E       		.uleb128 0xe
 5738 0018 3A       		.uleb128 0x3a
 5739 0019 0B       		.uleb128 0xb
 5740 001a 3B       		.uleb128 0x3b
 5741 001b 0B       		.uleb128 0xb
 5742 001c 49       		.uleb128 0x49
 5743 001d 13       		.uleb128 0x13
 5744 001e 00       		.byte	0
 5745 001f 00       		.byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 164


 5746 0020 03       		.uleb128 0x3
 5747 0021 24       		.uleb128 0x24
 5748 0022 00       		.byte	0
 5749 0023 0B       		.uleb128 0xb
 5750 0024 0B       		.uleb128 0xb
 5751 0025 3E       		.uleb128 0x3e
 5752 0026 0B       		.uleb128 0xb
 5753 0027 03       		.uleb128 0x3
 5754 0028 0E       		.uleb128 0xe
 5755 0029 00       		.byte	0
 5756 002a 00       		.byte	0
 5757 002b 04       		.uleb128 0x4
 5758 002c 24       		.uleb128 0x24
 5759 002d 00       		.byte	0
 5760 002e 0B       		.uleb128 0xb
 5761 002f 0B       		.uleb128 0xb
 5762 0030 3E       		.uleb128 0x3e
 5763 0031 0B       		.uleb128 0xb
 5764 0032 03       		.uleb128 0x3
 5765 0033 08       		.uleb128 0x8
 5766 0034 00       		.byte	0
 5767 0035 00       		.byte	0
 5768 0036 05       		.uleb128 0x5
 5769 0037 0F       		.uleb128 0xf
 5770 0038 00       		.byte	0
 5771 0039 0B       		.uleb128 0xb
 5772 003a 0B       		.uleb128 0xb
 5773 003b 00       		.byte	0
 5774 003c 00       		.byte	0
 5775 003d 06       		.uleb128 0x6
 5776 003e 0F       		.uleb128 0xf
 5777 003f 00       		.byte	0
 5778 0040 0B       		.uleb128 0xb
 5779 0041 0B       		.uleb128 0xb
 5780 0042 49       		.uleb128 0x49
 5781 0043 13       		.uleb128 0x13
 5782 0044 00       		.byte	0
 5783 0045 00       		.byte	0
 5784 0046 07       		.uleb128 0x7
 5785 0047 26       		.uleb128 0x26
 5786 0048 00       		.byte	0
 5787 0049 49       		.uleb128 0x49
 5788 004a 13       		.uleb128 0x13
 5789 004b 00       		.byte	0
 5790 004c 00       		.byte	0
 5791 004d 08       		.uleb128 0x8
 5792 004e 26       		.uleb128 0x26
 5793 004f 00       		.byte	0
 5794 0050 00       		.byte	0
 5795 0051 00       		.byte	0
 5796 0052 09       		.uleb128 0x9
 5797 0053 13       		.uleb128 0x13
 5798 0054 01       		.byte	0x1
 5799 0055 03       		.uleb128 0x3
 5800 0056 0E       		.uleb128 0xe
 5801 0057 0B       		.uleb128 0xb
 5802 0058 0B       		.uleb128 0xb
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 165


 5803 0059 3A       		.uleb128 0x3a
 5804 005a 0B       		.uleb128 0xb
 5805 005b 3B       		.uleb128 0x3b
 5806 005c 0B       		.uleb128 0xb
 5807 005d 01       		.uleb128 0x1
 5808 005e 13       		.uleb128 0x13
 5809 005f 00       		.byte	0
 5810 0060 00       		.byte	0
 5811 0061 0A       		.uleb128 0xa
 5812 0062 0D       		.uleb128 0xd
 5813 0063 00       		.byte	0
 5814 0064 03       		.uleb128 0x3
 5815 0065 0E       		.uleb128 0xe
 5816 0066 3A       		.uleb128 0x3a
 5817 0067 0B       		.uleb128 0xb
 5818 0068 3B       		.uleb128 0x3b
 5819 0069 0B       		.uleb128 0xb
 5820 006a 49       		.uleb128 0x49
 5821 006b 13       		.uleb128 0x13
 5822 006c 38       		.uleb128 0x38
 5823 006d 0B       		.uleb128 0xb
 5824 006e 00       		.byte	0
 5825 006f 00       		.byte	0
 5826 0070 0B       		.uleb128 0xb
 5827 0071 35       		.uleb128 0x35
 5828 0072 00       		.byte	0
 5829 0073 49       		.uleb128 0x49
 5830 0074 13       		.uleb128 0x13
 5831 0075 00       		.byte	0
 5832 0076 00       		.byte	0
 5833 0077 0C       		.uleb128 0xc
 5834 0078 13       		.uleb128 0x13
 5835 0079 00       		.byte	0
 5836 007a 03       		.uleb128 0x3
 5837 007b 0E       		.uleb128 0xe
 5838 007c 3C       		.uleb128 0x3c
 5839 007d 19       		.uleb128 0x19
 5840 007e 00       		.byte	0
 5841 007f 00       		.byte	0
 5842 0080 0D       		.uleb128 0xd
 5843 0081 0D       		.uleb128 0xd
 5844 0082 00       		.byte	0
 5845 0083 03       		.uleb128 0x3
 5846 0084 08       		.uleb128 0x8
 5847 0085 3A       		.uleb128 0x3a
 5848 0086 0B       		.uleb128 0xb
 5849 0087 3B       		.uleb128 0x3b
 5850 0088 0B       		.uleb128 0xb
 5851 0089 49       		.uleb128 0x49
 5852 008a 13       		.uleb128 0x13
 5853 008b 38       		.uleb128 0x38
 5854 008c 0B       		.uleb128 0xb
 5855 008d 00       		.byte	0
 5856 008e 00       		.byte	0
 5857 008f 0E       		.uleb128 0xe
 5858 0090 17       		.uleb128 0x17
 5859 0091 01       		.byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 166


 5860 0092 0B       		.uleb128 0xb
 5861 0093 0B       		.uleb128 0xb
 5862 0094 3A       		.uleb128 0x3a
 5863 0095 0B       		.uleb128 0xb
 5864 0096 3B       		.uleb128 0x3b
 5865 0097 0B       		.uleb128 0xb
 5866 0098 01       		.uleb128 0x1
 5867 0099 13       		.uleb128 0x13
 5868 009a 00       		.byte	0
 5869 009b 00       		.byte	0
 5870 009c 0F       		.uleb128 0xf
 5871 009d 0D       		.uleb128 0xd
 5872 009e 00       		.byte	0
 5873 009f 03       		.uleb128 0x3
 5874 00a0 0E       		.uleb128 0xe
 5875 00a1 3A       		.uleb128 0x3a
 5876 00a2 0B       		.uleb128 0xb
 5877 00a3 3B       		.uleb128 0x3b
 5878 00a4 0B       		.uleb128 0xb
 5879 00a5 49       		.uleb128 0x49
 5880 00a6 13       		.uleb128 0x13
 5881 00a7 00       		.byte	0
 5882 00a8 00       		.byte	0
 5883 00a9 10       		.uleb128 0x10
 5884 00aa 2E       		.uleb128 0x2e
 5885 00ab 01       		.byte	0x1
 5886 00ac 03       		.uleb128 0x3
 5887 00ad 0E       		.uleb128 0xe
 5888 00ae 3A       		.uleb128 0x3a
 5889 00af 0B       		.uleb128 0xb
 5890 00b0 3B       		.uleb128 0x3b
 5891 00b1 0B       		.uleb128 0xb
 5892 00b2 27       		.uleb128 0x27
 5893 00b3 19       		.uleb128 0x19
 5894 00b4 49       		.uleb128 0x49
 5895 00b5 13       		.uleb128 0x13
 5896 00b6 20       		.uleb128 0x20
 5897 00b7 0B       		.uleb128 0xb
 5898 00b8 01       		.uleb128 0x1
 5899 00b9 13       		.uleb128 0x13
 5900 00ba 00       		.byte	0
 5901 00bb 00       		.byte	0
 5902 00bc 11       		.uleb128 0x11
 5903 00bd 34       		.uleb128 0x34
 5904 00be 00       		.byte	0
 5905 00bf 03       		.uleb128 0x3
 5906 00c0 0E       		.uleb128 0xe
 5907 00c1 3A       		.uleb128 0x3a
 5908 00c2 0B       		.uleb128 0xb
 5909 00c3 3B       		.uleb128 0x3b
 5910 00c4 0B       		.uleb128 0xb
 5911 00c5 49       		.uleb128 0x49
 5912 00c6 13       		.uleb128 0x13
 5913 00c7 00       		.byte	0
 5914 00c8 00       		.byte	0
 5915 00c9 12       		.uleb128 0x12
 5916 00ca 2E       		.uleb128 0x2e
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 167


 5917 00cb 01       		.byte	0x1
 5918 00cc 03       		.uleb128 0x3
 5919 00cd 0E       		.uleb128 0xe
 5920 00ce 3A       		.uleb128 0x3a
 5921 00cf 0B       		.uleb128 0xb
 5922 00d0 3B       		.uleb128 0x3b
 5923 00d1 0B       		.uleb128 0xb
 5924 00d2 27       		.uleb128 0x27
 5925 00d3 19       		.uleb128 0x19
 5926 00d4 20       		.uleb128 0x20
 5927 00d5 0B       		.uleb128 0xb
 5928 00d6 01       		.uleb128 0x1
 5929 00d7 13       		.uleb128 0x13
 5930 00d8 00       		.byte	0
 5931 00d9 00       		.byte	0
 5932 00da 13       		.uleb128 0x13
 5933 00db 05       		.uleb128 0x5
 5934 00dc 00       		.byte	0
 5935 00dd 03       		.uleb128 0x3
 5936 00de 0E       		.uleb128 0xe
 5937 00df 3A       		.uleb128 0x3a
 5938 00e0 0B       		.uleb128 0xb
 5939 00e1 3B       		.uleb128 0x3b
 5940 00e2 0B       		.uleb128 0xb
 5941 00e3 49       		.uleb128 0x49
 5942 00e4 13       		.uleb128 0x13
 5943 00e5 00       		.byte	0
 5944 00e6 00       		.byte	0
 5945 00e7 14       		.uleb128 0x14
 5946 00e8 2E       		.uleb128 0x2e
 5947 00e9 01       		.byte	0x1
 5948 00ea 03       		.uleb128 0x3
 5949 00eb 0E       		.uleb128 0xe
 5950 00ec 3A       		.uleb128 0x3a
 5951 00ed 0B       		.uleb128 0xb
 5952 00ee 3B       		.uleb128 0x3b
 5953 00ef 05       		.uleb128 0x5
 5954 00f0 27       		.uleb128 0x27
 5955 00f1 19       		.uleb128 0x19
 5956 00f2 49       		.uleb128 0x49
 5957 00f3 13       		.uleb128 0x13
 5958 00f4 11       		.uleb128 0x11
 5959 00f5 01       		.uleb128 0x1
 5960 00f6 12       		.uleb128 0x12
 5961 00f7 06       		.uleb128 0x6
 5962 00f8 40       		.uleb128 0x40
 5963 00f9 18       		.uleb128 0x18
 5964 00fa 9742     		.uleb128 0x2117
 5965 00fc 19       		.uleb128 0x19
 5966 00fd 01       		.uleb128 0x1
 5967 00fe 13       		.uleb128 0x13
 5968 00ff 00       		.byte	0
 5969 0100 00       		.byte	0
 5970 0101 15       		.uleb128 0x15
 5971 0102 05       		.uleb128 0x5
 5972 0103 00       		.byte	0
 5973 0104 03       		.uleb128 0x3
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 168


 5974 0105 0E       		.uleb128 0xe
 5975 0106 3A       		.uleb128 0x3a
 5976 0107 0B       		.uleb128 0xb
 5977 0108 3B       		.uleb128 0x3b
 5978 0109 05       		.uleb128 0x5
 5979 010a 49       		.uleb128 0x49
 5980 010b 13       		.uleb128 0x13
 5981 010c 02       		.uleb128 0x2
 5982 010d 17       		.uleb128 0x17
 5983 010e 00       		.byte	0
 5984 010f 00       		.byte	0
 5985 0110 16       		.uleb128 0x16
 5986 0111 34       		.uleb128 0x34
 5987 0112 00       		.byte	0
 5988 0113 03       		.uleb128 0x3
 5989 0114 0E       		.uleb128 0xe
 5990 0115 3A       		.uleb128 0x3a
 5991 0116 0B       		.uleb128 0xb
 5992 0117 3B       		.uleb128 0x3b
 5993 0118 05       		.uleb128 0x5
 5994 0119 49       		.uleb128 0x49
 5995 011a 13       		.uleb128 0x13
 5996 011b 02       		.uleb128 0x2
 5997 011c 17       		.uleb128 0x17
 5998 011d 00       		.byte	0
 5999 011e 00       		.byte	0
 6000 011f 17       		.uleb128 0x17
 6001 0120 34       		.uleb128 0x34
 6002 0121 00       		.byte	0
 6003 0122 03       		.uleb128 0x3
 6004 0123 0E       		.uleb128 0xe
 6005 0124 3A       		.uleb128 0x3a
 6006 0125 0B       		.uleb128 0xb
 6007 0126 3B       		.uleb128 0x3b
 6008 0127 05       		.uleb128 0x5
 6009 0128 49       		.uleb128 0x49
 6010 0129 13       		.uleb128 0x13
 6011 012a 02       		.uleb128 0x2
 6012 012b 18       		.uleb128 0x18
 6013 012c 00       		.byte	0
 6014 012d 00       		.byte	0
 6015 012e 18       		.uleb128 0x18
 6016 012f 898201   		.uleb128 0x4109
 6017 0132 00       		.byte	0
 6018 0133 11       		.uleb128 0x11
 6019 0134 01       		.uleb128 0x1
 6020 0135 31       		.uleb128 0x31
 6021 0136 13       		.uleb128 0x13
 6022 0137 00       		.byte	0
 6023 0138 00       		.byte	0
 6024 0139 19       		.uleb128 0x19
 6025 013a 2E       		.uleb128 0x2e
 6026 013b 01       		.byte	0x1
 6027 013c 03       		.uleb128 0x3
 6028 013d 0E       		.uleb128 0xe
 6029 013e 3A       		.uleb128 0x3a
 6030 013f 0B       		.uleb128 0xb
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 169


 6031 0140 3B       		.uleb128 0x3b
 6032 0141 05       		.uleb128 0x5
 6033 0142 27       		.uleb128 0x27
 6034 0143 19       		.uleb128 0x19
 6035 0144 11       		.uleb128 0x11
 6036 0145 01       		.uleb128 0x1
 6037 0146 12       		.uleb128 0x12
 6038 0147 06       		.uleb128 0x6
 6039 0148 40       		.uleb128 0x40
 6040 0149 18       		.uleb128 0x18
 6041 014a 9742     		.uleb128 0x2117
 6042 014c 19       		.uleb128 0x19
 6043 014d 01       		.uleb128 0x1
 6044 014e 13       		.uleb128 0x13
 6045 014f 00       		.byte	0
 6046 0150 00       		.byte	0
 6047 0151 1A       		.uleb128 0x1a
 6048 0152 898201   		.uleb128 0x4109
 6049 0155 01       		.byte	0x1
 6050 0156 11       		.uleb128 0x11
 6051 0157 01       		.uleb128 0x1
 6052 0158 31       		.uleb128 0x31
 6053 0159 13       		.uleb128 0x13
 6054 015a 00       		.byte	0
 6055 015b 00       		.byte	0
 6056 015c 1B       		.uleb128 0x1b
 6057 015d 8A8201   		.uleb128 0x410a
 6058 0160 00       		.byte	0
 6059 0161 02       		.uleb128 0x2
 6060 0162 18       		.uleb128 0x18
 6061 0163 9142     		.uleb128 0x2111
 6062 0165 18       		.uleb128 0x18
 6063 0166 00       		.byte	0
 6064 0167 00       		.byte	0
 6065 0168 1C       		.uleb128 0x1c
 6066 0169 0B       		.uleb128 0xb
 6067 016a 01       		.byte	0x1
 6068 016b 11       		.uleb128 0x11
 6069 016c 01       		.uleb128 0x1
 6070 016d 12       		.uleb128 0x12
 6071 016e 06       		.uleb128 0x6
 6072 016f 01       		.uleb128 0x1
 6073 0170 13       		.uleb128 0x13
 6074 0171 00       		.byte	0
 6075 0172 00       		.byte	0
 6076 0173 1D       		.uleb128 0x1d
 6077 0174 898201   		.uleb128 0x4109
 6078 0177 01       		.byte	0x1
 6079 0178 11       		.uleb128 0x11
 6080 0179 01       		.uleb128 0x1
 6081 017a 31       		.uleb128 0x31
 6082 017b 13       		.uleb128 0x13
 6083 017c 01       		.uleb128 0x1
 6084 017d 13       		.uleb128 0x13
 6085 017e 00       		.byte	0
 6086 017f 00       		.byte	0
 6087 0180 1E       		.uleb128 0x1e
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 170


 6088 0181 2E       		.uleb128 0x2e
 6089 0182 01       		.byte	0x1
 6090 0183 3F       		.uleb128 0x3f
 6091 0184 19       		.uleb128 0x19
 6092 0185 03       		.uleb128 0x3
 6093 0186 0E       		.uleb128 0xe
 6094 0187 3A       		.uleb128 0x3a
 6095 0188 0B       		.uleb128 0xb
 6096 0189 3B       		.uleb128 0x3b
 6097 018a 05       		.uleb128 0x5
 6098 018b 27       		.uleb128 0x27
 6099 018c 19       		.uleb128 0x19
 6100 018d 49       		.uleb128 0x49
 6101 018e 13       		.uleb128 0x13
 6102 018f 11       		.uleb128 0x11
 6103 0190 01       		.uleb128 0x1
 6104 0191 12       		.uleb128 0x12
 6105 0192 06       		.uleb128 0x6
 6106 0193 40       		.uleb128 0x40
 6107 0194 18       		.uleb128 0x18
 6108 0195 9742     		.uleb128 0x2117
 6109 0197 19       		.uleb128 0x19
 6110 0198 01       		.uleb128 0x1
 6111 0199 13       		.uleb128 0x13
 6112 019a 00       		.byte	0
 6113 019b 00       		.byte	0
 6114 019c 1F       		.uleb128 0x1f
 6115 019d 05       		.uleb128 0x5
 6116 019e 00       		.byte	0
 6117 019f 03       		.uleb128 0x3
 6118 01a0 0E       		.uleb128 0xe
 6119 01a1 3A       		.uleb128 0x3a
 6120 01a2 0B       		.uleb128 0xb
 6121 01a3 3B       		.uleb128 0x3b
 6122 01a4 05       		.uleb128 0x5
 6123 01a5 49       		.uleb128 0x49
 6124 01a6 13       		.uleb128 0x13
 6125 01a7 02       		.uleb128 0x2
 6126 01a8 18       		.uleb128 0x18
 6127 01a9 00       		.byte	0
 6128 01aa 00       		.byte	0
 6129 01ab 20       		.uleb128 0x20
 6130 01ac 34       		.uleb128 0x34
 6131 01ad 00       		.byte	0
 6132 01ae 03       		.uleb128 0x3
 6133 01af 0E       		.uleb128 0xe
 6134 01b0 3A       		.uleb128 0x3a
 6135 01b1 0B       		.uleb128 0xb
 6136 01b2 3B       		.uleb128 0x3b
 6137 01b3 05       		.uleb128 0x5
 6138 01b4 49       		.uleb128 0x49
 6139 01b5 13       		.uleb128 0x13
 6140 01b6 1C       		.uleb128 0x1c
 6141 01b7 0B       		.uleb128 0xb
 6142 01b8 00       		.byte	0
 6143 01b9 00       		.byte	0
 6144 01ba 21       		.uleb128 0x21
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 171


 6145 01bb 34       		.uleb128 0x34
 6146 01bc 00       		.byte	0
 6147 01bd 03       		.uleb128 0x3
 6148 01be 0E       		.uleb128 0xe
 6149 01bf 3A       		.uleb128 0x3a
 6150 01c0 0B       		.uleb128 0xb
 6151 01c1 3B       		.uleb128 0x3b
 6152 01c2 05       		.uleb128 0x5
 6153 01c3 49       		.uleb128 0x49
 6154 01c4 13       		.uleb128 0x13
 6155 01c5 00       		.byte	0
 6156 01c6 00       		.byte	0
 6157 01c7 22       		.uleb128 0x22
 6158 01c8 1D       		.uleb128 0x1d
 6159 01c9 01       		.byte	0x1
 6160 01ca 31       		.uleb128 0x31
 6161 01cb 13       		.uleb128 0x13
 6162 01cc 11       		.uleb128 0x11
 6163 01cd 01       		.uleb128 0x1
 6164 01ce 12       		.uleb128 0x12
 6165 01cf 06       		.uleb128 0x6
 6166 01d0 58       		.uleb128 0x58
 6167 01d1 0B       		.uleb128 0xb
 6168 01d2 59       		.uleb128 0x59
 6169 01d3 05       		.uleb128 0x5
 6170 01d4 01       		.uleb128 0x1
 6171 01d5 13       		.uleb128 0x13
 6172 01d6 00       		.byte	0
 6173 01d7 00       		.byte	0
 6174 01d8 23       		.uleb128 0x23
 6175 01d9 0B       		.uleb128 0xb
 6176 01da 01       		.byte	0x1
 6177 01db 11       		.uleb128 0x11
 6178 01dc 01       		.uleb128 0x1
 6179 01dd 12       		.uleb128 0x12
 6180 01de 06       		.uleb128 0x6
 6181 01df 00       		.byte	0
 6182 01e0 00       		.byte	0
 6183 01e1 24       		.uleb128 0x24
 6184 01e2 34       		.uleb128 0x34
 6185 01e3 00       		.byte	0
 6186 01e4 31       		.uleb128 0x31
 6187 01e5 13       		.uleb128 0x13
 6188 01e6 00       		.byte	0
 6189 01e7 00       		.byte	0
 6190 01e8 25       		.uleb128 0x25
 6191 01e9 0B       		.uleb128 0xb
 6192 01ea 01       		.byte	0x1
 6193 01eb 55       		.uleb128 0x55
 6194 01ec 17       		.uleb128 0x17
 6195 01ed 01       		.uleb128 0x1
 6196 01ee 13       		.uleb128 0x13
 6197 01ef 00       		.byte	0
 6198 01f0 00       		.byte	0
 6199 01f1 26       		.uleb128 0x26
 6200 01f2 1D       		.uleb128 0x1d
 6201 01f3 01       		.byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 172


 6202 01f4 31       		.uleb128 0x31
 6203 01f5 13       		.uleb128 0x13
 6204 01f6 11       		.uleb128 0x11
 6205 01f7 01       		.uleb128 0x1
 6206 01f8 12       		.uleb128 0x12
 6207 01f9 06       		.uleb128 0x6
 6208 01fa 58       		.uleb128 0x58
 6209 01fb 0B       		.uleb128 0xb
 6210 01fc 59       		.uleb128 0x59
 6211 01fd 05       		.uleb128 0x5
 6212 01fe 00       		.byte	0
 6213 01ff 00       		.byte	0
 6214 0200 27       		.uleb128 0x27
 6215 0201 05       		.uleb128 0x5
 6216 0202 00       		.byte	0
 6217 0203 31       		.uleb128 0x31
 6218 0204 13       		.uleb128 0x13
 6219 0205 02       		.uleb128 0x2
 6220 0206 17       		.uleb128 0x17
 6221 0207 00       		.byte	0
 6222 0208 00       		.byte	0
 6223 0209 28       		.uleb128 0x28
 6224 020a 0B       		.uleb128 0xb
 6225 020b 01       		.byte	0x1
 6226 020c 55       		.uleb128 0x55
 6227 020d 17       		.uleb128 0x17
 6228 020e 00       		.byte	0
 6229 020f 00       		.byte	0
 6230 0210 29       		.uleb128 0x29
 6231 0211 2E       		.uleb128 0x2e
 6232 0212 01       		.byte	0x1
 6233 0213 3F       		.uleb128 0x3f
 6234 0214 19       		.uleb128 0x19
 6235 0215 03       		.uleb128 0x3
 6236 0216 0E       		.uleb128 0xe
 6237 0217 3A       		.uleb128 0x3a
 6238 0218 0B       		.uleb128 0xb
 6239 0219 3B       		.uleb128 0x3b
 6240 021a 05       		.uleb128 0x5
 6241 021b 27       		.uleb128 0x27
 6242 021c 19       		.uleb128 0x19
 6243 021d 11       		.uleb128 0x11
 6244 021e 01       		.uleb128 0x1
 6245 021f 12       		.uleb128 0x12
 6246 0220 06       		.uleb128 0x6
 6247 0221 40       		.uleb128 0x40
 6248 0222 18       		.uleb128 0x18
 6249 0223 9742     		.uleb128 0x2117
 6250 0225 19       		.uleb128 0x19
 6251 0226 01       		.uleb128 0x1
 6252 0227 13       		.uleb128 0x13
 6253 0228 00       		.byte	0
 6254 0229 00       		.byte	0
 6255 022a 2A       		.uleb128 0x2a
 6256 022b 34       		.uleb128 0x34
 6257 022c 00       		.byte	0
 6258 022d 03       		.uleb128 0x3
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 173


 6259 022e 08       		.uleb128 0x8
 6260 022f 3A       		.uleb128 0x3a
 6261 0230 0B       		.uleb128 0xb
 6262 0231 3B       		.uleb128 0x3b
 6263 0232 05       		.uleb128 0x5
 6264 0233 49       		.uleb128 0x49
 6265 0234 13       		.uleb128 0x13
 6266 0235 02       		.uleb128 0x2
 6267 0236 17       		.uleb128 0x17
 6268 0237 00       		.byte	0
 6269 0238 00       		.byte	0
 6270 0239 2B       		.uleb128 0x2b
 6271 023a 34       		.uleb128 0x34
 6272 023b 00       		.byte	0
 6273 023c 03       		.uleb128 0x3
 6274 023d 0E       		.uleb128 0xe
 6275 023e 3A       		.uleb128 0x3a
 6276 023f 0B       		.uleb128 0xb
 6277 0240 3B       		.uleb128 0x3b
 6278 0241 05       		.uleb128 0x5
 6279 0242 49       		.uleb128 0x49
 6280 0243 13       		.uleb128 0x13
 6281 0244 3F       		.uleb128 0x3f
 6282 0245 19       		.uleb128 0x19
 6283 0246 3C       		.uleb128 0x3c
 6284 0247 19       		.uleb128 0x19
 6285 0248 00       		.byte	0
 6286 0249 00       		.byte	0
 6287 024a 2C       		.uleb128 0x2c
 6288 024b 01       		.uleb128 0x1
 6289 024c 01       		.byte	0x1
 6290 024d 49       		.uleb128 0x49
 6291 024e 13       		.uleb128 0x13
 6292 024f 01       		.uleb128 0x1
 6293 0250 13       		.uleb128 0x13
 6294 0251 00       		.byte	0
 6295 0252 00       		.byte	0
 6296 0253 2D       		.uleb128 0x2d
 6297 0254 21       		.uleb128 0x21
 6298 0255 00       		.byte	0
 6299 0256 49       		.uleb128 0x49
 6300 0257 13       		.uleb128 0x13
 6301 0258 2F       		.uleb128 0x2f
 6302 0259 0B       		.uleb128 0xb
 6303 025a 00       		.byte	0
 6304 025b 00       		.byte	0
 6305 025c 2E       		.uleb128 0x2e
 6306 025d 34       		.uleb128 0x34
 6307 025e 00       		.byte	0
 6308 025f 03       		.uleb128 0x3
 6309 0260 0E       		.uleb128 0xe
 6310 0261 3A       		.uleb128 0x3a
 6311 0262 0B       		.uleb128 0xb
 6312 0263 3B       		.uleb128 0x3b
 6313 0264 0B       		.uleb128 0xb
 6314 0265 49       		.uleb128 0x49
 6315 0266 13       		.uleb128 0x13
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 174


 6316 0267 3F       		.uleb128 0x3f
 6317 0268 19       		.uleb128 0x19
 6318 0269 02       		.uleb128 0x2
 6319 026a 18       		.uleb128 0x18
 6320 026b 00       		.byte	0
 6321 026c 00       		.byte	0
 6322 026d 2F       		.uleb128 0x2f
 6323 026e 2E       		.uleb128 0x2e
 6324 026f 00       		.byte	0
 6325 0270 3F       		.uleb128 0x3f
 6326 0271 19       		.uleb128 0x19
 6327 0272 3C       		.uleb128 0x3c
 6328 0273 19       		.uleb128 0x19
 6329 0274 6E       		.uleb128 0x6e
 6330 0275 0E       		.uleb128 0xe
 6331 0276 03       		.uleb128 0x3
 6332 0277 0E       		.uleb128 0xe
 6333 0278 3A       		.uleb128 0x3a
 6334 0279 0B       		.uleb128 0xb
 6335 027a 3B       		.uleb128 0x3b
 6336 027b 0B       		.uleb128 0xb
 6337 027c 00       		.byte	0
 6338 027d 00       		.byte	0
 6339 027e 30       		.uleb128 0x30
 6340 027f 2E       		.uleb128 0x2e
 6341 0280 00       		.byte	0
 6342 0281 3F       		.uleb128 0x3f
 6343 0282 19       		.uleb128 0x19
 6344 0283 3C       		.uleb128 0x3c
 6345 0284 19       		.uleb128 0x19
 6346 0285 6E       		.uleb128 0x6e
 6347 0286 0E       		.uleb128 0xe
 6348 0287 03       		.uleb128 0x3
 6349 0288 0E       		.uleb128 0xe
 6350 0289 3A       		.uleb128 0x3a
 6351 028a 0B       		.uleb128 0xb
 6352 028b 3B       		.uleb128 0x3b
 6353 028c 05       		.uleb128 0x5
 6354 028d 00       		.byte	0
 6355 028e 00       		.byte	0
 6356 028f 31       		.uleb128 0x31
 6357 0290 2E       		.uleb128 0x2e
 6358 0291 00       		.byte	0
 6359 0292 3F       		.uleb128 0x3f
 6360 0293 19       		.uleb128 0x19
 6361 0294 3C       		.uleb128 0x3c
 6362 0295 19       		.uleb128 0x19
 6363 0296 6E       		.uleb128 0x6e
 6364 0297 0E       		.uleb128 0xe
 6365 0298 03       		.uleb128 0x3
 6366 0299 0E       		.uleb128 0xe
 6367 029a 00       		.byte	0
 6368 029b 00       		.byte	0
 6369 029c 00       		.byte	0
 6370              		.section	.debug_loc,"",%progbits
 6371              	.Ldebug_loc0:
 6372              	.LLST0:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 175


 6373 0000 00000000 		.4byte	.LVL0
 6374 0004 08000000 		.4byte	.LVL1
 6375 0008 0100     		.2byte	0x1
 6376 000a 50       		.byte	0x50
 6377 000b 08000000 		.4byte	.LVL1
 6378 000f 0E000000 		.4byte	.LVL3
 6379 0013 0400     		.2byte	0x4
 6380 0015 F3       		.byte	0xf3
 6381 0016 01       		.uleb128 0x1
 6382 0017 50       		.byte	0x50
 6383 0018 9F       		.byte	0x9f
 6384 0019 0E000000 		.4byte	.LVL3
 6385 001d 10000000 		.4byte	.LVL4
 6386 0021 0100     		.2byte	0x1
 6387 0023 50       		.byte	0x50
 6388 0024 10000000 		.4byte	.LVL4
 6389 0028 12000000 		.4byte	.LFE88
 6390 002c 0400     		.2byte	0x4
 6391 002e F3       		.byte	0xf3
 6392 002f 01       		.uleb128 0x1
 6393 0030 50       		.byte	0x50
 6394 0031 9F       		.byte	0x9f
 6395 0032 00000000 		.4byte	0
 6396 0036 00000000 		.4byte	0
 6397              	.LLST1:
 6398 003a 0C000000 		.4byte	.LVL2
 6399 003e 0E000000 		.4byte	.LVL3
 6400 0042 0100     		.2byte	0x1
 6401 0044 50       		.byte	0x50
 6402 0045 10000000 		.4byte	.LVL4
 6403 0049 12000000 		.4byte	.LFE88
 6404 004d 0100     		.2byte	0x1
 6405 004f 50       		.byte	0x50
 6406 0050 00000000 		.4byte	0
 6407 0054 00000000 		.4byte	0
 6408              	.LLST2:
 6409 0058 00000000 		.4byte	.LVL5
 6410 005c 07000000 		.4byte	.LVL6-1
 6411 0060 0100     		.2byte	0x1
 6412 0062 50       		.byte	0x50
 6413 0063 07000000 		.4byte	.LVL6-1
 6414 0067 12000000 		.4byte	.LVL7
 6415 006b 0100     		.2byte	0x1
 6416 006d 54       		.byte	0x54
 6417 006e 12000000 		.4byte	.LVL7
 6418 0072 14000000 		.4byte	.LVL8
 6419 0076 0400     		.2byte	0x4
 6420 0078 F3       		.byte	0xf3
 6421 0079 01       		.uleb128 0x1
 6422 007a 50       		.byte	0x50
 6423 007b 9F       		.byte	0x9f
 6424 007c 14000000 		.4byte	.LVL8
 6425 0080 16000000 		.4byte	.LVL9
 6426 0084 0100     		.2byte	0x1
 6427 0086 54       		.byte	0x54
 6428 0087 16000000 		.4byte	.LVL9
 6429 008b 1E000000 		.4byte	.LFE94
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 176


 6430 008f 0400     		.2byte	0x4
 6431 0091 F3       		.byte	0xf3
 6432 0092 01       		.uleb128 0x1
 6433 0093 50       		.byte	0x50
 6434 0094 9F       		.byte	0x9f
 6435 0095 00000000 		.4byte	0
 6436 0099 00000000 		.4byte	0
 6437              	.LLST3:
 6438 009d 00000000 		.4byte	.LVL11
 6439 00a1 07000000 		.4byte	.LVL12-1
 6440 00a5 0100     		.2byte	0x1
 6441 00a7 50       		.byte	0x50
 6442 00a8 07000000 		.4byte	.LVL12-1
 6443 00ac 0E000000 		.4byte	.LVL13
 6444 00b0 0100     		.2byte	0x1
 6445 00b2 54       		.byte	0x54
 6446 00b3 0E000000 		.4byte	.LVL13
 6447 00b7 10000000 		.4byte	.LVL14
 6448 00bb 0400     		.2byte	0x4
 6449 00bd F3       		.byte	0xf3
 6450 00be 01       		.uleb128 0x1
 6451 00bf 50       		.byte	0x50
 6452 00c0 9F       		.byte	0x9f
 6453 00c1 10000000 		.4byte	.LVL14
 6454 00c5 12000000 		.4byte	.LVL15
 6455 00c9 0100     		.2byte	0x1
 6456 00cb 54       		.byte	0x54
 6457 00cc 12000000 		.4byte	.LVL15
 6458 00d0 1A000000 		.4byte	.LFE92
 6459 00d4 0400     		.2byte	0x4
 6460 00d6 F3       		.byte	0xf3
 6461 00d7 01       		.uleb128 0x1
 6462 00d8 50       		.byte	0x50
 6463 00d9 9F       		.byte	0x9f
 6464 00da 00000000 		.4byte	0
 6465 00de 00000000 		.4byte	0
 6466              	.LLST4:
 6467 00e2 00000000 		.4byte	.LVL17
 6468 00e6 12000000 		.4byte	.LVL21
 6469 00ea 0100     		.2byte	0x1
 6470 00ec 50       		.byte	0x50
 6471 00ed 12000000 		.4byte	.LVL21
 6472 00f1 1C000000 		.4byte	.LVL23
 6473 00f5 0100     		.2byte	0x1
 6474 00f7 54       		.byte	0x54
 6475 00f8 1C000000 		.4byte	.LVL23
 6476 00fc 20000000 		.4byte	.LVL24
 6477 0100 0100     		.2byte	0x1
 6478 0102 50       		.byte	0x50
 6479 0103 20000000 		.4byte	.LVL24
 6480 0107 3A000000 		.4byte	.LVL26
 6481 010b 0100     		.2byte	0x1
 6482 010d 54       		.byte	0x54
 6483 010e 3A000000 		.4byte	.LVL26
 6484 0112 3C000000 		.4byte	.LVL27
 6485 0116 0100     		.2byte	0x1
 6486 0118 50       		.byte	0x50
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 177


 6487 0119 3C000000 		.4byte	.LVL27
 6488 011d 62000000 		.4byte	.LVL30
 6489 0121 0100     		.2byte	0x1
 6490 0123 54       		.byte	0x54
 6491 0124 62000000 		.4byte	.LVL30
 6492 0128 64000000 		.4byte	.LVL31
 6493 012c 0100     		.2byte	0x1
 6494 012e 50       		.byte	0x50
 6495 012f 64000000 		.4byte	.LVL31
 6496 0133 76000000 		.4byte	.LFE89
 6497 0137 0100     		.2byte	0x1
 6498 0139 54       		.byte	0x54
 6499 013a 00000000 		.4byte	0
 6500 013e 00000000 		.4byte	0
 6501              	.LLST5:
 6502 0142 00000000 		.4byte	.LVL17
 6503 0146 15000000 		.4byte	.LVL22-1
 6504 014a 0100     		.2byte	0x1
 6505 014c 51       		.byte	0x51
 6506 014d 15000000 		.4byte	.LVL22-1
 6507 0151 1C000000 		.4byte	.LVL23
 6508 0155 0400     		.2byte	0x4
 6509 0157 F3       		.byte	0xf3
 6510 0158 01       		.uleb128 0x1
 6511 0159 51       		.byte	0x51
 6512 015a 9F       		.byte	0x9f
 6513 015b 1C000000 		.4byte	.LVL23
 6514 015f 23000000 		.4byte	.LVL25-1
 6515 0163 0100     		.2byte	0x1
 6516 0165 51       		.byte	0x51
 6517 0166 23000000 		.4byte	.LVL25-1
 6518 016a 3A000000 		.4byte	.LVL26
 6519 016e 0400     		.2byte	0x4
 6520 0170 F3       		.byte	0xf3
 6521 0171 01       		.uleb128 0x1
 6522 0172 51       		.byte	0x51
 6523 0173 9F       		.byte	0x9f
 6524 0174 3A000000 		.4byte	.LVL26
 6525 0178 3F000000 		.4byte	.LVL28-1
 6526 017c 0100     		.2byte	0x1
 6527 017e 51       		.byte	0x51
 6528 017f 3F000000 		.4byte	.LVL28-1
 6529 0183 62000000 		.4byte	.LVL30
 6530 0187 0400     		.2byte	0x4
 6531 0189 F3       		.byte	0xf3
 6532 018a 01       		.uleb128 0x1
 6533 018b 51       		.byte	0x51
 6534 018c 9F       		.byte	0x9f
 6535 018d 62000000 		.4byte	.LVL30
 6536 0191 66000000 		.4byte	.LVL32
 6537 0195 0100     		.2byte	0x1
 6538 0197 51       		.byte	0x51
 6539 0198 66000000 		.4byte	.LVL32
 6540 019c 76000000 		.4byte	.LFE89
 6541 01a0 0400     		.2byte	0x4
 6542 01a2 F3       		.byte	0xf3
 6543 01a3 01       		.uleb128 0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 178


 6544 01a4 51       		.byte	0x51
 6545 01a5 9F       		.byte	0x9f
 6546 01a6 00000000 		.4byte	0
 6547 01aa 00000000 		.4byte	0
 6548              	.LLST6:
 6549 01ae 00000000 		.4byte	.LVL17
 6550 01b2 0A000000 		.4byte	.LVL20
 6551 01b6 0100     		.2byte	0x1
 6552 01b8 52       		.byte	0x52
 6553 01b9 0A000000 		.4byte	.LVL20
 6554 01bd 76000000 		.4byte	.LFE89
 6555 01c1 0100     		.2byte	0x1
 6556 01c3 56       		.byte	0x56
 6557 01c4 00000000 		.4byte	0
 6558 01c8 00000000 		.4byte	0
 6559              	.LLST7:
 6560 01cc 06000000 		.4byte	.LVL18
 6561 01d0 16000000 		.4byte	.LVL22
 6562 01d4 0200     		.2byte	0x2
 6563 01d6 30       		.byte	0x30
 6564 01d7 9F       		.byte	0x9f
 6565 01d8 16000000 		.4byte	.LVL22
 6566 01dc 1C000000 		.4byte	.LVL23
 6567 01e0 0100     		.2byte	0x1
 6568 01e2 50       		.byte	0x50
 6569 01e3 1C000000 		.4byte	.LVL23
 6570 01e7 70000000 		.4byte	.LVL33
 6571 01eb 0200     		.2byte	0x2
 6572 01ed 30       		.byte	0x30
 6573 01ee 9F       		.byte	0x9f
 6574 01ef 70000000 		.4byte	.LVL33
 6575 01f3 76000000 		.4byte	.LFE89
 6576 01f7 0100     		.2byte	0x1
 6577 01f9 50       		.byte	0x50
 6578 01fa 00000000 		.4byte	0
 6579 01fe 00000000 		.4byte	0
 6580              	.LLST8:
 6581 0202 08000000 		.4byte	.LVL19
 6582 0206 72000000 		.4byte	.LVL34
 6583 020a 0100     		.2byte	0x1
 6584 020c 55       		.byte	0x55
 6585 020d 72000000 		.4byte	.LVL34
 6586 0211 76000000 		.4byte	.LFE89
 6587 0215 0300     		.2byte	0x3
 6588 0217 75       		.byte	0x75
 6589 0218 7F       		.sleb128 -1
 6590 0219 9F       		.byte	0x9f
 6591 021a 00000000 		.4byte	0
 6592 021e 00000000 		.4byte	0
 6593              	.LLST9:
 6594 0222 00000000 		.4byte	.LVL35
 6595 0226 1C000000 		.4byte	.LVL37
 6596 022a 0100     		.2byte	0x1
 6597 022c 50       		.byte	0x50
 6598 022d 1C000000 		.4byte	.LVL37
 6599 0231 22000000 		.4byte	.LVL39
 6600 0235 0400     		.2byte	0x4
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 179


 6601 0237 F3       		.byte	0xf3
 6602 0238 01       		.uleb128 0x1
 6603 0239 50       		.byte	0x50
 6604 023a 9F       		.byte	0x9f
 6605 023b 22000000 		.4byte	.LVL39
 6606 023f 24000000 		.4byte	.LFE90
 6607 0243 0100     		.2byte	0x1
 6608 0245 50       		.byte	0x50
 6609 0246 00000000 		.4byte	0
 6610 024a 00000000 		.4byte	0
 6611              	.LLST10:
 6612 024e 00000000 		.4byte	.LVL35
 6613 0252 1A000000 		.4byte	.LVL36
 6614 0256 0100     		.2byte	0x1
 6615 0258 51       		.byte	0x51
 6616 0259 1A000000 		.4byte	.LVL36
 6617 025d 22000000 		.4byte	.LVL39
 6618 0261 0100     		.2byte	0x1
 6619 0263 54       		.byte	0x54
 6620 0264 22000000 		.4byte	.LVL39
 6621 0268 24000000 		.4byte	.LFE90
 6622 026c 0100     		.2byte	0x1
 6623 026e 51       		.byte	0x51
 6624 026f 00000000 		.4byte	0
 6625 0273 00000000 		.4byte	0
 6626              	.LLST11:
 6627 0277 00000000 		.4byte	.LVL40
 6628 027b 07000000 		.4byte	.LVL41-1
 6629 027f 0100     		.2byte	0x1
 6630 0281 50       		.byte	0x50
 6631 0282 07000000 		.4byte	.LVL41-1
 6632 0286 66000000 		.4byte	.LFE91
 6633 028a 0100     		.2byte	0x1
 6634 028c 55       		.byte	0x55
 6635 028d 00000000 		.4byte	0
 6636 0291 00000000 		.4byte	0
 6637              	.LLST12:
 6638 0295 0E000000 		.4byte	.LVL42
 6639 0299 24000000 		.4byte	.LVL45
 6640 029d 0100     		.2byte	0x1
 6641 029f 54       		.byte	0x54
 6642 02a0 26000000 		.4byte	.LVL46
 6643 02a4 3C000000 		.4byte	.LVL49
 6644 02a8 0100     		.2byte	0x1
 6645 02aa 54       		.byte	0x54
 6646 02ab 00000000 		.4byte	0
 6647 02af 00000000 		.4byte	0
 6648              	.LLST13:
 6649 02b3 3E000000 		.4byte	.LVL50
 6650 02b7 54000000 		.4byte	.LVL53
 6651 02bb 0100     		.2byte	0x1
 6652 02bd 54       		.byte	0x54
 6653 02be 56000000 		.4byte	.LVL54
 6654 02c2 66000000 		.4byte	.LFE91
 6655 02c6 0100     		.2byte	0x1
 6656 02c8 54       		.byte	0x54
 6657 02c9 00000000 		.4byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 180


 6658 02cd 00000000 		.4byte	0
 6659              	.LLST14:
 6660 02d1 00000000 		.4byte	.LVL56
 6661 02d5 12000000 		.4byte	.LVL57
 6662 02d9 0100     		.2byte	0x1
 6663 02db 50       		.byte	0x50
 6664 02dc 12000000 		.4byte	.LVL57
 6665 02e0 23000000 		.4byte	.LVL58-1
 6666 02e4 0100     		.2byte	0x1
 6667 02e6 53       		.byte	0x53
 6668 02e7 23000000 		.4byte	.LVL58-1
 6669 02eb 82000000 		.4byte	.LVL63
 6670 02ef 0100     		.2byte	0x1
 6671 02f1 54       		.byte	0x54
 6672 02f2 82000000 		.4byte	.LVL63
 6673 02f6 84000000 		.4byte	.LVL64
 6674 02fa 0100     		.2byte	0x1
 6675 02fc 50       		.byte	0x50
 6676 02fd 84000000 		.4byte	.LVL64
 6677 0301 86000000 		.4byte	.LVL65
 6678 0305 0400     		.2byte	0x4
 6679 0307 F3       		.byte	0xf3
 6680 0308 01       		.uleb128 0x1
 6681 0309 50       		.byte	0x50
 6682 030a 9F       		.byte	0x9f
 6683 030b 86000000 		.4byte	.LVL65
 6684 030f 88000000 		.4byte	.LVL66
 6685 0313 0100     		.2byte	0x1
 6686 0315 50       		.byte	0x50
 6687 0316 88000000 		.4byte	.LVL66
 6688 031a 8E000000 		.4byte	.LVL69
 6689 031e 0100     		.2byte	0x1
 6690 0320 53       		.byte	0x53
 6691 0321 8E000000 		.4byte	.LVL69
 6692 0325 94000000 		.4byte	.LFE68
 6693 0329 0400     		.2byte	0x4
 6694 032b F3       		.byte	0xf3
 6695 032c 01       		.uleb128 0x1
 6696 032d 50       		.byte	0x50
 6697 032e 9F       		.byte	0x9f
 6698 032f 00000000 		.4byte	0
 6699 0333 00000000 		.4byte	0
 6700              	.LLST15:
 6701 0337 00000000 		.4byte	.LVL56
 6702 033b 23000000 		.4byte	.LVL58-1
 6703 033f 0100     		.2byte	0x1
 6704 0341 51       		.byte	0x51
 6705 0342 23000000 		.4byte	.LVL58-1
 6706 0346 82000000 		.4byte	.LVL63
 6707 034a 0100     		.2byte	0x1
 6708 034c 55       		.byte	0x55
 6709 034d 82000000 		.4byte	.LVL63
 6710 0351 94000000 		.4byte	.LFE68
 6711 0355 0100     		.2byte	0x1
 6712 0357 51       		.byte	0x51
 6713 0358 00000000 		.4byte	0
 6714 035c 00000000 		.4byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 181


 6715              	.LLST16:
 6716 0360 00000000 		.4byte	.LVL56
 6717 0364 84000000 		.4byte	.LVL64
 6718 0368 0200     		.2byte	0x2
 6719 036a 31       		.byte	0x31
 6720 036b 9F       		.byte	0x9f
 6721 036c 84000000 		.4byte	.LVL64
 6722 0370 86000000 		.4byte	.LVL65
 6723 0374 0100     		.2byte	0x1
 6724 0376 50       		.byte	0x50
 6725 0377 86000000 		.4byte	.LVL65
 6726 037b 8C000000 		.4byte	.LVL68
 6727 037f 0200     		.2byte	0x2
 6728 0381 31       		.byte	0x31
 6729 0382 9F       		.byte	0x9f
 6730 0383 8C000000 		.4byte	.LVL68
 6731 0387 94000000 		.4byte	.LFE68
 6732 038b 0100     		.2byte	0x1
 6733 038d 50       		.byte	0x50
 6734 038e 00000000 		.4byte	0
 6735 0392 00000000 		.4byte	0
 6736              	.LLST17:
 6737 0396 00000000 		.4byte	.LVL56
 6738 039a 12000000 		.4byte	.LVL57
 6739 039e 0100     		.2byte	0x1
 6740 03a0 50       		.byte	0x50
 6741 03a1 12000000 		.4byte	.LVL57
 6742 03a5 23000000 		.4byte	.LVL58-1
 6743 03a9 0100     		.2byte	0x1
 6744 03ab 53       		.byte	0x53
 6745 03ac 23000000 		.4byte	.LVL58-1
 6746 03b0 82000000 		.4byte	.LVL63
 6747 03b4 0100     		.2byte	0x1
 6748 03b6 54       		.byte	0x54
 6749 03b7 82000000 		.4byte	.LVL63
 6750 03bb 84000000 		.4byte	.LVL64
 6751 03bf 0100     		.2byte	0x1
 6752 03c1 50       		.byte	0x50
 6753 03c2 84000000 		.4byte	.LVL64
 6754 03c6 86000000 		.4byte	.LVL65
 6755 03ca 0400     		.2byte	0x4
 6756 03cc F3       		.byte	0xf3
 6757 03cd 01       		.uleb128 0x1
 6758 03ce 50       		.byte	0x50
 6759 03cf 9F       		.byte	0x9f
 6760 03d0 86000000 		.4byte	.LVL65
 6761 03d4 88000000 		.4byte	.LVL66
 6762 03d8 0100     		.2byte	0x1
 6763 03da 50       		.byte	0x50
 6764 03db 88000000 		.4byte	.LVL66
 6765 03df 8E000000 		.4byte	.LVL69
 6766 03e3 0100     		.2byte	0x1
 6767 03e5 53       		.byte	0x53
 6768 03e6 8E000000 		.4byte	.LVL69
 6769 03ea 94000000 		.4byte	.LFE68
 6770 03ee 0400     		.2byte	0x4
 6771 03f0 F3       		.byte	0xf3
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 182


 6772 03f1 01       		.uleb128 0x1
 6773 03f2 50       		.byte	0x50
 6774 03f3 9F       		.byte	0x9f
 6775 03f4 00000000 		.4byte	0
 6776 03f8 00000000 		.4byte	0
 6777              	.LLST18:
 6778 03fc 00000000 		.4byte	.LVL70
 6779 0400 16000000 		.4byte	.LVL73
 6780 0404 0100     		.2byte	0x1
 6781 0406 50       		.byte	0x50
 6782 0407 16000000 		.4byte	.LVL73
 6783 040b 19000000 		.4byte	.LVL74-1
 6784 040f 0200     		.2byte	0x2
 6785 0411 70       		.byte	0x70
 6786 0412 3C       		.sleb128 60
 6787 0413 19000000 		.4byte	.LVL74-1
 6788 0417 1C000000 		.4byte	.LFE70
 6789 041b 0400     		.2byte	0x4
 6790 041d F3       		.byte	0xf3
 6791 041e 01       		.uleb128 0x1
 6792 041f 50       		.byte	0x50
 6793 0420 9F       		.byte	0x9f
 6794 0421 00000000 		.4byte	0
 6795 0425 00000000 		.4byte	0
 6796              	.LLST19:
 6797 0429 00000000 		.4byte	.LVL70
 6798 042d 14000000 		.4byte	.LVL72
 6799 0431 0100     		.2byte	0x1
 6800 0433 51       		.byte	0x51
 6801 0434 14000000 		.4byte	.LVL72
 6802 0438 1C000000 		.4byte	.LFE70
 6803 043c 0100     		.2byte	0x1
 6804 043e 54       		.byte	0x54
 6805 043f 00000000 		.4byte	0
 6806 0443 00000000 		.4byte	0
 6807              	.LLST20:
 6808 0447 00000000 		.4byte	.LVL70
 6809 044b 19000000 		.4byte	.LVL74-1
 6810 044f 0100     		.2byte	0x1
 6811 0451 52       		.byte	0x52
 6812 0452 19000000 		.4byte	.LVL74-1
 6813 0456 1C000000 		.4byte	.LFE70
 6814 045a 0400     		.2byte	0x4
 6815 045c F3       		.byte	0xf3
 6816 045d 01       		.uleb128 0x1
 6817 045e 52       		.byte	0x52
 6818 045f 9F       		.byte	0x9f
 6819 0460 00000000 		.4byte	0
 6820 0464 00000000 		.4byte	0
 6821              	.LLST21:
 6822 0468 00000000 		.4byte	.LVL70
 6823 046c 04000000 		.4byte	.LVL71
 6824 0470 0100     		.2byte	0x1
 6825 0472 53       		.byte	0x53
 6826 0473 04000000 		.4byte	.LVL71
 6827 0477 1C000000 		.4byte	.LFE70
 6828 047b 0400     		.2byte	0x4
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 183


 6829 047d F3       		.byte	0xf3
 6830 047e 01       		.uleb128 0x1
 6831 047f 53       		.byte	0x53
 6832 0480 9F       		.byte	0x9f
 6833 0481 00000000 		.4byte	0
 6834 0485 00000000 		.4byte	0
 6835              	.LLST22:
 6836 0489 00000000 		.4byte	.LVL75
 6837 048d 0C000000 		.4byte	.LVL77
 6838 0491 0100     		.2byte	0x1
 6839 0493 50       		.byte	0x50
 6840 0494 0C000000 		.4byte	.LVL77
 6841 0498 3E000000 		.4byte	.LVL85
 6842 049c 0100     		.2byte	0x1
 6843 049e 54       		.byte	0x54
 6844 049f 3E000000 		.4byte	.LVL85
 6845 04a3 42000000 		.4byte	.LVL86
 6846 04a7 0100     		.2byte	0x1
 6847 04a9 50       		.byte	0x50
 6848 04aa 42000000 		.4byte	.LVL86
 6849 04ae 48000000 		.4byte	.LVL87
 6850 04b2 0100     		.2byte	0x1
 6851 04b4 54       		.byte	0x54
 6852 04b5 48000000 		.4byte	.LVL87
 6853 04b9 4E000000 		.4byte	.LFE69
 6854 04bd 0400     		.2byte	0x4
 6855 04bf F3       		.byte	0xf3
 6856 04c0 01       		.uleb128 0x1
 6857 04c1 50       		.byte	0x50
 6858 04c2 9F       		.byte	0x9f
 6859 04c3 00000000 		.4byte	0
 6860 04c7 00000000 		.4byte	0
 6861              	.LLST23:
 6862 04cb 00000000 		.4byte	.LVL75
 6863 04cf 27000000 		.4byte	.LVL80-1
 6864 04d3 0100     		.2byte	0x1
 6865 04d5 51       		.byte	0x51
 6866 04d6 27000000 		.4byte	.LVL80-1
 6867 04da 3E000000 		.4byte	.LVL85
 6868 04de 0100     		.2byte	0x1
 6869 04e0 55       		.byte	0x55
 6870 04e1 3E000000 		.4byte	.LVL85
 6871 04e5 48000000 		.4byte	.LVL87
 6872 04e9 0100     		.2byte	0x1
 6873 04eb 51       		.byte	0x51
 6874 04ec 48000000 		.4byte	.LVL87
 6875 04f0 4E000000 		.4byte	.LFE69
 6876 04f4 0400     		.2byte	0x4
 6877 04f6 F3       		.byte	0xf3
 6878 04f7 01       		.uleb128 0x1
 6879 04f8 51       		.byte	0x51
 6880 04f9 9F       		.byte	0x9f
 6881 04fa 00000000 		.4byte	0
 6882 04fe 00000000 		.4byte	0
 6883              	.LLST24:
 6884 0502 00000000 		.4byte	.LVL75
 6885 0506 27000000 		.4byte	.LVL80-1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 184


 6886 050a 0100     		.2byte	0x1
 6887 050c 52       		.byte	0x52
 6888 050d 27000000 		.4byte	.LVL80-1
 6889 0511 3E000000 		.4byte	.LVL85
 6890 0515 0400     		.2byte	0x4
 6891 0517 F3       		.byte	0xf3
 6892 0518 01       		.uleb128 0x1
 6893 0519 52       		.byte	0x52
 6894 051a 9F       		.byte	0x9f
 6895 051b 3E000000 		.4byte	.LVL85
 6896 051f 48000000 		.4byte	.LVL87
 6897 0523 0100     		.2byte	0x1
 6898 0525 52       		.byte	0x52
 6899 0526 48000000 		.4byte	.LVL87
 6900 052a 4E000000 		.4byte	.LFE69
 6901 052e 0400     		.2byte	0x4
 6902 0530 F3       		.byte	0xf3
 6903 0531 01       		.uleb128 0x1
 6904 0532 52       		.byte	0x52
 6905 0533 9F       		.byte	0x9f
 6906 0534 00000000 		.4byte	0
 6907 0538 00000000 		.4byte	0
 6908              	.LLST25:
 6909 053c 04000000 		.4byte	.LVL76
 6910 0540 28000000 		.4byte	.LVL80
 6911 0544 0200     		.2byte	0x2
 6912 0546 30       		.byte	0x30
 6913 0547 9F       		.byte	0x9f
 6914 0548 28000000 		.4byte	.LVL80
 6915 054c 38000000 		.4byte	.LVL83
 6916 0550 0100     		.2byte	0x1
 6917 0552 50       		.byte	0x50
 6918 0553 38000000 		.4byte	.LVL83
 6919 0557 3E000000 		.4byte	.LVL85
 6920 055b 0100     		.2byte	0x1
 6921 055d 56       		.byte	0x56
 6922 055e 3E000000 		.4byte	.LVL85
 6923 0562 48000000 		.4byte	.LVL87
 6924 0566 0200     		.2byte	0x2
 6925 0568 30       		.byte	0x30
 6926 0569 9F       		.byte	0x9f
 6927 056a 48000000 		.4byte	.LVL87
 6928 056e 4E000000 		.4byte	.LFE69
 6929 0572 0100     		.2byte	0x1
 6930 0574 56       		.byte	0x56
 6931 0575 00000000 		.4byte	0
 6932 0579 00000000 		.4byte	0
 6933              	.LLST26:
 6934 057d 22000000 		.4byte	.LVL78
 6935 0581 24000000 		.4byte	.LVL79
 6936 0585 0100     		.2byte	0x1
 6937 0587 50       		.byte	0x50
 6938 0588 24000000 		.4byte	.LVL79
 6939 058c 27000000 		.4byte	.LVL80-1
 6940 0590 0400     		.2byte	0x4
 6941 0592 70       		.byte	0x70
 6942 0593 B87F     		.sleb128 -72
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 185


 6943 0595 9F       		.byte	0x9f
 6944 0596 27000000 		.4byte	.LVL80-1
 6945 059a 3E000000 		.4byte	.LVL85
 6946 059e 0600     		.2byte	0x6
 6947 05a0 75       		.byte	0x75
 6948 05a1 00       		.sleb128 0
 6949 05a2 74       		.byte	0x74
 6950 05a3 00       		.sleb128 0
 6951 05a4 1E       		.byte	0x1e
 6952 05a5 9F       		.byte	0x9f
 6953 05a6 00000000 		.4byte	0
 6954 05aa 00000000 		.4byte	0
 6955              	.LLST27:
 6956 05ae 2C000000 		.4byte	.LVL81
 6957 05b2 34000000 		.4byte	.LVL82
 6958 05b6 0400     		.2byte	0x4
 6959 05b8 70       		.byte	0x70
 6960 05b9 C800     		.sleb128 72
 6961 05bb 9F       		.byte	0x9f
 6962 05bc 34000000 		.4byte	.LVL82
 6963 05c0 3B000000 		.4byte	.LVL84-1
 6964 05c4 0100     		.2byte	0x1
 6965 05c6 52       		.byte	0x52
 6966 05c7 3B000000 		.4byte	.LVL84-1
 6967 05cb 3E000000 		.4byte	.LVL85
 6968 05cf 0400     		.2byte	0x4
 6969 05d1 76       		.byte	0x76
 6970 05d2 C800     		.sleb128 72
 6971 05d4 9F       		.byte	0x9f
 6972 05d5 00000000 		.4byte	0
 6973 05d9 00000000 		.4byte	0
 6974              	.LLST28:
 6975 05dd 00000000 		.4byte	.LVL88
 6976 05e1 11000000 		.4byte	.LVL90-1
 6977 05e5 0100     		.2byte	0x1
 6978 05e7 50       		.byte	0x50
 6979 05e8 11000000 		.4byte	.LVL90-1
 6980 05ec 1A000000 		.4byte	.LVL91
 6981 05f0 0400     		.2byte	0x4
 6982 05f2 F3       		.byte	0xf3
 6983 05f3 01       		.uleb128 0x1
 6984 05f4 50       		.byte	0x50
 6985 05f5 9F       		.byte	0x9f
 6986 05f6 1A000000 		.4byte	.LVL91
 6987 05fa 22000000 		.4byte	.LVL93
 6988 05fe 0100     		.2byte	0x1
 6989 0600 50       		.byte	0x50
 6990 0601 22000000 		.4byte	.LVL93
 6991 0605 28000000 		.4byte	.LFE75
 6992 0609 0400     		.2byte	0x4
 6993 060b F3       		.byte	0xf3
 6994 060c 01       		.uleb128 0x1
 6995 060d 50       		.byte	0x50
 6996 060e 9F       		.byte	0x9f
 6997 060f 00000000 		.4byte	0
 6998 0613 00000000 		.4byte	0
 6999              	.LLST29:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 186


 7000 0617 00000000 		.4byte	.LVL88
 7001 061b 0E000000 		.4byte	.LVL89
 7002 061f 0100     		.2byte	0x1
 7003 0621 51       		.byte	0x51
 7004 0622 0E000000 		.4byte	.LVL89
 7005 0626 1A000000 		.4byte	.LVL91
 7006 062a 0100     		.2byte	0x1
 7007 062c 54       		.byte	0x54
 7008 062d 1A000000 		.4byte	.LVL91
 7009 0631 24000000 		.4byte	.LVL94
 7010 0635 0100     		.2byte	0x1
 7011 0637 51       		.byte	0x51
 7012 0638 24000000 		.4byte	.LVL94
 7013 063c 28000000 		.4byte	.LFE75
 7014 0640 0100     		.2byte	0x1
 7015 0642 54       		.byte	0x54
 7016 0643 00000000 		.4byte	0
 7017 0647 00000000 		.4byte	0
 7018              	.LLST30:
 7019 064b 00000000 		.4byte	.LVL88
 7020 064f 12000000 		.4byte	.LVL90
 7021 0653 0200     		.2byte	0x2
 7022 0655 30       		.byte	0x30
 7023 0656 9F       		.byte	0x9f
 7024 0657 12000000 		.4byte	.LVL90
 7025 065b 1A000000 		.4byte	.LVL91
 7026 065f 0100     		.2byte	0x1
 7027 0661 50       		.byte	0x50
 7028 0662 1A000000 		.4byte	.LVL91
 7029 0666 20000000 		.4byte	.LVL92
 7030 066a 0200     		.2byte	0x2
 7031 066c 30       		.byte	0x30
 7032 066d 9F       		.byte	0x9f
 7033 066e 20000000 		.4byte	.LVL92
 7034 0672 24000000 		.4byte	.LVL94
 7035 0676 0100     		.2byte	0x1
 7036 0678 53       		.byte	0x53
 7037 0679 24000000 		.4byte	.LVL94
 7038 067d 28000000 		.4byte	.LFE75
 7039 0681 0100     		.2byte	0x1
 7040 0683 50       		.byte	0x50
 7041 0684 00000000 		.4byte	0
 7042 0688 00000000 		.4byte	0
 7043              	.LLST31:
 7044 068c 00000000 		.4byte	.LVL95
 7045 0690 0E000000 		.4byte	.LVL97
 7046 0694 0100     		.2byte	0x1
 7047 0696 50       		.byte	0x50
 7048 0697 0E000000 		.4byte	.LVL97
 7049 069b 04010000 		.4byte	.LVL122
 7050 069f 0100     		.2byte	0x1
 7051 06a1 54       		.byte	0x54
 7052 06a2 04010000 		.4byte	.LVL122
 7053 06a6 08010000 		.4byte	.LFE76
 7054 06aa 0400     		.2byte	0x4
 7055 06ac F3       		.byte	0xf3
 7056 06ad 01       		.uleb128 0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 187


 7057 06ae 50       		.byte	0x50
 7058 06af 9F       		.byte	0x9f
 7059 06b0 00000000 		.4byte	0
 7060 06b4 00000000 		.4byte	0
 7061              	.LLST32:
 7062 06b8 00000000 		.4byte	.LVL95
 7063 06bc 0E000000 		.4byte	.LVL97
 7064 06c0 0100     		.2byte	0x1
 7065 06c2 51       		.byte	0x51
 7066 06c3 0E000000 		.4byte	.LVL97
 7067 06c7 04010000 		.4byte	.LVL122
 7068 06cb 0100     		.2byte	0x1
 7069 06cd 57       		.byte	0x57
 7070 06ce 04010000 		.4byte	.LVL122
 7071 06d2 08010000 		.4byte	.LFE76
 7072 06d6 0400     		.2byte	0x4
 7073 06d8 F3       		.byte	0xf3
 7074 06d9 01       		.uleb128 0x1
 7075 06da 51       		.byte	0x51
 7076 06db 9F       		.byte	0x9f
 7077 06dc 00000000 		.4byte	0
 7078 06e0 00000000 		.4byte	0
 7079              	.LLST33:
 7080 06e4 00000000 		.4byte	.LVL95
 7081 06e8 0E000000 		.4byte	.LVL97
 7082 06ec 0100     		.2byte	0x1
 7083 06ee 52       		.byte	0x52
 7084 06ef 0E000000 		.4byte	.LVL97
 7085 06f3 AE000000 		.4byte	.LVL112
 7086 06f7 0200     		.2byte	0x2
 7087 06f9 91       		.byte	0x91
 7088 06fa 5C       		.sleb128 -36
 7089 06fb AE000000 		.4byte	.LVL112
 7090 06ff B3000000 		.4byte	.LVL113-1
 7091 0703 0200     		.2byte	0x2
 7092 0705 71       		.byte	0x71
 7093 0706 00       		.sleb128 0
 7094 0707 B3000000 		.4byte	.LVL113-1
 7095 070b 04010000 		.4byte	.LVL122
 7096 070f 0200     		.2byte	0x2
 7097 0711 91       		.byte	0x91
 7098 0712 5C       		.sleb128 -36
 7099 0713 04010000 		.4byte	.LVL122
 7100 0717 08010000 		.4byte	.LFE76
 7101 071b 0200     		.2byte	0x2
 7102 071d 7D       		.byte	0x7d
 7103 071e 5C       		.sleb128 -36
 7104 071f 00000000 		.4byte	0
 7105 0723 00000000 		.4byte	0
 7106              	.LLST34:
 7107 0727 00000000 		.4byte	.LVL95
 7108 072b 0E000000 		.4byte	.LVL97
 7109 072f 0100     		.2byte	0x1
 7110 0731 53       		.byte	0x53
 7111 0732 0E000000 		.4byte	.LVL97
 7112 0736 04010000 		.4byte	.LVL122
 7113 073a 0100     		.2byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 188


 7114 073c 56       		.byte	0x56
 7115 073d 04010000 		.4byte	.LVL122
 7116 0741 08010000 		.4byte	.LFE76
 7117 0745 0400     		.2byte	0x4
 7118 0747 F3       		.byte	0xf3
 7119 0748 01       		.uleb128 0x1
 7120 0749 53       		.byte	0x53
 7121 074a 9F       		.byte	0x9f
 7122 074b 00000000 		.4byte	0
 7123 074f 00000000 		.4byte	0
 7124              	.LLST35:
 7125 0753 0C000000 		.4byte	.LVL96
 7126 0757 0E000000 		.4byte	.LVL97
 7127 075b 0200     		.2byte	0x2
 7128 075d 30       		.byte	0x30
 7129 075e 9F       		.byte	0x9f
 7130 075f 0E000000 		.4byte	.LVL97
 7131 0763 76000000 		.4byte	.LVL106
 7132 0767 0100     		.2byte	0x1
 7133 0769 55       		.byte	0x55
 7134 076a 76000000 		.4byte	.LVL106
 7135 076e 78000000 		.4byte	.LVL107
 7136 0772 0200     		.2byte	0x2
 7137 0774 31       		.byte	0x31
 7138 0775 9F       		.byte	0x9f
 7139 0776 78000000 		.4byte	.LVL107
 7140 077a 04010000 		.4byte	.LVL122
 7141 077e 0100     		.2byte	0x1
 7142 0780 55       		.byte	0x55
 7143 0781 00000000 		.4byte	0
 7144 0785 00000000 		.4byte	0
 7145              	.LLST36:
 7146 0789 28000000 		.4byte	.LVL99
 7147 078d 30000000 		.4byte	.LVL100
 7148 0791 0100     		.2byte	0x1
 7149 0793 50       		.byte	0x50
 7150 0794 48000000 		.4byte	.LVL102
 7151 0798 5A000000 		.4byte	.LVL103
 7152 079c 0100     		.2byte	0x1
 7153 079e 50       		.byte	0x50
 7154 079f 00000000 		.4byte	0
 7155 07a3 00000000 		.4byte	0
 7156              	.LLST37:
 7157 07a7 0C000000 		.4byte	.LVL96
 7158 07ab 0E000000 		.4byte	.LVL97
 7159 07af 0100     		.2byte	0x1
 7160 07b1 50       		.byte	0x50
 7161 07b2 0E000000 		.4byte	.LVL97
 7162 07b6 04010000 		.4byte	.LVL122
 7163 07ba 0100     		.2byte	0x1
 7164 07bc 54       		.byte	0x54
 7165 07bd 04010000 		.4byte	.LVL122
 7166 07c1 08010000 		.4byte	.LFE76
 7167 07c5 0400     		.2byte	0x4
 7168 07c7 F3       		.byte	0xf3
 7169 07c8 01       		.uleb128 0x1
 7170 07c9 50       		.byte	0x50
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 189


 7171 07ca 9F       		.byte	0x9f
 7172 07cb 00000000 		.4byte	0
 7173 07cf 00000000 		.4byte	0
 7174              	.LLST38:
 7175 07d3 00000000 		.4byte	.LVL123
 7176 07d7 13000000 		.4byte	.LVL124-1
 7177 07db 0100     		.2byte	0x1
 7178 07dd 50       		.byte	0x50
 7179 07de 13000000 		.4byte	.LVL124-1
 7180 07e2 16000000 		.4byte	.LVL125
 7181 07e6 0400     		.2byte	0x4
 7182 07e8 F3       		.byte	0xf3
 7183 07e9 01       		.uleb128 0x1
 7184 07ea 50       		.byte	0x50
 7185 07eb 9F       		.byte	0x9f
 7186 07ec 16000000 		.4byte	.LVL125
 7187 07f0 18000000 		.4byte	.LFE71
 7188 07f4 0100     		.2byte	0x1
 7189 07f6 50       		.byte	0x50
 7190 07f7 00000000 		.4byte	0
 7191 07fb 00000000 		.4byte	0
 7192              	.LLST39:
 7193 07ff 00000000 		.4byte	.LVL126
 7194 0803 08000000 		.4byte	.LVL128
 7195 0807 0100     		.2byte	0x1
 7196 0809 50       		.byte	0x50
 7197 080a 08000000 		.4byte	.LVL128
 7198 080e 16000000 		.4byte	.LFE72
 7199 0812 0400     		.2byte	0x4
 7200 0814 F3       		.byte	0xf3
 7201 0815 01       		.uleb128 0x1
 7202 0816 50       		.byte	0x50
 7203 0817 9F       		.byte	0x9f
 7204 0818 00000000 		.4byte	0
 7205 081c 00000000 		.4byte	0
 7206              	.LLST40:
 7207 0820 0E000000 		.4byte	.LVL130
 7208 0824 11000000 		.4byte	.LVL131-1
 7209 0828 0100     		.2byte	0x1
 7210 082a 50       		.byte	0x50
 7211 082b 11000000 		.4byte	.LVL131-1
 7212 082f 16000000 		.4byte	.LFE72
 7213 0833 0100     		.2byte	0x1
 7214 0835 54       		.byte	0x54
 7215 0836 00000000 		.4byte	0
 7216 083a 00000000 		.4byte	0
 7217              	.LLST41:
 7218 083e 00000000 		.4byte	.LVL132
 7219 0842 09000000 		.4byte	.LVL134-1
 7220 0846 0100     		.2byte	0x1
 7221 0848 50       		.byte	0x50
 7222 0849 09000000 		.4byte	.LVL134-1
 7223 084d 2C000000 		.4byte	.LFE73
 7224 0851 0100     		.2byte	0x1
 7225 0853 54       		.byte	0x54
 7226 0854 00000000 		.4byte	0
 7227 0858 00000000 		.4byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 190


 7228              	.LLST42:
 7229 085c 04000000 		.4byte	.LVL133
 7230 0860 09000000 		.4byte	.LVL134-1
 7231 0864 0100     		.2byte	0x1
 7232 0866 50       		.byte	0x50
 7233 0867 09000000 		.4byte	.LVL134-1
 7234 086b 2C000000 		.4byte	.LFE73
 7235 086f 0100     		.2byte	0x1
 7236 0871 54       		.byte	0x54
 7237 0872 00000000 		.4byte	0
 7238 0876 00000000 		.4byte	0
 7239              	.LLST43:
 7240 087a 00000000 		.4byte	.LVL139
 7241 087e 33000000 		.4byte	.LVL143-1
 7242 0882 0100     		.2byte	0x1
 7243 0884 50       		.byte	0x50
 7244 0885 33000000 		.4byte	.LVL143-1
 7245 0889 64000000 		.4byte	.LVL149
 7246 088d 0100     		.2byte	0x1
 7247 088f 54       		.byte	0x54
 7248 0890 64000000 		.4byte	.LVL149
 7249 0894 66000000 		.4byte	.LVL150
 7250 0898 0100     		.2byte	0x1
 7251 089a 50       		.byte	0x50
 7252 089b 66000000 		.4byte	.LVL150
 7253 089f 68000000 		.4byte	.LVL151
 7254 08a3 0400     		.2byte	0x4
 7255 08a5 F3       		.byte	0xf3
 7256 08a6 01       		.uleb128 0x1
 7257 08a7 50       		.byte	0x50
 7258 08a8 9F       		.byte	0x9f
 7259 08a9 68000000 		.4byte	.LVL151
 7260 08ad 76000000 		.4byte	.LVL153
 7261 08b1 0100     		.2byte	0x1
 7262 08b3 54       		.byte	0x54
 7263 08b4 76000000 		.4byte	.LVL153
 7264 08b8 7C000000 		.4byte	.LFE77
 7265 08bc 0400     		.2byte	0x4
 7266 08be F3       		.byte	0xf3
 7267 08bf 01       		.uleb128 0x1
 7268 08c0 50       		.byte	0x50
 7269 08c1 9F       		.byte	0x9f
 7270 08c2 00000000 		.4byte	0
 7271 08c6 00000000 		.4byte	0
 7272              	.LLST44:
 7273 08ca 00000000 		.4byte	.LVL139
 7274 08ce 33000000 		.4byte	.LVL143-1
 7275 08d2 0100     		.2byte	0x1
 7276 08d4 51       		.byte	0x51
 7277 08d5 33000000 		.4byte	.LVL143-1
 7278 08d9 64000000 		.4byte	.LVL149
 7279 08dd 0400     		.2byte	0x4
 7280 08df F3       		.byte	0xf3
 7281 08e0 01       		.uleb128 0x1
 7282 08e1 51       		.byte	0x51
 7283 08e2 9F       		.byte	0x9f
 7284 08e3 64000000 		.4byte	.LVL149
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 191


 7285 08e7 68000000 		.4byte	.LVL151
 7286 08eb 0100     		.2byte	0x1
 7287 08ed 51       		.byte	0x51
 7288 08ee 68000000 		.4byte	.LVL151
 7289 08f2 7C000000 		.4byte	.LFE77
 7290 08f6 0400     		.2byte	0x4
 7291 08f8 F3       		.byte	0xf3
 7292 08f9 01       		.uleb128 0x1
 7293 08fa 51       		.byte	0x51
 7294 08fb 9F       		.byte	0x9f
 7295 08fc 00000000 		.4byte	0
 7296 0900 00000000 		.4byte	0
 7297              	.LLST45:
 7298 0904 00000000 		.4byte	.LVL139
 7299 0908 2E000000 		.4byte	.LVL142
 7300 090c 0100     		.2byte	0x1
 7301 090e 52       		.byte	0x52
 7302 090f 2E000000 		.4byte	.LVL142
 7303 0913 64000000 		.4byte	.LVL149
 7304 0917 0100     		.2byte	0x1
 7305 0919 57       		.byte	0x57
 7306 091a 64000000 		.4byte	.LVL149
 7307 091e 68000000 		.4byte	.LVL151
 7308 0922 0100     		.2byte	0x1
 7309 0924 52       		.byte	0x52
 7310 0925 68000000 		.4byte	.LVL151
 7311 0929 76000000 		.4byte	.LVL153
 7312 092d 0100     		.2byte	0x1
 7313 092f 57       		.byte	0x57
 7314 0930 76000000 		.4byte	.LVL153
 7315 0934 7C000000 		.4byte	.LFE77
 7316 0938 0400     		.2byte	0x4
 7317 093a F3       		.byte	0xf3
 7318 093b 01       		.uleb128 0x1
 7319 093c 52       		.byte	0x52
 7320 093d 9F       		.byte	0x9f
 7321 093e 00000000 		.4byte	0
 7322 0942 00000000 		.4byte	0
 7323              	.LLST46:
 7324 0946 00000000 		.4byte	.LVL139
 7325 094a 33000000 		.4byte	.LVL143-1
 7326 094e 0100     		.2byte	0x1
 7327 0950 53       		.byte	0x53
 7328 0951 33000000 		.4byte	.LVL143-1
 7329 0955 64000000 		.4byte	.LVL149
 7330 0959 0400     		.2byte	0x4
 7331 095b F3       		.byte	0xf3
 7332 095c 01       		.uleb128 0x1
 7333 095d 53       		.byte	0x53
 7334 095e 9F       		.byte	0x9f
 7335 095f 64000000 		.4byte	.LVL149
 7336 0963 68000000 		.4byte	.LVL151
 7337 0967 0100     		.2byte	0x1
 7338 0969 53       		.byte	0x53
 7339 096a 68000000 		.4byte	.LVL151
 7340 096e 7C000000 		.4byte	.LFE77
 7341 0972 0400     		.2byte	0x4
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 192


 7342 0974 F3       		.byte	0xf3
 7343 0975 01       		.uleb128 0x1
 7344 0976 53       		.byte	0x53
 7345 0977 9F       		.byte	0x9f
 7346 0978 00000000 		.4byte	0
 7347 097c 00000000 		.4byte	0
 7348              	.LLST47:
 7349 0980 02000000 		.4byte	.LVL140
 7350 0984 33000000 		.4byte	.LVL143-1
 7351 0988 0100     		.2byte	0x1
 7352 098a 50       		.byte	0x50
 7353 098b 33000000 		.4byte	.LVL143-1
 7354 098f 64000000 		.4byte	.LVL149
 7355 0993 0100     		.2byte	0x1
 7356 0995 54       		.byte	0x54
 7357 0996 64000000 		.4byte	.LVL149
 7358 099a 66000000 		.4byte	.LVL150
 7359 099e 0100     		.2byte	0x1
 7360 09a0 50       		.byte	0x50
 7361 09a1 66000000 		.4byte	.LVL150
 7362 09a5 68000000 		.4byte	.LVL151
 7363 09a9 0400     		.2byte	0x4
 7364 09ab F3       		.byte	0xf3
 7365 09ac 01       		.uleb128 0x1
 7366 09ad 50       		.byte	0x50
 7367 09ae 9F       		.byte	0x9f
 7368 09af 68000000 		.4byte	.LVL151
 7369 09b3 76000000 		.4byte	.LVL153
 7370 09b7 0100     		.2byte	0x1
 7371 09b9 54       		.byte	0x54
 7372 09ba 76000000 		.4byte	.LVL153
 7373 09be 7C000000 		.4byte	.LFE77
 7374 09c2 0400     		.2byte	0x4
 7375 09c4 F3       		.byte	0xf3
 7376 09c5 01       		.uleb128 0x1
 7377 09c6 50       		.byte	0x50
 7378 09c7 9F       		.byte	0x9f
 7379 09c8 00000000 		.4byte	0
 7380 09cc 00000000 		.4byte	0
 7381              	.LLST48:
 7382 09d0 2C000000 		.4byte	.LVL141
 7383 09d4 5A000000 		.4byte	.LVL146
 7384 09d8 0100     		.2byte	0x1
 7385 09da 55       		.byte	0x55
 7386 09db 5A000000 		.4byte	.LVL146
 7387 09df 5C000000 		.4byte	.LVL147
 7388 09e3 0300     		.2byte	0x3
 7389 09e5 75       		.byte	0x75
 7390 09e6 7F       		.sleb128 -1
 7391 09e7 9F       		.byte	0x9f
 7392 09e8 68000000 		.4byte	.LVL151
 7393 09ec 76000000 		.4byte	.LVL153
 7394 09f0 0100     		.2byte	0x1
 7395 09f2 55       		.byte	0x55
 7396 09f3 00000000 		.4byte	0
 7397 09f7 00000000 		.4byte	0
 7398              	.LLST49:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 193


 7399 09fb 54000000 		.4byte	.LVL145
 7400 09ff 62000000 		.4byte	.LVL148
 7401 0a03 0100     		.2byte	0x1
 7402 0a05 50       		.byte	0x50
 7403 0a06 74000000 		.4byte	.LVL152
 7404 0a0a 76000000 		.4byte	.LVL153
 7405 0a0e 0100     		.2byte	0x1
 7406 0a10 50       		.byte	0x50
 7407 0a11 00000000 		.4byte	0
 7408 0a15 00000000 		.4byte	0
 7409              	.LLST50:
 7410 0a19 76000000 		.4byte	.LVL153
 7411 0a1d 7A000000 		.4byte	.LVL154
 7412 0a21 0100     		.2byte	0x1
 7413 0a23 56       		.byte	0x56
 7414 0a24 00000000 		.4byte	0
 7415 0a28 00000000 		.4byte	0
 7416              	.LLST51:
 7417 0a2c 00000000 		.4byte	.LVL155
 7418 0a30 38000000 		.4byte	.LVL161
 7419 0a34 0100     		.2byte	0x1
 7420 0a36 50       		.byte	0x50
 7421 0a37 38000000 		.4byte	.LVL161
 7422 0a3b 46000000 		.4byte	.LVL163
 7423 0a3f 0100     		.2byte	0x1
 7424 0a41 56       		.byte	0x56
 7425 0a42 46000000 		.4byte	.LVL163
 7426 0a46 49000000 		.4byte	.LVL164-1
 7427 0a4a 0100     		.2byte	0x1
 7428 0a4c 50       		.byte	0x50
 7429 0a4d 49000000 		.4byte	.LVL164-1
 7430 0a51 5A000000 		.4byte	.LVL168
 7431 0a55 0100     		.2byte	0x1
 7432 0a57 56       		.byte	0x56
 7433 0a58 5A000000 		.4byte	.LVL168
 7434 0a5c 5C000000 		.4byte	.LVL169
 7435 0a60 0100     		.2byte	0x1
 7436 0a62 50       		.byte	0x50
 7437 0a63 5C000000 		.4byte	.LVL169
 7438 0a67 5E000000 		.4byte	.LVL170
 7439 0a6b 0400     		.2byte	0x4
 7440 0a6d F3       		.byte	0xf3
 7441 0a6e 01       		.uleb128 0x1
 7442 0a6f 50       		.byte	0x50
 7443 0a70 9F       		.byte	0x9f
 7444 0a71 5E000000 		.4byte	.LVL170
 7445 0a75 60000000 		.4byte	.LVL171
 7446 0a79 0100     		.2byte	0x1
 7447 0a7b 50       		.byte	0x50
 7448 0a7c 60000000 		.4byte	.LVL171
 7449 0a80 6C000000 		.4byte	.LVL174
 7450 0a84 0100     		.2byte	0x1
 7451 0a86 56       		.byte	0x56
 7452 0a87 6C000000 		.4byte	.LVL174
 7453 0a8b 72000000 		.4byte	.LFE78
 7454 0a8f 0400     		.2byte	0x4
 7455 0a91 F3       		.byte	0xf3
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 194


 7456 0a92 01       		.uleb128 0x1
 7457 0a93 50       		.byte	0x50
 7458 0a94 9F       		.byte	0x9f
 7459 0a95 00000000 		.4byte	0
 7460 0a99 00000000 		.4byte	0
 7461              	.LLST52:
 7462 0a9d 00000000 		.4byte	.LVL155
 7463 0aa1 3B000000 		.4byte	.LVL162-1
 7464 0aa5 0100     		.2byte	0x1
 7465 0aa7 51       		.byte	0x51
 7466 0aa8 3B000000 		.4byte	.LVL162-1
 7467 0aac 46000000 		.4byte	.LVL163
 7468 0ab0 0100     		.2byte	0x1
 7469 0ab2 57       		.byte	0x57
 7470 0ab3 46000000 		.4byte	.LVL163
 7471 0ab7 49000000 		.4byte	.LVL164-1
 7472 0abb 0100     		.2byte	0x1
 7473 0abd 51       		.byte	0x51
 7474 0abe 49000000 		.4byte	.LVL164-1
 7475 0ac2 5A000000 		.4byte	.LVL168
 7476 0ac6 0100     		.2byte	0x1
 7477 0ac8 57       		.byte	0x57
 7478 0ac9 5A000000 		.4byte	.LVL168
 7479 0acd 62000000 		.4byte	.LVL172
 7480 0ad1 0100     		.2byte	0x1
 7481 0ad3 51       		.byte	0x51
 7482 0ad4 62000000 		.4byte	.LVL172
 7483 0ad8 6C000000 		.4byte	.LVL174
 7484 0adc 0100     		.2byte	0x1
 7485 0ade 57       		.byte	0x57
 7486 0adf 6C000000 		.4byte	.LVL174
 7487 0ae3 72000000 		.4byte	.LFE78
 7488 0ae7 0400     		.2byte	0x4
 7489 0ae9 F3       		.byte	0xf3
 7490 0aea 01       		.uleb128 0x1
 7491 0aeb 51       		.byte	0x51
 7492 0aec 9F       		.byte	0x9f
 7493 0aed 00000000 		.4byte	0
 7494 0af1 00000000 		.4byte	0
 7495              	.LLST53:
 7496 0af5 02000000 		.4byte	.LVL156
 7497 0af9 38000000 		.4byte	.LVL161
 7498 0afd 0100     		.2byte	0x1
 7499 0aff 50       		.byte	0x50
 7500 0b00 38000000 		.4byte	.LVL161
 7501 0b04 46000000 		.4byte	.LVL163
 7502 0b08 0100     		.2byte	0x1
 7503 0b0a 56       		.byte	0x56
 7504 0b0b 46000000 		.4byte	.LVL163
 7505 0b0f 49000000 		.4byte	.LVL164-1
 7506 0b13 0100     		.2byte	0x1
 7507 0b15 50       		.byte	0x50
 7508 0b16 49000000 		.4byte	.LVL164-1
 7509 0b1a 5A000000 		.4byte	.LVL168
 7510 0b1e 0100     		.2byte	0x1
 7511 0b20 56       		.byte	0x56
 7512 0b21 5A000000 		.4byte	.LVL168
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 195


 7513 0b25 5C000000 		.4byte	.LVL169
 7514 0b29 0100     		.2byte	0x1
 7515 0b2b 50       		.byte	0x50
 7516 0b2c 5C000000 		.4byte	.LVL169
 7517 0b30 5E000000 		.4byte	.LVL170
 7518 0b34 0400     		.2byte	0x4
 7519 0b36 F3       		.byte	0xf3
 7520 0b37 01       		.uleb128 0x1
 7521 0b38 50       		.byte	0x50
 7522 0b39 9F       		.byte	0x9f
 7523 0b3a 5E000000 		.4byte	.LVL170
 7524 0b3e 60000000 		.4byte	.LVL171
 7525 0b42 0100     		.2byte	0x1
 7526 0b44 50       		.byte	0x50
 7527 0b45 60000000 		.4byte	.LVL171
 7528 0b49 6C000000 		.4byte	.LVL174
 7529 0b4d 0100     		.2byte	0x1
 7530 0b4f 56       		.byte	0x56
 7531 0b50 6C000000 		.4byte	.LVL174
 7532 0b54 72000000 		.4byte	.LFE78
 7533 0b58 0400     		.2byte	0x4
 7534 0b5a F3       		.byte	0xf3
 7535 0b5b 01       		.uleb128 0x1
 7536 0b5c 50       		.byte	0x50
 7537 0b5d 9F       		.byte	0x9f
 7538 0b5e 00000000 		.4byte	0
 7539 0b62 00000000 		.4byte	0
 7540              	.LLST54:
 7541 0b66 18000000 		.4byte	.LVL157
 7542 0b6a 2A000000 		.4byte	.LVL159
 7543 0b6e 0100     		.2byte	0x1
 7544 0b70 53       		.byte	0x53
 7545 0b71 2A000000 		.4byte	.LVL159
 7546 0b75 34000000 		.4byte	.LVL160
 7547 0b79 0300     		.2byte	0x3
 7548 0b7b 73       		.byte	0x73
 7549 0b7c 7F       		.sleb128 -1
 7550 0b7d 9F       		.byte	0x9f
 7551 0b7e 34000000 		.4byte	.LVL160
 7552 0b82 38000000 		.4byte	.LVL161
 7553 0b86 0600     		.2byte	0x6
 7554 0b88 70       		.byte	0x70
 7555 0b89 38       		.sleb128 56
 7556 0b8a 06       		.byte	0x6
 7557 0b8b 31       		.byte	0x31
 7558 0b8c 1C       		.byte	0x1c
 7559 0b8d 9F       		.byte	0x9f
 7560 0b8e 38000000 		.4byte	.LVL161
 7561 0b92 3B000000 		.4byte	.LVL162-1
 7562 0b96 0600     		.2byte	0x6
 7563 0b98 76       		.byte	0x76
 7564 0b99 38       		.sleb128 56
 7565 0b9a 06       		.byte	0x6
 7566 0b9b 31       		.byte	0x31
 7567 0b9c 1C       		.byte	0x1c
 7568 0b9d 9F       		.byte	0x9f
 7569 0b9e 46000000 		.4byte	.LVL163
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 196


 7570 0ba2 49000000 		.4byte	.LVL164-1
 7571 0ba6 0300     		.2byte	0x3
 7572 0ba8 73       		.byte	0x73
 7573 0ba9 7F       		.sleb128 -1
 7574 0baa 9F       		.byte	0x9f
 7575 0bab 5A000000 		.4byte	.LVL168
 7576 0baf 5E000000 		.4byte	.LVL170
 7577 0bb3 0100     		.2byte	0x1
 7578 0bb5 53       		.byte	0x53
 7579 0bb6 5E000000 		.4byte	.LVL170
 7580 0bba 60000000 		.4byte	.LVL171
 7581 0bbe 0600     		.2byte	0x6
 7582 0bc0 70       		.byte	0x70
 7583 0bc1 38       		.sleb128 56
 7584 0bc2 06       		.byte	0x6
 7585 0bc3 31       		.byte	0x31
 7586 0bc4 1C       		.byte	0x1c
 7587 0bc5 9F       		.byte	0x9f
 7588 0bc6 60000000 		.4byte	.LVL171
 7589 0bca 62000000 		.4byte	.LVL172
 7590 0bce 0600     		.2byte	0x6
 7591 0bd0 76       		.byte	0x76
 7592 0bd1 38       		.sleb128 56
 7593 0bd2 06       		.byte	0x6
 7594 0bd3 31       		.byte	0x31
 7595 0bd4 1C       		.byte	0x1c
 7596 0bd5 9F       		.byte	0x9f
 7597 0bd6 00000000 		.4byte	0
 7598 0bda 00000000 		.4byte	0
 7599              	.LLST55:
 7600 0bde 28000000 		.4byte	.LVL158
 7601 0be2 50000000 		.4byte	.LVL165
 7602 0be6 0100     		.2byte	0x1
 7603 0be8 54       		.byte	0x54
 7604 0be9 50000000 		.4byte	.LVL165
 7605 0bed 52000000 		.4byte	.LVL166
 7606 0bf1 0300     		.2byte	0x3
 7607 0bf3 74       		.byte	0x74
 7608 0bf4 7F       		.sleb128 -1
 7609 0bf5 9F       		.byte	0x9f
 7610 0bf6 5E000000 		.4byte	.LVL170
 7611 0bfa 6C000000 		.4byte	.LVL174
 7612 0bfe 0100     		.2byte	0x1
 7613 0c00 54       		.byte	0x54
 7614 0c01 00000000 		.4byte	0
 7615 0c05 00000000 		.4byte	0
 7616              	.LLST56:
 7617 0c09 4A000000 		.4byte	.LVL164
 7618 0c0d 58000000 		.4byte	.LVL167
 7619 0c11 0100     		.2byte	0x1
 7620 0c13 50       		.byte	0x50
 7621 0c14 6A000000 		.4byte	.LVL173
 7622 0c18 6C000000 		.4byte	.LVL174
 7623 0c1c 0100     		.2byte	0x1
 7624 0c1e 50       		.byte	0x50
 7625 0c1f 00000000 		.4byte	0
 7626 0c23 00000000 		.4byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 197


 7627              	.LLST57:
 7628 0c27 6C000000 		.4byte	.LVL174
 7629 0c2b 70000000 		.4byte	.LVL175
 7630 0c2f 0100     		.2byte	0x1
 7631 0c31 55       		.byte	0x55
 7632 0c32 00000000 		.4byte	0
 7633 0c36 00000000 		.4byte	0
 7634              	.LLST58:
 7635 0c3a 00000000 		.4byte	.LVL176
 7636 0c3e 0C000000 		.4byte	.LVL178
 7637 0c42 0100     		.2byte	0x1
 7638 0c44 50       		.byte	0x50
 7639 0c45 0C000000 		.4byte	.LVL178
 7640 0c49 F2000000 		.4byte	.LVL205
 7641 0c4d 0100     		.2byte	0x1
 7642 0c4f 54       		.byte	0x54
 7643 0c50 F2000000 		.4byte	.LVL205
 7644 0c54 F8000000 		.4byte	.LFE79
 7645 0c58 0400     		.2byte	0x4
 7646 0c5a F3       		.byte	0xf3
 7647 0c5b 01       		.uleb128 0x1
 7648 0c5c 50       		.byte	0x50
 7649 0c5d 9F       		.byte	0x9f
 7650 0c5e 00000000 		.4byte	0
 7651 0c62 00000000 		.4byte	0
 7652              	.LLST59:
 7653 0c66 00000000 		.4byte	.LVL176
 7654 0c6a 0C000000 		.4byte	.LVL178
 7655 0c6e 0100     		.2byte	0x1
 7656 0c70 51       		.byte	0x51
 7657 0c71 0C000000 		.4byte	.LVL178
 7658 0c75 F2000000 		.4byte	.LVL205
 7659 0c79 0100     		.2byte	0x1
 7660 0c7b 57       		.byte	0x57
 7661 0c7c F2000000 		.4byte	.LVL205
 7662 0c80 F8000000 		.4byte	.LFE79
 7663 0c84 0400     		.2byte	0x4
 7664 0c86 F3       		.byte	0xf3
 7665 0c87 01       		.uleb128 0x1
 7666 0c88 51       		.byte	0x51
 7667 0c89 9F       		.byte	0x9f
 7668 0c8a 00000000 		.4byte	0
 7669 0c8e 00000000 		.4byte	0
 7670              	.LLST60:
 7671 0c92 00000000 		.4byte	.LVL176
 7672 0c96 0C000000 		.4byte	.LVL178
 7673 0c9a 0100     		.2byte	0x1
 7674 0c9c 52       		.byte	0x52
 7675 0c9d 0C000000 		.4byte	.LVL178
 7676 0ca1 92000000 		.4byte	.LVL193
 7677 0ca5 0200     		.2byte	0x2
 7678 0ca7 91       		.byte	0x91
 7679 0ca8 5C       		.sleb128 -36
 7680 0ca9 92000000 		.4byte	.LVL193
 7681 0cad 97000000 		.4byte	.LVL194-1
 7682 0cb1 0200     		.2byte	0x2
 7683 0cb3 71       		.byte	0x71
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 198


 7684 0cb4 00       		.sleb128 0
 7685 0cb5 97000000 		.4byte	.LVL194-1
 7686 0cb9 F2000000 		.4byte	.LVL205
 7687 0cbd 0200     		.2byte	0x2
 7688 0cbf 91       		.byte	0x91
 7689 0cc0 5C       		.sleb128 -36
 7690 0cc1 F2000000 		.4byte	.LVL205
 7691 0cc5 F8000000 		.4byte	.LFE79
 7692 0cc9 0200     		.2byte	0x2
 7693 0ccb 7D       		.byte	0x7d
 7694 0ccc 5C       		.sleb128 -36
 7695 0ccd 00000000 		.4byte	0
 7696 0cd1 00000000 		.4byte	0
 7697              	.LLST61:
 7698 0cd5 0A000000 		.4byte	.LVL177
 7699 0cd9 0C000000 		.4byte	.LVL178
 7700 0cdd 0200     		.2byte	0x2
 7701 0cdf 30       		.byte	0x30
 7702 0ce0 9F       		.byte	0x9f
 7703 0ce1 0C000000 		.4byte	.LVL178
 7704 0ce5 5A000000 		.4byte	.LVL187
 7705 0ce9 0100     		.2byte	0x1
 7706 0ceb 56       		.byte	0x56
 7707 0cec 5A000000 		.4byte	.LVL187
 7708 0cf0 5C000000 		.4byte	.LVL188
 7709 0cf4 0200     		.2byte	0x2
 7710 0cf6 31       		.byte	0x31
 7711 0cf7 9F       		.byte	0x9f
 7712 0cf8 5C000000 		.4byte	.LVL188
 7713 0cfc F2000000 		.4byte	.LVL205
 7714 0d00 0100     		.2byte	0x1
 7715 0d02 56       		.byte	0x56
 7716 0d03 00000000 		.4byte	0
 7717 0d07 00000000 		.4byte	0
 7718              	.LLST62:
 7719 0d0b 0A000000 		.4byte	.LVL177
 7720 0d0f 0C000000 		.4byte	.LVL178
 7721 0d13 0100     		.2byte	0x1
 7722 0d15 50       		.byte	0x50
 7723 0d16 0C000000 		.4byte	.LVL178
 7724 0d1a F2000000 		.4byte	.LVL205
 7725 0d1e 0100     		.2byte	0x1
 7726 0d20 54       		.byte	0x54
 7727 0d21 F2000000 		.4byte	.LVL205
 7728 0d25 F8000000 		.4byte	.LFE79
 7729 0d29 0400     		.2byte	0x4
 7730 0d2b F3       		.byte	0xf3
 7731 0d2c 01       		.uleb128 0x1
 7732 0d2d 50       		.byte	0x50
 7733 0d2e 9F       		.byte	0x9f
 7734 0d2f 00000000 		.4byte	0
 7735 0d33 00000000 		.4byte	0
 7736              	.LLST63:
 7737 0d37 12000000 		.4byte	.LVL180
 7738 0d3b 1E000000 		.4byte	.LVL182
 7739 0d3f 0100     		.2byte	0x1
 7740 0d41 55       		.byte	0x55
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 199


 7741 0d42 1E000000 		.4byte	.LVL182
 7742 0d46 46000000 		.4byte	.LVL185
 7743 0d4a 0300     		.2byte	0x3
 7744 0d4c 75       		.byte	0x75
 7745 0d4d 01       		.sleb128 1
 7746 0d4e 9F       		.byte	0x9f
 7747 0d4f 46000000 		.4byte	.LVL185
 7748 0d53 EE000000 		.4byte	.LVL204
 7749 0d57 0100     		.2byte	0x1
 7750 0d59 55       		.byte	0x55
 7751 0d5a 00000000 		.4byte	0
 7752 0d5e 00000000 		.4byte	0
 7753              	.LLST64:
 7754 0d62 00000000 		.4byte	.LVL206
 7755 0d66 0C000000 		.4byte	.LVL208
 7756 0d6a 0100     		.2byte	0x1
 7757 0d6c 50       		.byte	0x50
 7758 0d6d 0C000000 		.4byte	.LVL208
 7759 0d71 24010000 		.4byte	.LVL245
 7760 0d75 0100     		.2byte	0x1
 7761 0d77 54       		.byte	0x54
 7762 0d78 24010000 		.4byte	.LVL245
 7763 0d7c 28010000 		.4byte	.LFE80
 7764 0d80 0400     		.2byte	0x4
 7765 0d82 F3       		.byte	0xf3
 7766 0d83 01       		.uleb128 0x1
 7767 0d84 50       		.byte	0x50
 7768 0d85 9F       		.byte	0x9f
 7769 0d86 00000000 		.4byte	0
 7770 0d8a 00000000 		.4byte	0
 7771              	.LLST65:
 7772 0d8e 00000000 		.4byte	.LVL206
 7773 0d92 0C000000 		.4byte	.LVL208
 7774 0d96 0100     		.2byte	0x1
 7775 0d98 51       		.byte	0x51
 7776 0d99 0C000000 		.4byte	.LVL208
 7777 0d9d 94000000 		.4byte	.LVL225
 7778 0da1 0200     		.2byte	0x2
 7779 0da3 91       		.byte	0x91
 7780 0da4 64       		.sleb128 -28
 7781 0da5 94000000 		.4byte	.LVL225
 7782 0da9 99000000 		.4byte	.LVL226-1
 7783 0dad 0200     		.2byte	0x2
 7784 0daf 71       		.byte	0x71
 7785 0db0 00       		.sleb128 0
 7786 0db1 99000000 		.4byte	.LVL226-1
 7787 0db5 24010000 		.4byte	.LVL245
 7788 0db9 0200     		.2byte	0x2
 7789 0dbb 91       		.byte	0x91
 7790 0dbc 64       		.sleb128 -28
 7791 0dbd 24010000 		.4byte	.LVL245
 7792 0dc1 28010000 		.4byte	.LFE80
 7793 0dc5 0200     		.2byte	0x2
 7794 0dc7 7D       		.byte	0x7d
 7795 0dc8 64       		.sleb128 -28
 7796 0dc9 00000000 		.4byte	0
 7797 0dcd 00000000 		.4byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 200


 7798              	.LLST66:
 7799 0dd1 08000000 		.4byte	.LVL207
 7800 0dd5 0C000000 		.4byte	.LVL208
 7801 0dd9 0200     		.2byte	0x2
 7802 0ddb 30       		.byte	0x30
 7803 0ddc 9F       		.byte	0x9f
 7804 0ddd 0C000000 		.4byte	.LVL208
 7805 0de1 5C000000 		.4byte	.LVL219
 7806 0de5 0100     		.2byte	0x1
 7807 0de7 55       		.byte	0x55
 7808 0de8 5C000000 		.4byte	.LVL219
 7809 0dec 5E000000 		.4byte	.LVL220
 7810 0df0 0200     		.2byte	0x2
 7811 0df2 31       		.byte	0x31
 7812 0df3 9F       		.byte	0x9f
 7813 0df4 5E000000 		.4byte	.LVL220
 7814 0df8 24010000 		.4byte	.LVL245
 7815 0dfc 0100     		.2byte	0x1
 7816 0dfe 55       		.byte	0x55
 7817 0dff 00000000 		.4byte	0
 7818 0e03 00000000 		.4byte	0
 7819              	.LLST67:
 7820 0e07 08000000 		.4byte	.LVL207
 7821 0e0b 0C000000 		.4byte	.LVL208
 7822 0e0f 0100     		.2byte	0x1
 7823 0e11 50       		.byte	0x50
 7824 0e12 0C000000 		.4byte	.LVL208
 7825 0e16 24010000 		.4byte	.LVL245
 7826 0e1a 0100     		.2byte	0x1
 7827 0e1c 54       		.byte	0x54
 7828 0e1d 24010000 		.4byte	.LVL245
 7829 0e21 28010000 		.4byte	.LFE80
 7830 0e25 0400     		.2byte	0x4
 7831 0e27 F3       		.byte	0xf3
 7832 0e28 01       		.uleb128 0x1
 7833 0e29 50       		.byte	0x50
 7834 0e2a 9F       		.byte	0x9f
 7835 0e2b 00000000 		.4byte	0
 7836 0e2f 00000000 		.4byte	0
 7837              	.LLST68:
 7838 0e33 08000000 		.4byte	.LVL207
 7839 0e37 0C000000 		.4byte	.LVL208
 7840 0e3b 0200     		.2byte	0x2
 7841 0e3d 30       		.byte	0x30
 7842 0e3e 9F       		.byte	0x9f
 7843 0e3f 0C000000 		.4byte	.LVL208
 7844 0e43 B4000000 		.4byte	.LVL230
 7845 0e47 0100     		.2byte	0x1
 7846 0e49 56       		.byte	0x56
 7847 0e4a B4000000 		.4byte	.LVL230
 7848 0e4e B7000000 		.4byte	.LVL231-1
 7849 0e52 0100     		.2byte	0x1
 7850 0e54 50       		.byte	0x50
 7851 0e55 B7000000 		.4byte	.LVL231-1
 7852 0e59 24010000 		.4byte	.LVL245
 7853 0e5d 0100     		.2byte	0x1
 7854 0e5f 56       		.byte	0x56
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 201


 7855 0e60 00000000 		.4byte	0
 7856 0e64 00000000 		.4byte	0
 7857              	.LLST69:
 7858 0e68 12000000 		.4byte	.LVL210
 7859 0e6c 16000000 		.4byte	.LVL211
 7860 0e70 0100     		.2byte	0x1
 7861 0e72 53       		.byte	0x53
 7862 0e73 16000000 		.4byte	.LVL211
 7863 0e77 1A000000 		.4byte	.LVL212
 7864 0e7b 0300     		.2byte	0x3
 7865 0e7d 73       		.byte	0x73
 7866 0e7e 01       		.sleb128 1
 7867 0e7f 9F       		.byte	0x9f
 7868 0e80 1A000000 		.4byte	.LVL212
 7869 0e84 1F000000 		.4byte	.LVL213-1
 7870 0e88 0600     		.2byte	0x6
 7871 0e8a 74       		.byte	0x74
 7872 0e8b 38       		.sleb128 56
 7873 0e8c 06       		.byte	0x6
 7874 0e8d 23       		.byte	0x23
 7875 0e8e 01       		.uleb128 0x1
 7876 0e8f 9F       		.byte	0x9f
 7877 0e90 48000000 		.4byte	.LVL216
 7878 0e94 4A000000 		.4byte	.LVL217
 7879 0e98 0100     		.2byte	0x1
 7880 0e9a 53       		.byte	0x53
 7881 0e9b 00000000 		.4byte	0
 7882 0e9f 00000000 		.4byte	0
 7883              	.LLST70:
 7884 0ea3 0E010000 		.4byte	.LVL241
 7885 0ea7 12010000 		.4byte	.LVL242
 7886 0eab 0100     		.2byte	0x1
 7887 0ead 50       		.byte	0x50
 7888 0eae 12010000 		.4byte	.LVL242
 7889 0eb2 15010000 		.4byte	.LVL243-1
 7890 0eb6 0100     		.2byte	0x1
 7891 0eb8 51       		.byte	0x51
 7892 0eb9 00000000 		.4byte	0
 7893 0ebd 00000000 		.4byte	0
 7894              	.LLST71:
 7895 0ec1 00000000 		.4byte	.LVL246
 7896 0ec5 0B000000 		.4byte	.LVL248-1
 7897 0ec9 0100     		.2byte	0x1
 7898 0ecb 50       		.byte	0x50
 7899 0ecc 0B000000 		.4byte	.LVL248-1
 7900 0ed0 30000000 		.4byte	.LFE74
 7901 0ed4 0100     		.2byte	0x1
 7902 0ed6 54       		.byte	0x54
 7903 0ed7 00000000 		.4byte	0
 7904 0edb 00000000 		.4byte	0
 7905              	.LLST72:
 7906 0edf 00000000 		.4byte	.LVL246
 7907 0ee3 0B000000 		.4byte	.LVL248-1
 7908 0ee7 0100     		.2byte	0x1
 7909 0ee9 51       		.byte	0x51
 7910 0eea 0B000000 		.4byte	.LVL248-1
 7911 0eee 30000000 		.4byte	.LFE74
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 202


 7912 0ef2 0100     		.2byte	0x1
 7913 0ef4 56       		.byte	0x56
 7914 0ef5 00000000 		.4byte	0
 7915 0ef9 00000000 		.4byte	0
 7916              	.LLST73:
 7917 0efd 16000000 		.4byte	.LVL249
 7918 0f01 1A000000 		.4byte	.LVL250
 7919 0f05 0200     		.2byte	0x2
 7920 0f07 31       		.byte	0x31
 7921 0f08 9F       		.byte	0x9f
 7922 0f09 22000000 		.4byte	.LVL251
 7923 0f0d 2C000000 		.4byte	.LVL252
 7924 0f11 0100     		.2byte	0x1
 7925 0f13 50       		.byte	0x50
 7926 0f14 2C000000 		.4byte	.LVL252
 7927 0f18 30000000 		.4byte	.LFE74
 7928 0f1c 0100     		.2byte	0x1
 7929 0f1e 53       		.byte	0x53
 7930 0f1f 00000000 		.4byte	0
 7931 0f23 00000000 		.4byte	0
 7932              	.LLST74:
 7933 0f27 06000000 		.4byte	.LVL247
 7934 0f2b 0B000000 		.4byte	.LVL248-1
 7935 0f2f 0100     		.2byte	0x1
 7936 0f31 50       		.byte	0x50
 7937 0f32 0B000000 		.4byte	.LVL248-1
 7938 0f36 30000000 		.4byte	.LFE74
 7939 0f3a 0100     		.2byte	0x1
 7940 0f3c 54       		.byte	0x54
 7941 0f3d 00000000 		.4byte	0
 7942 0f41 00000000 		.4byte	0
 7943              	.LLST75:
 7944 0f45 00000000 		.4byte	.LVL253
 7945 0f49 0C000000 		.4byte	.LVL255
 7946 0f4d 0100     		.2byte	0x1
 7947 0f4f 50       		.byte	0x50
 7948 0f50 0C000000 		.4byte	.LVL255
 7949 0f54 F2000000 		.4byte	.LVL283
 7950 0f58 0100     		.2byte	0x1
 7951 0f5a 54       		.byte	0x54
 7952 0f5b F2000000 		.4byte	.LVL283
 7953 0f5f F8000000 		.4byte	.LFE81
 7954 0f63 0400     		.2byte	0x4
 7955 0f65 F3       		.byte	0xf3
 7956 0f66 01       		.uleb128 0x1
 7957 0f67 50       		.byte	0x50
 7958 0f68 9F       		.byte	0x9f
 7959 0f69 00000000 		.4byte	0
 7960 0f6d 00000000 		.4byte	0
 7961              	.LLST76:
 7962 0f71 00000000 		.4byte	.LVL253
 7963 0f75 0C000000 		.4byte	.LVL255
 7964 0f79 0100     		.2byte	0x1
 7965 0f7b 51       		.byte	0x51
 7966 0f7c 0C000000 		.4byte	.LVL255
 7967 0f80 F2000000 		.4byte	.LVL283
 7968 0f84 0100     		.2byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 203


 7969 0f86 56       		.byte	0x56
 7970 0f87 F2000000 		.4byte	.LVL283
 7971 0f8b F8000000 		.4byte	.LFE81
 7972 0f8f 0400     		.2byte	0x4
 7973 0f91 F3       		.byte	0xf3
 7974 0f92 01       		.uleb128 0x1
 7975 0f93 51       		.byte	0x51
 7976 0f94 9F       		.byte	0x9f
 7977 0f95 00000000 		.4byte	0
 7978 0f99 00000000 		.4byte	0
 7979              	.LLST77:
 7980 0f9d 00000000 		.4byte	.LVL253
 7981 0fa1 0C000000 		.4byte	.LVL255
 7982 0fa5 0100     		.2byte	0x1
 7983 0fa7 52       		.byte	0x52
 7984 0fa8 0C000000 		.4byte	.LVL255
 7985 0fac 92000000 		.4byte	.LVL271
 7986 0fb0 0200     		.2byte	0x2
 7987 0fb2 91       		.byte	0x91
 7988 0fb3 64       		.sleb128 -28
 7989 0fb4 92000000 		.4byte	.LVL271
 7990 0fb8 97000000 		.4byte	.LVL272-1
 7991 0fbc 0200     		.2byte	0x2
 7992 0fbe 71       		.byte	0x71
 7993 0fbf 00       		.sleb128 0
 7994 0fc0 97000000 		.4byte	.LVL272-1
 7995 0fc4 F2000000 		.4byte	.LVL283
 7996 0fc8 0200     		.2byte	0x2
 7997 0fca 91       		.byte	0x91
 7998 0fcb 64       		.sleb128 -28
 7999 0fcc F2000000 		.4byte	.LVL283
 8000 0fd0 F8000000 		.4byte	.LFE81
 8001 0fd4 0200     		.2byte	0x2
 8002 0fd6 7D       		.byte	0x7d
 8003 0fd7 64       		.sleb128 -28
 8004 0fd8 00000000 		.4byte	0
 8005 0fdc 00000000 		.4byte	0
 8006              	.LLST78:
 8007 0fe0 0A000000 		.4byte	.LVL254
 8008 0fe4 0C000000 		.4byte	.LVL255
 8009 0fe8 0200     		.2byte	0x2
 8010 0fea 30       		.byte	0x30
 8011 0feb 9F       		.byte	0x9f
 8012 0fec 0C000000 		.4byte	.LVL255
 8013 0ff0 16000000 		.4byte	.LVL258
 8014 0ff4 0100     		.2byte	0x1
 8015 0ff6 55       		.byte	0x55
 8016 0ff7 46000000 		.4byte	.LVL262
 8017 0ffb 5A000000 		.4byte	.LVL265
 8018 0fff 0100     		.2byte	0x1
 8019 1001 55       		.byte	0x55
 8020 1002 5A000000 		.4byte	.LVL265
 8021 1006 5C000000 		.4byte	.LVL266
 8022 100a 0200     		.2byte	0x2
 8023 100c 31       		.byte	0x31
 8024 100d 9F       		.byte	0x9f
 8025 100e 5C000000 		.4byte	.LVL266
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 204


 8026 1012 EE000000 		.4byte	.LVL282
 8027 1016 0100     		.2byte	0x1
 8028 1018 55       		.byte	0x55
 8029 1019 00000000 		.4byte	0
 8030 101d 00000000 		.4byte	0
 8031              	.LLST79:
 8032 1021 16000000 		.4byte	.LVL258
 8033 1025 46000000 		.4byte	.LVL262
 8034 1029 0100     		.2byte	0x1
 8035 102b 55       		.byte	0x55
 8036 102c 00000000 		.4byte	0
 8037 1030 00000000 		.4byte	0
 8038              	.LLST80:
 8039 1034 0A000000 		.4byte	.LVL254
 8040 1038 0C000000 		.4byte	.LVL255
 8041 103c 0100     		.2byte	0x1
 8042 103e 50       		.byte	0x50
 8043 103f 0C000000 		.4byte	.LVL255
 8044 1043 F2000000 		.4byte	.LVL283
 8045 1047 0100     		.2byte	0x1
 8046 1049 54       		.byte	0x54
 8047 104a F2000000 		.4byte	.LVL283
 8048 104e F8000000 		.4byte	.LFE81
 8049 1052 0400     		.2byte	0x4
 8050 1054 F3       		.byte	0xf3
 8051 1055 01       		.uleb128 0x1
 8052 1056 50       		.byte	0x50
 8053 1057 9F       		.byte	0x9f
 8054 1058 00000000 		.4byte	0
 8055 105c 00000000 		.4byte	0
 8056              	.LLST81:
 8057 1060 12000000 		.4byte	.LVL257
 8058 1064 1D000000 		.4byte	.LVL259-1
 8059 1068 0100     		.2byte	0x1
 8060 106a 53       		.byte	0x53
 8061 106b 46000000 		.4byte	.LVL262
 8062 106f 48000000 		.4byte	.LVL263
 8063 1073 0100     		.2byte	0x1
 8064 1075 53       		.byte	0x53
 8065 1076 00000000 		.4byte	0
 8066 107a 00000000 		.4byte	0
 8067              	.LLST82:
 8068 107e 00000000 		.4byte	.LVL284
 8069 1082 29000000 		.4byte	.LVL288-1
 8070 1086 0100     		.2byte	0x1
 8071 1088 50       		.byte	0x50
 8072 1089 29000000 		.4byte	.LVL288-1
 8073 108d 64000000 		.4byte	.LVL295
 8074 1091 0100     		.2byte	0x1
 8075 1093 55       		.byte	0x55
 8076 1094 64000000 		.4byte	.LVL295
 8077 1098 66000000 		.4byte	.LVL296
 8078 109c 0100     		.2byte	0x1
 8079 109e 50       		.byte	0x50
 8080 109f 66000000 		.4byte	.LVL296
 8081 10a3 68000000 		.4byte	.LVL297
 8082 10a7 0400     		.2byte	0x4
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 205


 8083 10a9 F3       		.byte	0xf3
 8084 10aa 01       		.uleb128 0x1
 8085 10ab 50       		.byte	0x50
 8086 10ac 9F       		.byte	0x9f
 8087 10ad 68000000 		.4byte	.LVL297
 8088 10b1 76000000 		.4byte	.LVL299
 8089 10b5 0100     		.2byte	0x1
 8090 10b7 55       		.byte	0x55
 8091 10b8 76000000 		.4byte	.LVL299
 8092 10bc 7E000000 		.4byte	.LFE82
 8093 10c0 0400     		.2byte	0x4
 8094 10c2 F3       		.byte	0xf3
 8095 10c3 01       		.uleb128 0x1
 8096 10c4 50       		.byte	0x50
 8097 10c5 9F       		.byte	0x9f
 8098 10c6 00000000 		.4byte	0
 8099 10ca 00000000 		.4byte	0
 8100              	.LLST83:
 8101 10ce 00000000 		.4byte	.LVL284
 8102 10d2 29000000 		.4byte	.LVL288-1
 8103 10d6 0100     		.2byte	0x1
 8104 10d8 51       		.byte	0x51
 8105 10d9 29000000 		.4byte	.LVL288-1
 8106 10dd 64000000 		.4byte	.LVL295
 8107 10e1 0400     		.2byte	0x4
 8108 10e3 F3       		.byte	0xf3
 8109 10e4 01       		.uleb128 0x1
 8110 10e5 51       		.byte	0x51
 8111 10e6 9F       		.byte	0x9f
 8112 10e7 64000000 		.4byte	.LVL295
 8113 10eb 68000000 		.4byte	.LVL297
 8114 10ef 0100     		.2byte	0x1
 8115 10f1 51       		.byte	0x51
 8116 10f2 68000000 		.4byte	.LVL297
 8117 10f6 7E000000 		.4byte	.LFE82
 8118 10fa 0400     		.2byte	0x4
 8119 10fc F3       		.byte	0xf3
 8120 10fd 01       		.uleb128 0x1
 8121 10fe 51       		.byte	0x51
 8122 10ff 9F       		.byte	0x9f
 8123 1100 00000000 		.4byte	0
 8124 1104 00000000 		.4byte	0
 8125              	.LLST84:
 8126 1108 00000000 		.4byte	.LVL284
 8127 110c 29000000 		.4byte	.LVL288-1
 8128 1110 0100     		.2byte	0x1
 8129 1112 52       		.byte	0x52
 8130 1113 29000000 		.4byte	.LVL288-1
 8131 1117 64000000 		.4byte	.LVL295
 8132 111b 0100     		.2byte	0x1
 8133 111d 58       		.byte	0x58
 8134 111e 64000000 		.4byte	.LVL295
 8135 1122 68000000 		.4byte	.LVL297
 8136 1126 0100     		.2byte	0x1
 8137 1128 52       		.byte	0x52
 8138 1129 68000000 		.4byte	.LVL297
 8139 112d 76000000 		.4byte	.LVL299
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 206


 8140 1131 0100     		.2byte	0x1
 8141 1133 58       		.byte	0x58
 8142 1134 76000000 		.4byte	.LVL299
 8143 1138 7E000000 		.4byte	.LFE82
 8144 113c 0400     		.2byte	0x4
 8145 113e F3       		.byte	0xf3
 8146 113f 01       		.uleb128 0x1
 8147 1140 52       		.byte	0x52
 8148 1141 9F       		.byte	0x9f
 8149 1142 00000000 		.4byte	0
 8150 1146 00000000 		.4byte	0
 8151              	.LLST85:
 8152 114a 04000000 		.4byte	.LVL285
 8153 114e 29000000 		.4byte	.LVL288-1
 8154 1152 0100     		.2byte	0x1
 8155 1154 50       		.byte	0x50
 8156 1155 29000000 		.4byte	.LVL288-1
 8157 1159 64000000 		.4byte	.LVL295
 8158 115d 0100     		.2byte	0x1
 8159 115f 55       		.byte	0x55
 8160 1160 64000000 		.4byte	.LVL295
 8161 1164 66000000 		.4byte	.LVL296
 8162 1168 0100     		.2byte	0x1
 8163 116a 50       		.byte	0x50
 8164 116b 66000000 		.4byte	.LVL296
 8165 116f 68000000 		.4byte	.LVL297
 8166 1173 0400     		.2byte	0x4
 8167 1175 F3       		.byte	0xf3
 8168 1176 01       		.uleb128 0x1
 8169 1177 50       		.byte	0x50
 8170 1178 9F       		.byte	0x9f
 8171 1179 68000000 		.4byte	.LVL297
 8172 117d 76000000 		.4byte	.LVL299
 8173 1181 0100     		.2byte	0x1
 8174 1183 55       		.byte	0x55
 8175 1184 76000000 		.4byte	.LVL299
 8176 1188 7E000000 		.4byte	.LFE82
 8177 118c 0400     		.2byte	0x4
 8178 118e F3       		.byte	0xf3
 8179 118f 01       		.uleb128 0x1
 8180 1190 50       		.byte	0x50
 8181 1191 9F       		.byte	0x9f
 8182 1192 00000000 		.4byte	0
 8183 1196 00000000 		.4byte	0
 8184              	.LLST86:
 8185 119a 1A000000 		.4byte	.LVL286
 8186 119e 2C000000 		.4byte	.LVL289
 8187 11a2 0100     		.2byte	0x1
 8188 11a4 54       		.byte	0x54
 8189 11a5 2C000000 		.4byte	.LVL289
 8190 11a9 64000000 		.4byte	.LVL295
 8191 11ad 0300     		.2byte	0x3
 8192 11af 74       		.byte	0x74
 8193 11b0 01       		.sleb128 1
 8194 11b1 9F       		.byte	0x9f
 8195 11b2 64000000 		.4byte	.LVL295
 8196 11b6 68000000 		.4byte	.LVL297
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 207


 8197 11ba 0100     		.2byte	0x1
 8198 11bc 54       		.byte	0x54
 8199 11bd 68000000 		.4byte	.LVL297
 8200 11c1 76000000 		.4byte	.LVL299
 8201 11c5 0300     		.2byte	0x3
 8202 11c7 74       		.byte	0x74
 8203 11c8 01       		.sleb128 1
 8204 11c9 9F       		.byte	0x9f
 8205 11ca 00000000 		.4byte	0
 8206 11ce 00000000 		.4byte	0
 8207              	.LLST87:
 8208 11d2 26000000 		.4byte	.LVL287
 8209 11d6 5A000000 		.4byte	.LVL292
 8210 11da 0100     		.2byte	0x1
 8211 11dc 56       		.byte	0x56
 8212 11dd 5A000000 		.4byte	.LVL292
 8213 11e1 5C000000 		.4byte	.LVL293
 8214 11e5 0300     		.2byte	0x3
 8215 11e7 76       		.byte	0x76
 8216 11e8 7F       		.sleb128 -1
 8217 11e9 9F       		.byte	0x9f
 8218 11ea 68000000 		.4byte	.LVL297
 8219 11ee 76000000 		.4byte	.LVL299
 8220 11f2 0100     		.2byte	0x1
 8221 11f4 56       		.byte	0x56
 8222 11f5 00000000 		.4byte	0
 8223 11f9 00000000 		.4byte	0
 8224              	.LLST88:
 8225 11fd 54000000 		.4byte	.LVL291
 8226 1201 62000000 		.4byte	.LVL294
 8227 1205 0100     		.2byte	0x1
 8228 1207 50       		.byte	0x50
 8229 1208 74000000 		.4byte	.LVL298
 8230 120c 76000000 		.4byte	.LVL299
 8231 1210 0100     		.2byte	0x1
 8232 1212 50       		.byte	0x50
 8233 1213 00000000 		.4byte	0
 8234 1217 00000000 		.4byte	0
 8235              	.LLST89:
 8236 121b 76000000 		.4byte	.LVL299
 8237 121f 7A000000 		.4byte	.LVL300
 8238 1223 0100     		.2byte	0x1
 8239 1225 57       		.byte	0x57
 8240 1226 00000000 		.4byte	0
 8241 122a 00000000 		.4byte	0
 8242              	.LLST90:
 8243 122e 00000000 		.4byte	.LVL301
 8244 1232 21000000 		.4byte	.LVL304-1
 8245 1236 0100     		.2byte	0x1
 8246 1238 50       		.byte	0x50
 8247 1239 21000000 		.4byte	.LVL304-1
 8248 123d 28000000 		.4byte	.LVL306
 8249 1241 0100     		.2byte	0x1
 8250 1243 54       		.byte	0x54
 8251 1244 28000000 		.4byte	.LVL306
 8252 1248 2A000000 		.4byte	.LVL307
 8253 124c 0100     		.2byte	0x1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 208


 8254 124e 50       		.byte	0x50
 8255 124f 2A000000 		.4byte	.LVL307
 8256 1253 30000000 		.4byte	.LFE83
 8257 1257 0400     		.2byte	0x4
 8258 1259 F3       		.byte	0xf3
 8259 125a 01       		.uleb128 0x1
 8260 125b 50       		.byte	0x50
 8261 125c 9F       		.byte	0x9f
 8262 125d 00000000 		.4byte	0
 8263 1261 00000000 		.4byte	0
 8264              	.LLST91:
 8265 1265 00000000 		.4byte	.LVL301
 8266 1269 21000000 		.4byte	.LVL304-1
 8267 126d 0100     		.2byte	0x1
 8268 126f 51       		.byte	0x51
 8269 1270 21000000 		.4byte	.LVL304-1
 8270 1274 28000000 		.4byte	.LVL306
 8271 1278 0400     		.2byte	0x4
 8272 127a F3       		.byte	0xf3
 8273 127b 01       		.uleb128 0x1
 8274 127c 51       		.byte	0x51
 8275 127d 9F       		.byte	0x9f
 8276 127e 28000000 		.4byte	.LVL306
 8277 1282 2A000000 		.4byte	.LVL307
 8278 1286 0100     		.2byte	0x1
 8279 1288 51       		.byte	0x51
 8280 1289 2A000000 		.4byte	.LVL307
 8281 128d 30000000 		.4byte	.LFE83
 8282 1291 0400     		.2byte	0x4
 8283 1293 F3       		.byte	0xf3
 8284 1294 01       		.uleb128 0x1
 8285 1295 51       		.byte	0x51
 8286 1296 9F       		.byte	0x9f
 8287 1297 00000000 		.4byte	0
 8288 129b 00000000 		.4byte	0
 8289              	.LLST92:
 8290 129f 24000000 		.4byte	.LVL305
 8291 12a3 28000000 		.4byte	.LVL306
 8292 12a7 0200     		.2byte	0x2
 8293 12a9 31       		.byte	0x31
 8294 12aa 9F       		.byte	0x9f
 8295 12ab 2A000000 		.4byte	.LVL307
 8296 12af 30000000 		.4byte	.LFE83
 8297 12b3 0100     		.2byte	0x1
 8298 12b5 50       		.byte	0x50
 8299 12b6 00000000 		.4byte	0
 8300 12ba 00000000 		.4byte	0
 8301              	.LLST93:
 8302 12be 1E000000 		.4byte	.LVL303
 8303 12c2 28000000 		.4byte	.LVL306
 8304 12c6 0100     		.2byte	0x1
 8305 12c8 56       		.byte	0x56
 8306 12c9 00000000 		.4byte	0
 8307 12cd 00000000 		.4byte	0
 8308              	.LLST94:
 8309 12d1 02000000 		.4byte	.LVL302
 8310 12d5 21000000 		.4byte	.LVL304-1
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 209


 8311 12d9 0100     		.2byte	0x1
 8312 12db 50       		.byte	0x50
 8313 12dc 21000000 		.4byte	.LVL304-1
 8314 12e0 28000000 		.4byte	.LVL306
 8315 12e4 0100     		.2byte	0x1
 8316 12e6 54       		.byte	0x54
 8317 12e7 28000000 		.4byte	.LVL306
 8318 12eb 2A000000 		.4byte	.LVL307
 8319 12ef 0100     		.2byte	0x1
 8320 12f1 50       		.byte	0x50
 8321 12f2 2A000000 		.4byte	.LVL307
 8322 12f6 30000000 		.4byte	.LFE83
 8323 12fa 0400     		.2byte	0x4
 8324 12fc F3       		.byte	0xf3
 8325 12fd 01       		.uleb128 0x1
 8326 12fe 50       		.byte	0x50
 8327 12ff 9F       		.byte	0x9f
 8328 1300 00000000 		.4byte	0
 8329 1304 00000000 		.4byte	0
 8330              	.LLST95:
 8331 1308 2A000000 		.4byte	.LVL307
 8332 130c 2E000000 		.4byte	.LVL308
 8333 1310 0100     		.2byte	0x1
 8334 1312 55       		.byte	0x55
 8335 1313 00000000 		.4byte	0
 8336 1317 00000000 		.4byte	0
 8337              	.LLST96:
 8338 131b 00000000 		.4byte	.LVL309
 8339 131f 07000000 		.4byte	.LVL310-1
 8340 1323 0100     		.2byte	0x1
 8341 1325 50       		.byte	0x50
 8342 1326 07000000 		.4byte	.LVL310-1
 8343 132a 0A000000 		.4byte	.LVL311
 8344 132e 0100     		.2byte	0x1
 8345 1330 54       		.byte	0x54
 8346 1331 0A000000 		.4byte	.LVL311
 8347 1335 12000000 		.4byte	.LFE84
 8348 1339 0400     		.2byte	0x4
 8349 133b F3       		.byte	0xf3
 8350 133c 01       		.uleb128 0x1
 8351 133d 50       		.byte	0x50
 8352 133e 9F       		.byte	0x9f
 8353 133f 00000000 		.4byte	0
 8354 1343 00000000 		.4byte	0
 8355              	.LLST97:
 8356 1347 00000000 		.4byte	.LVL313
 8357 134b 07000000 		.4byte	.LVL315-1
 8358 134f 0100     		.2byte	0x1
 8359 1351 50       		.byte	0x50
 8360 1352 07000000 		.4byte	.LVL315-1
 8361 1356 0C000000 		.4byte	.LVL316
 8362 135a 0100     		.2byte	0x1
 8363 135c 54       		.byte	0x54
 8364 135d 0C000000 		.4byte	.LVL316
 8365 1361 16000000 		.4byte	.LFE85
 8366 1365 0400     		.2byte	0x4
 8367 1367 F3       		.byte	0xf3
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 210


 8368 1368 01       		.uleb128 0x1
 8369 1369 50       		.byte	0x50
 8370 136a 9F       		.byte	0x9f
 8371 136b 00000000 		.4byte	0
 8372 136f 00000000 		.4byte	0
 8373              	.LLST98:
 8374 1373 04000000 		.4byte	.LVL314
 8375 1377 07000000 		.4byte	.LVL315-1
 8376 137b 0100     		.2byte	0x1
 8377 137d 50       		.byte	0x50
 8378 137e 07000000 		.4byte	.LVL315-1
 8379 1382 0C000000 		.4byte	.LVL316
 8380 1386 0100     		.2byte	0x1
 8381 1388 54       		.byte	0x54
 8382 1389 0C000000 		.4byte	.LVL316
 8383 138d 16000000 		.4byte	.LFE85
 8384 1391 0400     		.2byte	0x4
 8385 1393 F3       		.byte	0xf3
 8386 1394 01       		.uleb128 0x1
 8387 1395 50       		.byte	0x50
 8388 1396 9F       		.byte	0x9f
 8389 1397 00000000 		.4byte	0
 8390 139b 00000000 		.4byte	0
 8391              	.LLST99:
 8392 139f 00000000 		.4byte	.LVL319
 8393 13a3 02000000 		.4byte	.LVL320
 8394 13a7 0100     		.2byte	0x1
 8395 13a9 50       		.byte	0x50
 8396 13aa 02000000 		.4byte	.LVL320
 8397 13ae 04000000 		.4byte	.LFE86
 8398 13b2 0400     		.2byte	0x4
 8399 13b4 F3       		.byte	0xf3
 8400 13b5 01       		.uleb128 0x1
 8401 13b6 50       		.byte	0x50
 8402 13b7 9F       		.byte	0x9f
 8403 13b8 00000000 		.4byte	0
 8404 13bc 00000000 		.4byte	0
 8405              	.LLST100:
 8406 13c0 00000000 		.4byte	.LVL319
 8407 13c4 02000000 		.4byte	.LVL320
 8408 13c8 0100     		.2byte	0x1
 8409 13ca 50       		.byte	0x50
 8410 13cb 02000000 		.4byte	.LVL320
 8411 13cf 04000000 		.4byte	.LFE86
 8412 13d3 0400     		.2byte	0x4
 8413 13d5 F3       		.byte	0xf3
 8414 13d6 01       		.uleb128 0x1
 8415 13d7 50       		.byte	0x50
 8416 13d8 9F       		.byte	0x9f
 8417 13d9 00000000 		.4byte	0
 8418 13dd 00000000 		.4byte	0
 8419              	.LLST101:
 8420 13e1 00000000 		.4byte	.LVL321
 8421 13e5 06000000 		.4byte	.LVL322
 8422 13e9 0100     		.2byte	0x1
 8423 13eb 50       		.byte	0x50
 8424 13ec 06000000 		.4byte	.LVL322
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 211


 8425 13f0 08000000 		.4byte	.LVL323
 8426 13f4 0400     		.2byte	0x4
 8427 13f6 F3       		.byte	0xf3
 8428 13f7 01       		.uleb128 0x1
 8429 13f8 50       		.byte	0x50
 8430 13f9 9F       		.byte	0x9f
 8431 13fa 08000000 		.4byte	.LVL323
 8432 13fe 0A000000 		.4byte	.LVL324
 8433 1402 0100     		.2byte	0x1
 8434 1404 50       		.byte	0x50
 8435 1405 0A000000 		.4byte	.LVL324
 8436 1409 0C000000 		.4byte	.LFE93
 8437 140d 0400     		.2byte	0x4
 8438 140f F3       		.byte	0xf3
 8439 1410 01       		.uleb128 0x1
 8440 1411 50       		.byte	0x50
 8441 1412 9F       		.byte	0x9f
 8442 1413 00000000 		.4byte	0
 8443 1417 00000000 		.4byte	0
 8444              	.LLST102:
 8445 141b 00000000 		.4byte	.LVL321
 8446 141f 06000000 		.4byte	.LVL322
 8447 1423 0100     		.2byte	0x1
 8448 1425 50       		.byte	0x50
 8449 1426 06000000 		.4byte	.LVL322
 8450 142a 08000000 		.4byte	.LVL323
 8451 142e 0400     		.2byte	0x4
 8452 1430 F3       		.byte	0xf3
 8453 1431 01       		.uleb128 0x1
 8454 1432 50       		.byte	0x50
 8455 1433 9F       		.byte	0x9f
 8456 1434 08000000 		.4byte	.LVL323
 8457 1438 0A000000 		.4byte	.LVL324
 8458 143c 0100     		.2byte	0x1
 8459 143e 50       		.byte	0x50
 8460 143f 0A000000 		.4byte	.LVL324
 8461 1443 0C000000 		.4byte	.LFE93
 8462 1447 0400     		.2byte	0x4
 8463 1449 F3       		.byte	0xf3
 8464 144a 01       		.uleb128 0x1
 8465 144b 50       		.byte	0x50
 8466 144c 9F       		.byte	0x9f
 8467 144d 00000000 		.4byte	0
 8468 1451 00000000 		.4byte	0
 8469              	.LLST103:
 8470 1455 00000000 		.4byte	.LVL325
 8471 1459 0A000000 		.4byte	.LVL326
 8472 145d 0100     		.2byte	0x1
 8473 145f 50       		.byte	0x50
 8474 1460 0A000000 		.4byte	.LVL326
 8475 1464 0C000000 		.4byte	.LVL327
 8476 1468 0400     		.2byte	0x4
 8477 146a F3       		.byte	0xf3
 8478 146b 01       		.uleb128 0x1
 8479 146c 50       		.byte	0x50
 8480 146d 9F       		.byte	0x9f
 8481 146e 0C000000 		.4byte	.LVL327
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 212


 8482 1472 0E000000 		.4byte	.LVL328
 8483 1476 0100     		.2byte	0x1
 8484 1478 50       		.byte	0x50
 8485 1479 0E000000 		.4byte	.LVL328
 8486 147d 10000000 		.4byte	.LFE95
 8487 1481 0400     		.2byte	0x4
 8488 1483 F3       		.byte	0xf3
 8489 1484 01       		.uleb128 0x1
 8490 1485 50       		.byte	0x50
 8491 1486 9F       		.byte	0x9f
 8492 1487 00000000 		.4byte	0
 8493 148b 00000000 		.4byte	0
 8494              	.LLST104:
 8495 148f 00000000 		.4byte	.LVL325
 8496 1493 0A000000 		.4byte	.LVL326
 8497 1497 0100     		.2byte	0x1
 8498 1499 50       		.byte	0x50
 8499 149a 0A000000 		.4byte	.LVL326
 8500 149e 0C000000 		.4byte	.LVL327
 8501 14a2 0400     		.2byte	0x4
 8502 14a4 F3       		.byte	0xf3
 8503 14a5 01       		.uleb128 0x1
 8504 14a6 50       		.byte	0x50
 8505 14a7 9F       		.byte	0x9f
 8506 14a8 0C000000 		.4byte	.LVL327
 8507 14ac 0E000000 		.4byte	.LVL328
 8508 14b0 0100     		.2byte	0x1
 8509 14b2 50       		.byte	0x50
 8510 14b3 0E000000 		.4byte	.LVL328
 8511 14b7 10000000 		.4byte	.LFE95
 8512 14bb 0400     		.2byte	0x4
 8513 14bd F3       		.byte	0xf3
 8514 14be 01       		.uleb128 0x1
 8515 14bf 50       		.byte	0x50
 8516 14c0 9F       		.byte	0x9f
 8517 14c1 00000000 		.4byte	0
 8518 14c5 00000000 		.4byte	0
 8519              	.LLST105:
 8520 14c9 00000000 		.4byte	.LVL329
 8521 14cd 08000000 		.4byte	.LVL331
 8522 14d1 0100     		.2byte	0x1
 8523 14d3 51       		.byte	0x51
 8524 14d4 08000000 		.4byte	.LVL331
 8525 14d8 30000000 		.4byte	.LVL337
 8526 14dc 0100     		.2byte	0x1
 8527 14de 54       		.byte	0x54
 8528 14df 30000000 		.4byte	.LVL337
 8529 14e3 32000000 		.4byte	.LVL338
 8530 14e7 0100     		.2byte	0x1
 8531 14e9 51       		.byte	0x51
 8532 14ea 32000000 		.4byte	.LVL338
 8533 14ee 40000000 		.4byte	.LVL341
 8534 14f2 0100     		.2byte	0x1
 8535 14f4 54       		.byte	0x54
 8536 14f5 40000000 		.4byte	.LVL341
 8537 14f9 48000000 		.4byte	.LFE96
 8538 14fd 0400     		.2byte	0x4
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 213


 8539 14ff F3       		.byte	0xf3
 8540 1500 01       		.uleb128 0x1
 8541 1501 51       		.byte	0x51
 8542 1502 9F       		.byte	0x9f
 8543 1503 00000000 		.4byte	0
 8544 1507 00000000 		.4byte	0
 8545              	.LLST106:
 8546 150b 08000000 		.4byte	.LVL331
 8547 150f 30000000 		.4byte	.LVL337
 8548 1513 0100     		.2byte	0x1
 8549 1515 53       		.byte	0x53
 8550 1516 34000000 		.4byte	.LVL339
 8551 151a 38000000 		.4byte	.LVL340
 8552 151e 0100     		.2byte	0x1
 8553 1520 53       		.byte	0x53
 8554 1521 00000000 		.4byte	0
 8555 1525 00000000 		.4byte	0
 8556              	.LLST107:
 8557 1529 02000000 		.4byte	.LVL330
 8558 152d 08000000 		.4byte	.LVL331
 8559 1531 0200     		.2byte	0x2
 8560 1533 30       		.byte	0x30
 8561 1534 9F       		.byte	0x9f
 8562 1535 08000000 		.4byte	.LVL331
 8563 1539 16000000 		.4byte	.LVL332
 8564 153d 0100     		.2byte	0x1
 8565 153f 51       		.byte	0x51
 8566 1540 1A000000 		.4byte	.LVL333
 8567 1544 28000000 		.4byte	.LVL334
 8568 1548 0100     		.2byte	0x1
 8569 154a 51       		.byte	0x51
 8570 154b 2C000000 		.4byte	.LVL335
 8571 154f 30000000 		.4byte	.LVL337
 8572 1553 0100     		.2byte	0x1
 8573 1555 51       		.byte	0x51
 8574 1556 30000000 		.4byte	.LVL337
 8575 155a 34000000 		.4byte	.LVL339
 8576 155e 0200     		.2byte	0x2
 8577 1560 30       		.byte	0x30
 8578 1561 9F       		.byte	0x9f
 8579 1562 34000000 		.4byte	.LVL339
 8580 1566 48000000 		.4byte	.LFE96
 8581 156a 0100     		.2byte	0x1
 8582 156c 51       		.byte	0x51
 8583 156d 00000000 		.4byte	0
 8584 1571 00000000 		.4byte	0
 8585              	.LLST108:
 8586 1575 00000000 		.4byte	.LVL342
 8587 1579 16000000 		.4byte	.LVL344
 8588 157d 0100     		.2byte	0x1
 8589 157f 50       		.byte	0x50
 8590 1580 16000000 		.4byte	.LVL344
 8591 1584 18000000 		.4byte	.LVL345
 8592 1588 0400     		.2byte	0x4
 8593 158a F3       		.byte	0xf3
 8594 158b 01       		.uleb128 0x1
 8595 158c 50       		.byte	0x50
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 214


 8596 158d 9F       		.byte	0x9f
 8597 158e 18000000 		.4byte	.LVL345
 8598 1592 20000000 		.4byte	.LVL347
 8599 1596 0100     		.2byte	0x1
 8600 1598 50       		.byte	0x50
 8601 1599 20000000 		.4byte	.LVL347
 8602 159d 28000000 		.4byte	.LFE97
 8603 15a1 0400     		.2byte	0x4
 8604 15a3 F3       		.byte	0xf3
 8605 15a4 01       		.uleb128 0x1
 8606 15a5 50       		.byte	0x50
 8607 15a6 9F       		.byte	0x9f
 8608 15a7 00000000 		.4byte	0
 8609 15ab 00000000 		.4byte	0
 8610              	.LLST109:
 8611 15af 00000000 		.4byte	.LVL342
 8612 15b3 04000000 		.4byte	.LVL343
 8613 15b7 0200     		.2byte	0x2
 8614 15b9 30       		.byte	0x30
 8615 15ba 9F       		.byte	0x9f
 8616 15bb 04000000 		.4byte	.LVL343
 8617 15bf 28000000 		.4byte	.LFE97
 8618 15c3 0100     		.2byte	0x1
 8619 15c5 53       		.byte	0x53
 8620 15c6 00000000 		.4byte	0
 8621 15ca 00000000 		.4byte	0
 8622              	.LLST110:
 8623 15ce 00000000 		.4byte	.LVL342
 8624 15d2 16000000 		.4byte	.LVL344
 8625 15d6 0200     		.2byte	0x2
 8626 15d8 30       		.byte	0x30
 8627 15d9 9F       		.byte	0x9f
 8628 15da 16000000 		.4byte	.LVL344
 8629 15de 18000000 		.4byte	.LVL345
 8630 15e2 0100     		.2byte	0x1
 8631 15e4 50       		.byte	0x50
 8632 15e5 18000000 		.4byte	.LVL345
 8633 15e9 20000000 		.4byte	.LVL347
 8634 15ed 0200     		.2byte	0x2
 8635 15ef 30       		.byte	0x30
 8636 15f0 9F       		.byte	0x9f
 8637 15f1 20000000 		.4byte	.LVL347
 8638 15f5 28000000 		.4byte	.LFE97
 8639 15f9 0100     		.2byte	0x1
 8640 15fb 50       		.byte	0x50
 8641 15fc 00000000 		.4byte	0
 8642 1600 00000000 		.4byte	0
 8643              	.LLST111:
 8644 1604 00000000 		.4byte	.LVL348
 8645 1608 04000000 		.4byte	.LVL349
 8646 160c 0200     		.2byte	0x2
 8647 160e 30       		.byte	0x30
 8648 160f 9F       		.byte	0x9f
 8649 1610 04000000 		.4byte	.LVL349
 8650 1614 1C000000 		.4byte	.LVL350
 8651 1618 0100     		.2byte	0x1
 8652 161a 53       		.byte	0x53
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 215


 8653 161b 20000000 		.4byte	.LVL351
 8654 161f 2C000000 		.4byte	.LFE98
 8655 1623 0100     		.2byte	0x1
 8656 1625 53       		.byte	0x53
 8657 1626 00000000 		.4byte	0
 8658 162a 00000000 		.4byte	0
 8659              	.LLST112:
 8660 162e 00000000 		.4byte	.LVL353
 8661 1632 07000000 		.4byte	.LVL355-1
 8662 1636 0100     		.2byte	0x1
 8663 1638 50       		.byte	0x50
 8664 1639 07000000 		.4byte	.LVL355-1
 8665 163d 10000000 		.4byte	.LFE87
 8666 1641 0100     		.2byte	0x1
 8667 1643 54       		.byte	0x54
 8668 1644 00000000 		.4byte	0
 8669 1648 00000000 		.4byte	0
 8670              	.LLST113:
 8671 164c 04000000 		.4byte	.LVL354
 8672 1650 07000000 		.4byte	.LVL355-1
 8673 1654 0100     		.2byte	0x1
 8674 1656 50       		.byte	0x50
 8675 1657 07000000 		.4byte	.LVL355-1
 8676 165b 10000000 		.4byte	.LFE87
 8677 165f 0100     		.2byte	0x1
 8678 1661 54       		.byte	0x54
 8679 1662 00000000 		.4byte	0
 8680 1666 00000000 		.4byte	0
 8681              		.section	.debug_aranges,"",%progbits
 8682 0000 0C010000 		.4byte	0x10c
 8683 0004 0200     		.2byte	0x2
 8684 0006 00000000 		.4byte	.Ldebug_info0
 8685 000a 04       		.byte	0x4
 8686 000b 00       		.byte	0
 8687 000c 0000     		.2byte	0
 8688 000e 0000     		.2byte	0
 8689 0010 00000000 		.4byte	.LFB88
 8690 0014 12000000 		.4byte	.LFE88-.LFB88
 8691 0018 00000000 		.4byte	.LFB94
 8692 001c 1E000000 		.4byte	.LFE94-.LFB94
 8693 0020 00000000 		.4byte	.LFB92
 8694 0024 1A000000 		.4byte	.LFE92-.LFB92
 8695 0028 00000000 		.4byte	.LFB89
 8696 002c 76000000 		.4byte	.LFE89-.LFB89
 8697 0030 00000000 		.4byte	.LFB90
 8698 0034 24000000 		.4byte	.LFE90-.LFB90
 8699 0038 00000000 		.4byte	.LFB91
 8700 003c 66000000 		.4byte	.LFE91-.LFB91
 8701 0040 00000000 		.4byte	.LFB68
 8702 0044 94000000 		.4byte	.LFE68-.LFB68
 8703 0048 00000000 		.4byte	.LFB70
 8704 004c 1C000000 		.4byte	.LFE70-.LFB70
 8705 0050 00000000 		.4byte	.LFB69
 8706 0054 4E000000 		.4byte	.LFE69-.LFB69
 8707 0058 00000000 		.4byte	.LFB75
 8708 005c 28000000 		.4byte	.LFE75-.LFB75
 8709 0060 00000000 		.4byte	.LFB76
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 216


 8710 0064 08010000 		.4byte	.LFE76-.LFB76
 8711 0068 00000000 		.4byte	.LFB71
 8712 006c 18000000 		.4byte	.LFE71-.LFB71
 8713 0070 00000000 		.4byte	.LFB72
 8714 0074 16000000 		.4byte	.LFE72-.LFB72
 8715 0078 00000000 		.4byte	.LFB73
 8716 007c 2C000000 		.4byte	.LFE73-.LFB73
 8717 0080 00000000 		.4byte	.LFB77
 8718 0084 7C000000 		.4byte	.LFE77-.LFB77
 8719 0088 00000000 		.4byte	.LFB78
 8720 008c 72000000 		.4byte	.LFE78-.LFB78
 8721 0090 00000000 		.4byte	.LFB79
 8722 0094 F8000000 		.4byte	.LFE79-.LFB79
 8723 0098 00000000 		.4byte	.LFB80
 8724 009c 28010000 		.4byte	.LFE80-.LFB80
 8725 00a0 00000000 		.4byte	.LFB74
 8726 00a4 30000000 		.4byte	.LFE74-.LFB74
 8727 00a8 00000000 		.4byte	.LFB81
 8728 00ac F8000000 		.4byte	.LFE81-.LFB81
 8729 00b0 00000000 		.4byte	.LFB82
 8730 00b4 7E000000 		.4byte	.LFE82-.LFB82
 8731 00b8 00000000 		.4byte	.LFB83
 8732 00bc 30000000 		.4byte	.LFE83-.LFB83
 8733 00c0 00000000 		.4byte	.LFB84
 8734 00c4 12000000 		.4byte	.LFE84-.LFB84
 8735 00c8 00000000 		.4byte	.LFB85
 8736 00cc 16000000 		.4byte	.LFE85-.LFB85
 8737 00d0 00000000 		.4byte	.LFB86
 8738 00d4 04000000 		.4byte	.LFE86-.LFB86
 8739 00d8 00000000 		.4byte	.LFB93
 8740 00dc 0C000000 		.4byte	.LFE93-.LFB93
 8741 00e0 00000000 		.4byte	.LFB95
 8742 00e4 10000000 		.4byte	.LFE95-.LFB95
 8743 00e8 00000000 		.4byte	.LFB96
 8744 00ec 48000000 		.4byte	.LFE96-.LFB96
 8745 00f0 00000000 		.4byte	.LFB97
 8746 00f4 28000000 		.4byte	.LFE97-.LFB97
 8747 00f8 00000000 		.4byte	.LFB98
 8748 00fc 2C000000 		.4byte	.LFE98-.LFB98
 8749 0100 00000000 		.4byte	.LFB87
 8750 0104 10000000 		.4byte	.LFE87-.LFB87
 8751 0108 00000000 		.4byte	0
 8752 010c 00000000 		.4byte	0
 8753              		.section	.debug_ranges,"",%progbits
 8754              	.Ldebug_ranges0:
 8755 0000 26000000 		.4byte	.LBB30
 8756 0004 64000000 		.4byte	.LBE30
 8757 0008 68000000 		.4byte	.LBB32
 8758 000c 76000000 		.4byte	.LBE32
 8759 0010 00000000 		.4byte	0
 8760 0014 00000000 		.4byte	0
 8761 0018 22000000 		.4byte	.LBB38
 8762 001c 5A000000 		.4byte	.LBE38
 8763 0020 5E000000 		.4byte	.LBB40
 8764 0024 6C000000 		.4byte	.LBE40
 8765 0028 00000000 		.4byte	0
 8766 002c 00000000 		.4byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 217


 8767 0030 20000000 		.4byte	.LBB50
 8768 0034 64000000 		.4byte	.LBE50
 8769 0038 68000000 		.4byte	.LBB52
 8770 003c 76000000 		.4byte	.LBE52
 8771 0040 00000000 		.4byte	0
 8772 0044 00000000 		.4byte	0
 8773 0048 00000000 		.4byte	.LFB88
 8774 004c 12000000 		.4byte	.LFE88
 8775 0050 00000000 		.4byte	.LFB94
 8776 0054 1E000000 		.4byte	.LFE94
 8777 0058 00000000 		.4byte	.LFB92
 8778 005c 1A000000 		.4byte	.LFE92
 8779 0060 00000000 		.4byte	.LFB89
 8780 0064 76000000 		.4byte	.LFE89
 8781 0068 00000000 		.4byte	.LFB90
 8782 006c 24000000 		.4byte	.LFE90
 8783 0070 00000000 		.4byte	.LFB91
 8784 0074 66000000 		.4byte	.LFE91
 8785 0078 00000000 		.4byte	.LFB68
 8786 007c 94000000 		.4byte	.LFE68
 8787 0080 00000000 		.4byte	.LFB70
 8788 0084 1C000000 		.4byte	.LFE70
 8789 0088 00000000 		.4byte	.LFB69
 8790 008c 4E000000 		.4byte	.LFE69
 8791 0090 00000000 		.4byte	.LFB75
 8792 0094 28000000 		.4byte	.LFE75
 8793 0098 00000000 		.4byte	.LFB76
 8794 009c 08010000 		.4byte	.LFE76
 8795 00a0 00000000 		.4byte	.LFB71
 8796 00a4 18000000 		.4byte	.LFE71
 8797 00a8 00000000 		.4byte	.LFB72
 8798 00ac 16000000 		.4byte	.LFE72
 8799 00b0 00000000 		.4byte	.LFB73
 8800 00b4 2C000000 		.4byte	.LFE73
 8801 00b8 00000000 		.4byte	.LFB77
 8802 00bc 7C000000 		.4byte	.LFE77
 8803 00c0 00000000 		.4byte	.LFB78
 8804 00c4 72000000 		.4byte	.LFE78
 8805 00c8 00000000 		.4byte	.LFB79
 8806 00cc F8000000 		.4byte	.LFE79
 8807 00d0 00000000 		.4byte	.LFB80
 8808 00d4 28010000 		.4byte	.LFE80
 8809 00d8 00000000 		.4byte	.LFB74
 8810 00dc 30000000 		.4byte	.LFE74
 8811 00e0 00000000 		.4byte	.LFB81
 8812 00e4 F8000000 		.4byte	.LFE81
 8813 00e8 00000000 		.4byte	.LFB82
 8814 00ec 7E000000 		.4byte	.LFE82
 8815 00f0 00000000 		.4byte	.LFB83
 8816 00f4 30000000 		.4byte	.LFE83
 8817 00f8 00000000 		.4byte	.LFB84
 8818 00fc 12000000 		.4byte	.LFE84
 8819 0100 00000000 		.4byte	.LFB85
 8820 0104 16000000 		.4byte	.LFE85
 8821 0108 00000000 		.4byte	.LFB86
 8822 010c 04000000 		.4byte	.LFE86
 8823 0110 00000000 		.4byte	.LFB93
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 218


 8824 0114 0C000000 		.4byte	.LFE93
 8825 0118 00000000 		.4byte	.LFB95
 8826 011c 10000000 		.4byte	.LFE95
 8827 0120 00000000 		.4byte	.LFB96
 8828 0124 48000000 		.4byte	.LFE96
 8829 0128 00000000 		.4byte	.LFB97
 8830 012c 28000000 		.4byte	.LFE97
 8831 0130 00000000 		.4byte	.LFB98
 8832 0134 2C000000 		.4byte	.LFE98
 8833 0138 00000000 		.4byte	.LFB87
 8834 013c 10000000 		.4byte	.LFE87
 8835 0140 00000000 		.4byte	0
 8836 0144 00000000 		.4byte	0
 8837              		.section	.debug_line,"",%progbits
 8838              	.Ldebug_line0:
 8839 0000 9B070000 		.section	.debug_str,"MS",%progbits,1
 8839      02008102 
 8839      00000201 
 8839      FB0E0D00 
 8839      01010101 
 8840              	.LASF115:
 8841 0000 75785072 		.ascii	"uxPreviousMessagesWaiting\000"
 8841      6576696F 
 8841      75734D65 
 8841      73736167 
 8841      65735761 
 8842              	.LASF73:
 8843 001a 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 8843      6967696E 
 8843      616C4241 
 8843      53455052 
 8843      4900
 8844              	.LASF91:
 8845 002c 75635175 		.ascii	"ucQueueType\000"
 8845      65756554 
 8845      79706500 
 8846              	.LASF112:
 8847 0038 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 8847      75654765 
 8847      6E657269 
 8847      6353656E 
 8847      6446726F 
 8848              	.LASF105:
 8849 0051 70727649 		.ascii	"prvInitialiseMutex\000"
 8849      6E697469 
 8849      616C6973 
 8849      654D7574 
 8849      657800
 8850              	.LASF107:
 8851 0064 75784D75 		.ascii	"uxMutexLength\000"
 8851      7465784C 
 8851      656E6774 
 8851      6800
 8852              	.LASF128:
 8853 0072 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 8853      6575654D 
 8853      65737361 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 219


 8853      67657357 
 8853      61697469 
 8854              	.LASF3:
 8855 0089 73697A65 		.ascii	"size_t\000"
 8855      5F7400
 8856              	.LASF61:
 8857 0090 784D7574 		.ascii	"xMutexHolder\000"
 8857      6578486F 
 8857      6C646572 
 8857      00
 8858              	.LASF44:
 8859 009d 54696D65 		.ascii	"TimeOut_t\000"
 8859      4F75745F 
 8859      7400
 8860              	.LASF166:
 8861 00a7 756C4E65 		.ascii	"ulNewMaskValue\000"
 8861      774D6173 
 8861      6B56616C 
 8861      756500
 8862              	.LASF72:
 8863 00b6 51756575 		.ascii	"QueueRegistryItem_t\000"
 8863      65526567 
 8863      69737472 
 8863      79497465 
 8863      6D5F7400 
 8864              	.LASF113:
 8865 00ca 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 8865      67686572 
 8865      5072696F 
 8865      72697479 
 8865      5461736B 
 8866              	.LASF132:
 8867 00e4 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 8867      75654973 
 8867      51756575 
 8867      65456D70 
 8867      74794672 
 8868              	.LASF161:
 8869 00fe 2E2E5C2E 		.ascii	"..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\queue.c\000"
 8869      2E5C2E2E 
 8869      5C467265 
 8869      6552544F 
 8869      535C4672 
 8870              	.LASF6:
 8871 0128 5F5F7569 		.ascii	"__uint8_t\000"
 8871      6E74385F 
 8871      7400
 8872              	.LASF124:
 8873 0132 78517565 		.ascii	"xQueuePeek\000"
 8873      75655065 
 8873      656B00
 8874              	.LASF127:
 8875 013d 78517565 		.ascii	"xQueuePeekFromISR\000"
 8875      75655065 
 8875      656B4672 
 8875      6F6D4953 
 8875      5200
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 220


 8876              	.LASF74:
 8877 014f 756C4E65 		.ascii	"ulNewBASEPRI\000"
 8877      77424153 
 8877      45505249 
 8877      00
 8878              	.LASF85:
 8879 015c 70727643 		.ascii	"prvCopyDataFromQueue\000"
 8879      6F707944 
 8879      61746146 
 8879      726F6D51 
 8879      75657565 
 8880              	.LASF92:
 8881 0171 70784E65 		.ascii	"pxNewQueue\000"
 8881      77517565 
 8881      756500
 8882              	.LASF14:
 8883 017c 6C6F6E67 		.ascii	"long long unsigned int\000"
 8883      206C6F6E 
 8883      6720756E 
 8883      7369676E 
 8883      65642069 
 8884              	.LASF87:
 8885 0193 784E6577 		.ascii	"xNewQueue\000"
 8885      51756575 
 8885      6500
 8886              	.LASF81:
 8887 019d 70727643 		.ascii	"prvCopyDataToQueue\000"
 8887      6F707944 
 8887      61746154 
 8887      6F517565 
 8887      756500
 8888              	.LASF68:
 8889 01b0 51554555 		.ascii	"QUEUE_REGISTRY_ITEM\000"
 8889      455F5245 
 8889      47495354 
 8889      52595F49 
 8889      54454D00 
 8890              	.LASF45:
 8891 01c4 51756575 		.ascii	"QueueHandle_t\000"
 8891      6548616E 
 8891      646C655F 
 8891      7400
 8892              	.LASF140:
 8893 01d2 49544D5F 		.ascii	"ITM_RxBuffer\000"
 8893      52784275 
 8893      66666572 
 8893      00
 8894              	.LASF41:
 8895 01df 7854494D 		.ascii	"xTIME_OUT\000"
 8895      455F4F55 
 8895      5400
 8896              	.LASF37:
 8897 01e9 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 8897      495F4C49 
 8897      53545F49 
 8897      54454D00 
 8898              	.LASF122:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 221


 8899 01f9 75784869 		.ascii	"uxHighestWaitingPriority\000"
 8899      67686573 
 8899      74576169 
 8899      74696E67 
 8899      5072696F 
 8900              	.LASF1:
 8901 0212 6C6F6E67 		.ascii	"long long int\000"
 8901      206C6F6E 
 8901      6720696E 
 8901      7400
 8902              	.LASF5:
 8903 0220 7369676E 		.ascii	"signed char\000"
 8903      65642063 
 8903      68617200 
 8904              	.LASF146:
 8905 022c 76546173 		.ascii	"vTaskMissedYield\000"
 8905      6B4D6973 
 8905      73656459 
 8905      69656C64 
 8905      00
 8906              	.LASF157:
 8907 023d 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 8907      6B507269 
 8907      6F726974 
 8907      79446973 
 8907      696E6865 
 8908              	.LASF100:
 8909 0261 78546963 		.ascii	"xTicksToWait\000"
 8909      6B73546F 
 8909      57616974 
 8909      00
 8910              	.LASF117:
 8911 026e 78517565 		.ascii	"xQueueGiveFromISR\000"
 8911      75654769 
 8911      76654672 
 8911      6F6D4953 
 8911      5200
 8912              	.LASF4:
 8913 0280 5F5F696E 		.ascii	"__int8_t\000"
 8913      74385F74 
 8913      00
 8914              	.LASF125:
 8915 0289 70634F72 		.ascii	"pcOriginalReadPosition\000"
 8915      6967696E 
 8915      616C5265 
 8915      6164506F 
 8915      73697469 
 8916              	.LASF11:
 8917 02a0 6C6F6E67 		.ascii	"long int\000"
 8917      20696E74 
 8917      00
 8918              	.LASF163:
 8919 02a9 74736B54 		.ascii	"tskTaskControlBlock\000"
 8919      61736B43 
 8919      6F6E7472 
 8919      6F6C426C 
 8919      6F636B00 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 222


 8920              	.LASF55:
 8921 02bd 6354784C 		.ascii	"cTxLock\000"
 8921      6F636B00 
 8922              	.LASF40:
 8923 02c5 5461736B 		.ascii	"TaskHandle_t\000"
 8923      48616E64 
 8923      6C655F74 
 8923      00
 8924              	.LASF167:
 8925 02d2 6D656D63 		.ascii	"memcpy\000"
 8925      707900
 8926              	.LASF35:
 8927 02d9 784C6973 		.ascii	"xListEnd\000"
 8927      74456E64 
 8927      00
 8928              	.LASF25:
 8929 02e2 5469636B 		.ascii	"TickType_t\000"
 8929      54797065 
 8929      5F7400
 8930              	.LASF22:
 8931 02ed 646F7562 		.ascii	"double\000"
 8931      6C6500
 8932              	.LASF58:
 8933 02f4 70635265 		.ascii	"pcReadFrom\000"
 8933      61644672 
 8933      6F6D00
 8934              	.LASF23:
 8935 02ff 42617365 		.ascii	"BaseType_t\000"
 8935      54797065 
 8935      5F7400
 8936              	.LASF96:
 8937 030a 78517565 		.ascii	"xQueueCreateCountingSemaphore\000"
 8937      75654372 
 8937      65617465 
 8937      436F756E 
 8937      74696E67 
 8938              	.LASF104:
 8939 0328 7854696D 		.ascii	"xTimeOut\000"
 8939      654F7574 
 8939      00
 8940              	.LASF121:
 8941 0331 75785365 		.ascii	"uxSemaphoreCount\000"
 8941      6D617068 
 8941      6F726543 
 8941      6F756E74 
 8941      00
 8942              	.LASF88:
 8943 0342 70727649 		.ascii	"prvInitialiseNewQueue\000"
 8943      6E697469 
 8943      616C6973 
 8943      654E6577 
 8943      51756575 
 8944              	.LASF110:
 8945 0358 784D7574 		.ascii	"xMutex\000"
 8945      657800
 8946              	.LASF12:
 8947 035f 5F5F7569 		.ascii	"__uint32_t\000"
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 223


 8947      6E743332 
 8947      5F7400
 8948              	.LASF42:
 8949 036a 784F7665 		.ascii	"xOverflowCount\000"
 8949      72666C6F 
 8949      77436F75 
 8949      6E7400
 8950              	.LASF148:
 8951 0379 7076506F 		.ascii	"pvPortMalloc\000"
 8951      72744D61 
 8951      6C6C6F63 
 8951      00
 8952              	.LASF142:
 8953 0386 76506F72 		.ascii	"vPortEnterCritical\000"
 8953      74456E74 
 8953      65724372 
 8953      69746963 
 8953      616C00
 8954              	.LASF152:
 8955 0399 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 8955      6B506C61 
 8955      63654F6E 
 8955      4576656E 
 8955      744C6973 
 8956              	.LASF47:
 8957 03af 70634865 		.ascii	"pcHead\000"
 8957      616400
 8958              	.LASF0:
 8959 03b6 756E7369 		.ascii	"unsigned int\000"
 8959      676E6564 
 8959      20696E74 
 8959      00
 8960              	.LASF123:
 8961 03c3 78517565 		.ascii	"xQueueTakeMutexRecursive\000"
 8961      75655461 
 8961      6B654D75 
 8961      74657852 
 8961      65637572 
 8962              	.LASF79:
 8963 03dc 78526574 		.ascii	"xReturn\000"
 8963      75726E00 
 8964              	.LASF43:
 8965 03e4 7854696D 		.ascii	"xTimeOnEntering\000"
 8965      654F6E45 
 8965      6E746572 
 8965      696E6700 
 8966              	.LASF33:
 8967 03f4 75784E75 		.ascii	"uxNumberOfItems\000"
 8967      6D626572 
 8967      4F664974 
 8967      656D7300 
 8968              	.LASF13:
 8969 0404 6C6F6E67 		.ascii	"long unsigned int\000"
 8969      20756E73 
 8969      69676E65 
 8969      6420696E 
 8969      7400
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 224


 8970              	.LASF80:
 8971 0416 70727649 		.ascii	"prvIsQueueEmpty\000"
 8971      73517565 
 8971      7565456D 
 8971      70747900 
 8972              	.LASF119:
 8973 0426 78517565 		.ascii	"xQueueSemaphoreTake\000"
 8973      75655365 
 8973      6D617068 
 8973      6F726554 
 8973      616B6500 
 8974              	.LASF137:
 8975 043a 76517565 		.ascii	"vQueueAddToRegistry\000"
 8975      75654164 
 8975      64546F52 
 8975      65676973 
 8975      74727900 
 8976              	.LASF99:
 8977 044e 78517565 		.ascii	"xQueueGenericSend\000"
 8977      75654765 
 8977      6E657269 
 8977      6353656E 
 8977      6400
 8978              	.LASF9:
 8979 0460 73686F72 		.ascii	"short unsigned int\000"
 8979      7420756E 
 8979      7369676E 
 8979      65642069 
 8979      6E7400
 8980              	.LASF103:
 8981 0473 78596965 		.ascii	"xYieldRequired\000"
 8981      6C645265 
 8981      71756972 
 8981      656400
 8982              	.LASF63:
 8983 0482 53656D61 		.ascii	"SemaphoreData_t\000"
 8983      70686F72 
 8983      65446174 
 8983      615F7400 
 8984              	.LASF118:
 8985 0492 78517565 		.ascii	"xQueueReceive\000"
 8985      75655265 
 8985      63656976 
 8985      6500
 8986              	.LASF106:
 8987 04a0 78517565 		.ascii	"xQueueCreateMutex\000"
 8987      75654372 
 8987      65617465 
 8987      4D757465 
 8987      7800
 8988              	.LASF71:
 8989 04b2 78517565 		.ascii	"xQueueRegistryItem\000"
 8989      75655265 
 8989      67697374 
 8989      72794974 
 8989      656D00
 8990              	.LASF129:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 225


 8991 04c5 75785265 		.ascii	"uxReturn\000"
 8991      7475726E 
 8991      00
 8992              	.LASF159:
 8993 04ce 76506F72 		.ascii	"vPortFree\000"
 8993      74467265 
 8993      6500
 8994              	.LASF126:
 8995 04d8 78517565 		.ascii	"xQueueReceiveFromISR\000"
 8995      75655265 
 8995      63656976 
 8995      6546726F 
 8995      6D495352 
 8996              	.LASF111:
 8997 04ed 70784D75 		.ascii	"pxMutex\000"
 8997      74657800 
 8998              	.LASF56:
 8999 04f5 51756575 		.ascii	"QueuePointers\000"
 8999      65506F69 
 8999      6E746572 
 8999      7300
 9000              	.LASF15:
 9001 0503 73697A65 		.ascii	"sizetype\000"
 9001      74797065 
 9001      00
 9002              	.LASF2:
 9003 050c 6C6F6E67 		.ascii	"long double\000"
 9003      20646F75 
 9003      626C6500 
 9004              	.LASF136:
 9005 0518 70635265 		.ascii	"pcReturn\000"
 9005      7475726E 
 9005      00
 9006              	.LASF154:
 9007 0521 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 9007      6B476574 
 9007      43757272 
 9007      656E7454 
 9007      61736B48 
 9008              	.LASF139:
 9009 053b 76517565 		.ascii	"vQueueDelete\000"
 9009      75654465 
 9009      6C657465 
 9009      00
 9010              	.LASF164:
 9011 0548 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 9011      72745261 
 9011      69736542 
 9011      41534550 
 9011      524900
 9012              	.LASF67:
 9013 055b 51756575 		.ascii	"Queue_t\000"
 9013      655F7400 
 9014              	.LASF97:
 9015 0563 75784D61 		.ascii	"uxMaxCount\000"
 9015      78436F75 
 9015      6E7400
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 226


 9016              	.LASF89:
 9017 056e 75785175 		.ascii	"uxQueueLength\000"
 9017      6575654C 
 9017      656E6774 
 9017      6800
 9018              	.LASF116:
 9019 057c 75784E75 		.ascii	"uxNumberOfTasks\000"
 9019      6D626572 
 9019      4F665461 
 9019      736B7300 
 9020              	.LASF38:
 9021 058c 4D696E69 		.ascii	"MiniListItem_t\000"
 9021      4C697374 
 9021      4974656D 
 9021      5F7400
 9022              	.LASF165:
 9023 059b 76506F72 		.ascii	"vPortSetBASEPRI\000"
 9023      74536574 
 9023      42415345 
 9023      50524900 
 9024              	.LASF50:
 9025 05ab 78546173 		.ascii	"xTasksWaitingToReceive\000"
 9025      6B735761 
 9025      6974696E 
 9025      67546F52 
 9025      65636569 
 9026              	.LASF64:
 9027 05c2 78517565 		.ascii	"xQueue\000"
 9027      756500
 9028              	.LASF28:
 9029 05c9 70785072 		.ascii	"pxPrevious\000"
 9029      6576696F 
 9029      757300
 9030              	.LASF131:
 9031 05d4 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 9031      6575654D 
 9031      65737361 
 9031      67657357 
 9031      61697469 
 9032              	.LASF65:
 9033 05f2 7853656D 		.ascii	"xSemaphore\000"
 9033      6170686F 
 9033      726500
 9034              	.LASF78:
 9035 05fd 75784869 		.ascii	"uxHighestPriorityOfWaitingTasks\000"
 9035      67686573 
 9035      74507269 
 9035      6F726974 
 9035      794F6657 
 9036              	.LASF82:
 9037 061d 70764974 		.ascii	"pvItemToQueue\000"
 9037      656D546F 
 9037      51756575 
 9037      6500
 9038              	.LASF162:
 9039 062b 453A5C47 		.ascii	"E:\\GIT Hub Project\\protocov\\Protocov\\Protocov.c"
 9039      49542048 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 227


 9039      75622050 
 9039      726F6A65 
 9039      63745C70 
 9040 065a 7964736E 		.ascii	"ydsn\000"
 9040      00
 9041              	.LASF21:
 9042 065f 666C6F61 		.ascii	"float\000"
 9042      7400
 9043              	.LASF66:
 9044 0665 78515545 		.ascii	"xQUEUE\000"
 9044      554500
 9045              	.LASF34:
 9046 066c 7078496E 		.ascii	"pxIndex\000"
 9046      64657800 
 9047              	.LASF30:
 9048 0674 7076436F 		.ascii	"pvContainer\000"
 9048      6E746169 
 9048      6E657200 
 9049              	.LASF70:
 9050 0680 7848616E 		.ascii	"xHandle\000"
 9050      646C6500 
 9051              	.LASF102:
 9052 0688 78456E74 		.ascii	"xEntryTimeSet\000"
 9052      72795469 
 9052      6D655365 
 9052      7400
 9053              	.LASF52:
 9054 0696 75784C65 		.ascii	"uxLength\000"
 9054      6E677468 
 9054      00
 9055              	.LASF120:
 9056 069f 78496E68 		.ascii	"xInheritanceOccurred\000"
 9056      65726974 
 9056      616E6365 
 9056      4F636375 
 9056      72726564 
 9057              	.LASF60:
 9058 06b4 53656D61 		.ascii	"SemaphoreData\000"
 9058      70686F72 
 9058      65446174 
 9058      6100
 9059              	.LASF19:
 9060 06c2 696E7433 		.ascii	"int32_t\000"
 9060      325F7400 
 9061              	.LASF7:
 9062 06ca 756E7369 		.ascii	"unsigned char\000"
 9062      676E6564 
 9062      20636861 
 9062      7200
 9063              	.LASF62:
 9064 06d8 75785265 		.ascii	"uxRecursiveCallCount\000"
 9064      63757273 
 9064      69766543 
 9064      616C6C43 
 9064      6F756E74 
 9065              	.LASF8:
 9066 06ed 73686F72 		.ascii	"short int\000"
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 228


 9066      7420696E 
 9066      7400
 9067              	.LASF54:
 9068 06f7 6352784C 		.ascii	"cRxLock\000"
 9068      6F636B00 
 9069              	.LASF59:
 9070 06ff 51756575 		.ascii	"QueuePointers_t\000"
 9070      65506F69 
 9070      6E746572 
 9070      735F7400 
 9071              	.LASF153:
 9072 070f 78546173 		.ascii	"xTaskResumeAll\000"
 9072      6B526573 
 9072      756D6541 
 9072      6C6C00
 9073              	.LASF133:
 9074 071e 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 9074      75654973 
 9074      51756575 
 9074      6546756C 
 9074      6C46726F 
 9075              	.LASF94:
 9076 0737 78517565 		.ascii	"xQueueGenericCreate\000"
 9076      75654765 
 9076      6E657269 
 9076      63437265 
 9076      61746500 
 9077              	.LASF32:
 9078 074b 784C4953 		.ascii	"xLIST\000"
 9078      5400
 9079              	.LASF109:
 9080 0751 78517565 		.ascii	"xQueueGiveMutexRecursive\000"
 9080      75654769 
 9080      76654D75 
 9080      74657852 
 9080      65637572 
 9081              	.LASF160:
 9082 076a 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 9082      43313120 
 9082      352E342E 
 9082      31203230 
 9082      31363036 
 9083 079d 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 9083      20726576 
 9083      6973696F 
 9083      6E203233 
 9083      37373135 
 9084 07d0 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 9084      66756E63 
 9084      74696F6E 
 9084      2D736563 
 9084      74696F6E 
 9085              	.LASF39:
 9086 07f8 4C697374 		.ascii	"List_t\000"
 9086      5F7400
 9087              	.LASF108:
 9088 07ff 75784D75 		.ascii	"uxMutexSize\000"
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 229


 9088      74657853 
 9088      697A6500 
 9089              	.LASF114:
 9090 080b 75785361 		.ascii	"uxSavedInterruptStatus\000"
 9090      76656449 
 9090      6E746572 
 9090      72757074 
 9090      53746174 
 9091              	.LASF76:
 9092 0822 70727649 		.ascii	"prvIsQueueFull\000"
 9092      73517565 
 9092      75654675 
 9092      6C6C00
 9093              	.LASF145:
 9094 0831 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 9094      6B52656D 
 9094      6F766546 
 9094      726F6D45 
 9094      76656E74 
 9095              	.LASF51:
 9096 084a 75784D65 		.ascii	"uxMessagesWaiting\000"
 9096      73736167 
 9096      65735761 
 9096      6974696E 
 9096      6700
 9097              	.LASF84:
 9098 085c 70764275 		.ascii	"pvBuffer\000"
 9098      66666572 
 9098      00
 9099              	.LASF77:
 9100 0865 70785175 		.ascii	"pxQueue\000"
 9100      65756500 
 9101              	.LASF93:
 9102 086d 78517565 		.ascii	"xQueueGenericReset\000"
 9102      75654765 
 9102      6E657269 
 9102      63526573 
 9102      657400
 9103              	.LASF16:
 9104 0880 63686172 		.ascii	"char\000"
 9104      00
 9105              	.LASF143:
 9106 0885 76506F72 		.ascii	"vPortExitCritical\000"
 9106      74457869 
 9106      74437269 
 9106      74696361 
 9106      6C00
 9107              	.LASF101:
 9108 0897 78436F70 		.ascii	"xCopyPosition\000"
 9108      79506F73 
 9108      6974696F 
 9108      6E00
 9109              	.LASF156:
 9110 08a5 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 9110      736B496E 
 9110      6372656D 
 9110      656E744D 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 230


 9110      75746578 
 9111              	.LASF69:
 9112 08c3 70635175 		.ascii	"pcQueueName\000"
 9112      6575654E 
 9112      616D6500 
 9113              	.LASF86:
 9114 08cf 70727655 		.ascii	"prvUnlockQueue\000"
 9114      6E6C6F63 
 9114      6B517565 
 9114      756500
 9115              	.LASF141:
 9116 08de 78517565 		.ascii	"xQueueRegistry\000"
 9116      75655265 
 9116      67697374 
 9116      727900
 9117              	.LASF36:
 9118 08ed 4C697374 		.ascii	"ListItem_t\000"
 9118      4974656D 
 9118      5F7400
 9119              	.LASF57:
 9120 08f8 70635461 		.ascii	"pcTail\000"
 9120      696C00
 9121              	.LASF10:
 9122 08ff 5F5F696E 		.ascii	"__int32_t\000"
 9122      7433325F 
 9122      7400
 9123              	.LASF151:
 9124 0909 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 9124      6B436865 
 9124      636B466F 
 9124      7254696D 
 9124      654F7574 
 9125              	.LASF158:
 9126 091e 78546173 		.ascii	"xTaskPriorityInherit\000"
 9126      6B507269 
 9126      6F726974 
 9126      79496E68 
 9126      65726974 
 9127              	.LASF90:
 9128 0933 70756351 		.ascii	"pucQueueStorage\000"
 9128      75657565 
 9128      53746F72 
 9128      61676500 
 9129              	.LASF134:
 9130 0943 7078456E 		.ascii	"pxEntryToWrite\000"
 9130      74727954 
 9130      6F577269 
 9130      746500
 9131              	.LASF31:
 9132 0952 784C4953 		.ascii	"xLIST_ITEM\000"
 9132      545F4954 
 9132      454D00
 9133              	.LASF138:
 9134 095d 76517565 		.ascii	"vQueueUnregisterQueue\000"
 9134      7565556E 
 9134      72656769 
 9134      73746572 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 231


 9134      51756575 
 9135              	.LASF155:
 9136 0973 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 9136      736B4765 
 9136      744E756D 
 9136      6265724F 
 9136      66546173 
 9137              	.LASF17:
 9138 098a 696E7438 		.ascii	"int8_t\000"
 9138      5F7400
 9139              	.LASF83:
 9140 0991 78506F73 		.ascii	"xPosition\000"
 9140      6974696F 
 9140      6E00
 9141              	.LASF98:
 9142 099b 7578496E 		.ascii	"uxInitialCount\000"
 9142      69746961 
 9142      6C436F75 
 9142      6E7400
 9143              	.LASF150:
 9144 09aa 76546173 		.ascii	"vTaskSuspendAll\000"
 9144      6B537573 
 9144      70656E64 
 9144      416C6C00 
 9145              	.LASF149:
 9146 09ba 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 9146      6B496E74 
 9146      65726E61 
 9146      6C536574 
 9146      54696D65 
 9147              	.LASF29:
 9148 09d7 70764F77 		.ascii	"pvOwner\000"
 9148      6E657200 
 9149              	.LASF49:
 9150 09df 78546173 		.ascii	"xTasksWaitingToSend\000"
 9150      6B735761 
 9150      6974696E 
 9150      67546F53 
 9150      656E6400 
 9151              	.LASF26:
 9152 09f3 78497465 		.ascii	"xItemValue\000"
 9152      6D56616C 
 9152      756500
 9153              	.LASF95:
 9154 09fe 78517565 		.ascii	"xQueueSizeInBytes\000"
 9154      75655369 
 9154      7A65496E 
 9154      42797465 
 9154      7300
 9155              	.LASF46:
 9156 0a10 51756575 		.ascii	"QueueDefinition\000"
 9156      65446566 
 9156      696E6974 
 9156      696F6E00 
 9157              	.LASF18:
 9158 0a20 75696E74 		.ascii	"uint8_t\000"
 9158      385F7400 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\cc2LTnxN.s 			page 232


 9159              	.LASF48:
 9160 0a28 70635772 		.ascii	"pcWriteTo\000"
 9160      69746554 
 9160      6F00
 9161              	.LASF75:
 9162 0a32 70727647 		.ascii	"prvGetDisinheritPriorityAfterTimeout\000"
 9162      65744469 
 9162      73696E68 
 9162      65726974 
 9162      5072696F 
 9163              	.LASF53:
 9164 0a57 75784974 		.ascii	"uxItemSize\000"
 9164      656D5369 
 9164      7A6500
 9165              	.LASF27:
 9166 0a62 70784E65 		.ascii	"pxNext\000"
 9166      787400
 9167              	.LASF147:
 9168 0a69 764C6973 		.ascii	"vListInitialise\000"
 9168      74496E69 
 9168      7469616C 
 9168      69736500 
 9169              	.LASF144:
 9170 0a79 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 9170      6B507269 
 9170      6F726974 
 9170      79446973 
 9170      696E6865 
 9171              	.LASF130:
 9172 0a91 75785175 		.ascii	"uxQueueSpacesAvailable\000"
 9172      65756553 
 9172      70616365 
 9172      73417661 
 9172      696C6162 
 9173              	.LASF135:
 9174 0aa8 70635175 		.ascii	"pcQueueGetName\000"
 9174      65756547 
 9174      65744E61 
 9174      6D6500
 9175              	.LASF24:
 9176 0ab7 55426173 		.ascii	"UBaseType_t\000"
 9176      65547970 
 9176      655F7400 
 9177              	.LASF20:
 9178 0ac3 75696E74 		.ascii	"uint32_t\000"
 9178      33325F74 
 9178      00
 9179              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
