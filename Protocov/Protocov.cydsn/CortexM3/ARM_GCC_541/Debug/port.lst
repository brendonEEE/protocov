ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskExitError,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  23              		.type	prvTaskExitError, %function
  24              	prvTaskExitError:
  25              	.LFB69:
  26              		.file 1 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\portable\\GCC\\ARM_CM3\\port.c"
   1:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*
   2:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * FreeRTOS Kernel <DEVELOPMENT BRANCH>
   3:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  *
   5:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * SPDX-License-Identifier: MIT
   6:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  *
   7:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   9:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * the Software without restriction, including without limitation the rights to
  10:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * subject to the following conditions:
  13:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  *
  14:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * The above copyright notice and this permission notice shall be included in all
  15:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * copies or substantial portions of the Software.
  16:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  *
  17:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  *
  24:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * https://www.FreeRTOS.org
  25:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * https://github.com/FreeRTOS
  26:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  *
  27:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  */
  28:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
  29:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------
  30:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** * Implementation of functions defined in portable.h for the ARM CM3 port.
  31:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** *----------------------------------------------------------*/
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 2


  32:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
  33:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /* Scheduler includes. */
  34:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #include "FreeRTOS.h"
  35:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #include "task.h"
  36:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
  37:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /* Constants required to manipulate the core.  Registers first... */
  38:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_CTRL_REG             ( *( ( volatile uint32_t * ) 0xe000e010 ) )
  39:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_LOAD_REG             ( *( ( volatile uint32_t * ) 0xe000e014 ) )
  40:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG    ( *( ( volatile uint32_t * ) 0xe000e018 ) )
  41:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SHPR3_REG                    ( *( ( volatile uint32_t * ) 0xe000ed20 ) )
  42:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /* ...then bits in the registers. */
  43:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_CLK_BIT              ( 1UL << 2UL )
  44:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_INT_BIT              ( 1UL << 1UL )
  45:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT           ( 1UL << 0UL )
  46:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT       ( 1UL << 16UL )
  47:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PENDSVCLEAR_BIT              ( 1UL << 27UL )
  48:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PEND_SYSTICK_SET_BIT         ( 1UL << 26UL )
  49:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT       ( 1UL << 25UL )
  50:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
  51:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portMIN_INTERRUPT_PRIORITY            ( 255UL )
  52:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portNVIC_PENDSV_PRI                   ( ( ( uint32_t ) portMIN_INTERRUPT_PRIORITY ) << 16UL
  53:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portNVIC_SYSTICK_PRI                  ( ( ( uint32_t ) portMIN_INTERRUPT_PRIORITY ) << 24UL
  54:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
  55:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /* Constants required to check the validity of an interrupt priority. */
  56:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER       ( 16 )
  57:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16       ( 0xE000E3F0 )
  58:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portAIRCR_REG                         ( *( ( volatile uint32_t * ) 0xE000ED0C ) )
  59:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portMAX_8_BIT_VALUE                   ( ( uint8_t ) 0xff )
  60:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portTOP_BIT_OF_BYTE                   ( ( uint8_t ) 0x80 )
  61:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portMAX_PRIGROUP_BITS                 ( ( uint8_t ) 7 )
  62:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portPRIORITY_GROUP_MASK               ( 0x07UL << 8UL )
  63:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portPRIGROUP_SHIFT                    ( 8UL )
  64:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
  65:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  66:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portVECTACTIVE_MASK                   ( 0xFFUL )
  67:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
  68:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /* Constants required to set up the initial stack. */
  69:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portINITIAL_XPSR                      ( 0x01000000UL )
  70:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
  71:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /* The systick is a 24-bit counter. */
  72:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portMAX_24_BIT_NUMBER                 ( 0xffffffUL )
  73:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
  74:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
  75:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * occurred while the SysTick counter is stopped during tickless idle
  76:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * calculations. */
  77:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portMISSED_COUNTS_FACTOR              ( 94UL )
  78:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
  79:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  80:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  81:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #define portSTART_ADDRESS_MASK                ( ( StackType_t ) 0xfffffffeUL )
  82:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
  83:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /* Let the user override the default SysTick clock rate.  If defined by the
  84:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * user, this symbol must equal the SysTick clock rate when the CLK bit is 0 in the
  85:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * configuration register. */
  86:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  87:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     #define configSYSTICK_CLOCK_HZ             ( configCPU_CLOCK_HZ )
  88:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* Ensure the SysTick is clocked at the same frequency as the core. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 3


  89:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     #define portNVIC_SYSTICK_CLK_BIT_CONFIG    ( portNVIC_SYSTICK_CLK_BIT )
  90:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #else
  91:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* Select the option to clock SysTick not at the same frequency as the core. */
  92:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     #define portNVIC_SYSTICK_CLK_BIT_CONFIG    ( 0 )
  93:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #endif
  94:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
  95:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
  96:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * prvTaskExitError() in case it messes up unwinding of the stack in the
  97:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * debugger. */
  98:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #ifdef configTASK_RETURN_ADDRESS
  99:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     #define portTASK_RETURN_ADDRESS    configTASK_RETURN_ADDRESS
 100:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #else
 101:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     #define portTASK_RETURN_ADDRESS    prvTaskExitError
 102:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #endif
 103:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 104:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*
 105:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 106:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * file is weak to allow application writers to change the timer used to
 107:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * generate the tick interrupt.
 108:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  */
 109:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** void vPortSetupTimerInterrupt( void );
 110:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 111:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*
 112:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * Exception handlers.
 113:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  */
 114:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** void xPortPendSVHandler( void ) __attribute__( ( naked ) );
 115:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** void xPortSysTickHandler( void );
 116:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** void vPortSVCHandler( void ) __attribute__( ( naked ) );
 117:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 118:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*
 119:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 120:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  */
 121:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** static void prvPortStartFirstTask( void ) __attribute__( ( naked ) );
 122:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 123:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*
 124:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 125:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  */
 126:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** static void prvTaskExitError( void );
 127:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 128:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 129:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 130:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 131:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * variable. */
 132:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 133:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 134:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*
 135:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * The number of SysTick increments that make up one tick period.
 136:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  */
 137:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 138:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     static uint32_t ulTimerCountsForOneTick = 0;
 139:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 140:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 141:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*
 142:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 143:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * 24 bit resolution of the SysTick timer.
 144:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  */
 145:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 4


 146:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     static uint32_t xMaximumPossibleSuppressedTicks = 0;
 147:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 148:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 149:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*
 150:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 151:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * power functionality only.
 152:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  */
 153:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 154:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     static uint32_t ulStoppedTimerCompensation = 0;
 155:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 156:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 157:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*
 158:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 159:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 160:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 161:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  */
 162:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #if ( configASSERT_DEFINED == 1 )
 163:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     static uint8_t ucMaxSysCallPriority = 0;
 164:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     static uint32_t ulMaxPRIGROUPValue = 0;
 165:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t *
 166:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #endif /* configASSERT_DEFINED */
 167:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 168:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 169:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 170:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*
 171:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * See header file for description.
 172:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  */
 173:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
 174:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                                      TaskFunction_t pxCode,
 175:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                                      void * pvParameters )
 176:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** {
 177:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 178:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * interrupt. */
 179:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     pxTopOfStack--;                                                      /* Offset added to account
 180:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 181:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     pxTopOfStack--;
 182:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 183:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     pxTopOfStack--;
 184:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 185:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 186:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 187:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R
 188:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 189:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     return pxTopOfStack;
 190:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** }
 191:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 192:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 193:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** static void prvTaskExitError( void )
 194:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** {
  27              		.loc 1 194 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 82B0     		sub	sp, sp, #8
  33              		.cfi_def_cfa_offset 8
 195:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     volatile uint32_t ulDummy = 0UL;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 5


  34              		.loc 1 195 0
  35 0002 0023     		movs	r3, #0
  36 0004 0193     		str	r3, [sp, #4]
  37              	.LBB12:
  38              	.LBB13:
  39              		.file 2 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel <DEVELOPMENT BRANCH>
   3:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2021 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * SPDX-License-Identifier: MIT
   6:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
   7:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   8:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   9:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
  10:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  11:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  12:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  13:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  14:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  15:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  16:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  17:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  18:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  19:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  20:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  21:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  22:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  23:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  24:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * https://www.FreeRTOS.org
  25:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * https://github.com/FreeRTOS
  26:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  27:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  */
  28:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  29:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  30:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  31:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define PORTMACRO_H
  32:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  33:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* *INDENT-OFF* */
  34:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  35:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     extern "C" {
  36:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** #endif
  37:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* *INDENT-ON* */
  38:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  39:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  40:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  41:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  43:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  44:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *
  45:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  46:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  47:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  */
  48:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  49:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  50:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portCHAR          char
  51:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portFLOAT         float
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 6


  52:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portDOUBLE        double
  53:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portLONG          long
  54:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portSHORT         short
  55:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  56:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portBASE_TYPE     long
  57:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  58:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  59:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     typedef long             BaseType_t;
  60:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     typedef unsigned long    UBaseType_t;
  61:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  62:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #if ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_16_BITS )
  63:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         typedef uint16_t     TickType_t;
  64:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  65:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #elif ( configTICK_TYPE_WIDTH_IN_BITS == TICK_TYPE_WIDTH_32_BITS )
  66:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         typedef uint32_t     TickType_t;
  67:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  68:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  69:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  70:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * not need to be guarded with a critical section. */
  71:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  72:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #else
  73:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #error configTICK_TYPE_WIDTH_IN_BITS set to unsupported tick type width.
  74:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif
  75:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  76:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  77:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  78:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  79:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  80:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  81:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  82:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  83:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  84:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  85:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portYIELD()                                 \
  86:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     {                                                   \
  87:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  88:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  89:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****                                                         \
  90:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  91:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  92:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  93:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile ( "isb" );                                  \
  94:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     }
  95:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
  96:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  97:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  98:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    do { if( xSwitchRequired != pdFALSE ) portY
  99:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
 100:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 101:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 102:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
 103:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     extern void vPortEnterCritical( void );
 104:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     extern void vPortExitCritical( void );
 105:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 106:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 107:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 108:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 7


 109:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 110:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 111:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 112:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 113:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 114:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 115:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 116:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****  * (which build with all the ports) will build. */
 117:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 118:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 119:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 120:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 121:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 122:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 123:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 124:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 125:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif
 126:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 127:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 128:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 129:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 130:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 131:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif
 132:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 133:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 134:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 135:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Generic helper function. */
 136:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 137:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         {
 138:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             uint8_t ucReturn;
 139:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 140:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 141:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 142:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             return ucReturn;
 143:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         }
 144:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 145:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Check the configuration. */
 146:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 147:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 148:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #endif
 149:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 150:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 151:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 152:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 153:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 154:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 155:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 156:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 157:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 158:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 161:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 162:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #ifdef configASSERT
 163:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         void vPortValidateInterruptPriority( void );
 164:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 165:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 8


 166:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 167:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 168:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portNOP()
 169:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 170:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #define portINLINE              __inline
 171:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 172:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #ifndef portFORCE_INLINE
 173:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 174:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     #endif
 175:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 176:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 177:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 178:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 179:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     {
 180:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         uint32_t ulCurrentInterrupt;
 181:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         BaseType_t xReturn;
 182:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 183:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 184:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 185:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 186:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 187:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         {
 188:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             xReturn = pdFALSE;
 189:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         }
 190:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         else
 191:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         {
 192:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             xReturn = pdTRUE;
 193:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         }
 194:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 195:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         return xReturn;
 196:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     }
 197:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 198:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 199:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 200:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 201:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     {
 202:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         uint32_t ulNewBASEPRI;
 203:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 204:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile
  40              		.loc 2 204 0
  41              		.syntax unified
  42              	@ 204 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
  43 0006 4FF0A003 		   mov r3, #160                                              
  44 000a 83F31188 	   msr basepri, r3                                         
  45 000e BFF36F8F 	   isb                                                     
  46 0012 BFF34F8F 	   dsb                                                     
  47              	
  48              	@ 0 "" 2
  49              	.LVL0:
  50              		.thumb
  51              		.syntax unified
  52              	.L2:
  53              	.LBE13:
  54              	.LBE12:
 196:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 197:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* A function that implements a task must not exit or attempt to return to
 198:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * its caller as there is nothing to return to.  If a task wants to exit it
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 9


 199:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * should instead call vTaskDelete( NULL ).
 200:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      *
 201:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * Artificially force an assert() to be triggered if configASSERT() is
 202:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * defined, then stop here so application writers can catch the error. */
 203:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     configASSERT( uxCriticalNesting == ~0UL );
 204:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     portDISABLE_INTERRUPTS();
 205:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 206:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     while( ulDummy == 0 )
  55              		.loc 1 206 0 discriminator 1
  56 0016 019B     		ldr	r3, [sp, #4]
  57 0018 002B     		cmp	r3, #0
  58 001a FCD0     		beq	.L2
 207:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     {
 208:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         /* This file calls prvTaskExitError() after the scheduler has been
 209:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * started to remove a compiler warning about the function being defined
 210:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * but never called.  ulDummy is used purely to quieten other warnings
 211:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * about code appearing after this function is called - making ulDummy
 212:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * volatile makes the compiler think the function could return and
 213:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * therefore not output an 'unreachable code' warning for code that appears
 214:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * after it. */
 215:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     }
 216:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** }
  59              		.loc 1 216 0
  60 001c 02B0     		add	sp, sp, #8
  61              		.cfi_def_cfa_offset 0
  62              		@ sp needed
  63 001e 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE69:
  66              		.size	prvTaskExitError, .-prvTaskExitError
  67              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  68              		.align	2
  69              		.thumb
  70              		.thumb_func
  71              		.type	prvPortStartFirstTask, %function
  72              	prvPortStartFirstTask:
  73              	.LFB71:
 217:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 218:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 219:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** void vPortSVCHandler( void )
 220:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** {
 221:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     __asm volatile (
 222:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   ldr r3, pxCurrentTCBConst2      \n"/* Restore the context. */
 223:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   ldr r1, [r3]                    \n"/* Use pxCurrentTCBConst to get the pxCurrentTCB add
 224:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   ldr r0, [r1]                    \n"/* The first item in pxCurrentTCB is the task top of
 225:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   ldmia r0!, {r4-r11}             \n"/* Pop the registers that are not automatically save
 226:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   msr psp, r0                     \n"/* Restore the task stack pointer. */
 227:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   isb                             \n"
 228:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   mov r0, #0                      \n"
 229:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   msr basepri, r0                 \n"
 230:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   orr r14, #0xd                   \n"
 231:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   bx r14                          \n"
 232:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "                                   \n"
 233:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   .align 4                        \n"
 234:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
 235:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         );
 236:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** }
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 10


 237:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 238:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 239:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** static void prvPortStartFirstTask( void )
 240:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** {
  74              		.loc 1 240 0
  75              		.cfi_startproc
  76              		@ Naked Function: prologue and epilogue provided by programmer.
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
 241:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     __asm volatile (
  79              		.loc 1 241 0
  80              		.syntax unified
  81              	@ 241 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3\port.c" 1
  82 0000 0648     		 ldr r0, =0xE000ED08   
  83 0002 0068     	 ldr r0, [r0]          
  84 0004 0068     	 ldr r0, [r0]          
  85 0006 80F30888 	 msr msp, r0           
  86 000a 62B6     	 cpsie i               
  87 000c 61B6     	 cpsie f               
  88 000e BFF34F8F 	 dsb                   
  89 0012 BFF36F8F 	 isb                   
  90 0016 00DF     	 svc 0                 
  91 0018 00BF     	 nop                   
  92 001a 000008ED 	 .ltorg                
  92      00E0
  93              	
  94              	@ 0 "" 2
 242:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         " ldr r0, =0xE000ED08   \n"/* Use the NVIC offset register to locate the stack. */
 243:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         " ldr r0, [r0]          \n"
 244:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         " ldr r0, [r0]          \n"
 245:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         " msr msp, r0           \n"/* Set the msp back to the start of the stack. */
 246:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         " cpsie i               \n"/* Globally enable interrupts. */
 247:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         " cpsie f               \n"
 248:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         " dsb                   \n"
 249:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         " isb                   \n"
 250:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         " svc 0                 \n"/* System call to start first task. */
 251:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         " nop                   \n"
 252:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         " .ltorg                \n"
 253:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         );
 254:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** }
  95              		.loc 1 254 0
  96              		.thumb
  97              		.syntax unified
  98              		.cfi_endproc
  99              	.LFE71:
 100              		.size	prvPortStartFirstTask, .-prvPortStartFirstTask
 101              		.section	.text.pxPortInitialiseStack,"ax",%progbits
 102              		.align	2
 103              		.global	pxPortInitialiseStack
 104              		.thumb
 105              		.thumb_func
 106              		.type	pxPortInitialiseStack, %function
 107              	pxPortInitialiseStack:
 108              	.LFB68:
 176:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 109              		.loc 1 176 0
 110              		.cfi_startproc
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 11


 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		@ link register save eliminated.
 114              	.LVL1:
 180:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     pxTopOfStack--;
 115              		.loc 1 180 0
 116 0000 4FF08073 		mov	r3, #16777216
 117 0004 40F8043C 		str	r3, [r0, #-4]
 118              	.LVL2:
 182:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     pxTopOfStack--;
 119              		.loc 1 182 0
 120 0008 21F00101 		bic	r1, r1, #1
 121              	.LVL3:
 122 000c 40F8081C 		str	r1, [r0, #-8]
 123              	.LVL4:
 184:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 124              		.loc 1 184 0
 125 0010 034B     		ldr	r3, .L6
 126 0012 40F80C3C 		str	r3, [r0, #-12]
 127              	.LVL5:
 186:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R
 128              		.loc 1 186 0
 129 0016 40F8202C 		str	r2, [r0, #-32]
 130              	.LVL6:
 190:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 131              		.loc 1 190 0
 132 001a 4038     		subs	r0, r0, #64
 133              	.LVL7:
 134 001c 7047     		bx	lr
 135              	.L7:
 136 001e 00BF     		.align	2
 137              	.L6:
 138 0020 00000000 		.word	prvTaskExitError
 139              		.cfi_endproc
 140              	.LFE68:
 141              		.size	pxPortInitialiseStack, .-pxPortInitialiseStack
 142              		.section	.text.vPortSVCHandler,"ax",%progbits
 143              		.align	2
 144              		.global	vPortSVCHandler
 145              		.thumb
 146              		.thumb_func
 147              		.type	vPortSVCHandler, %function
 148              	vPortSVCHandler:
 149              	.LFB70:
 220:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     __asm volatile (
 150              		.loc 1 220 0
 151              		.cfi_startproc
 152              		@ Naked Function: prologue and epilogue provided by programmer.
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 221:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   ldr r3, pxCurrentTCBConst2      \n"/* Restore the context. */
 155              		.loc 1 221 0
 156              		.syntax unified
 157              	@ 221 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3\port.c" 1
 158 0000 074B     		   ldr r3, pxCurrentTCBConst2      
 159 0002 1968     	   ldr r1, [r3]                    
 160 0004 0868     	   ldr r0, [r1]                    
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 12


 161 0006 B0E8F00F 	   ldmia r0!, {r4-r11}             
 162 000a 80F30988 	   msr psp, r0                     
 163 000e BFF36F8F 	   isb                             
 164 0012 4FF00000 	   mov r0, #0                      
 165 0016 80F31188 	   msr basepri, r0                 
 166 001a 4EF00D0E 	   orr r14, #0xd                   
 167 001e 7047     	   bx r14                          
 168              	                                   
 169              	   .align 4                        
 170 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB             
 171              	
 172              	@ 0 "" 2
 236:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 173              		.loc 1 236 0
 174              		.thumb
 175              		.syntax unified
 176              		.cfi_endproc
 177              	.LFE70:
 178              		.size	vPortSVCHandler, .-vPortSVCHandler
 179              		.section	.text.vPortEndScheduler,"ax",%progbits
 180              		.align	2
 181              		.global	vPortEndScheduler
 182              		.thumb
 183              		.thumb_func
 184              		.type	vPortEndScheduler, %function
 185              	vPortEndScheduler:
 186              	.LFB73:
 255:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 256:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 257:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*
 258:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * See header file for description.
 259:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  */
 260:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** BaseType_t xPortStartScheduler( void )
 261:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** {
 262:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     #if ( configASSERT_DEFINED == 1 )
 263:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     {
 264:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         volatile uint8_t ucOriginalPriority;
 265:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         volatile uint32_t ulImplementedPrioBits = 0;
 266:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( port
 267:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         volatile uint8_t ucMaxPriorityValue;
 268:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 269:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         /* Determine the maximum priority from which ISR safe FreeRTOS API
 270:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * functions can be called.  ISR safe functions are those that end in
 271:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 272:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * ensure interrupt entry is as fast and simple as possible.
 273:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          *
 274:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * Save the interrupt priority value that is about to be clobbered. */
 275:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         ucOriginalPriority = *pucFirstUserPriorityRegister;
 276:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 277:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         /* Determine the number of priority bits available.  First write to all
 278:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * possible bits. */
 279:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 280:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 281:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         /* Read the value back to see how many bits stuck. */
 282:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 283:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 284:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         /* Use the same mask on the maximum system call priority. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 13


 285:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 286:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 287:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         /* Check that the maximum system call priority is nonzero after
 288:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * accounting for the number of priority bits supported by the
 289:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * hardware. A priority of 0 is invalid because setting the BASEPRI
 290:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * register to 0 unmasks all interrupts, and interrupts with priority 0
 291:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * cannot be masked using BASEPRI.
 292:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 293:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         configASSERT( ucMaxSysCallPriority );
 294:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 295:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         /* Check that the bits not implemented in hardware are zero in
 296:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
 297:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 298:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 299:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         /* Calculate the maximum acceptable priority group value for the number
 300:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * of bits read back. */
 301:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 302:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 303:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         {
 304:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             ulImplementedPrioBits++;
 305:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 306:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         }
 307:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 308:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         if( ulImplementedPrioBits == 8 )
 309:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         {
 310:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* When the hardware implements 8 priority bits, there is no way for
 311:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             * the software to configure PRIGROUP to not have sub-priorities. As
 312:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             * a result, the least significant bit is always used for sub-priority
 313:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             * and there are 128 preemption priorities and 2 sub-priorities.
 314:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             *
 315:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             * This may cause some confusion in some cases - for example, if
 316:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             * configMAX_SYSCALL_INTERRUPT_PRIORITY is set to 5, both 5 and 4
 317:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             * priority interrupts will be masked in Critical Sections as those
 318:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             * are at the same preemption priority. This may appear confusing as
 319:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             * 4 is higher (numerically lower) priority than
 320:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             * configMAX_SYSCALL_INTERRUPT_PRIORITY and therefore, should not
 321:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             * have been masked. Instead, if we set configMAX_SYSCALL_INTERRUPT_PRIORITY
 322:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             * to 4, this confusion does not happen and the behaviour remains the same.
 323:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             *
 324:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             * The following assert ensures that the sub-priority bit in the
 325:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
 326:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             * confusion. */
 327:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
 328:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             ulMaxPRIGROUPValue = 0;
 329:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         }
 330:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         else
 331:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         {
 332:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 333:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         }
 334:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 335:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         /* Shift the priority group value back to its position within the AIRCR
 336:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * register. */
 337:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 338:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 339:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 340:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         /* Restore the clobbered interrupt priority register to its original
 341:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * value. */
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 14


 342:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         *pucFirstUserPriorityRegister = ucOriginalPriority;
 343:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     }
 344:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     #endif /* configASSERT_DEFINED */
 345:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 346:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* Make PendSV and SysTick the lowest priority interrupts. */
 347:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 348:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 349:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 350:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* Start the timer that generates the tick ISR.  Interrupts are disabled
 351:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * here already. */
 352:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     vPortSetupTimerInterrupt();
 353:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 354:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* Initialise the critical nesting count ready for the first task. */
 355:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     uxCriticalNesting = 0;
 356:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 357:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* Start the first task. */
 358:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     prvPortStartFirstTask();
 359:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 360:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* Should never get here as the tasks will now be executing!  Call the task
 361:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * exit error function to prevent compiler warnings about a static function
 362:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * not being called in the case that the application writer overrides this
 363:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * functionality by defining configTASK_RETURN_ADDRESS.  Call
 364:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * vTaskSwitchContext() so link time optimisation does not remove the
 365:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * symbol. */
 366:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     vTaskSwitchContext();
 367:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     prvTaskExitError();
 368:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 369:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* Should not get here! */
 370:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     return 0;
 371:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** }
 372:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 373:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 374:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** void vPortEndScheduler( void )
 375:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** {
 187              		.loc 1 375 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
 192 0000 7047     		bx	lr
 193              		.cfi_endproc
 194              	.LFE73:
 195              		.size	vPortEndScheduler, .-vPortEndScheduler
 196 0002 00BF     		.section	.text.vPortEnterCritical,"ax",%progbits
 197              		.align	2
 198              		.global	vPortEnterCritical
 199              		.thumb
 200              		.thumb_func
 201              		.type	vPortEnterCritical, %function
 202              	vPortEnterCritical:
 203              	.LFB74:
 376:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* Not implemented in ports where there is nothing to return to.
 377:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * Artificially force an assert. */
 378:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     configASSERT( uxCriticalNesting == 1000UL );
 379:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** }
 380:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 381:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 15


 382:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** void vPortEnterCritical( void )
 383:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** {
 204              		.loc 1 383 0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208              		@ link register save eliminated.
 209              	.LBB14:
 210              	.LBB15:
 211              		.loc 2 204 0
 212              		.syntax unified
 213              	@ 204 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 214 0000 4FF0A003 		   mov r3, #160                                              
 215 0004 83F31188 	   msr basepri, r3                                         
 216 0008 BFF36F8F 	   isb                                                     
 217 000c BFF34F8F 	   dsb                                                     
 218              	
 219              	@ 0 "" 2
 220              		.thumb
 221              		.syntax unified
 222              	.LBE15:
 223              	.LBE14:
 384:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     portDISABLE_INTERRUPTS();
 385:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     uxCriticalNesting++;
 224              		.loc 1 385 0
 225 0010 024A     		ldr	r2, .L11
 226 0012 1368     		ldr	r3, [r2]
 227 0014 0133     		adds	r3, r3, #1
 228 0016 1360     		str	r3, [r2]
 229 0018 7047     		bx	lr
 230              	.L12:
 231 001a 00BF     		.align	2
 232              	.L11:
 233 001c 00000000 		.word	.LANCHOR0
 234              		.cfi_endproc
 235              	.LFE74:
 236              		.size	vPortEnterCritical, .-vPortEnterCritical
 237              		.section	.text.vPortExitCritical,"ax",%progbits
 238              		.align	2
 239              		.global	vPortExitCritical
 240              		.thumb
 241              		.thumb_func
 242              		.type	vPortExitCritical, %function
 243              	vPortExitCritical:
 244              	.LFB75:
 386:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 387:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* This is not the interrupt safe version of the enter critical function so
 388:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * assert() if it is being called from an interrupt context.  Only API
 389:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * functions that end in "FromISR" can be used in an interrupt.  Only assert if
 390:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * the critical nesting count is 1 to protect against recursive calls if the
 391:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * assert function also uses a critical section. */
 392:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     if( uxCriticalNesting == 1 )
 393:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     {
 394:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 395:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     }
 396:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** }
 397:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 16


 398:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 399:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** void vPortExitCritical( void )
 400:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** {
 245              		.loc 1 400 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249              		@ link register save eliminated.
 401:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     configASSERT( uxCriticalNesting );
 402:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     uxCriticalNesting--;
 250              		.loc 1 402 0
 251 0000 034A     		ldr	r2, .L15
 252 0002 1368     		ldr	r3, [r2]
 253 0004 013B     		subs	r3, r3, #1
 254 0006 1360     		str	r3, [r2]
 403:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 404:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     if( uxCriticalNesting == 0 )
 255              		.loc 1 404 0
 256 0008 0BB9     		cbnz	r3, .L13
 257              	.LVL8:
 258              	.LBB16:
 259              	.LBB17:
 205:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         (
 206:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   mov %0, %1                                              \n"\
 207:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   msr basepri, %0                                         \n"\
 208:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   isb                                                     \n"\
 209:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   dsb                                                     \n"\
 210:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 211:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         );
 212:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     }
 213:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 214:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 215:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 216:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 217:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     {
 218:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 219:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 220:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile
 221:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         (
 222:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   mrs %0, basepri                                         \n"\
 223:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   mov %1, %2                                              \n"\
 224:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   msr basepri, %1                                         \n"\
 225:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   isb                                                     \n"\
 226:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             "   dsb                                                     \n"\
 227:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 228:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         );
 229:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 230:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 231:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****          * warnings. */
 232:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         return ulOriginalBASEPRI;
 233:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     }
 234:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 235:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h **** 
 236:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 237:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****     {
 238:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         __asm volatile
 260              		.loc 2 238 0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 17


 261              		.syntax unified
 262              	@ 238 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 263 000a 83F31188 		   msr basepri, r3 
 264              	@ 0 "" 2
 265              	.LVL9:
 266              		.thumb
 267              		.syntax unified
 268              	.L13:
 269 000e 7047     		bx	lr
 270              	.L16:
 271              		.align	2
 272              	.L15:
 273 0010 00000000 		.word	.LANCHOR0
 274              	.LBE17:
 275              	.LBE16:
 276              		.cfi_endproc
 277              	.LFE75:
 278              		.size	vPortExitCritical, .-vPortExitCritical
 279              		.section	.text.xPortPendSVHandler,"ax",%progbits
 280              		.align	2
 281              		.global	xPortPendSVHandler
 282              		.thumb
 283              		.thumb_func
 284              		.type	xPortPendSVHandler, %function
 285              	xPortPendSVHandler:
 286              	.LFB76:
 405:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     {
 406:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         portENABLE_INTERRUPTS();
 407:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     }
 408:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** }
 409:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 410:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 411:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** void xPortPendSVHandler( void )
 412:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** {
 287              		.loc 1 412 0
 288              		.cfi_startproc
 289              		@ Naked Function: prologue and epilogue provided by programmer.
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 413:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* This is a naked function. */
 414:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 415:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     __asm volatile
 292              		.loc 1 415 0
 293              		.syntax unified
 294              	@ 415 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3\port.c" 1
 295 0000 EFF30980 		   mrs r0, psp                         
 296 0004 BFF36F8F 	   isb                                 
 297              	                                       
 298 0008 0D4B     	   ldr r3, pxCurrentTCBConst           
 299 000a 1A68     	   ldr r2, [r3]                        
 300              	                                       
 301 000c 20E9F00F 	   stmdb r0!, {r4-r11}                 
 302 0010 1060     	   str r0, [r2]                        
 303              	                                       
 304 0012 2DE90840 	   stmdb sp!, {r3, r14}                
 305 0016 4FF0A000 	   mov r0, #160                          
 306 001a 80F31188 	   msr basepri, r0                     
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 18


 307 001e FFF7FEFF 	   bl vTaskSwitchContext               
 308 0022 4FF00000 	   mov r0, #0                          
 309 0026 80F31188 	   msr basepri, r0                     
 310 002a BDE80840 	   ldmia sp!, {r3, r14}                
 311              	                                       
 312 002e 1968     	   ldr r1, [r3]                        
 313 0030 0868     	   ldr r0, [r1]                        
 314 0032 B0E8F00F 	   ldmia r0!, {r4-r11}                 
 315 0036 80F30988 	   msr psp, r0                         
 316 003a BFF36F8F 	   isb                                 
 317 003e 7047     	   bx r14                              
 318              	                                       
 319              	   .align 4                            
 320 0040 00000000 	pxCurrentTCBConst: .word pxCurrentTCB  
 321              	
 322              	@ 0 "" 2
 416:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     (
 417:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   mrs r0, psp                         \n"
 418:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   isb                                 \n"
 419:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "                                       \n"
 420:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   ldr r3, pxCurrentTCBConst           \n"/* Get the location of the current TCB. */
 421:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   ldr r2, [r3]                        \n"
 422:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "                                       \n"
 423:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   stmdb r0!, {r4-r11}                 \n"/* Save the remaining registers. */
 424:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   str r0, [r2]                        \n"/* Save the new top of stack into the first memb
 425:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "                                       \n"
 426:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   stmdb sp!, {r3, r14}                \n"
 427:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   mov r0, %0                          \n"
 428:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   msr basepri, r0                     \n"
 429:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   bl vTaskSwitchContext               \n"
 430:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   mov r0, #0                          \n"
 431:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   msr basepri, r0                     \n"
 432:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   ldmia sp!, {r3, r14}                \n"
 433:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "                                       \n"/* Restore the context, including the critical n
 434:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   ldr r1, [r3]                        \n"
 435:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   ldr r0, [r1]                        \n"/* The first item in pxCurrentTCB is the task to
 436:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   ldmia r0!, {r4-r11}                 \n"/* Pop the registers. */
 437:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   msr psp, r0                         \n"
 438:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   isb                                 \n"
 439:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   bx r14                              \n"
 440:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "                                       \n"
 441:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "   .align 4                            \n"
 442:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         "pxCurrentTCBConst: .word pxCurrentTCB  \n"
 443:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 444:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     );
 445:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** }
 323              		.loc 1 445 0
 324              		.thumb
 325              		.syntax unified
 326              		.cfi_endproc
 327              	.LFE76:
 328              		.size	xPortPendSVHandler, .-xPortPendSVHandler
 329              		.section	.text.xPortSysTickHandler,"ax",%progbits
 330              		.align	2
 331              		.global	xPortSysTickHandler
 332              		.thumb
 333              		.thumb_func
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 19


 334              		.type	xPortSysTickHandler, %function
 335              	xPortSysTickHandler:
 336              	.LFB77:
 446:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 447:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 448:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** void xPortSysTickHandler( void )
 449:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** {
 337              		.loc 1 449 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341 0000 08B5     		push	{r3, lr}
 342              		.cfi_def_cfa_offset 8
 343              		.cfi_offset 3, -8
 344              		.cfi_offset 14, -4
 345              	.LBB18:
 346              	.LBB19:
 204:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h ****         (
 347              		.loc 2 204 0
 348              		.syntax unified
 349              	@ 204 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 350 0002 4FF0A003 		   mov r3, #160                                              
 351 0006 83F31188 	   msr basepri, r3                                         
 352 000a BFF36F8F 	   isb                                                     
 353 000e BFF34F8F 	   dsb                                                     
 354              	
 355              	@ 0 "" 2
 356              		.thumb
 357              		.syntax unified
 358              	.LBE19:
 359              	.LBE18:
 450:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 451:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * executes all interrupts must be unmasked.  There is therefore no need to
 452:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * save and then restore the interrupt mask value as its value is already
 453:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****      * known. */
 454:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     portDISABLE_INTERRUPTS();
 455:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     {
 456:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         /* Increment the RTOS tick. */
 457:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         if( xTaskIncrementTick() != pdFALSE )
 360              		.loc 1 457 0
 361 0012 FFF7FEFF 		bl	xTaskIncrementTick
 362              	.LVL10:
 363 0016 18B1     		cbz	r0, .L19
 458:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         {
 459:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* A context switch is required.  Context switching is performed in
 460:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * the PendSV interrupt.  Pend the PendSV interrupt. */
 461:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 364              		.loc 1 461 0
 365 0018 4FF08052 		mov	r2, #268435456
 366 001c 024B     		ldr	r3, .L21
 367 001e 1A60     		str	r2, [r3]
 368              	.L19:
 369              	.LVL11:
 370              	.LBB20:
 371              	.LBB21:
 372              		.loc 2 238 0
 373 0020 0023     		movs	r3, #0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 20


 374              		.syntax unified
 375              	@ 238 "..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/portmacro.h" 1
 376 0022 83F31188 		   msr basepri, r3 
 377              	@ 0 "" 2
 378              	.LVL12:
 379              		.thumb
 380              		.syntax unified
 381 0026 08BD     		pop	{r3, pc}
 382              	.L22:
 383              		.align	2
 384              	.L21:
 385 0028 04ED00E0 		.word	-536810236
 386              	.LBE21:
 387              	.LBE20:
 388              		.cfi_endproc
 389              	.LFE77:
 390              		.size	xPortSysTickHandler, .-xPortSysTickHandler
 391              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 392              		.align	2
 393              		.weak	vPortSetupTimerInterrupt
 394              		.thumb
 395              		.thumb_func
 396              		.type	vPortSetupTimerInterrupt, %function
 397              	vPortSetupTimerInterrupt:
 398              	.LFB78:
 462:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         }
 463:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     }
 464:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     portENABLE_INTERRUPTS();
 465:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** }
 466:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 467:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 468:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 469:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 470:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 471:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     {
 472:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecre
 473:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         TickType_t xModifiableIdleTime;
 474:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 475:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         /* Make sure the SysTick reload value does not overflow the counter. */
 476:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 477:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         {
 478:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 479:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         }
 480:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 481:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         /* Enter a critical section but don't use the taskENTER_CRITICAL()
 482:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * method as that will mask interrupts that should exit sleep mode. */
 483:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         __asm volatile ( "cpsid i" ::: "memory" );
 484:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         __asm volatile ( "dsb" );
 485:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         __asm volatile ( "isb" );
 486:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 487:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         /* If a context switch is pending or a task is waiting for the scheduler
 488:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****          * to be unsuspended then abandon the low power entry. */
 489:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 490:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         {
 491:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* Re-enable interrupts - see comments above the cpsid instruction
 492:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * above. */
 493:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 21


 494:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         }
 495:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         else
 496:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         {
 497:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* Stop the SysTick momentarily.  The time the SysTick is stopped for
 498:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * is accounted for as best it can be, but using the tickless mode will
 499:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * inevitably result in some tiny drift of the time maintained by the
 500:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * kernel with respect to calendar time. */
 501:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BI
 502:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 503:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* Use the SysTick current-value register to determine the number of
 504:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * SysTick decrements remaining until the next tick interrupt.  If the
 505:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * current-value register is zero, then there are actually
 506:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * ulTimerCountsForOneTick decrements remaining, not zero, because the
 507:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * SysTick requests the interrupt when decrementing from 1 to 0. */
 508:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 509:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 510:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             if( ulSysTickDecrementsLeft == 0 )
 511:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             {
 512:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 513:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             }
 514:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 515:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* Calculate the reload value required to wait xExpectedIdleTime
 516:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * tick periods.  -1 is used because this code normally executes part
 517:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * way through the first tick period.  But if the SysTick IRQ is now
 518:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * pending, then clear the IRQ, suppressing the first tick, and correct
 519:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * the reload value to reflect that the second tick period is already
 520:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * underway.  The expected idle time is always at least two ticks. */
 521:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTi
 522:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 523:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 524:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             {
 525:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 526:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 ulReloadValue -= ulTimerCountsForOneTick;
 527:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             }
 528:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 529:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             if( ulReloadValue > ulStoppedTimerCompensation )
 530:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             {
 531:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 ulReloadValue -= ulStoppedTimerCompensation;
 532:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             }
 533:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 534:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* Set the new reload value. */
 535:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 536:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 537:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* Clear the SysTick count flag and set the count value back to
 538:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * zero. */
 539:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 540:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 541:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* Restart SysTick. */
 542:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 543:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 544:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 545:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * set its parameter to 0 to indicate that its implementation contains
 546:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * its own wait for interrupt or wait for event instruction, and so wfi
 547:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * should not be executed again.  However, the original expected idle
 548:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * time variable must remain unmodified, so a copy is taken. */
 549:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             xModifiableIdleTime = xExpectedIdleTime;
 550:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 22


 551:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 552:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             if( xModifiableIdleTime > 0 )
 553:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             {
 554:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 __asm volatile ( "dsb" ::: "memory" );
 555:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 __asm volatile ( "wfi" );
 556:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 __asm volatile ( "isb" );
 557:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             }
 558:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 559:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 560:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 561:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* Re-enable interrupts to allow the interrupt that brought the MCU
 562:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * out of sleep mode to execute immediately.  See comments above
 563:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * the cpsid instruction above. */
 564:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 565:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             __asm volatile ( "dsb" );
 566:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             __asm volatile ( "isb" );
 567:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 568:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* Disable interrupts again because the clock is about to be stopped
 569:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * and interrupts that execute while the clock is stopped will increase
 570:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * any slippage between the time maintained by the RTOS and calendar
 571:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * time. */
 572:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             __asm volatile ( "cpsid i" ::: "memory" );
 573:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             __asm volatile ( "dsb" );
 574:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             __asm volatile ( "isb" );
 575:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 576:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* Disable the SysTick clock without reading the
 577:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * portNVIC_SYSTICK_CTRL_REG register to ensure the
 578:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 579:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * the time the SysTick is stopped for is accounted for as best it can
 580:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * be, but using the tickless mode will inevitably result in some tiny
 581:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * drift of the time maintained by the kernel with respect to calendar
 582:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * time*/
 583:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BI
 584:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 585:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* Determine whether the SysTick has already counted to zero. */
 586:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 587:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             {
 588:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 uint32_t ulCalculatedLoadValue;
 589:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 590:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 /* The tick interrupt ended the sleep (or is now pending), and
 591:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                  * a new tick period has started.  Reset portNVIC_SYSTICK_LOAD_REG
 592:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                  * with whatever remains of the new tick period. */
 593:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portN
 594:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 595:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 /* Don't allow a tiny value, or values that have somehow
 596:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                  * underflowed because the post sleep hook did something
 597:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                  * that took too long or because the SysTick current-value register
 598:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                  * is zero. */
 599:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadVa
 600:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 {
 601:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                     ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 602:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 }
 603:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 604:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 605:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 606:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 /* As the pending tick will be processed as soon as this
 607:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                  * function exits, the tick value maintained by the tick is stepped
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 23


 608:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                  * forward by one less than the time spent waiting. */
 609:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 610:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             }
 611:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             else
 612:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             {
 613:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 /* Something other than the tick interrupt ended the sleep. */
 614:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 615:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 /* Use the SysTick current-value register to determine the
 616:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                  * number of SysTick decrements remaining until the expected idle
 617:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                  * time would have ended. */
 618:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 619:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 #if ( portNVIC_SYSTICK_CLK_BIT_CONFIG != portNVIC_SYSTICK_CLK_BIT )
 620:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 {
 621:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                     /* If the SysTick is not using the core clock, the current-
 622:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                      * value register might still be zero here.  In that case, the
 623:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                      * SysTick didn't load from the reload register, and there are
 624:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                      * ulReloadValue decrements remaining in the expected idle
 625:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                      * time, not zero. */
 626:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                     if( ulSysTickDecrementsLeft == 0 )
 627:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                     {
 628:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                         ulSysTickDecrementsLeft = ulReloadValue;
 629:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                     }
 630:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 }
 631:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 #endif /* portNVIC_SYSTICK_CLK_BIT_CONFIG */
 632:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 633:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 /* Work out how long the sleep lasted rounded to complete tick
 634:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                  * periods (not the ulReload value which accounted for part
 635:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                  * ticks). */
 636:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ul
 637:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 638:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 /* How many complete tick periods passed while the processor
 639:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                  * was waiting? */
 640:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 641:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 642:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 /* The reload value is set to whatever fraction of a single tick
 643:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                  * period remains. */
 644:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOne
 645:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             }
 646:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 647:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG again,
 648:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * then set portNVIC_SYSTICK_LOAD_REG back to its standard value.  If
 649:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * the SysTick is not using the core clock, temporarily configure it to
 650:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * use the core clock.  This configuration forces the SysTick to load
 651:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * from portNVIC_SYSTICK_LOAD_REG immediately instead of at the next
 652:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * cycle of the other clock.  Then portNVIC_SYSTICK_LOAD_REG is ready
 653:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****              * to receive the standard value immediately. */
 654:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 655:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portN
 656:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             #if ( portNVIC_SYSTICK_CLK_BIT_CONFIG == portNVIC_SYSTICK_CLK_BIT )
 657:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             {
 658:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 659:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             }
 660:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             #else
 661:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             {
 662:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 /* The temporary usage of the core clock has served its purpose,
 663:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                  * as described above.  Resume usage of the other clock. */
 664:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 24


 665:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 666:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 667:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 {
 668:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                     /* The partial tick period already ended.  Be sure the SysTick
 669:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                      * counts it only once. */
 670:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0;
 671:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 }
 672:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 673:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 674:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****                 portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_
 675:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             }
 676:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             #endif /* portNVIC_SYSTICK_CLK_BIT_CONFIG */
 677:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 678:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* Step the tick to account for any tick periods that elapsed. */
 679:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             vTaskStepTick( ulCompleteTickPeriods );
 680:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 681:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             /* Exit with interrupts enabled. */
 682:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 683:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         }
 684:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     }
 685:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 686:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 687:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 688:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 689:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*
 690:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 691:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  * frequency.
 692:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****  */
 693:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** __attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
 694:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** {
 399              		.loc 1 694 0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 0
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403              		@ link register save eliminated.
 695:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* Calculate the constants required to configure the tick interrupt. */
 696:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     #if ( configUSE_TICKLESS_IDLE == 1 )
 697:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     {
 698:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 699:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 700:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****         ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTIC
 701:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     }
 702:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     #endif /* configUSE_TICKLESS_IDLE */
 703:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 704:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* Stop and clear the SysTick. */
 705:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     portNVIC_SYSTICK_CTRL_REG = 0UL;
 404              		.loc 1 705 0
 405 0000 054B     		ldr	r3, .L24
 406 0002 0022     		movs	r2, #0
 407 0004 1A60     		str	r2, [r3]
 706:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 408              		.loc 1 706 0
 409 0006 0549     		ldr	r1, .L24+4
 410 0008 0A60     		str	r2, [r1]
 707:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 708:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     /* Configure SysTick to interrupt at the requested rate. */
 709:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 25


 411              		.loc 1 709 0
 412 000a 0549     		ldr	r1, .L24+8
 413 000c 054A     		ldr	r2, .L24+12
 414 000e 1160     		str	r1, [r2]
 710:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | port
 415              		.loc 1 710 0
 416 0010 0722     		movs	r2, #7
 417 0012 1A60     		str	r2, [r3]
 418 0014 7047     		bx	lr
 419              	.L25:
 420 0016 00BF     		.align	2
 421              	.L24:
 422 0018 10E000E0 		.word	-536813552
 423 001c 18E000E0 		.word	-536813544
 424 0020 08340100 		.word	78856
 425 0024 14E000E0 		.word	-536813548
 426              		.cfi_endproc
 427              	.LFE78:
 428              		.size	vPortSetupTimerInterrupt, .-vPortSetupTimerInterrupt
 429              		.section	.text.xPortStartScheduler,"ax",%progbits
 430              		.align	2
 431              		.global	xPortStartScheduler
 432              		.thumb
 433              		.thumb_func
 434              		.type	xPortStartScheduler, %function
 435              	xPortStartScheduler:
 436              	.LFB72:
 261:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     #if ( configASSERT_DEFINED == 1 )
 437              		.loc 1 261 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441 0000 10B5     		push	{r4, lr}
 442              		.cfi_def_cfa_offset 8
 443              		.cfi_offset 4, -8
 444              		.cfi_offset 14, -4
 347:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 445              		.loc 1 347 0
 446 0002 0B4B     		ldr	r3, .L28
 447 0004 1A68     		ldr	r2, [r3]
 448 0006 42F47F02 		orr	r2, r2, #16711680
 449 000a 1A60     		str	r2, [r3]
 348:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 450              		.loc 1 348 0
 451 000c 1A68     		ldr	r2, [r3]
 452 000e 42F07F42 		orr	r2, r2, #-16777216
 453 0012 1A60     		str	r2, [r3]
 352:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 454              		.loc 1 352 0
 455 0014 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 456              	.LVL13:
 355:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 457              		.loc 1 355 0
 458 0018 0024     		movs	r4, #0
 459 001a 064B     		ldr	r3, .L28+4
 460 001c 1C60     		str	r4, [r3]
 358:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 26


 461              		.loc 1 358 0
 462 001e FFF7FEFF 		bl	prvPortStartFirstTask
 463              	.LVL14:
 366:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c ****     prvTaskExitError();
 464              		.loc 1 366 0
 465 0022 FFF7FEFF 		bl	vTaskSwitchContext
 466              	.LVL15:
 367:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** 
 467              		.loc 1 367 0
 468 0026 FFF7FEFF 		bl	prvTaskExitError
 469              	.LVL16:
 371:..\..\..\FreeRTOS\FreeRTOS-Kernel\portable\GCC\ARM_CM3/port.c **** /*-----------------------------------------------------------*/
 470              		.loc 1 371 0
 471 002a 2046     		mov	r0, r4
 472 002c 10BD     		pop	{r4, pc}
 473              	.L29:
 474 002e 00BF     		.align	2
 475              	.L28:
 476 0030 20ED00E0 		.word	-536810208
 477 0034 00000000 		.word	.LANCHOR0
 478              		.cfi_endproc
 479              	.LFE72:
 480              		.size	xPortStartScheduler, .-xPortStartScheduler
 481              		.data
 482              		.align	2
 483              		.set	.LANCHOR0,. + 0
 484              		.type	uxCriticalNesting, %object
 485              		.size	uxCriticalNesting, 4
 486              	uxCriticalNesting:
 487 0000 AAAAAAAA 		.word	-1431655766
 488              		.text
 489              	.Letext0:
 490              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 491              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 492              		.file 5 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\include/projdefs.h"
 493              		.file 6 "..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\include/task.h"
 494              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 495              		.section	.debug_info,"",%progbits
 496              	.Ldebug_info0:
 497 0000 5F030000 		.4byte	0x35f
 498 0004 0400     		.2byte	0x4
 499 0006 00000000 		.4byte	.Ldebug_abbrev0
 500 000a 04       		.byte	0x4
 501 000b 01       		.uleb128 0x1
 502 000c F3000000 		.4byte	.LASF41
 503 0010 0C       		.byte	0xc
 504 0011 5C000000 		.4byte	.LASF42
 505 0015 BB020000 		.4byte	.LASF43
 506 0019 00000000 		.4byte	.Ldebug_ranges0+0
 507 001d 00000000 		.4byte	0
 508 0021 00000000 		.4byte	.Ldebug_line0
 509 0025 02       		.uleb128 0x2
 510 0026 04       		.byte	0x4
 511 0027 05       		.byte	0x5
 512 0028 696E7400 		.ascii	"int\000"
 513 002c 03       		.uleb128 0x3
 514 002d 04       		.byte	0x4
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 27


 515 002e 07       		.byte	0x7
 516 002f 16020000 		.4byte	.LASF0
 517 0033 03       		.uleb128 0x3
 518 0034 08       		.byte	0x8
 519 0035 05       		.byte	0x5
 520 0036 8C020000 		.4byte	.LASF1
 521 003a 03       		.uleb128 0x3
 522 003b 08       		.byte	0x8
 523 003c 04       		.byte	0x4
 524 003d 44030000 		.4byte	.LASF2
 525 0041 03       		.uleb128 0x3
 526 0042 01       		.byte	0x1
 527 0043 06       		.byte	0x6
 528 0044 50030000 		.4byte	.LASF3
 529 0048 03       		.uleb128 0x3
 530 0049 01       		.byte	0x1
 531 004a 08       		.byte	0x8
 532 004b E5000000 		.4byte	.LASF4
 533 004f 03       		.uleb128 0x3
 534 0050 02       		.byte	0x2
 535 0051 05       		.byte	0x5
 536 0052 EF020000 		.4byte	.LASF5
 537 0056 03       		.uleb128 0x3
 538 0057 02       		.byte	0x2
 539 0058 07       		.byte	0x7
 540 0059 9E010000 		.4byte	.LASF6
 541 005d 04       		.uleb128 0x4
 542 005e 49000000 		.4byte	.LASF8
 543 0062 03       		.byte	0x3
 544 0063 3F       		.byte	0x3f
 545 0064 68000000 		.4byte	0x68
 546 0068 03       		.uleb128 0x3
 547 0069 04       		.byte	0x4
 548 006a 05       		.byte	0x5
 549 006b 53000000 		.4byte	.LASF7
 550 006f 04       		.uleb128 0x4
 551 0070 81010000 		.4byte	.LASF9
 552 0074 03       		.byte	0x3
 553 0075 41       		.byte	0x41
 554 0076 7A000000 		.4byte	0x7a
 555 007a 03       		.uleb128 0x3
 556 007b 04       		.byte	0x4
 557 007c 07       		.byte	0x7
 558 007d 8C010000 		.4byte	.LASF10
 559 0081 03       		.uleb128 0x3
 560 0082 08       		.byte	0x8
 561 0083 07       		.byte	0x7
 562 0084 30020000 		.4byte	.LASF11
 563 0088 04       		.uleb128 0x4
 564 0089 BC000000 		.4byte	.LASF12
 565 008d 04       		.byte	0x4
 566 008e 2C       		.byte	0x2c
 567 008f 5D000000 		.4byte	0x5d
 568 0093 04       		.uleb128 0x4
 569 0094 0B030000 		.4byte	.LASF13
 570 0098 04       		.byte	0x4
 571 0099 30       		.byte	0x30
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 28


 572 009a 6F000000 		.4byte	0x6f
 573 009e 03       		.uleb128 0x3
 574 009f 04       		.byte	0x4
 575 00a0 04       		.byte	0x4
 576 00a1 C4000000 		.4byte	.LASF14
 577 00a5 03       		.uleb128 0x3
 578 00a6 08       		.byte	0x8
 579 00a7 04       		.byte	0x4
 580 00a8 BE010000 		.4byte	.LASF15
 581 00ac 03       		.uleb128 0x3
 582 00ad 01       		.byte	0x1
 583 00ae 08       		.byte	0x8
 584 00af 9A020000 		.4byte	.LASF16
 585 00b3 03       		.uleb128 0x3
 586 00b4 04       		.byte	0x4
 587 00b5 07       		.byte	0x7
 588 00b6 83020000 		.4byte	.LASF17
 589 00ba 05       		.uleb128 0x5
 590 00bb 04       		.byte	0x4
 591 00bc 06       		.uleb128 0x6
 592 00bd 93000000 		.4byte	0x93
 593 00c1 04       		.uleb128 0x4
 594 00c2 AD000000 		.4byte	.LASF18
 595 00c6 05       		.byte	0x5
 596 00c7 24       		.byte	0x24
 597 00c8 CC000000 		.4byte	0xcc
 598 00cc 07       		.uleb128 0x7
 599 00cd 04       		.byte	0x4
 600 00ce D2000000 		.4byte	0xd2
 601 00d2 08       		.uleb128 0x8
 602 00d3 DD000000 		.4byte	0xdd
 603 00d7 09       		.uleb128 0x9
 604 00d8 BA000000 		.4byte	0xba
 605 00dc 00       		.byte	0
 606 00dd 04       		.uleb128 0x4
 607 00de 9F020000 		.4byte	.LASF19
 608 00e2 02       		.byte	0x2
 609 00e3 3A       		.byte	0x3a
 610 00e4 93000000 		.4byte	0x93
 611 00e8 04       		.uleb128 0x4
 612 00e9 23030000 		.4byte	.LASF20
 613 00ed 02       		.byte	0x2
 614 00ee 3B       		.byte	0x3b
 615 00ef 68000000 		.4byte	0x68
 616 00f3 04       		.uleb128 0x4
 617 00f4 70030000 		.4byte	.LASF21
 618 00f8 02       		.byte	0x2
 619 00f9 3C       		.byte	0x3c
 620 00fa 7A000000 		.4byte	0x7a
 621 00fe 04       		.uleb128 0x4
 622 00ff 3E000000 		.4byte	.LASF22
 623 0103 02       		.byte	0x2
 624 0104 42       		.byte	0x42
 625 0105 93000000 		.4byte	0x93
 626 0109 07       		.uleb128 0x7
 627 010a 04       		.byte	0x4
 628 010b DD000000 		.4byte	0xdd
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 29


 629 010f 0A       		.uleb128 0xa
 630 0110 47020000 		.4byte	.LASF23
 631 0114 02       		.byte	0x2
 632 0115 C8       		.byte	0xc8
 633 0116 03       		.byte	0x3
 634 0117 27010000 		.4byte	0x127
 635 011b 0B       		.uleb128 0xb
 636 011c C5010000 		.4byte	.LASF44
 637 0120 02       		.byte	0x2
 638 0121 CA       		.byte	0xca
 639 0122 93000000 		.4byte	0x93
 640 0126 00       		.byte	0
 641 0127 0A       		.uleb128 0xa
 642 0128 F2010000 		.4byte	.LASF24
 643 012c 02       		.byte	0x2
 644 012d EC       		.byte	0xec
 645 012e 03       		.byte	0x3
 646 012f 3F010000 		.4byte	0x13f
 647 0133 0C       		.uleb128 0xc
 648 0134 14030000 		.4byte	.LASF45
 649 0138 02       		.byte	0x2
 650 0139 EC       		.byte	0xec
 651 013a 93000000 		.4byte	0x93
 652 013e 00       		.byte	0
 653 013f 0D       		.uleb128 0xd
 654 0140 59020000 		.4byte	.LASF46
 655 0144 01       		.byte	0x1
 656 0145 C1       		.byte	0xc1
 657 0146 00000000 		.4byte	.LFB69
 658 014a 20000000 		.4byte	.LFE69-.LFB69
 659 014e 01       		.uleb128 0x1
 660 014f 9C       		.byte	0x9c
 661 0150 82010000 		.4byte	0x182
 662 0154 0E       		.uleb128 0xe
 663 0155 DD000000 		.4byte	.LASF37
 664 0159 01       		.byte	0x1
 665 015a C3       		.byte	0xc3
 666 015b BC000000 		.4byte	0xbc
 667 015f 02       		.uleb128 0x2
 668 0160 91       		.byte	0x91
 669 0161 7C       		.sleb128 -4
 670 0162 0F       		.uleb128 0xf
 671 0163 0F010000 		.4byte	0x10f
 672 0167 06000000 		.4byte	.LBB12
 673 016b 10000000 		.4byte	.LBE12-.LBB12
 674 016f 01       		.byte	0x1
 675 0170 CC       		.byte	0xcc
 676 0171 10       		.uleb128 0x10
 677 0172 06000000 		.4byte	.LBB13
 678 0176 10000000 		.4byte	.LBE13-.LBB13
 679 017a 11       		.uleb128 0x11
 680 017b 1B010000 		.4byte	0x11b
 681 017f 00       		.byte	0
 682 0180 00       		.byte	0
 683 0181 00       		.byte	0
 684 0182 12       		.uleb128 0x12
 685 0183 2E030000 		.4byte	.LASF47
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 30


 686 0187 01       		.byte	0x1
 687 0188 EF       		.byte	0xef
 688 0189 00000000 		.4byte	.LFB71
 689 018d 20000000 		.4byte	.LFE71-.LFB71
 690 0191 01       		.uleb128 0x1
 691 0192 9C       		.byte	0x9c
 692 0193 13       		.uleb128 0x13
 693 0194 7C030000 		.4byte	.LASF35
 694 0198 01       		.byte	0x1
 695 0199 AD       		.byte	0xad
 696 019a 09010000 		.4byte	0x109
 697 019e 00000000 		.4byte	.LFB68
 698 01a2 24000000 		.4byte	.LFE68-.LFB68
 699 01a6 01       		.uleb128 0x1
 700 01a7 9C       		.byte	0x9c
 701 01a8 D8010000 		.4byte	0x1d8
 702 01ac 14       		.uleb128 0x14
 703 01ad 23020000 		.4byte	.LASF25
 704 01b1 01       		.byte	0x1
 705 01b2 AD       		.byte	0xad
 706 01b3 09010000 		.4byte	0x109
 707 01b7 00000000 		.4byte	.LLST0
 708 01bb 14       		.uleb128 0x14
 709 01bc 25000000 		.4byte	.LASF26
 710 01c0 01       		.byte	0x1
 711 01c1 AE       		.byte	0xae
 712 01c2 C1000000 		.4byte	0xc1
 713 01c6 5F000000 		.4byte	.LLST1
 714 01ca 15       		.uleb128 0x15
 715 01cb D2010000 		.4byte	.LASF27
 716 01cf 01       		.byte	0x1
 717 01d0 AF       		.byte	0xaf
 718 01d1 BA000000 		.4byte	0xba
 719 01d5 01       		.uleb128 0x1
 720 01d6 52       		.byte	0x52
 721 01d7 00       		.byte	0
 722 01d8 16       		.uleb128 0x16
 723 01d9 AB020000 		.4byte	.LASF28
 724 01dd 01       		.byte	0x1
 725 01de DB       		.byte	0xdb
 726 01df 00000000 		.4byte	.LFB70
 727 01e3 24000000 		.4byte	.LFE70-.LFB70
 728 01e7 01       		.uleb128 0x1
 729 01e8 9C       		.byte	0x9c
 730 01e9 17       		.uleb128 0x17
 731 01ea 2C000000 		.4byte	.LASF29
 732 01ee 01       		.byte	0x1
 733 01ef 7601     		.2byte	0x176
 734 01f1 00000000 		.4byte	.LFB73
 735 01f5 02000000 		.4byte	.LFE73-.LFB73
 736 01f9 01       		.uleb128 0x1
 737 01fa 9C       		.byte	0x9c
 738 01fb 18       		.uleb128 0x18
 739 01fc 12000000 		.4byte	.LASF30
 740 0200 01       		.byte	0x1
 741 0201 7E01     		.2byte	0x17e
 742 0203 00000000 		.4byte	.LFB74
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 31


 743 0207 20000000 		.4byte	.LFE74-.LFB74
 744 020b 01       		.uleb128 0x1
 745 020c 9C       		.byte	0x9c
 746 020d 32020000 		.4byte	0x232
 747 0211 19       		.uleb128 0x19
 748 0212 0F010000 		.4byte	0x10f
 749 0216 00000000 		.4byte	.LBB14
 750 021a 10000000 		.4byte	.LBE14-.LBB14
 751 021e 01       		.byte	0x1
 752 021f 8001     		.2byte	0x180
 753 0221 10       		.uleb128 0x10
 754 0222 00000000 		.4byte	.LBB15
 755 0226 10000000 		.4byte	.LBE15-.LBB15
 756 022a 11       		.uleb128 0x11
 757 022b 1B010000 		.4byte	0x11b
 758 022f 00       		.byte	0
 759 0230 00       		.byte	0
 760 0231 00       		.byte	0
 761 0232 18       		.uleb128 0x18
 762 0233 F9020000 		.4byte	.LASF31
 763 0237 01       		.byte	0x1
 764 0238 8F01     		.2byte	0x18f
 765 023a 00000000 		.4byte	.LFB75
 766 023e 14000000 		.4byte	.LFE75-.LFB75
 767 0242 01       		.uleb128 0x1
 768 0243 9C       		.byte	0x9c
 769 0244 63020000 		.4byte	0x263
 770 0248 19       		.uleb128 0x19
 771 0249 27010000 		.4byte	0x127
 772 024d 0A000000 		.4byte	.LBB16
 773 0251 0A000000 		.4byte	.LBE16-.LBB16
 774 0255 01       		.byte	0x1
 775 0256 9601     		.2byte	0x196
 776 0258 1A       		.uleb128 0x1a
 777 0259 33010000 		.4byte	0x133
 778 025d 80000000 		.4byte	.LLST2
 779 0261 00       		.byte	0
 780 0262 00       		.byte	0
 781 0263 17       		.uleb128 0x17
 782 0264 9A000000 		.4byte	.LASF32
 783 0268 01       		.byte	0x1
 784 0269 9B01     		.2byte	0x19b
 785 026b 00000000 		.4byte	.LFB76
 786 026f 44000000 		.4byte	.LFE76-.LFB76
 787 0273 01       		.uleb128 0x1
 788 0274 9C       		.byte	0x9c
 789 0275 18       		.uleb128 0x18
 790 0276 02020000 		.4byte	.LASF33
 791 027a 01       		.byte	0x1
 792 027b C001     		.2byte	0x1c0
 793 027d 00000000 		.4byte	.LFB77
 794 0281 2C000000 		.4byte	.LFE77-.LFB77
 795 0285 01       		.uleb128 0x1
 796 0286 9C       		.byte	0x9c
 797 0287 D7020000 		.4byte	0x2d7
 798 028b 1B       		.uleb128 0x1b
 799 028c 0F010000 		.4byte	0x10f
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 32


 800 0290 02000000 		.4byte	.LBB18
 801 0294 10000000 		.4byte	.LBE18-.LBB18
 802 0298 01       		.byte	0x1
 803 0299 C601     		.2byte	0x1c6
 804 029b AF020000 		.4byte	0x2af
 805 029f 10       		.uleb128 0x10
 806 02a0 02000000 		.4byte	.LBB19
 807 02a4 10000000 		.4byte	.LBE19-.LBB19
 808 02a8 11       		.uleb128 0x11
 809 02a9 1B010000 		.4byte	0x11b
 810 02ad 00       		.byte	0
 811 02ae 00       		.byte	0
 812 02af 1B       		.uleb128 0x1b
 813 02b0 27010000 		.4byte	0x127
 814 02b4 20000000 		.4byte	.LBB20
 815 02b8 0C000000 		.4byte	.LBE20-.LBB20
 816 02bc 01       		.byte	0x1
 817 02bd D001     		.2byte	0x1d0
 818 02bf CD020000 		.4byte	0x2cd
 819 02c3 1A       		.uleb128 0x1a
 820 02c4 33010000 		.4byte	0x133
 821 02c8 94000000 		.4byte	.LLST3
 822 02cc 00       		.byte	0
 823 02cd 1C       		.uleb128 0x1c
 824 02ce 16000000 		.4byte	.LVL10
 825 02d2 4A030000 		.4byte	0x34a
 826 02d6 00       		.byte	0
 827 02d7 17       		.uleb128 0x17
 828 02d8 6A020000 		.4byte	.LASF34
 829 02dc 01       		.byte	0x1
 830 02dd B502     		.2byte	0x2b5
 831 02df 00000000 		.4byte	.LFB78
 832 02e3 28000000 		.4byte	.LFE78-.LFB78
 833 02e7 01       		.uleb128 0x1
 834 02e8 9C       		.byte	0x9c
 835 02e9 1D       		.uleb128 0x1d
 836 02ea 5C030000 		.4byte	.LASF36
 837 02ee 01       		.byte	0x1
 838 02ef 0401     		.2byte	0x104
 839 02f1 E8000000 		.4byte	0xe8
 840 02f5 00000000 		.4byte	.LFB72
 841 02f9 38000000 		.4byte	.LFE72-.LFB72
 842 02fd 01       		.uleb128 0x1
 843 02fe 9C       		.byte	0x9c
 844 02ff 28030000 		.4byte	0x328
 845 0303 1C       		.uleb128 0x1c
 846 0304 18000000 		.4byte	.LVL13
 847 0308 D7020000 		.4byte	0x2d7
 848 030c 1C       		.uleb128 0x1c
 849 030d 22000000 		.4byte	.LVL14
 850 0311 82010000 		.4byte	0x182
 851 0315 1C       		.uleb128 0x1c
 852 0316 26000000 		.4byte	.LVL15
 853 031a 56030000 		.4byte	0x356
 854 031e 1C       		.uleb128 0x1c
 855 031f 2A000000 		.4byte	.LVL16
 856 0323 3F010000 		.4byte	0x13f
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 33


 857 0327 00       		.byte	0
 858 0328 0E       		.uleb128 0xe
 859 0329 00000000 		.4byte	.LASF38
 860 032d 01       		.byte	0x1
 861 032e 84       		.byte	0x84
 862 032f F3000000 		.4byte	0xf3
 863 0333 05       		.uleb128 0x5
 864 0334 03       		.byte	0x3
 865 0335 00000000 		.4byte	uxCriticalNesting
 866 0339 1E       		.uleb128 0x1e
 867 033a B1010000 		.4byte	.LASF48
 868 033e 07       		.byte	0x7
 869 033f 1207     		.2byte	0x712
 870 0341 45030000 		.4byte	0x345
 871 0345 06       		.uleb128 0x6
 872 0346 88000000 		.4byte	0x88
 873 034a 1F       		.uleb128 0x1f
 874 034b DF010000 		.4byte	.LASF39
 875 034f DF010000 		.4byte	.LASF39
 876 0353 06       		.byte	0x6
 877 0354 BF0B     		.2byte	0xbbf
 878 0356 1F       		.uleb128 0x1f
 879 0357 CA000000 		.4byte	.LASF40
 880 035b CA000000 		.4byte	.LASF40
 881 035f 06       		.byte	0x6
 882 0360 190C     		.2byte	0xc19
 883 0362 00       		.byte	0
 884              		.section	.debug_abbrev,"",%progbits
 885              	.Ldebug_abbrev0:
 886 0000 01       		.uleb128 0x1
 887 0001 11       		.uleb128 0x11
 888 0002 01       		.byte	0x1
 889 0003 25       		.uleb128 0x25
 890 0004 0E       		.uleb128 0xe
 891 0005 13       		.uleb128 0x13
 892 0006 0B       		.uleb128 0xb
 893 0007 03       		.uleb128 0x3
 894 0008 0E       		.uleb128 0xe
 895 0009 1B       		.uleb128 0x1b
 896 000a 0E       		.uleb128 0xe
 897 000b 55       		.uleb128 0x55
 898 000c 17       		.uleb128 0x17
 899 000d 11       		.uleb128 0x11
 900 000e 01       		.uleb128 0x1
 901 000f 10       		.uleb128 0x10
 902 0010 17       		.uleb128 0x17
 903 0011 00       		.byte	0
 904 0012 00       		.byte	0
 905 0013 02       		.uleb128 0x2
 906 0014 24       		.uleb128 0x24
 907 0015 00       		.byte	0
 908 0016 0B       		.uleb128 0xb
 909 0017 0B       		.uleb128 0xb
 910 0018 3E       		.uleb128 0x3e
 911 0019 0B       		.uleb128 0xb
 912 001a 03       		.uleb128 0x3
 913 001b 08       		.uleb128 0x8
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 34


 914 001c 00       		.byte	0
 915 001d 00       		.byte	0
 916 001e 03       		.uleb128 0x3
 917 001f 24       		.uleb128 0x24
 918 0020 00       		.byte	0
 919 0021 0B       		.uleb128 0xb
 920 0022 0B       		.uleb128 0xb
 921 0023 3E       		.uleb128 0x3e
 922 0024 0B       		.uleb128 0xb
 923 0025 03       		.uleb128 0x3
 924 0026 0E       		.uleb128 0xe
 925 0027 00       		.byte	0
 926 0028 00       		.byte	0
 927 0029 04       		.uleb128 0x4
 928 002a 16       		.uleb128 0x16
 929 002b 00       		.byte	0
 930 002c 03       		.uleb128 0x3
 931 002d 0E       		.uleb128 0xe
 932 002e 3A       		.uleb128 0x3a
 933 002f 0B       		.uleb128 0xb
 934 0030 3B       		.uleb128 0x3b
 935 0031 0B       		.uleb128 0xb
 936 0032 49       		.uleb128 0x49
 937 0033 13       		.uleb128 0x13
 938 0034 00       		.byte	0
 939 0035 00       		.byte	0
 940 0036 05       		.uleb128 0x5
 941 0037 0F       		.uleb128 0xf
 942 0038 00       		.byte	0
 943 0039 0B       		.uleb128 0xb
 944 003a 0B       		.uleb128 0xb
 945 003b 00       		.byte	0
 946 003c 00       		.byte	0
 947 003d 06       		.uleb128 0x6
 948 003e 35       		.uleb128 0x35
 949 003f 00       		.byte	0
 950 0040 49       		.uleb128 0x49
 951 0041 13       		.uleb128 0x13
 952 0042 00       		.byte	0
 953 0043 00       		.byte	0
 954 0044 07       		.uleb128 0x7
 955 0045 0F       		.uleb128 0xf
 956 0046 00       		.byte	0
 957 0047 0B       		.uleb128 0xb
 958 0048 0B       		.uleb128 0xb
 959 0049 49       		.uleb128 0x49
 960 004a 13       		.uleb128 0x13
 961 004b 00       		.byte	0
 962 004c 00       		.byte	0
 963 004d 08       		.uleb128 0x8
 964 004e 15       		.uleb128 0x15
 965 004f 01       		.byte	0x1
 966 0050 27       		.uleb128 0x27
 967 0051 19       		.uleb128 0x19
 968 0052 01       		.uleb128 0x1
 969 0053 13       		.uleb128 0x13
 970 0054 00       		.byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 35


 971 0055 00       		.byte	0
 972 0056 09       		.uleb128 0x9
 973 0057 05       		.uleb128 0x5
 974 0058 00       		.byte	0
 975 0059 49       		.uleb128 0x49
 976 005a 13       		.uleb128 0x13
 977 005b 00       		.byte	0
 978 005c 00       		.byte	0
 979 005d 0A       		.uleb128 0xa
 980 005e 2E       		.uleb128 0x2e
 981 005f 01       		.byte	0x1
 982 0060 03       		.uleb128 0x3
 983 0061 0E       		.uleb128 0xe
 984 0062 3A       		.uleb128 0x3a
 985 0063 0B       		.uleb128 0xb
 986 0064 3B       		.uleb128 0x3b
 987 0065 0B       		.uleb128 0xb
 988 0066 27       		.uleb128 0x27
 989 0067 19       		.uleb128 0x19
 990 0068 20       		.uleb128 0x20
 991 0069 0B       		.uleb128 0xb
 992 006a 01       		.uleb128 0x1
 993 006b 13       		.uleb128 0x13
 994 006c 00       		.byte	0
 995 006d 00       		.byte	0
 996 006e 0B       		.uleb128 0xb
 997 006f 34       		.uleb128 0x34
 998 0070 00       		.byte	0
 999 0071 03       		.uleb128 0x3
 1000 0072 0E       		.uleb128 0xe
 1001 0073 3A       		.uleb128 0x3a
 1002 0074 0B       		.uleb128 0xb
 1003 0075 3B       		.uleb128 0x3b
 1004 0076 0B       		.uleb128 0xb
 1005 0077 49       		.uleb128 0x49
 1006 0078 13       		.uleb128 0x13
 1007 0079 00       		.byte	0
 1008 007a 00       		.byte	0
 1009 007b 0C       		.uleb128 0xc
 1010 007c 05       		.uleb128 0x5
 1011 007d 00       		.byte	0
 1012 007e 03       		.uleb128 0x3
 1013 007f 0E       		.uleb128 0xe
 1014 0080 3A       		.uleb128 0x3a
 1015 0081 0B       		.uleb128 0xb
 1016 0082 3B       		.uleb128 0x3b
 1017 0083 0B       		.uleb128 0xb
 1018 0084 49       		.uleb128 0x49
 1019 0085 13       		.uleb128 0x13
 1020 0086 00       		.byte	0
 1021 0087 00       		.byte	0
 1022 0088 0D       		.uleb128 0xd
 1023 0089 2E       		.uleb128 0x2e
 1024 008a 01       		.byte	0x1
 1025 008b 03       		.uleb128 0x3
 1026 008c 0E       		.uleb128 0xe
 1027 008d 3A       		.uleb128 0x3a
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 36


 1028 008e 0B       		.uleb128 0xb
 1029 008f 3B       		.uleb128 0x3b
 1030 0090 0B       		.uleb128 0xb
 1031 0091 27       		.uleb128 0x27
 1032 0092 19       		.uleb128 0x19
 1033 0093 11       		.uleb128 0x11
 1034 0094 01       		.uleb128 0x1
 1035 0095 12       		.uleb128 0x12
 1036 0096 06       		.uleb128 0x6
 1037 0097 40       		.uleb128 0x40
 1038 0098 18       		.uleb128 0x18
 1039 0099 9742     		.uleb128 0x2117
 1040 009b 19       		.uleb128 0x19
 1041 009c 01       		.uleb128 0x1
 1042 009d 13       		.uleb128 0x13
 1043 009e 00       		.byte	0
 1044 009f 00       		.byte	0
 1045 00a0 0E       		.uleb128 0xe
 1046 00a1 34       		.uleb128 0x34
 1047 00a2 00       		.byte	0
 1048 00a3 03       		.uleb128 0x3
 1049 00a4 0E       		.uleb128 0xe
 1050 00a5 3A       		.uleb128 0x3a
 1051 00a6 0B       		.uleb128 0xb
 1052 00a7 3B       		.uleb128 0x3b
 1053 00a8 0B       		.uleb128 0xb
 1054 00a9 49       		.uleb128 0x49
 1055 00aa 13       		.uleb128 0x13
 1056 00ab 02       		.uleb128 0x2
 1057 00ac 18       		.uleb128 0x18
 1058 00ad 00       		.byte	0
 1059 00ae 00       		.byte	0
 1060 00af 0F       		.uleb128 0xf
 1061 00b0 1D       		.uleb128 0x1d
 1062 00b1 01       		.byte	0x1
 1063 00b2 31       		.uleb128 0x31
 1064 00b3 13       		.uleb128 0x13
 1065 00b4 11       		.uleb128 0x11
 1066 00b5 01       		.uleb128 0x1
 1067 00b6 12       		.uleb128 0x12
 1068 00b7 06       		.uleb128 0x6
 1069 00b8 58       		.uleb128 0x58
 1070 00b9 0B       		.uleb128 0xb
 1071 00ba 59       		.uleb128 0x59
 1072 00bb 0B       		.uleb128 0xb
 1073 00bc 00       		.byte	0
 1074 00bd 00       		.byte	0
 1075 00be 10       		.uleb128 0x10
 1076 00bf 0B       		.uleb128 0xb
 1077 00c0 01       		.byte	0x1
 1078 00c1 11       		.uleb128 0x11
 1079 00c2 01       		.uleb128 0x1
 1080 00c3 12       		.uleb128 0x12
 1081 00c4 06       		.uleb128 0x6
 1082 00c5 00       		.byte	0
 1083 00c6 00       		.byte	0
 1084 00c7 11       		.uleb128 0x11
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 37


 1085 00c8 34       		.uleb128 0x34
 1086 00c9 00       		.byte	0
 1087 00ca 31       		.uleb128 0x31
 1088 00cb 13       		.uleb128 0x13
 1089 00cc 00       		.byte	0
 1090 00cd 00       		.byte	0
 1091 00ce 12       		.uleb128 0x12
 1092 00cf 2E       		.uleb128 0x2e
 1093 00d0 00       		.byte	0
 1094 00d1 03       		.uleb128 0x3
 1095 00d2 0E       		.uleb128 0xe
 1096 00d3 3A       		.uleb128 0x3a
 1097 00d4 0B       		.uleb128 0xb
 1098 00d5 3B       		.uleb128 0x3b
 1099 00d6 0B       		.uleb128 0xb
 1100 00d7 27       		.uleb128 0x27
 1101 00d8 19       		.uleb128 0x19
 1102 00d9 11       		.uleb128 0x11
 1103 00da 01       		.uleb128 0x1
 1104 00db 12       		.uleb128 0x12
 1105 00dc 06       		.uleb128 0x6
 1106 00dd 40       		.uleb128 0x40
 1107 00de 18       		.uleb128 0x18
 1108 00df 9742     		.uleb128 0x2117
 1109 00e1 19       		.uleb128 0x19
 1110 00e2 00       		.byte	0
 1111 00e3 00       		.byte	0
 1112 00e4 13       		.uleb128 0x13
 1113 00e5 2E       		.uleb128 0x2e
 1114 00e6 01       		.byte	0x1
 1115 00e7 3F       		.uleb128 0x3f
 1116 00e8 19       		.uleb128 0x19
 1117 00e9 03       		.uleb128 0x3
 1118 00ea 0E       		.uleb128 0xe
 1119 00eb 3A       		.uleb128 0x3a
 1120 00ec 0B       		.uleb128 0xb
 1121 00ed 3B       		.uleb128 0x3b
 1122 00ee 0B       		.uleb128 0xb
 1123 00ef 27       		.uleb128 0x27
 1124 00f0 19       		.uleb128 0x19
 1125 00f1 49       		.uleb128 0x49
 1126 00f2 13       		.uleb128 0x13
 1127 00f3 11       		.uleb128 0x11
 1128 00f4 01       		.uleb128 0x1
 1129 00f5 12       		.uleb128 0x12
 1130 00f6 06       		.uleb128 0x6
 1131 00f7 40       		.uleb128 0x40
 1132 00f8 18       		.uleb128 0x18
 1133 00f9 9742     		.uleb128 0x2117
 1134 00fb 19       		.uleb128 0x19
 1135 00fc 01       		.uleb128 0x1
 1136 00fd 13       		.uleb128 0x13
 1137 00fe 00       		.byte	0
 1138 00ff 00       		.byte	0
 1139 0100 14       		.uleb128 0x14
 1140 0101 05       		.uleb128 0x5
 1141 0102 00       		.byte	0
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 38


 1142 0103 03       		.uleb128 0x3
 1143 0104 0E       		.uleb128 0xe
 1144 0105 3A       		.uleb128 0x3a
 1145 0106 0B       		.uleb128 0xb
 1146 0107 3B       		.uleb128 0x3b
 1147 0108 0B       		.uleb128 0xb
 1148 0109 49       		.uleb128 0x49
 1149 010a 13       		.uleb128 0x13
 1150 010b 02       		.uleb128 0x2
 1151 010c 17       		.uleb128 0x17
 1152 010d 00       		.byte	0
 1153 010e 00       		.byte	0
 1154 010f 15       		.uleb128 0x15
 1155 0110 05       		.uleb128 0x5
 1156 0111 00       		.byte	0
 1157 0112 03       		.uleb128 0x3
 1158 0113 0E       		.uleb128 0xe
 1159 0114 3A       		.uleb128 0x3a
 1160 0115 0B       		.uleb128 0xb
 1161 0116 3B       		.uleb128 0x3b
 1162 0117 0B       		.uleb128 0xb
 1163 0118 49       		.uleb128 0x49
 1164 0119 13       		.uleb128 0x13
 1165 011a 02       		.uleb128 0x2
 1166 011b 18       		.uleb128 0x18
 1167 011c 00       		.byte	0
 1168 011d 00       		.byte	0
 1169 011e 16       		.uleb128 0x16
 1170 011f 2E       		.uleb128 0x2e
 1171 0120 00       		.byte	0
 1172 0121 3F       		.uleb128 0x3f
 1173 0122 19       		.uleb128 0x19
 1174 0123 03       		.uleb128 0x3
 1175 0124 0E       		.uleb128 0xe
 1176 0125 3A       		.uleb128 0x3a
 1177 0126 0B       		.uleb128 0xb
 1178 0127 3B       		.uleb128 0x3b
 1179 0128 0B       		.uleb128 0xb
 1180 0129 27       		.uleb128 0x27
 1181 012a 19       		.uleb128 0x19
 1182 012b 11       		.uleb128 0x11
 1183 012c 01       		.uleb128 0x1
 1184 012d 12       		.uleb128 0x12
 1185 012e 06       		.uleb128 0x6
 1186 012f 40       		.uleb128 0x40
 1187 0130 18       		.uleb128 0x18
 1188 0131 9742     		.uleb128 0x2117
 1189 0133 19       		.uleb128 0x19
 1190 0134 00       		.byte	0
 1191 0135 00       		.byte	0
 1192 0136 17       		.uleb128 0x17
 1193 0137 2E       		.uleb128 0x2e
 1194 0138 00       		.byte	0
 1195 0139 3F       		.uleb128 0x3f
 1196 013a 19       		.uleb128 0x19
 1197 013b 03       		.uleb128 0x3
 1198 013c 0E       		.uleb128 0xe
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 39


 1199 013d 3A       		.uleb128 0x3a
 1200 013e 0B       		.uleb128 0xb
 1201 013f 3B       		.uleb128 0x3b
 1202 0140 05       		.uleb128 0x5
 1203 0141 27       		.uleb128 0x27
 1204 0142 19       		.uleb128 0x19
 1205 0143 11       		.uleb128 0x11
 1206 0144 01       		.uleb128 0x1
 1207 0145 12       		.uleb128 0x12
 1208 0146 06       		.uleb128 0x6
 1209 0147 40       		.uleb128 0x40
 1210 0148 18       		.uleb128 0x18
 1211 0149 9742     		.uleb128 0x2117
 1212 014b 19       		.uleb128 0x19
 1213 014c 00       		.byte	0
 1214 014d 00       		.byte	0
 1215 014e 18       		.uleb128 0x18
 1216 014f 2E       		.uleb128 0x2e
 1217 0150 01       		.byte	0x1
 1218 0151 3F       		.uleb128 0x3f
 1219 0152 19       		.uleb128 0x19
 1220 0153 03       		.uleb128 0x3
 1221 0154 0E       		.uleb128 0xe
 1222 0155 3A       		.uleb128 0x3a
 1223 0156 0B       		.uleb128 0xb
 1224 0157 3B       		.uleb128 0x3b
 1225 0158 05       		.uleb128 0x5
 1226 0159 27       		.uleb128 0x27
 1227 015a 19       		.uleb128 0x19
 1228 015b 11       		.uleb128 0x11
 1229 015c 01       		.uleb128 0x1
 1230 015d 12       		.uleb128 0x12
 1231 015e 06       		.uleb128 0x6
 1232 015f 40       		.uleb128 0x40
 1233 0160 18       		.uleb128 0x18
 1234 0161 9742     		.uleb128 0x2117
 1235 0163 19       		.uleb128 0x19
 1236 0164 01       		.uleb128 0x1
 1237 0165 13       		.uleb128 0x13
 1238 0166 00       		.byte	0
 1239 0167 00       		.byte	0
 1240 0168 19       		.uleb128 0x19
 1241 0169 1D       		.uleb128 0x1d
 1242 016a 01       		.byte	0x1
 1243 016b 31       		.uleb128 0x31
 1244 016c 13       		.uleb128 0x13
 1245 016d 11       		.uleb128 0x11
 1246 016e 01       		.uleb128 0x1
 1247 016f 12       		.uleb128 0x12
 1248 0170 06       		.uleb128 0x6
 1249 0171 58       		.uleb128 0x58
 1250 0172 0B       		.uleb128 0xb
 1251 0173 59       		.uleb128 0x59
 1252 0174 05       		.uleb128 0x5
 1253 0175 00       		.byte	0
 1254 0176 00       		.byte	0
 1255 0177 1A       		.uleb128 0x1a
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 40


 1256 0178 05       		.uleb128 0x5
 1257 0179 00       		.byte	0
 1258 017a 31       		.uleb128 0x31
 1259 017b 13       		.uleb128 0x13
 1260 017c 02       		.uleb128 0x2
 1261 017d 17       		.uleb128 0x17
 1262 017e 00       		.byte	0
 1263 017f 00       		.byte	0
 1264 0180 1B       		.uleb128 0x1b
 1265 0181 1D       		.uleb128 0x1d
 1266 0182 01       		.byte	0x1
 1267 0183 31       		.uleb128 0x31
 1268 0184 13       		.uleb128 0x13
 1269 0185 11       		.uleb128 0x11
 1270 0186 01       		.uleb128 0x1
 1271 0187 12       		.uleb128 0x12
 1272 0188 06       		.uleb128 0x6
 1273 0189 58       		.uleb128 0x58
 1274 018a 0B       		.uleb128 0xb
 1275 018b 59       		.uleb128 0x59
 1276 018c 05       		.uleb128 0x5
 1277 018d 01       		.uleb128 0x1
 1278 018e 13       		.uleb128 0x13
 1279 018f 00       		.byte	0
 1280 0190 00       		.byte	0
 1281 0191 1C       		.uleb128 0x1c
 1282 0192 898201   		.uleb128 0x4109
 1283 0195 00       		.byte	0
 1284 0196 11       		.uleb128 0x11
 1285 0197 01       		.uleb128 0x1
 1286 0198 31       		.uleb128 0x31
 1287 0199 13       		.uleb128 0x13
 1288 019a 00       		.byte	0
 1289 019b 00       		.byte	0
 1290 019c 1D       		.uleb128 0x1d
 1291 019d 2E       		.uleb128 0x2e
 1292 019e 01       		.byte	0x1
 1293 019f 3F       		.uleb128 0x3f
 1294 01a0 19       		.uleb128 0x19
 1295 01a1 03       		.uleb128 0x3
 1296 01a2 0E       		.uleb128 0xe
 1297 01a3 3A       		.uleb128 0x3a
 1298 01a4 0B       		.uleb128 0xb
 1299 01a5 3B       		.uleb128 0x3b
 1300 01a6 05       		.uleb128 0x5
 1301 01a7 27       		.uleb128 0x27
 1302 01a8 19       		.uleb128 0x19
 1303 01a9 49       		.uleb128 0x49
 1304 01aa 13       		.uleb128 0x13
 1305 01ab 11       		.uleb128 0x11
 1306 01ac 01       		.uleb128 0x1
 1307 01ad 12       		.uleb128 0x12
 1308 01ae 06       		.uleb128 0x6
 1309 01af 40       		.uleb128 0x40
 1310 01b0 18       		.uleb128 0x18
 1311 01b1 9742     		.uleb128 0x2117
 1312 01b3 19       		.uleb128 0x19
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 41


 1313 01b4 01       		.uleb128 0x1
 1314 01b5 13       		.uleb128 0x13
 1315 01b6 00       		.byte	0
 1316 01b7 00       		.byte	0
 1317 01b8 1E       		.uleb128 0x1e
 1318 01b9 34       		.uleb128 0x34
 1319 01ba 00       		.byte	0
 1320 01bb 03       		.uleb128 0x3
 1321 01bc 0E       		.uleb128 0xe
 1322 01bd 3A       		.uleb128 0x3a
 1323 01be 0B       		.uleb128 0xb
 1324 01bf 3B       		.uleb128 0x3b
 1325 01c0 05       		.uleb128 0x5
 1326 01c1 49       		.uleb128 0x49
 1327 01c2 13       		.uleb128 0x13
 1328 01c3 3F       		.uleb128 0x3f
 1329 01c4 19       		.uleb128 0x19
 1330 01c5 3C       		.uleb128 0x3c
 1331 01c6 19       		.uleb128 0x19
 1332 01c7 00       		.byte	0
 1333 01c8 00       		.byte	0
 1334 01c9 1F       		.uleb128 0x1f
 1335 01ca 2E       		.uleb128 0x2e
 1336 01cb 00       		.byte	0
 1337 01cc 3F       		.uleb128 0x3f
 1338 01cd 19       		.uleb128 0x19
 1339 01ce 3C       		.uleb128 0x3c
 1340 01cf 19       		.uleb128 0x19
 1341 01d0 6E       		.uleb128 0x6e
 1342 01d1 0E       		.uleb128 0xe
 1343 01d2 03       		.uleb128 0x3
 1344 01d3 0E       		.uleb128 0xe
 1345 01d4 3A       		.uleb128 0x3a
 1346 01d5 0B       		.uleb128 0xb
 1347 01d6 3B       		.uleb128 0x3b
 1348 01d7 05       		.uleb128 0x5
 1349 01d8 00       		.byte	0
 1350 01d9 00       		.byte	0
 1351 01da 00       		.byte	0
 1352              		.section	.debug_loc,"",%progbits
 1353              	.Ldebug_loc0:
 1354              	.LLST0:
 1355 0000 00000000 		.4byte	.LVL1
 1356 0004 00000000 		.4byte	.LVL1
 1357 0008 0100     		.2byte	0x1
 1358 000a 50       		.byte	0x50
 1359 000b 00000000 		.4byte	.LVL1
 1360 000f 08000000 		.4byte	.LVL2
 1361 0013 0300     		.2byte	0x3
 1362 0015 70       		.byte	0x70
 1363 0016 7C       		.sleb128 -4
 1364 0017 9F       		.byte	0x9f
 1365 0018 08000000 		.4byte	.LVL2
 1366 001c 10000000 		.4byte	.LVL4
 1367 0020 0300     		.2byte	0x3
 1368 0022 70       		.byte	0x70
 1369 0023 78       		.sleb128 -8
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 42


 1370 0024 9F       		.byte	0x9f
 1371 0025 10000000 		.4byte	.LVL4
 1372 0029 16000000 		.4byte	.LVL5
 1373 002d 0300     		.2byte	0x3
 1374 002f 70       		.byte	0x70
 1375 0030 74       		.sleb128 -12
 1376 0031 9F       		.byte	0x9f
 1377 0032 16000000 		.4byte	.LVL5
 1378 0036 1A000000 		.4byte	.LVL6
 1379 003a 0300     		.2byte	0x3
 1380 003c 70       		.byte	0x70
 1381 003d 60       		.sleb128 -32
 1382 003e 9F       		.byte	0x9f
 1383 003f 1A000000 		.4byte	.LVL6
 1384 0043 1C000000 		.4byte	.LVL7
 1385 0047 0300     		.2byte	0x3
 1386 0049 70       		.byte	0x70
 1387 004a 40       		.sleb128 -64
 1388 004b 9F       		.byte	0x9f
 1389 004c 1C000000 		.4byte	.LVL7
 1390 0050 24000000 		.4byte	.LFE68
 1391 0054 0100     		.2byte	0x1
 1392 0056 50       		.byte	0x50
 1393 0057 00000000 		.4byte	0
 1394 005b 00000000 		.4byte	0
 1395              	.LLST1:
 1396 005f 00000000 		.4byte	.LVL1
 1397 0063 0C000000 		.4byte	.LVL3
 1398 0067 0100     		.2byte	0x1
 1399 0069 51       		.byte	0x51
 1400 006a 0C000000 		.4byte	.LVL3
 1401 006e 24000000 		.4byte	.LFE68
 1402 0072 0400     		.2byte	0x4
 1403 0074 F3       		.byte	0xf3
 1404 0075 01       		.uleb128 0x1
 1405 0076 51       		.byte	0x51
 1406 0077 9F       		.byte	0x9f
 1407 0078 00000000 		.4byte	0
 1408 007c 00000000 		.4byte	0
 1409              	.LLST2:
 1410 0080 0A000000 		.4byte	.LVL8
 1411 0084 0E000000 		.4byte	.LVL9
 1412 0088 0200     		.2byte	0x2
 1413 008a 30       		.byte	0x30
 1414 008b 9F       		.byte	0x9f
 1415 008c 00000000 		.4byte	0
 1416 0090 00000000 		.4byte	0
 1417              	.LLST3:
 1418 0094 20000000 		.4byte	.LVL11
 1419 0098 26000000 		.4byte	.LVL12
 1420 009c 0200     		.2byte	0x2
 1421 009e 30       		.byte	0x30
 1422 009f 9F       		.byte	0x9f
 1423 00a0 00000000 		.4byte	0
 1424 00a4 00000000 		.4byte	0
 1425              		.section	.debug_aranges,"",%progbits
 1426 0000 6C000000 		.4byte	0x6c
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 43


 1427 0004 0200     		.2byte	0x2
 1428 0006 00000000 		.4byte	.Ldebug_info0
 1429 000a 04       		.byte	0x4
 1430 000b 00       		.byte	0
 1431 000c 0000     		.2byte	0
 1432 000e 0000     		.2byte	0
 1433 0010 00000000 		.4byte	.LFB69
 1434 0014 20000000 		.4byte	.LFE69-.LFB69
 1435 0018 00000000 		.4byte	.LFB71
 1436 001c 20000000 		.4byte	.LFE71-.LFB71
 1437 0020 00000000 		.4byte	.LFB68
 1438 0024 24000000 		.4byte	.LFE68-.LFB68
 1439 0028 00000000 		.4byte	.LFB70
 1440 002c 24000000 		.4byte	.LFE70-.LFB70
 1441 0030 00000000 		.4byte	.LFB73
 1442 0034 02000000 		.4byte	.LFE73-.LFB73
 1443 0038 00000000 		.4byte	.LFB74
 1444 003c 20000000 		.4byte	.LFE74-.LFB74
 1445 0040 00000000 		.4byte	.LFB75
 1446 0044 14000000 		.4byte	.LFE75-.LFB75
 1447 0048 00000000 		.4byte	.LFB76
 1448 004c 44000000 		.4byte	.LFE76-.LFB76
 1449 0050 00000000 		.4byte	.LFB77
 1450 0054 2C000000 		.4byte	.LFE77-.LFB77
 1451 0058 00000000 		.4byte	.LFB78
 1452 005c 28000000 		.4byte	.LFE78-.LFB78
 1453 0060 00000000 		.4byte	.LFB72
 1454 0064 38000000 		.4byte	.LFE72-.LFB72
 1455 0068 00000000 		.4byte	0
 1456 006c 00000000 		.4byte	0
 1457              		.section	.debug_ranges,"",%progbits
 1458              	.Ldebug_ranges0:
 1459 0000 00000000 		.4byte	.LFB69
 1460 0004 20000000 		.4byte	.LFE69
 1461 0008 00000000 		.4byte	.LFB71
 1462 000c 20000000 		.4byte	.LFE71
 1463 0010 00000000 		.4byte	.LFB68
 1464 0014 24000000 		.4byte	.LFE68
 1465 0018 00000000 		.4byte	.LFB70
 1466 001c 24000000 		.4byte	.LFE70
 1467 0020 00000000 		.4byte	.LFB73
 1468 0024 02000000 		.4byte	.LFE73
 1469 0028 00000000 		.4byte	.LFB74
 1470 002c 20000000 		.4byte	.LFE74
 1471 0030 00000000 		.4byte	.LFB75
 1472 0034 14000000 		.4byte	.LFE75
 1473 0038 00000000 		.4byte	.LFB76
 1474 003c 44000000 		.4byte	.LFE76
 1475 0040 00000000 		.4byte	.LFB77
 1476 0044 2C000000 		.4byte	.LFE77
 1477 0048 00000000 		.4byte	.LFB78
 1478 004c 28000000 		.4byte	.LFE78
 1479 0050 00000000 		.4byte	.LFB72
 1480 0054 38000000 		.4byte	.LFE72
 1481 0058 00000000 		.4byte	0
 1482 005c 00000000 		.4byte	0
 1483              		.section	.debug_line,"",%progbits
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 44


 1484              	.Ldebug_line0:
 1485 0000 D6020000 		.section	.debug_str,"MS",%progbits,1
 1485      0200C701 
 1485      00000201 
 1485      FB0E0D00 
 1485      01010101 
 1486              	.LASF38:
 1487 0000 75784372 		.ascii	"uxCriticalNesting\000"
 1487      69746963 
 1487      616C4E65 
 1487      7374696E 
 1487      6700
 1488              	.LASF30:
 1489 0012 76506F72 		.ascii	"vPortEnterCritical\000"
 1489      74456E74 
 1489      65724372 
 1489      69746963 
 1489      616C00
 1490              	.LASF26:
 1491 0025 7078436F 		.ascii	"pxCode\000"
 1491      646500
 1492              	.LASF29:
 1493 002c 76506F72 		.ascii	"vPortEndScheduler\000"
 1493      74456E64 
 1493      53636865 
 1493      64756C65 
 1493      7200
 1494              	.LASF22:
 1495 003e 5469636B 		.ascii	"TickType_t\000"
 1495      54797065 
 1495      5F7400
 1496              	.LASF8:
 1497 0049 5F5F696E 		.ascii	"__int32_t\000"
 1497      7433325F 
 1497      7400
 1498              	.LASF7:
 1499 0053 6C6F6E67 		.ascii	"long int\000"
 1499      20696E74 
 1499      00
 1500              	.LASF42:
 1501 005c 2E2E5C2E 		.ascii	"..\\..\\..\\FreeRTOS\\FreeRTOS-Kernel\\portable\\GC"
 1501      2E5C2E2E 
 1501      5C467265 
 1501      6552544F 
 1501      535C4672 
 1502 0089 435C4152 		.ascii	"C\\ARM_CM3\\port.c\000"
 1502      4D5F434D 
 1502      335C706F 
 1502      72742E63 
 1502      00
 1503              	.LASF32:
 1504 009a 78506F72 		.ascii	"xPortPendSVHandler\000"
 1504      7450656E 
 1504      64535648 
 1504      616E646C 
 1504      657200
 1505              	.LASF18:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 45


 1506 00ad 5461736B 		.ascii	"TaskFunction_t\000"
 1506      46756E63 
 1506      74696F6E 
 1506      5F7400
 1507              	.LASF12:
 1508 00bc 696E7433 		.ascii	"int32_t\000"
 1508      325F7400 
 1509              	.LASF14:
 1510 00c4 666C6F61 		.ascii	"float\000"
 1510      7400
 1511              	.LASF40:
 1512 00ca 76546173 		.ascii	"vTaskSwitchContext\000"
 1512      6B537769 
 1512      74636843 
 1512      6F6E7465 
 1512      787400
 1513              	.LASF37:
 1514 00dd 756C4475 		.ascii	"ulDummy\000"
 1514      6D6D7900 
 1515              	.LASF4:
 1516 00e5 756E7369 		.ascii	"unsigned char\000"
 1516      676E6564 
 1516      20636861 
 1516      7200
 1517              	.LASF41:
 1518 00f3 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1518      43313120 
 1518      352E342E 
 1518      31203230 
 1518      31363036 
 1519 0126 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1519      20726576 
 1519      6973696F 
 1519      6E203233 
 1519      37373135 
 1520 0159 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1520      66756E63 
 1520      74696F6E 
 1520      2D736563 
 1520      74696F6E 
 1521              	.LASF9:
 1522 0181 5F5F7569 		.ascii	"__uint32_t\000"
 1522      6E743332 
 1522      5F7400
 1523              	.LASF10:
 1524 018c 6C6F6E67 		.ascii	"long unsigned int\000"
 1524      20756E73 
 1524      69676E65 
 1524      6420696E 
 1524      7400
 1525              	.LASF6:
 1526 019e 73686F72 		.ascii	"short unsigned int\000"
 1526      7420756E 
 1526      7369676E 
 1526      65642069 
 1526      6E7400
 1527              	.LASF48:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 46


 1528 01b1 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1528      52784275 
 1528      66666572 
 1528      00
 1529              	.LASF15:
 1530 01be 646F7562 		.ascii	"double\000"
 1530      6C6500
 1531              	.LASF44:
 1532 01c5 756C4E65 		.ascii	"ulNewBASEPRI\000"
 1532      77424153 
 1532      45505249 
 1532      00
 1533              	.LASF27:
 1534 01d2 70765061 		.ascii	"pvParameters\000"
 1534      72616D65 
 1534      74657273 
 1534      00
 1535              	.LASF39:
 1536 01df 78546173 		.ascii	"xTaskIncrementTick\000"
 1536      6B496E63 
 1536      72656D65 
 1536      6E745469 
 1536      636B00
 1537              	.LASF24:
 1538 01f2 76506F72 		.ascii	"vPortSetBASEPRI\000"
 1538      74536574 
 1538      42415345 
 1538      50524900 
 1539              	.LASF33:
 1540 0202 78506F72 		.ascii	"xPortSysTickHandler\000"
 1540      74537973 
 1540      5469636B 
 1540      48616E64 
 1540      6C657200 
 1541              	.LASF0:
 1542 0216 756E7369 		.ascii	"unsigned int\000"
 1542      676E6564 
 1542      20696E74 
 1542      00
 1543              	.LASF25:
 1544 0223 7078546F 		.ascii	"pxTopOfStack\000"
 1544      704F6653 
 1544      7461636B 
 1544      00
 1545              	.LASF11:
 1546 0230 6C6F6E67 		.ascii	"long long unsigned int\000"
 1546      206C6F6E 
 1546      6720756E 
 1546      7369676E 
 1546      65642069 
 1547              	.LASF23:
 1548 0247 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 1548      74526169 
 1548      73654241 
 1548      53455052 
 1548      4900
 1549              	.LASF46:
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 47


 1550 0259 70727654 		.ascii	"prvTaskExitError\000"
 1550      61736B45 
 1550      78697445 
 1550      72726F72 
 1550      00
 1551              	.LASF34:
 1552 026a 76506F72 		.ascii	"vPortSetupTimerInterrupt\000"
 1552      74536574 
 1552      75705469 
 1552      6D657249 
 1552      6E746572 
 1553              	.LASF17:
 1554 0283 73697A65 		.ascii	"sizetype\000"
 1554      74797065 
 1554      00
 1555              	.LASF1:
 1556 028c 6C6F6E67 		.ascii	"long long int\000"
 1556      206C6F6E 
 1556      6720696E 
 1556      7400
 1557              	.LASF16:
 1558 029a 63686172 		.ascii	"char\000"
 1558      00
 1559              	.LASF19:
 1560 029f 53746163 		.ascii	"StackType_t\000"
 1560      6B547970 
 1560      655F7400 
 1561              	.LASF28:
 1562 02ab 76506F72 		.ascii	"vPortSVCHandler\000"
 1562      74535643 
 1562      48616E64 
 1562      6C657200 
 1563              	.LASF43:
 1564 02bb 453A5C47 		.ascii	"E:\\GIT Hub Project\\protocov\\Protocov\\Protocov.c"
 1564      49542048 
 1564      75622050 
 1564      726F6A65 
 1564      63745C70 
 1565 02ea 7964736E 		.ascii	"ydsn\000"
 1565      00
 1566              	.LASF5:
 1567 02ef 73686F72 		.ascii	"short int\000"
 1567      7420696E 
 1567      7400
 1568              	.LASF31:
 1569 02f9 76506F72 		.ascii	"vPortExitCritical\000"
 1569      74457869 
 1569      74437269 
 1569      74696361 
 1569      6C00
 1570              	.LASF13:
 1571 030b 75696E74 		.ascii	"uint32_t\000"
 1571      33325F74 
 1571      00
 1572              	.LASF45:
 1573 0314 756C4E65 		.ascii	"ulNewMaskValue\000"
 1573      774D6173 
ARM GAS  C:\Users\bchir\AppData\Local\Temp\ccxPWK0t.s 			page 48


 1573      6B56616C 
 1573      756500
 1574              	.LASF20:
 1575 0323 42617365 		.ascii	"BaseType_t\000"
 1575      54797065 
 1575      5F7400
 1576              	.LASF47:
 1577 032e 70727650 		.ascii	"prvPortStartFirstTask\000"
 1577      6F727453 
 1577      74617274 
 1577      46697273 
 1577      74546173 
 1578              	.LASF2:
 1579 0344 6C6F6E67 		.ascii	"long double\000"
 1579      20646F75 
 1579      626C6500 
 1580              	.LASF3:
 1581 0350 7369676E 		.ascii	"signed char\000"
 1581      65642063 
 1581      68617200 
 1582              	.LASF36:
 1583 035c 78506F72 		.ascii	"xPortStartScheduler\000"
 1583      74537461 
 1583      72745363 
 1583      68656475 
 1583      6C657200 
 1584              	.LASF21:
 1585 0370 55426173 		.ascii	"UBaseType_t\000"
 1585      65547970 
 1585      655F7400 
 1586              	.LASF35:
 1587 037c 7078506F 		.ascii	"pxPortInitialiseStack\000"
 1587      7274496E 
 1587      69746961 
 1587      6C697365 
 1587      53746163 
 1588              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
